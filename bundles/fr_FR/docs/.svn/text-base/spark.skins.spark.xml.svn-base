<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.skins.spark"><apiName>spark.skins.spark</apiName><apiDetail/><apiClassifier id="spark.skins.spark:ButtonBarSkin"><apiName>ButtonBarSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark ButtonBar. Les boutons sur le composant ButtonBar utilisent les classes ButtonBarLastButtonSkin, ButtonBarFirstButtonSkin et ButtonBarMiddleButtonSkin.  
    
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarSkin:ButtonBarSkin"><apiName>ButtonBarSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ButtonBarSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:firstButton"><apiName>firstButton</apiName><shortdesc conref="spark.components.ButtonBar#firstButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarFirstButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#firstButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarFirstButtonSkin"><linktext>spark.skins.spark.ButtonBarFirstButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ButtonBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:lastButton"><apiName>lastButton</apiName><shortdesc conref="spark.components.ButtonBar#lastButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarLastButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#lastButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarLastButtonSkin"><linktext>spark.skins.spark.ButtonBarLastButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:middleButton"><apiName>middleButton</apiName><shortdesc conref="spark.components.ButtonBar#middleButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarMiddleButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#middleButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarMiddleButtonSkin"><linktext>spark.skins.spark.ButtonBarMiddleButtonSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TextInputSkin"><apiName>TextInputSkin</apiName><shortdesc>Classe d’habillage par défaut d’un composant Spark TextInput.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un composant Spark TextInput.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiConstructor id="spark.skins.spark:TextInputSkin:TextInputSkin"><apiName>TextInputSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TextInputSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan du FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de l’arrière-plan du composant TextInput.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>Définit le libellé utilisé pour le texte d’invite.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>Définit le libellé utilisé pour le texte d’invite. La propriété includeInLayout a la valeur false, par conséquent le texte d'invite n'affecte pas la mesure.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonSkin"><apiName>ButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark Button.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark Button.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonSkin:ButtonSkin"><apiName>ButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarThumbSkin"><apiName>VScrollBarThumbSkin</apiName><shortdesc>Classe d’habillage par défaut du curseur d’un composant Spark VScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du curseur d’un composant Spark VScrollBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarThumbSkin:VScrollBarThumbSkin"><apiName>VScrollBarThumbSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormItemSkin"><apiName>StackedFormItemSkin</apiName><shortdesc>Une autre classe d'habillage pour le composant FormItem Spark qui positionne l'étiquette au-dessus du contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Une autre classe d'habillage pour le composant FormItem Spark qui positionne l'étiquette au-dessus du contenu.
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormItemSkin:StackedFormItemSkin"><apiName>StackedFormItemSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormItemSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan du FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:contentCol"><apiName>contentCol</apiName><shortdesc>Colonne contenant le libellé et le contenu de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne contenant le libellé et le contenu de l’élément FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:helpCol"><apiName>helpCol</apiName><shortdesc>Colonne de contenu d’aide de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne de contenu d'aide de l'élément FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:helpContentGroup"><apiName>helpContentGroup</apiName><shortdesc conref="spark.components.FormItem#helpContentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#helpContentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormItem</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormItem#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>Colonne contenant le libellé de la séquence.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne contenant le libellé de la séquence.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:sequenceLabelDisplay"><apiName>sequenceLabelDisplay</apiName><shortdesc conref="spark.components.FormItem#sequenceLabelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#sequenceLabelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultComplexItemRenderer"><apiName>DefaultComplexItemRenderer</apiName><shortdesc>La classe Spark DefaultComplexItemRenderer est une classe de rendu d’élément qui affiche un composant Flex dans un conteneur Group. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>La classe Spark DefaultComplexItemRenderer est une classe de rendu d’élément qui affiche un composant Flex dans un conteneur Group. Chaque composant est enveloppé dans son propre conteneur Group. Par conséquent, il est utile que les enfants du conteneur soient des éléments visuels, tels que des composants Flex.   
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultComplexItemRenderer:DefaultComplexItemRenderer"><apiName>DefaultComplexItemRenderer</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultComplexItemRenderer:contentGroup"><apiName>contentGroup</apiName><shortdesc>Conteneur utilisé pour envelopper chaque composant Flex défini dans le composant hôte. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>Conteneur utilisé pour envelopper chaque composant Flex défini dans le composant hôte. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:CheckBoxSkin"><apiName>CheckBoxSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark CheckBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark CheckBox.  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link></related-links><apiConstructor id="spark.skins.spark:CheckBoxSkin:CheckBoxSkin"><apiName>CheckBoxSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:CheckBoxSkin:check"><apiName>check</apiName><shortdesc>Coche dans la zone de cet habillage. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Coche dans la zone de cet habillage. Pour créer une coche personnalisée, créez une Classe d’habillage personnalisée. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:CheckBoxSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:CheckBox</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:CheckBoxSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VideoPlayerSkin"><apiName>VideoPlayerSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark VideoPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark VideoPlayer.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link></related-links><apiConstructor id="spark.skins.spark:VideoPlayerSkin:VideoPlayerSkin"><apiName>VideoPlayerSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VideoPlayerSkin:clippedGroup"><apiName>clippedGroup</apiName><shortdesc>Les contrôles vidéo et du lecteur sont écrêtés s’ils dépassent la taille du composant, ce qui n’est pas le cas de leur ombre portée, qui est dimensionnée en fonction du composant. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>Les contrôles vidéo et du lecteur sont écrêtés s’ils dépassent la taille du composant, ce qui n’est pas le cas de leur ombre portée, qui est dimensionnée en fonction du composant. verticalScrollPosition doit également être défini afin que, lors de l’écrêtage, le haut soit écrêté en premier, plutôt que le bas. Les contrôles du lecteur restent ainsi visibles au démarrage de l’écrêtage. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:currentTimeDisplay"><apiName>currentTimeDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#currentTimeDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#currentTimeDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:durationDisplay"><apiName>durationDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#durationDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#durationDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:fullScreenButton"><apiName>fullScreenButton</apiName><shortdesc conref="spark.components.VideoPlayer#fullScreenButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#fullScreenButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VideoPlayer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:playPauseButton"><apiName>playPauseButton</apiName><shortdesc conref="spark.components.VideoPlayer#playPauseButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ToggleButton</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#playPauseButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:playerControls"><apiName>playerControls</apiName><shortdesc conref="spark.components.VideoPlayer#playerControls"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#playerControls"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:scrubBar"><apiName>scrubBar</apiName><shortdesc conref="spark.components.VideoPlayer#scrubBar"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.mediaClasses:ScrubBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#scrubBar"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:videoDisplay"><apiName>videoDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#videoDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VideoDisplay</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#videoDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:volumeBar"><apiName>volumeBar</apiName><shortdesc conref="spark.components.VideoPlayer#volumeBar"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.mediaClasses:VolumeBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#volumeBar"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TitleWindowCloseButtonSkin"><apiName>TitleWindowCloseButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton vers le haut du composant Spark TitleWindow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton de fermeture du composant Spark TitleWindow.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.components.xml#TitleWindow"><linktext>spark.components.TitleWindow</linktext></link></related-links><apiConstructor id="spark.skins.spark:TitleWindowCloseButtonSkin:TitleWindowCloseButtonSkin"><apiName>TitleWindowCloseButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:cbshad"><apiName>cbshad</apiName><shortdesc>Définit l’ombre interne. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’ombre interne. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:dropShadow"><apiName>dropShadow</apiName><shortdesc>Définit l’ombre portée pour le bouton de fermeture. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:RectangularDropShadow</apiValueClassifier></apiValueDef><apiDesc>Définit l’ombre portée pour le bouton de fermeture. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:xSymbol"><apiName>xSymbol</apiName><shortdesc>Définit l’aspect de la croix sur le bouton de fermeture. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect du x du bouton de fermeture. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxSkin"><apiName>ComboBoxSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark ComboBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark ComboBox. L’habillage pour le bouton d’ancrage pour un composant ComboBox est défini par la classe ComboBoxButtonSkin. L’habillage de l’entrée de texte est défini par la classe ComboBoxTextInputSkin. 
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link><link href="spark.skins.spark.xml#ComboBoxButtonSkin"><linktext>spark.skins.spark.ComboBoxButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxSkin:ComboBoxSkin"><apiName>ComboBoxSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxSkin:background"><apiName>background</apiName><shortdesc>Définit l’aspect du remplissage d’arrière-plan de la liste déroulante. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect du remplissage d’arrière-plan de la liste déroulante. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:dropDown"><apiName>dropDown</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#dropDown">Ceci inclut des bordures, les couleurs d’arrière-plan, les barres de défilement et les filtres.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#dropDown">Ceci inclut des bordures, les couleurs d’arrière-plan, les barres de défilement et les filtres. 
            </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ComboBox</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:openButton"><apiName>openButton</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#openButton">L’habillage par défaut est ComboBoxButtonSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#openButton">L’habillage par défaut est ComboBoxButtonSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ComboBoxButtonSkin"><linktext>spark.skins.spark.ComboBoxButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:popUp"><apiName>popUp</apiName><shortdesc>Contrôle PopUpAnchor qui ouvre la liste déroulante. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:PopUpAnchor</apiValueClassifier></apiValueDef><apiDesc>Contrôle PopUpAnchor qui ouvre la liste déroulante.  
        
        <p><codeph/><codeph/></p></apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:textInput"><apiName>textInput</apiName><shortdesc conref="spark.components.ComboBox#textInput"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.ComboBox#textInput"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxTextInputSkin"><apiName>ComboBoxTextInputSkin</apiName><shortdesc>Classe d’habillage par défaut du curseur d’un composant Spark ComboBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du curseur d’un composant Spark ComboBox.  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxTextInputSkin:ComboBoxTextInputSkin"><apiName>ComboBoxTextInputSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan du FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de l’arrière-plan du composant TextInput.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:bgFill"><apiName>bgFill</apiName><shortdesc>Définit la couleur de remplissage d’arrière-plan. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>Définit la couleur de remplissage de l’arrière-plan. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>Définit le libellé utilisé pour le texte d’invite.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>Définit le libellé utilisé pour le texte d’invite. La propriété includeInLayout a la valeur false, par conséquent le texte d'invite n'affecte pas la mesure.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarMiddleButtonSkin"><apiName>ButtonBarMiddleButtonSkin</apiName><shortdesc>Classe d’habillage par défaut des boutons de milieu sur un composant Spark ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut des boutons de milieu sur un composant Spark ButtonBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarMiddleButtonSkin:ButtonBarMiddleButtonSkin"><apiName>ButtonBarMiddleButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarTrackSkin"><apiName>VScrollBarTrackSkin</apiName><shortdesc>Classe d’habillage par défaut de la piste d’un composant Spark VScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut de la piste d’un composant Spark VScrollBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarTrackSkin:VScrollBarTrackSkin"><apiName>VScrollBarTrackSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TitleWindowSkin"><apiName>TitleWindowSkin</apiName><shortdesc>Classe d’habillage par défaut d’un conteneur Spark TitleWindow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un conteneur Spark TitleWindow.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext>spark.skins.spark.TitleWindowCloseButtonSkin</linktext></link><link href="spark.components.xml#TitleWindow"><linktext>spark.components.TitleWindow</linktext></link></related-links><apiConstructor id="spark.skins.spark:TitleWindowSkin:TitleWindowSkin"><apiName>TitleWindowSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TitleWindowSkin:backgroundFill"><apiName>backgroundFill</apiName><shortdesc>Définit le remplissage d’arrière-plan de la classe TitleWindowSkin.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>Définit le remplissage d’arrière-plan de la classe TitleWindowSkin. La couleur par défaut est 0xFFFFFF.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de la classe TitleWindowSkin.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de l’arrière-plan de la classe TitleWindowSkin.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:borderStroke"><apiName>borderStroke</apiName><shortdesc>Définit le trait de la bordure de la classe TitleWindowSkin.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColorStroke"/></apiValueDef><apiDesc>Définit le trait de la bordure de la classe TitleWindowSkin. La valeur par défaut est 1.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:closeButton"><apiName>closeButton</apiName><shortdesc conref="spark.components.TitleWindow#closeButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.TitleWindow#closeButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:contents"><apiName>contents</apiName><shortdesc>Contient la superposition verticale du contenu de la barre de titre et de la barre de contrôle. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>Contient la superposition verticale du contenu de la barre de titre et de la barre de contrôle. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Panel#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TitleWindow</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:moveArea"><apiName>moveArea</apiName><shortdesc conref="spark.components.TitleWindow#moveArea"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.TitleWindow#moveArea"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:titleDisplay"><apiName>titleDisplay</apiName><shortdesc conref="spark.components.Panel#titleDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#titleDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormItemSkin"><apiName>FormItemSkin</apiName><shortdesc>La classe d'habillage par défaut pour le composant Spark FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d'habillage par défaut pour le composant Spark FormItem.  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormItemSkin:FormItemSkin"><apiName>FormItemSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormItemSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan du FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:contentCol"><apiName>contentCol</apiName><shortdesc>Colonne de contenu de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne de contenu de l’élément FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:errorTextDisplay"><apiName>errorTextDisplay</apiName><shortdesc conref="spark.components.FormItem#errorTextDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#errorTextDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:helpCol"><apiName>helpCol</apiName><shortdesc>Colonne de contenu d’aide de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne de contenu d'aide de l'élément FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:helpContentGroup"><apiName>helpContentGroup</apiName><shortdesc conref="spark.components.FormItem#helpContentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#helpContentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormItem</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:labelCol"><apiName>labelCol</apiName><shortdesc>Colonne contenant le libellé de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne contenant le libellé de l’élément FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormItem#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>Colonne contenant le libellé de la séquence.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne contenant le libellé de la séquence.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:sequenceLabelDisplay"><apiName>sequenceLabelDisplay</apiName><shortdesc conref="spark.components.FormItem#sequenceLabelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#sequenceLabelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ImageSkin"><apiName>ImageSkin</apiName><shortdesc>La classe d'habillage par défaut pour le composant Spark Image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>La classe d’habillage par défaut pour le composant Spark Image.  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Image"><linktext>spark.components.Image</linktext></link></related-links><apiConstructor id="spark.skins.spark:ImageSkin:ImageSkin"><apiName>ImageSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ImageSkin:background"><apiName>background</apiName><shortdesc>Définit l’aspect de l’arrière-plan de l’image.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de l’arrière-plan de l’image.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:bgFill"><apiName>bgFill</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:brokenImageIcon"><apiName>brokenImageIcon</apiName><shortdesc>Icône qui s’affiche à la place de l’image lorsqu’une image non valide est chargée.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:BitmapImage</apiValueClassifier></apiValueDef><apiDesc>Icône qui s’affiche à la place de l’image lorsqu’une image non valide est chargée.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Image</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:imageDisplay"><apiName>imageDisplay</apiName><shortdesc>Partie de l’habillage de l’affichage de l’image primaire.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:BitmapImage</apiValueClassifier></apiValueDef><apiDesc>Partie de l’habillage de l’affichage de l’image primaire.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:progressIndicator"><apiName>progressIndicator</apiName><shortdesc>Partie de l’habillage de l’indicateur de progression.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:Range</apiValueClassifier></apiValueDef><apiDesc>Partie de l’habillage de l’indicateur de progression.</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ListDropIndicator"><apiName>ListDropIndicator</apiName><shortdesc>
  Habillage par défaut pour l’indicateur de dépôt d’un composant List, si List ne possède pas de partie dropIndicator dans son habillage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.skins:ProgrammaticSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  Habillage par défaut pour l’indicateur de dépôt d’un composant List, si List ne possède pas de partie <codeph>dropIndicator</codeph> dans son habillage.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link></related-links><apiConstructor id="spark.skins.spark:ListDropIndicator:ListDropIndicator"><apiName>ListDropIndicator</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:ErrorSkin"><apiName>ErrorSkin</apiName><shortdesc>
  La classe ErrorSkin définit l’habillage d’erreur des composants Spark. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins.spark:HighlightBitmapCaptureSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ErrorSkin définit l’habillage d’erreur des composants Spark. Flex affiche l’habillahe d’erreur lorsqu’une erreur de validation se produit. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.validators.Validator.xml"><linktext>mx.validators.Validator</linktext></link></related-links><apiConstructor id="spark.skins.spark:ErrorSkin:ErrorSkin"><apiName>ErrorSkin</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:ErrorSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     
          </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.skins.spark:DataGridSkin"><apiName>DataGridSkin</apiName><shortdesc>La classe d'habillage par défaut pour un composant Spark DataGrid</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>La classe d'habillage par défaut pour un composant Spark DataGrid  
<p>Cet habillage définit toutes les parties d’habillage DataGrid facultatives à l’exception de rowBackground (par défaut, aucun élément visuel d’arrière-plan par ligne n’est affiché). Il définit la valeur par défaut de la propriété itemRenderer de la grille comme spark.skins.spark.DefaultGridItemRenderer, et la valeur par défaut de la propriété headerRenderer de columnHeaderGroup comme <codeph>spark.skins.spark.DefaultGridHeaderRenderer</codeph>.</p>
<p>Les valeurs des parties d’habillage DataGrid suivantes sont définies par des déclarations et peuvent être remplacées par les sous-classes de cette classe : <codeph>alternatingRowColors</codeph>, <codeph>caretIndicator</codeph>, <codeph>columnSeparator</codeph>, <codeph>editorIndicator</codeph>, <codeph>headerColumnSeparator</codeph>, <codeph>hoverIndicator</codeph>, <codeph>rowSeparator</codeph> et <codeph>selectionIndicator</codeph>. L'ensemble de ces déclarations DataGrid définissent les parties d'habillage, à l'exception <codeph>headerColumnSeparator</codeph> et <codeph>headerRenderer</codeph> qui sont utilisées pour les valeurs de l'columnHeaderGroup <codeph>columnSeparator</codeph> et <codeph>headerRenderer</codeph> propriétés.</p>
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link></related-links><apiConstructor id="spark.skins.spark:DataGridSkin:DataGridSkin"><apiName>DataGridSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DataGridSkin:bgFill"><apiName>bgFill</apiName><shortdesc>Définit la couleur de l’arrière-plan. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>Définit la couleur de l’arrière-plan. La couleur par défaut est 0xFFFFFF.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:headerColumnSeparator"><apiName>headerColumnSeparator</apiName><shortdesc>Définit la valeur de la propriété columnSeparator pour la columnHeaderGroup.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>Définit la valeur de la propriété columnSeparator pour la columnHeaderGroup.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:headerRenderer"><apiName>headerRenderer</apiName><shortdesc>Définit la valeur de la propriété headerRenderer pour la columnHeaderGroup.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>Définit la valeur de la propriété headerRenderer pour la columnHeaderGroup. La valeur par défaut est spark.skins.spark.DefaultGridHeaderRenderer.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ToggleButtonSkin"><apiName>ToggleButtonSkin</apiName><shortdesc>Classe d’habillage par défaut d’un composant Spark ToggleButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un composant Spark ToggleButton.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ToggleButtonSkin:ToggleButtonSkin"><apiName>ToggleButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarSkin"><apiName>VScrollBarSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark VScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark VScrollBar. Les habillages de curseur et de piste sont définis respectivement par les classes VScrollBarThumbSkin et VScrollBarTrackSkin.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarSkin:VScrollBarSkin"><apiName>VScrollBarSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">La classe d’habillage par défaut est ScrollBarUpButtonSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">La classe d’habillage par défaut est ScrollBarUpButtonSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VScrollBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">La classe d’habillage par défaut est ScrollBarDownButtonSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">La classe d’habillage par défaut est ScrollBarDownButtonSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">La classe d’habillage par défaut est VScrollBarThumbSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">La classe d’habillage par défaut est VScrollBarThumbSkin. 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">La classe d’habillage par défaut est VScrollBarTrackSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">La classe d’habillage par défaut est VScrollBarTrackSkin.   
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperTextInputSkin"><apiName>NumericStepperTextInputSkin</apiName><shortdesc>Classe d’habillage par défaut du champ de saisie de texte d’un composant Spark NumericStepper.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du champ de saisie de texte d’un composant Spark NumericStepper.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperTextInputSkin:NumericStepperTextInputSkin"><apiName>NumericStepperTextInputSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:background"><apiName>background</apiName><shortdesc>Définit l’aspect de l’arrière-plan du composant NumericStepper.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan du composant NumericStepper.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormSkin"><apiName>StackedFormSkin</apiName><shortdesc>Autre classe d’habillage pour le composant Spark Form.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Autre classe d'habillage pour le composant Spark Form. Cet habillage définit un groupe contentGroup pour le conteneur Form, avec un élément FormLayout en tant qu'objet de mise en forme. La présentation FormLayout est un élément VerticalLayout comportant une logique supplémentaire pour aligner les colonnes d’éléments FormItem. Cet habillage définit également un affichage errorTextDisplay pour l’affichage du texte errorText du formulaire.
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormSkin:StackedFormSkin"><apiName>StackedFormSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de la classe Form.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan de la classe du Form.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:errorTextDisplay"><apiName>errorTextDisplay</apiName><shortdesc>Affiche le texte d’erreur du formulaire.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>Affiche le texte d’erreur du formulaire.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Form</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderThumbSkin"><apiName>VSliderThumbSkin</apiName><shortdesc>Classe d’habillage par défaut du curseur d’un composant Spark VSlider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du curseur d’un composant Spark VSlider.  
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderThumbSkin:VSliderThumbSkin"><apiName>VSliderThumbSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultGridItemRenderer"><apiName>DefaultGridItemRenderer</apiName><shortdesc>
  La classe DefaultGridItemRenderer définit un rendu d’élément simple et efficace qui affiche une seule étiquette de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="property" name="locale"/><Exclude kind="property" name="direction"/><Exclude kind="style" name="layoutDirection"/><Exclude kind="property" name="layoutDirection"/><Exclude kind="style" name="typographicCase"/><Exclude kind="style" name="trackingRight"/><Exclude kind="style" name="trackingLeft"/><Exclude kind="style" name="textJustify"/><Exclude kind="style" name="textAlpha"/><Exclude kind="style" name="textAlignLast"/><Exclude kind="style" name="renderingMode"/><Exclude kind="style" name="lineThrough"/><Exclude kind="style" name="lineHeight"/><Exclude kind="style" name="ligatureLevel"/><Exclude kind="style" name="leading"/><Exclude kind="style" name="justificationStyle"/><Exclude kind="style" name="justificationRule"/><Exclude kind="style" name="fontLookup"/><Exclude kind="style" name="dominantBaseline"/><Exclude kind="style" name="digitWidth"/><Exclude kind="style" name="digitCase"/><Exclude kind="style" name="cffHinting"/><Exclude kind="style" name="baselineShift"/><Exclude kind="style" name="alignmentBaseline"/><Exclude kind="style" name="verticalAlign"/><Exclude kind="style" name="paddingTop"/><Exclude kind="style" name="paddingBottom"/><styles><style format="Length" inherit="yes" name="textIndent" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Encart droit en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Encart gauche en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  Contrôle le retour à la ligne des mots dans le conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IGridItemRenderer</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier>mx.core:UIFTETextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DefaultGridItemRenderer définit un rendu d’élément simple et efficace qui affiche une seule étiquette de texte. Cette classe est la valeur par défaut pour la propriété <codeph>itemRenderer</codeph> de DataGrid. Cette classe étend UIFTETextField et affiche les données de cellules dans une étiquette de texte à l’aide du champ de texte. Le contrôle UIFTETextField est basé sur FTE, le moteur FlashTextEngine, qui prend en charge une typographie internationale de haute qualité et l’incorporation des polices de la même façon que les autres contrôles Spark. Etant donné que le contrôle UIFTETextField met en œuvre l’API TextField, le sous-ensemble de styles de texte Spark est pris en charge. Veuillez consulter la documentation de cette classe pour la liste des styles pris en charge.
 
  <p>Vous pouvez contrôler le retour à la ligne du texte de l’étiquette à l’aide du style <codeph>lineBreak</codeph>. Par exemple, définissez <codeph>lineBreak="explicit"</codeph> et <codeph>variableRowHeight="false"</codeph> pour créer des cellules de hauteur fixe dont les étiquettes ne sont pas renvoyées à la ligne. Si vous n'avez pas explicitement défini la propriété <codeph>wordWrap</codeph>, <codeph>wordWrap</codeph> sera définie sur la valeur de la propriété <codeph>variableRowHeight</codeph> de la grille.</p>
 
  <p>La valeur de la propriété multiline est utilisée par l’éditeur d’élément de l’objet DataGrid pour interpréter les caractères de nouvelle ligne saisis. Si <codeph>multiline=false</codeph>, la saisie d’un caractère de nouvelle ligne met fin à la session d’édition (comme pour les touches Tab ou Echap). Si <codeph>multiline=true</codeph>, un caractère de nouvelle ligne est inséré dans le texte. Si la valeur de la propriété multiline n’est pas définie de façon explicite, elle est automatiquement définie sur true si <codeph>lineBreak="explicit"</codeph> et que <codeph>text</codeph> comprend un caractère de nouvelle ligne.</p>
 
  <p>DefaultGridItemRenderer hérite de sa propriété <codeph>layoutDirection</codeph> de son parent. Elle ne doit pas être définie directement. </p>
  
  <p>La classe DefaultGridItemRenderer n’est pas destinée à être sous-classée ou copiée. Créez des rendus d’élément personnalisés en fonction de la classe GridItemRenderer.</p>
 
  <p>Pour optimiser les performances sur des applications de type Microsoft Windows, utilisez la classe UITextFieldGridItemRenderer. Ce rendu est écrit dans ActionScript et optimisé pour Windows.</p>
 
  </apiDesc><example conref="DefaultGridItemRendererExample.mxml"><swfblock conref="examples/DefaultGridItemRendererExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#UITextFieldGridItemRenderer"><linktext>spark.skins.spark.UITextFieldGridItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:DefaultGridItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribuée lorsque la propriété data liable change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribuée lorsque la propriété <codeph>data</codeph> liable change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:DefaultGridItemRenderer:DefaultGridItemRenderer"><apiName>DefaultGridItemRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:DefaultGridItemRenderer:discard"><apiName>discard</apiName><shortdesc>
      
      Appelé à partir de la méthode updateDisplayList() du parent du rendu d’élément une fois qu’il a été déterminé que ce rendu ne sera plus visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hasBeenRecycled</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si ce rendu est destiné à être ajouté à la liste libre interne du propriétaire en vue d’être réutilisé.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelé à partir de la méthode <codeph>updateDisplayList()</codeph> du parent du rendu d’élément une fois qu’il a été déterminé que ce rendu ne sera plus visible. Si le paramètre <codeph>willBeRecycled</codeph> a la valeur <codeph>true</codeph>, le propriétaire ajoute ce rendu à sa liste libre interne en vue de le réutiliser. Les implémentations peuvent utiliser cette méthode pour effacer toute propriété de rendu qui n’est plus nécessaire.
     
      <p>Cette méthode n’est pas destinée à être appelée directement. Elle est appelée par l'implémentation DataGrid.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:DefaultGridItemRenderer:prepare"><apiName>prepare</apiName><shortdesc>
      
      Appelé à partir de la méthode updateDisplayList() du parent du rendu d’élément une fois que toutes les propriétés du rendu ont été définies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>willBeRecycled</apiItemName><apiType value="Boolean"/><apiDesc> <codeph>true</codeph> si ce rendu est réutilisé.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelé à partir de la méthode <codeph>updateDisplayList()</codeph> du parent du rendu d’élément une fois que toutes les propriétés du rendu ont été définies. Le paramètre <codeph>hasBeenRecycled</codeph> a la valeur <codeph>false</codeph> si ce rendu n’a pas été utilisé avant, ce qui signifie qu’il n’a pas été recyclé. Cette méthode est appelée lorsqu’un rendu est sur le point de devenir visible et chaque fois qu’il est réaffiché en raison d’une modification d’une propriété du rendu ou du fait qu’un réaffichage a été explicitement demandé. 
     
      <p>Cette méthode peut être utilisée pour configurer tous les éléments visuels et les propriétés d’un rendu. L'utilisation de cette méthode peut être plus efficace que la liaison des propriétés <codeph>data</codeph> des propriétés aux propriétés d'élément visuel. Remarque : puisque la méthode <codeph>prepare()</codeph> est appelée fréquemment, assurez-vous qu’elle est codée de manière efficace.</p>
     
      <p>La méthode <codeph>prepare()</codeph> peut être appelée à de nombreuses reprises avant que la méthode <codeph>discard()</codeph> soit appelée.</p>
     
      <p>Cette méthode n’est pas destinée à être appelée directement. Elle est appelée par l'implémentation DataGrid.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:DefaultGridItemRenderer:columnIndex:get"><apiName>columnIndex</apiName><shortdesc>
      
      L’index de colonne de la cellule de ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      L’index de colonne de la cellule de ce rendu d’élément. Il s’agit de la même valeur que <codeph>column.columnIndex</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:column:get"><apiName>column</apiName><shortdesc>
      
      L’objet GridColumn représentant la colonne associée à ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:GridColumn</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Objet GridColumn représentant la colonne associée à ce rendu d’élément.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      La valeur de l’élément du fournisseur de données pour toute la ligne du contrôle Grid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La valeur de l’élément du fournisseur de données pour toute la ligne du contrôle Grid. Les rendus d’éléments lient souvent les attributs des éléments visuels aux propriétés de cet objet.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:down:get"><apiName>down</apiName><shortdesc>
      La méthode updateDisplayList() du contrôle Grid définit cette propriété avant d’appeler la méthode prepare().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>La méthode <codeph>updateDisplayList()</codeph> du contrôle Grid définit cette propriété avant d’appeler la méthode <codeph>prepare()</codeph>.   </p>
     
      
      Cette propriété est définie sur <codeph>true</codeph> lorsque l'un de deux gestes d'entrée se produit dans une cellule de la grille : soit le bouton de la souris, soit l'écran tactile est activé. La propriété <codeph>down</codeph> est réinitialisée sur <codeph>false</codeph> lorsque le bouton de la souris est relâché, l’utilisateur libère l’écran tactile ou le curseur/toucher est déplacé hors de la cellule de la grille.   
     
      <p>Contrairement à un rendu d'élément de liste, les rendus d'élément de grille ne possèdent pas la responsabilité exclusive de l'affichage de l'indicateur vers le bas. La grille elle-même effectue le rendu de l'indicateur vers le bas pour la ligne ou la cellule sélectionnée. Le rendu d’élément peut également modifier ses propriétés visuelles pour mettre en évidence qu’il est actuellement sélectionné.</p>   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      Contient la valeur true si le rendu d'élément est en cours de glissement, généralement dans le cadre d'une opération glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="draggingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient la valeur <codeph>true</codeph> si le rendu d'élément est en cours de glissement, généralement dans le cadre d'une opération glisser-déposer. Actuellement, le glisser-déposer n’est pas pris en charge par le contrôle Spark DataGrid.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:grid:get"><apiName>grid</apiName><shortdesc>
      Contrôle Grid associé à ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Grid</apiValueClassifier></apiValueDef><apiDesc>
      Le contrôle Grid associé à ce rendu d’élément.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:hovered:get"><apiName>hovered</apiName><shortdesc>
      Définissez la valeur sur true si la souris survole le rendu d’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoveredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Définissez la valeur sur <codeph>true</codeph> si la souris survole le rendu d’élément. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      Le contrôle Grid définit cette propriété sur la valeur de la méthode itemToLabel() de la colonne, avant d’appeler la méthode prepare(). Chaîne à afficher dans le rendu d'élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>Le contrôle Grid définit cette propriété sur la valeur de la méthode <codeph>itemToLabel()</codeph> de la colonne, avant d’appeler la méthode <codeph>prepare()</codeph>.</p>
     
      
      Chaîne à afficher dans le rendu d'élément.  
     
      <p>La classe GridItemRenderer copie automatiquement la valeur de cette propriété vers la propriété <codeph>text</codeph> de son élément <codeph>labelDisplay</codeph>, si cet élément a été spécifié. Le contrôle Grid définit la propriété <codeph>label</codeph> sur la valeur renvoyée par la méthode <codeph>itemToLabel()</codeph> de la colonne.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:rowIndex:get"><apiName>rowIndex</apiName><shortdesc>
      La méthode updateDisplayList() du contrôle Grid définit cette propriété avant d’appeler la méthode prepare(). L’index à base zéro de la ligne de la cellule faisant l’objet du rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>La méthode <codeph>updateDisplayList()</codeph> du contrôle Grid définit cette propriété avant d’appeler la méthode <codeph>prepare()</codeph>.</p>
     
      
      L’index à base zéro de la ligne de la cellule faisant l’objet du rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      La méthode updateDisplayList() du contrôle Grid définit cette propriété avant d’appeler la méthode prepare(). Contient la valeur true si la cellule du rendu d’élément fait partie de la sélection en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>La méthode <codeph>updateDisplayList()</codeph> du contrôle Grid définit cette propriété avant d’appeler la méthode <codeph>prepare()</codeph>.</p>
     
      
      Contient la valeur <codeph>true</codeph> si la cellule du rendu d'élément fait partie de la sélection en cours. 
     
      <p> Contrairement à un rendu d'élément de liste, les rendus d'élément de grille n'ont pas la responsabilité exclusive d'afficher un élément indiquant qu'ils font partie de la sélection. La grille elle-même affiche automatiquement la partie d'habillage selectionIndicator pour les lignes ou les cellules sélectionnées. Le rendu d'élément peut également modifier ses propriétés visuelles pour souligner qu'elle fait partie de la sélection.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      La méthode updateDisplayList() du contrôle Grid définit cette propriété avant d’appeler la méthode prepare().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showsCaretChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>La méthode <codeph>updateDisplayList() </codeph> du contrôle Grid définit cette propriété avant d’appeler la méthode <codeph>prepare()</codeph>.   </p>
     
      
      Contient la valeur <codeph>true</codeph> si la cellule du rendu d’élément est indiquée par le caret.
     
      <p> Contrairement à un rendu d'élément de liste, les rendus d'élément de grille n'ont pas la responsabilité exclusive d'afficher un élément indiquant que leur cellule ou ligne a le signe d'insertion. La grille elle-même affiche automatiquement la partie d'habillage caretIndicator pour la ligne ou la cellule du signe d'insertion. Le rendu d'élément peut également modifier ses propriétés visuelles pour mettre en évidence qu'il a le signe d'insertion.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarRightButtonSkin"><apiName>ScrollBarRightButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton droit du composant Spark ScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton droit du composant Spark ScrollBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarRightButtonSkin:ScrollBarRightButtonSkin"><apiName>ScrollBarRightButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarRightButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>Définit l’aspect de la flèche droite sur le composant ScrollBar. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de la flèche droite sur le composant ScrollBar. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarRightButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderSkin"><apiName>VSliderSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark VSlider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark VSlider. Les habillages de curseur et de piste sont définis respectivement par les classes VSliderThumbSkin et VSliderTrackSkin.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderSkin:VSliderSkin"><apiName>VSliderSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderSkin:dataTip"><apiName>dataTip</apiName><shortdesc>Info-bulle utilisée dans le contrôle mx.controls.Slider. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>Info-bulle utilisée dans le contrôle mx.controls.Slider. Pour personnaliser l’aspect du composant DataTip, créez une classe VSliderSkin personnalisée. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VSliderSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VSlider</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VSliderSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">La classe d’habillage par défaut est VSliderThumbSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">La classe d’habillage par défaut est VSliderThumbSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VSliderSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">La classe d’habillage par défaut est VSliderTrackSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">La classe d’habillage par défaut est VSliderTrackSkin. 
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderTrackSkin"><apiName>VSliderTrackSkin</apiName><shortdesc>Classe d’habillage par défaut de la piste d’un composant Spark VSlider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut de la piste d’un composant Spark VSlider.  
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderTrackSkin:VSliderTrackSkin"><apiName>VSliderTrackSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DropDownListSkin"><apiName>DropDownListSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark DropDownList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark DropDownList. L’habillage pour le bouton d’ancrage pour un composant DropDownList est défini par la classe DropDownListButtonSkin.   
      
      <p><codeph/><codeph/></p>      
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link><link href="spark.skins.spark.xml#DropDownListButtonSkin"><linktext>spark.skins.spark.DropDownListButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:DropDownListSkin:DropDownListSkin"><apiName>DropDownListSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DropDownListSkin:background"><apiName>background</apiName><shortdesc>Définit l’aspect du remplissage d’arrière-plan de la liste déroulante. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect du remplissage d’arrière-plan de la liste déroulante. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:bgFill"><apiName>bgFill</apiName><shortdesc>Couleur du remplissage d’arrière-plan de la zone déroulante. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>Couleur du remplissage d’arrière-plan de la zone déroulante. La couleur par défaut est 0xFFFFFF.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:dropDown"><apiName>dropDown</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#dropDown">Ceci inclut des bordures, les couleurs d’arrière-plan, les barres de défilement et les filtres.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#dropDown">Ceci inclut des bordures, les couleurs d’arrière-plan, les barres de défilement et les filtres.
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DropDownList</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.DropDownList#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.DropDownList#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:openButton"><apiName>openButton</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#openButton">L’habillage par défaut est DropDownListButtonSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#openButton">L’habillage par défaut est DropDownListButtonSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#DropDownListButtonSkin"><linktext>spark.skins.spark.DropDownListButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:popUp"><apiName>popUp</apiName><shortdesc>Contrôle PopUpAnchor qui ouvre la liste déroulante. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:PopUpAnchor</apiValueClassifier></apiValueDef><apiDesc>Contrôle PopUpAnchor qui ouvre la liste déroulante.  
        
        <p><codeph/><codeph/></p></apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormSkin"><apiName>FormSkin</apiName><shortdesc>La classe d'habillage par défaut pour un conteneur Spark Form.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>La classe d'habillage par défaut pour un conteneur Spark Form. Cet habillage définit un groupe contentGroup pour le conteneur Form, avec un élément FormLayout en tant qu’objet de mise en forme. La mise en page FormLayout est un élément VerticalLayout comportant une logique supplémentaire pour aligner les colonnes d'éléments FormItem.
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormSkin:FormSkin"><apiName>FormSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de la classe Form.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan de la classe du Form.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Form</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultGridHeaderRenderer"><apiName>DefaultGridHeaderRenderer</apiName><shortdesc>La classe DefaultGridHeaderRenderer définit le rendu d’en-tête par défaut des colonnes d’un contrôle Spart DataGrid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.gridClasses:GridItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>La classe DefaultGridHeaderRenderer définit le rendu d’en-tête par défaut des colonnes d’un contrôle Spart DataGrid.
<p>Les sous-classes définies dans MXML peut redéfinir les valeurs des propriétés <codeph>labelDisplay</codeph> et <codeph>sortIndicator</codeph>.</p>
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.xml#GridColumnHeaderGroup"><linktext>spark.components.GridColumnHeaderGroup</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultGridHeaderRenderer:DefaultGridHeaderRenderer"><apiName>DefaultGridHeaderRenderer</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:defaultSortIndicator"><apiName>defaultSortIndicator</apiName><shortdesc>La valeur par défaut de la propriété sortIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>La valeur par défaut de la propriété <codeph>sortIndicator</codeph>. Il doit s’agir d’un objet IFactory d’un élément IVisualElement.        
        
        <p>Cette valeur est spécifiée dans un bloc <codeph>fx:Declaration</codeph> et peut être remplacée par une déclaration avec <codeph>id="defaultSortIndicator"</codeph> dans une sous-classe MXML.</p>
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:labelDisplayGroup"><apiName>labelDisplayGroup</apiName><shortdesc>Définit la taille et l’emplacement de l’élément visuel labelDisplay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>Définit la taille et l’emplacement de l’élément visuel labelDisplay. 
        
        <p>L’élément <codeph>labelDisplay</codeph> est ajouté à ce groupe par la méthode <codeph>prepare()</codeph> du rendu. Toutes les contraintes de taille/emplacement spécifiées par l’élément labelDisplay définissent sa mise en forme par rapport au groupe labelDisplayGroup.</p>
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:sortIndicatorGroup"><apiName>sortIndicatorGroup</apiName><shortdesc>Définit la taille et l’emplacement de l’élément visuel sortIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>Définit la taille et l’emplacement de l’élément visuel sortIndicator. 
        
        <p>L’élément <codeph>sortIndicator</codeph> est ajouté à ce groupe par la méthode <codeph>prepare()</codeph> du rendu. Toutes les contraintes de taille/emplacement spécifiées par l’élément sortIndicator définissent sa mise en forme par rapport au groupe sortIndicatorGroup. Ce groupe est inclus dans la mise en forme uniquement lorsque l’élément sortIndicator est visible.</p>  
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc conref="spark.components.supportClasses.TextBase#maxDisplayedLines">
              La valeur de cette propriété est utilisée pour initialiser la propriété maxDisplayedLines de l’élément labelDisplay du rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxDisplayedLinesChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
             
              </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.TextBase#maxDisplayedLines">
              La valeur de cette propriété est utilisée pour initialiser la propriété <codeph>maxDisplayedLines</codeph> de l’élément <codeph>labelDisplay</codeph> du rendu.
             
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:sortIndicator:get"><apiName>sortIndicator</apiName><shortdesc>
              Un élément visuel qui s’affiche lorsque la colonne est triée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
             
              </apiDefaultValue></apiValueDef><apiDesc>
              Un élément visuel qui s’affiche lorsque la colonne est triée.
             
              <p>L’élément visuel sortIndicator est ajouté au groupe <codeph>sortIndicatorGroup</codeph> par la méthode <codeph>prepare()</codeph> du rendu. Toutes les contraintes de taille/emplacement spécifiées par l’élément sortIndicator définissent son emplacement par rapport au groupe sortIndicatorGroup.</p>
             
              </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperIncrementButtonSkin"><apiName>NumericStepperIncrementButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton vers le haut d’un composant Spark NumericStepper.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton vers le haut d’un composant Spark NumericStepper.  
    
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperIncrementButtonSkin:NumericStepperIncrementButtonSkin"><apiName>NumericStepperIncrementButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperIncrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>Définit l’aspect de la flèche vers le haut. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de la flèche vers le haut. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperIncrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TabBarButtonSkin"><apiName>TabBarButtonSkin</apiName><shortdesc>Classe d’habillage par défaut des boutons Spark TabBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut des boutons Spark TabBar.  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TabBar"><linktext>spark.components.TabBar</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext>spark.skins.spark.TabBarSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:TabBarButtonSkin:TabBarButtonSkin"><apiName>TabBarButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:TextAreaSkin"><apiName>TextAreaSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark TextArea.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark TextArea.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link></related-links><apiConstructor id="spark.skins.spark:TextAreaSkin:TextAreaSkin"><apiName>TextAreaSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TextAreaSkin:background"><apiName>background</apiName><shortdesc>Définit l’aspect de l’arrière-plan du composant TextArea.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan du composant TextArea.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextArea</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>Définit le libellé utilisé pour le texte d’invite.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>Définit le libellé utilisé pour le texte d’invite. La propriété includeInLayout a la valeur false, par conséquent le texte d'invite n'affecte pas la mesure.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:scroller"><apiName>scroller</apiName><shortdesc>Définit le composant Scroller qui est utilisé pour faire défiler le contrôle TextArea. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc>Définit le composant Scroller qui est utilisée pour faire défiler le contrôle TextArea. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperDecrementButtonSkin"><apiName>NumericStepperDecrementButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton vers le bas d’un composant Spark NumericStepper.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton vers le bas d’un composant Spark NumericStepper.  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperDecrementButtonSkin:NumericStepperDecrementButtonSkin"><apiName>NumericStepperDecrementButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperDecrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>Définit l’aspect de la flèche vers le bas. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de la flèche vers le bas. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperDecrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ImageLoadingSkin"><apiName>ImageLoadingSkin</apiName><shortdesc>La classe d'habillage par défaut pour le préchargeur de la barre de progression de l'habillage Spark Image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>La classe d’habillage par défaut pour le préchargeur de la barre de progression de l’habillage Spark Image.  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Image"><linktext>spark.components.Image</linktext></link></related-links><apiConstructor id="spark.skins.spark:ImageLoadingSkin:ImageLoadingSkin"><apiName>ImageLoadingSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ImageLoadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:Range</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderTrackSkin"><apiName>HSliderTrackSkin</apiName><shortdesc>Classe d’habillage par défaut de la piste d’un composant Spark HSlider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut de la piste d’un composant Spark HSlider.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderTrackSkin:HSliderTrackSkin"><apiName>HSliderTrackSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HighlightBitmapCaptureSkin"><apiName>HighlightBitmapCaptureSkin</apiName><shortdesc>
      Classe de base pour les habillages qui effectuent une capture des composants cibles et appliquent un filtre à l’image bitmap. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      Classe de base pour les habillages qui effectuent l’acquisition au format bitmap des composants cibles et appliquent un filtre à l’image bitmap. Il s’agit de la classe de base pour ErrorSkin et FocusSkin. 
      
      </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ErrorSkin"><linktext>spark.skins.spark.ErrorSkin</linktext></link><link href="spark.skins.spark.xml#FocusSkin"><linktext>spark.skins.spark.FocusSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HighlightBitmapCaptureSkin:HighlightBitmapCaptureSkin"><apiName>HighlightBitmapCaptureSkin</apiName><shortdesc>
         Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
         Constructeur.
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:processBitmap"><apiName>processBitmap</apiName><shortdesc>
          Appliquez les post-traitements au bitmap acquis. </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Appliquez les post-traitements au bitmap acquis. 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:bitmap"><apiName>bitmap</apiName><shortdesc>
          Acquisition Bitmap du composant cible. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Bitmap"/></apiValueDef><apiDesc>
          Acquisition Bitmap du composant cible.  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:borderWeight:get"><apiName>borderWeight</apiName><shortdesc>
          Nombre de pixels de remplissage à placer autour du bitmap. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Nombre de pixels de remplissage à placer autour du bitmap. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:target:get"><apiName>target</apiName><shortdesc>
          Objet à cibler. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:SkinnableComponent</apiValueClassifier></apiValueDef><apiDesc>
          Objet à cibler. 
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarLeftButtonSkin"><apiName>ScrollBarLeftButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton gauche du composant Spark ScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton gauche du composant Spark ScrollBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarLeftButtonSkin:ScrollBarLeftButtonSkin"><apiName>ScrollBarLeftButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarLeftButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>Définit l’aspect de la flèche gauche sur le composant ScrollBar. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de la flèche gauche sur le composant ScrollBar. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarLeftButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormHeadingSkin"><apiName>StackedFormHeadingSkin</apiName><shortdesc>Une autre classe d'habillage pour le composant FormHeading Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Une autre classe d'habillage pour le composant FormHeading Spark. Utilisez cet habillage lorsque vos FormItems utilisent le StackedFormItemSkin.
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormHeadingSkin:StackedFormHeadingSkin"><apiName>StackedFormHeadingSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormHeadingSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de la classe Form.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan de la classe du Form.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:contentCol"><apiName>contentCol</apiName><shortdesc>Colonne contenant le libellé et le contenu de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne contenant le libellé et le contenu de l’élément FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:helpCol"><apiName>helpCol</apiName><shortdesc>Colonne de contenu d’aide de l’élément FormItem.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne de contenu d'aide de l'élément FormItem.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormHeading</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormHeading#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormHeading#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>Colonne contenant le libellé de la séquence.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne contenant le libellé de la séquence.</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultItemRenderer"><apiName>DefaultItemRenderer</apiName><shortdesc>
  La classe DefaultItemRenderer définit le rendu d’élément par défaut d’un contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DefaultItemRenderer définit le rendu d’élément par défaut d’un contrôle List. Le rendu d’élément par défaut se limite à dessiner le texte associé à chaque élément de la liste. 
 
  <p>Vous pouvez remplacer le rendu d’élément par défaut en créant un rendu d’élément personnalisé.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link><link href="spark.components.supportClasses.xml#ItemRenderer"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:DefaultItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:DefaultItemRenderer:DefaultItemRenderer"><apiName>DefaultItemRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Composant facultatif d’étiquette de fonctionnalité de rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      Composant facultatif d’étiquette de fonctionnalité de rendu d’élément. Ce composant est utilisé pour déterminer la valeur de la propriété <codeph>baselinePosition</codeph> dans le composant hôte de la fonctionnalité de rendu d’élément. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      Implémentation de la propriété data, telle que définie par l’interface IDataRenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Implémentation de la propriété <codeph>data</codeph>, telle que définie par l’interface IDataRenderer. Quand elle est définie, elle stocke la valeur et annule le composant pour déclencher sa redisposition.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      Contient true si le rendu d’élément est en cours de glissement. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si le rendu d’élément est en cours de glissement. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      Index de l’élément dans le fournisseur de données du composant hôte du rendu d’élément.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Index de l’élément dans le fournisseur de données du composant hôte du rendu d’élément.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      Chaîne à afficher dans le rendu d'élément.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
     </apiDefaultValue></apiValueDef><apiDesc>
      
      La chaîne à afficher dans l'option de rendu d'élément. 
     
      <p>Le composant hôte de la fonctionnalité de rendu d’élément peut utiliser la méthode <codeph>itemToLabel()</codeph> pour convertir l’élément de données en une chaîne devant être affichée par la fonctionnalité de rendu d’élément. </p>
     
      <p>Pour les contrôles tels que List et ButtonBar, vous pouvez utiliser les propriétés <codeph>labelField</codeph> ou <codeph>labelFunction</codeph> pour spécifier le champ de l’élément de données contenant la chaîne. Dans tous les autres cas, le composant hôte utilise la méthode <codeph>toString()</codeph> pour convertir l’élément de données en chaîne. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      Contient true si la fonctionnalité de rendu d’élément peut s’afficher comme étant sélectionnée.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si la fonctionnalité de rendu d’élément peut s’afficher comme étant sélectionnée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Contient true si le rendu d’élément peut s’afficher comme focus. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si le rendu d’élément peut s’afficher comme focus.  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarTrackSkin"><apiName>HScrollBarTrackSkin</apiName><shortdesc>Classe d’habillage par défaut de la piste sur un composant Spark HScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut de la piste sur un composant Spark HScrollBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarTrackSkin:HScrollBarTrackSkin"><apiName>HScrollBarTrackSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxButtonSkin"><apiName>ComboBoxButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton d’ancrage sur un composant Spark ComboBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton d’ancrage sur un composant Spark ComboBox.  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxButtonSkin:ComboBoxButtonSkin"><apiName>ComboBoxButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>L’image flèche affichée dans le bouton d’ancrage. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>L’image flèche affichée dans le bouton d’ancrage. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormHeadingSkin"><apiName>FormHeadingSkin</apiName><shortdesc>La classe d'habillage par défaut pour le composant Spark FormHeading.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d'habillage par défaut du composant Spark FormHeading.  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormHeadingSkin:FormHeadingSkin"><apiName>FormHeadingSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormHeadingSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de la classe Form.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan de la classe du Form.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:contentCol"><apiName>contentCol</apiName><shortdesc>Colonne de contenu de l'élément de formulaire.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne de contenu de l’élément de formulaire.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:helpCol"><apiName>helpCol</apiName><shortdesc>Colonne de contenu d’aide de l’élément de formulaire.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne de contenu d’aide de l’élément de formulaire.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormHeading</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:labelCol"><apiName>labelCol</apiName><shortdesc>Colonne contenant le libellé de l'élément de formulaire.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne contenant le libellé de l’élément de formulaire.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormHeading#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormHeading#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>Colonne contenant le libellé de la séquence.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>Colonne contenant le libellé de la séquence.</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarDownButtonSkin"><apiName>ScrollBarDownButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton vers le bas du composant Spark ScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton vers le bas du composant Spark ScrollBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarDownButtonSkin:ScrollBarDownButtonSkin"><apiName>ScrollBarDownButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarDownButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>Définit l’aspect de la flèche vers le bas sur le composant ScrollBar. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de la flèche vers le bas sur le composant ScrollBar. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarDownButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollerSkin"><apiName>ScrollerSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark Scroller. 
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollerSkin:ScrollerSkin"><apiName>ScrollerSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollerSkin:horizontalScrollBarFactory"><apiName>horizontalScrollBarFactory</apiName><shortdesc>Barre de défilement horizontale permettant de contrôler la partie des données affichées lorsque le volume de données à afficher horizontalement dans une zone d’affichage est trop important.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>Barre de défilement horizontale permettant de contrôler la partie des données affichées lorsque le volume de données à afficher horizontalement dans une zone d’affichage est trop important. Le composant Scroller détermine si l’élément ScrollBar horizontal est visible. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollerSkin:verticalScrollBarFactory"><apiName>verticalScrollBarFactory</apiName><shortdesc>Barre de défilement verticale permettant de contrôler la partie des données affichées lorsque le volume de données à afficher verticalement dans une zone d’affichage est trop important.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>Barre de défilement verticale permettant de contrôler la partie des données affichées lorsque le volume de données à afficher verticalement dans une zone d’affichage est trop important. Le composant Scroller détermine si l’élément ScrollBar vertical est visible. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerIncrementButtonSkin"><apiName>SpinnerIncrementButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton vers le haut d’un composant Spark Spinner.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton vers le haut d’un composant Spark Spinner.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerIncrementButtonSkin:SpinnerIncrementButtonSkin"><apiName>SpinnerIncrementButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerIncrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>Définit l’aspect de la flèche vers le haut. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de la flèche vers le haut. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerIncrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnableDataContainerSkin"><apiName>SkinnableDataContainerSkin</apiName><shortdesc>Classe d’habillage par défaut du conteneur Spark SkinnableDataContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du conteneur Spark SkinnableDataContainer.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnableDataContainerSkin:SkinnableDataContainerSkin"><apiName>SkinnableDataContainerSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnableDataContainerSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableDataContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnableDataContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarSkin"><apiName>HScrollBarSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark HScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark HScrollBar. Les habillages de curseur et de piste sont définis respectivement par les classes HScrollBarThumbSkin et HScrollBarTrackSkin.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarSkin:HScrollBarSkin"><apiName>HScrollBarSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">La classe d’habillage par défaut est ScrollBarLeftButtonSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">La classe d’habillage par défaut est ScrollBarLeftButtonSkin. 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:HScrollBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">La classe d’habillage par défaut est ScrollBarRightButtonSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">La classe d’habillage par défaut est ScrollBarRightButtonSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">La classe d’habillage par défaut est HScrollBarThumbSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">La classe d’habillage par défaut est HScrollBarThumbSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">La classe d’habillage par défaut est HScrollBarTrackSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">La classe d’habillage par défaut est HScrollBarTrackSkin.     
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerSkin"><apiName>SpinnerSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark Spinner.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark Spinner. Les habillages des boutons vers le bas et vers le haut du composant Spinner sont définis respectivement par les classes SpinnerDecrButtonSkin et SpinnerIncrButtonSkin.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#SpinnerDecrementButtonSkin"><linktext>spark.skins.spark.SpinnerDecrementButtonSkin</linktext></link><link href="spark.skins.spark.xml#SpinnerIncrementButtonSkin"><linktext>spark.skins.spark.SpinnerIncrementButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerSkin:SpinnerSkin"><apiName>SpinnerSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.Spinner#decrementButton">La classe d’habillage par défaut est SpinnerDecrementButtonSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#decrementButton">La classe d’habillage par défaut est SpinnerDecrementButtonSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#SpinnerDecrementButtonSkin"><linktext>spark.skins.spark.SpinnerDecrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:SpinnerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Spinner</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.Spinner#incrementButton">La classe d’habillage par défaut est SpinnerIncrementButtonSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#incrementButton">La classe d’habillage par défaut est SpinnerIncrementButtonSkin. 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#SpinnerIncrementButtonSkin"><linktext>spark.skins.spark.SpinnerIncrementButtonSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperSkin"><apiName>NumericStepperSkin</apiName><shortdesc>Classe d’habillage par défaut d’un composant Spark NumericStepper.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un composant Spark NumericStepper. L’habillage pour le champ de saisie de texte sur un composant NumericStepper est défini par la classe NumericStepperTextInputSkin.   
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperSkin:NumericStepperSkin"><apiName>NumericStepperSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.Spinner#decrementButton">La classe par défaut est NumericStepperDecrementButtonSkin.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#decrementButton">La classe par défaut est NumericStepperDecrementButtonSkin.
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperDecrementButtonSkin"><linktext>spark.skins.spark.NumericStepperDecrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:NumericStepper</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.Spinner#incrementButton">La classe par défaut est NumericStepperIncrementButtonSkin.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#incrementButton">La classe par défaut est NumericStepperIncrementButtonSkin.
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperIncrementButtonSkin"><linktext>spark.skins.spark.NumericStepperIncrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.NumericStepper#textDisplay">La classe par défaut est NumericStepperTextInputSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.NumericStepper#textDisplay">La classe par défaut est NumericStepperTextInputSkin. 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarThumbSkin"><apiName>HScrollBarThumbSkin</apiName><shortdesc>Classe d’habillage par défaut du curseur d’un composant Spark HScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du curseur d’un composant Spark HScrollBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarThumbSkin:HScrollBarThumbSkin"><apiName>HScrollBarThumbSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:RadioButtonSkin"><apiName>RadioButtonSkin</apiName><shortdesc>Classe d’habillage par défaut d’un composant Spark RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un composant Spark RadioButton.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link></related-links><apiConstructor id="spark.skins.spark:RadioButtonSkin:RadioButtonSkin"><apiName>RadioButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:RadioButtonSkin:dot"><apiName>dot</apiName><shortdesc>Définit l’aspect du point du composant RadioButton. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect du point du composant RadioButton. Pour personnaliser l’aspect du point, créez une classe RadioButtonSkin personnalisée. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:RadioButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:RadioButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ApplicationSkin"><apiName>ApplicationSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark Application. 
        
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Application"><linktext>spark.components.Application</linktext></link></related-links><apiConstructor id="spark.skins.spark:ApplicationSkin:ApplicationSkin"><apiName>ApplicationSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ApplicationSkin:backgroundRect"><apiName>backgroundRect</apiName><shortdesc>Rectangle avec remplissage de couleur unie formant l’arrière-plan de l’application. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Rectangle avec remplissage de couleur unie formant l’arrière-plan de l’application. La couleur du remplissage est définie sur la propriété backgroundColor de l’application. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Application#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Application#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc> 
         Propriété fortement typée faisant référence au composant auquel cet habillage est appliqué. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Application</apiValueClassifier></apiValueDef><apiDesc> 
         Propriété fortement typée faisant référence au composant auquel cet habillage est appliqué. 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:BorderContainerSkin"><apiName>BorderContainerSkin</apiName><shortdesc>
  Classe d’habillage par défaut d’un composant Spark BorderContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>
  Classe d’habillage par défaut d’un composant Spark BorderContainer.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#BorderContainer"><linktext>spark.components.BorderContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:BorderContainerSkin:BorderContainerSkin"><apiName>BorderContainerSkin</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:BorderContainerSkin:contentGroup:get"><apiName>contentGroup</apiName><shortdesc>
      Habillage requis pour SkinnableContainer  
     </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>
      Habillage requis pour SkinnableContainer  
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:BorderContainerSkin:hostComponent:get"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:BorderContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderSkin"><apiName>HSliderSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark HSlider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark HSlider. Les habillages de curseur et de piste sont définis respectivement par les classes HSliderThumbSkin et HSliderTrackSkin.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderSkin:HSliderSkin"><apiName>HSliderSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderSkin:dataTip"><apiName>dataTip</apiName><shortdesc>Info-bulle utilisée dans le contrôle mx.controls.Slider. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>Info-bulle utilisée dans le contrôle mx.controls.Slider. Pour personnaliser l’aspect du composant DataTip, créez une classe HSliderSkin personnalisée. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HSliderSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:HSlider</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HSliderSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">La classe d’habillage par défaut est HSliderThumbSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">La classe d’habillage par défaut est HSliderThumbSkin. 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HSliderSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">La classe d’habillage par défaut est HSliderTrackSkin. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">La classe d’habillage par défaut est HSliderTrackSkin.  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerDecrementButtonSkin"><apiName>SpinnerDecrementButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton vers le bas d’un composant Spark Spinner.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton vers le bas d’un composant Spark Spinner.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerDecrementButtonSkin:SpinnerDecrementButtonSkin"><apiName>SpinnerDecrementButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerDecrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>Définit l’aspect de la flèche vers le bas. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de la flèche vers le bas. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerDecrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnableContainerSkin"><apiName>SkinnableContainerSkin</apiName><shortdesc>Classe d’habillage par défaut d’un conteneur Spark SkinnableContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un conteneur Spark SkinnableContainer.  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnableContainerSkin:SkinnableContainerSkin"><apiName>SkinnableContainerSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnableContainerSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de la classe du SkinnableContainer.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l'aspect de l'arrière-plan de la classe du SkinnableContainer.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableContainerSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnableContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarUpButtonSkin"><apiName>ScrollBarUpButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton vers le haut du composant Spark ScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton vers le haut du composant Spark ScrollBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarUpButtonSkin:ScrollBarUpButtonSkin"><apiName>ScrollBarUpButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarUpButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>Définit l’aspect de la flèche vers le haut sur le composant ScrollBar. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de la flèche vers le haut sur le composant ScrollBar. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarUpButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:PanelSkin"><apiName>PanelSkin</apiName><shortdesc>Classe d’habillage par défaut d’un conteneur Spark Panel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un conteneur Spark Panel.  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext>spark.components.Panel</linktext></link></related-links><apiConstructor id="spark.skins.spark:PanelSkin:PanelSkin"><apiName>PanelSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:PanelSkin:background"><apiName>background</apiName><shortdesc>Définit l'aspect de l'arrière-plan de la classe PanelSkin.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de l’arrière-plan de la classe PanelSkin.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:contents"><apiName>contents</apiName><shortdesc>Contient la pile verticale de contenu de barre de titre et de contrôle.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>Contient la pile verticale de contenu de barre de titre et de contrôle </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Panel#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Panel</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:titleDisplay"><apiName>titleDisplay</apiName><shortdesc conref="spark.components.Panel#titleDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#titleDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultButtonSkin"><apiName>DefaultButtonSkin</apiName><shortdesc>Classe d’habillage par défaut d’un composant Spark DefaultButton. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un composant Spark DefaultButton. Le composant DefaultButton est utilisé dans les panneaux tels que les panneaux d’alerte. Il est défini par la propriété defaultButton sur un conteneur.   
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.controls.Alert.xml"><linktext>mx.controls.Alert</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultButtonSkin:DefaultButtonSkin"><apiName>DefaultButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:FocusSkin"><apiName>FocusSkin</apiName><shortdesc>
  Définit le « rayonnement » autour des composants Spark lorsque le composant a le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins.spark:HighlightBitmapCaptureSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  Définit le « rayonnement » autour des composants Spark lorsque le composant a le focus. 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.skins.spark:FocusSkin:FocusSkin"><apiName>FocusSkin</apiName><shortdesc>
     Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     Constructeur.
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:FocusSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:FocusSkin:protected:borderWeight:get"><apiName>borderWeight</apiName><shortdesc>
      
          Nombre de pixels de remplissage à placer autour du bitmap. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
          Nombre de pixels de remplissage à placer autour du bitmap. 
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarFirstButtonSkin"><apiName>ButtonBarFirstButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du premier bouton sur un composant Spark ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du premier bouton sur un composant Spark ButtonBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarFirstButtonSkin:ButtonBarFirstButtonSkin"><apiName>ButtonBarFirstButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:DropDownListButtonSkin"><apiName>DropDownListButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du bouton d’ancrage sur un composant Spark DropDownList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du bouton d’ancrage sur un composant Spark DropDownList.  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:DropDownListButtonSkin:DropDownListButtonSkin"><apiName>DropDownListButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DropDownListButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>L’image flèche affichée dans le bouton d’ancrage. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>L’image flèche affichée dans le bouton d’ancrage. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:UITextFieldGridItemRenderer"><apiName>UITextFieldGridItemRenderer</apiName><shortdesc>
  La classe UITextFieldGridItemRenderer définit un rendu d’élément simple et efficace qui affiche une seule étiquette de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="style" name="layoutDirection"/><Exclude kind="property" name="layoutDirection"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IGridItemRenderer</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier>mx.core:UITextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe UITextFieldGridItemRenderer définit un rendu d’élément simple et efficace qui affiche une seule étiquette de texte. Pour les applications qui affichent des contrôles Grid comportant de nombreuses cellules visibles, ce rendu fournit des performances optimales sous Microsoft Windows. Elle est basée sur TextField et non sur FTE (Flash Text Engine), de sorte qu’elle n’assure pas de prise en charge pour certaines fonctionnalités de texte Spark et pour les styles de texte spécifiques à FTE.
 
  <p>Vous pouvez contrôler le retour à la ligne du texte du libellé à l’aide de la propriété <codeph>wordWrap</codeph>. Par exemple, définissez <codeph>wordWrap="false"</codeph> et <codeph>variableRowHeight="false"</codeph> pour créer des cellules de hauteur fixe dont les libellés ne sont pas renvoyés à la ligne. Si vous n’avez pas explicitement défini la propriété <codeph>wordWrap</codeph>, <codeph>wordWrap</codeph> sera définie sur la valeur de la propriété <codeph>variableRowHeight</codeph> de la grille.</p>
 
  <p>UITextFieldGridItemRenderer hérite de sa valeur de la propriété <codeph>layoutDirection</codeph> de son parent. Elle ne doit pas être définie directement sur la classe UITextFieldGridItemRenderer.</p> 
 
  <p>La classe UITextFieldGridItemRenderer n’est pas destinée à être sous-classée ou copiée. Créez des rendus d’élément personnalisés en fonction de la classe GridItemRenderer.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link><link href="mx.core.xml#FTETextField"><linktext>mx.core.FTETextField</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:UITextFieldGridItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribuée lorsque la propriété data liable change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribuée lorsque la propriété <codeph>data</codeph> liable change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:UITextFieldGridItemRenderer:UITextFieldGridItemRenderer"><apiName>UITextFieldGridItemRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:UITextFieldGridItemRenderer:discard"><apiName>discard</apiName><shortdesc>
      
      Appelé à partir de la méthode updateDisplayList() du parent du rendu d’élément une fois qu’il a été déterminé que ce rendu ne sera plus visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hasBeenRecycled</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si ce rendu est destiné à être ajouté à la liste libre interne du propriétaire en vue d’être réutilisé.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelé à partir de la méthode <codeph>updateDisplayList()</codeph> du parent du rendu d’élément une fois qu’il a été déterminé que ce rendu ne sera plus visible. Si le paramètre <codeph>willBeRecycled</codeph> a la valeur <codeph>true</codeph>, le propriétaire ajoute ce rendu à sa liste libre interne en vue de le réutiliser. Les implémentations peuvent utiliser cette méthode pour effacer toute propriété de rendu qui n’est plus nécessaire.
     
      <p>Cette méthode n’est pas destinée à être appelée directement. Elle est appelée par l'implémentation DataGrid.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:UITextFieldGridItemRenderer:prepare"><apiName>prepare</apiName><shortdesc>
      
      Appelé à partir de la méthode updateDisplayList() du parent du rendu d’élément une fois que toutes les propriétés du rendu ont été définies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>willBeRecycled</apiItemName><apiType value="Boolean"/><apiDesc> <codeph>true</codeph> si ce rendu est réutilisé.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelé à partir de la méthode <codeph>updateDisplayList()</codeph> du parent du rendu d’élément une fois que toutes les propriétés du rendu ont été définies. Le paramètre <codeph>hasBeenRecycled</codeph> a la valeur <codeph>false</codeph> si ce rendu n’a pas été utilisé avant, ce qui signifie qu’il n’a pas été recyclé. Cette méthode est appelée lorsqu’un rendu est sur le point de devenir visible et chaque fois qu’il est réaffiché en raison d’une modification d’une propriété du rendu ou du fait qu’un réaffichage a été explicitement demandé. 
     
      <p>Cette méthode peut être utilisée pour configurer tous les éléments visuels et les propriétés d’un rendu. L'utilisation de cette méthode peut être plus efficace que la liaison des propriétés <codeph>data</codeph> des propriétés aux propriétés d'élément visuel. Remarque : puisque la méthode <codeph>prepare()</codeph> est appelée fréquemment, assurez-vous qu’elle est codée de manière efficace.</p>
     
      <p>La méthode <codeph>prepare()</codeph> peut être appelée à de nombreuses reprises avant que la méthode <codeph>discard()</codeph> soit appelée.</p>
     
      <p>Cette méthode n’est pas destinée à être appelée directement. Elle est appelée par l'implémentation DataGrid.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:columnIndex:get"><apiName>columnIndex</apiName><shortdesc>
      
      L’index de colonne de la cellule de ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      L’index de colonne de la cellule de ce rendu d’élément. Il s’agit de la même valeur que <codeph>column.columnIndex</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:column:get"><apiName>column</apiName><shortdesc>
      
      L’objet GridColumn représentant la colonne associée à ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:GridColumn</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Objet GridColumn représentant la colonne associée à ce rendu d’élément.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      La valeur de l’élément du fournisseur de données pour toute la ligne du contrôle Grid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La valeur de l’élément du fournisseur de données pour toute la ligne du contrôle Grid. Les rendus d’éléments lient souvent les attributs des éléments visuels aux propriétés de cet objet.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:down:get"><apiName>down</apiName><shortdesc>
      La méthode updateDisplayList() du contrôle Grid définit cette propriété avant d’appeler la méthode prepare().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>La méthode <codeph>updateDisplayList()</codeph> du contrôle Grid définit cette propriété avant d’appeler la méthode <codeph>prepare()</codeph>.   </p>
     
      
      Cette propriété est définie sur <codeph>true</codeph> lorsque l'un de deux gestes d'entrée se produit dans une cellule de la grille : soit le bouton de la souris, soit l'écran tactile est activé. La propriété <codeph>down</codeph> est réinitialisée sur <codeph>false</codeph> lorsque le bouton de la souris est relâché, l’utilisateur libère l’écran tactile ou le curseur/toucher est déplacé hors de la cellule de la grille.   
     
      <p>Contrairement à un rendu d'élément de liste, les rendus d'élément de grille ne possèdent pas la responsabilité exclusive de l'affichage de l'indicateur vers le bas. La grille elle-même effectue le rendu de l'indicateur vers le bas pour la ligne ou la cellule sélectionnée. Le rendu d’élément peut également modifier ses propriétés visuelles pour mettre en évidence qu’il est actuellement sélectionné.</p>   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      Contient la valeur true si le rendu d'élément est en cours de glissement, généralement dans le cadre d'une opération glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="draggingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient la valeur <codeph>true</codeph> si le rendu d'élément est en cours de glissement, généralement dans le cadre d'une opération glisser-déposer. Actuellement, le glisser-déposer n’est pas pris en charge par le contrôle Spark DataGrid.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:grid:get"><apiName>grid</apiName><shortdesc>
      Contrôle Grid associé à ce rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Grid</apiValueClassifier></apiValueDef><apiDesc>
      Le contrôle Grid associé à ce rendu d’élément.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:hovered:get"><apiName>hovered</apiName><shortdesc>
      Définissez la valeur sur true si la souris survole le rendu d’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoveredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Définissez la valeur sur <codeph>true</codeph> si la souris survole le rendu d’élément. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      Le contrôle Grid définit cette propriété sur la valeur de la méthode itemToLabel() de la colonne, avant d’appeler la méthode prepare(). Chaîne à afficher dans le rendu d'élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>Le contrôle Grid définit cette propriété sur la valeur de la méthode <codeph>itemToLabel()</codeph> de la colonne, avant d’appeler la méthode <codeph>prepare()</codeph>.</p>
     
      
      Chaîne à afficher dans le rendu d'élément.  
     
      <p>La classe GridItemRenderer copie automatiquement la valeur de cette propriété vers la propriété <codeph>text</codeph> de son élément <codeph>labelDisplay</codeph>, si cet élément a été spécifié. Le contrôle Grid définit la propriété <codeph>label</codeph> sur la valeur renvoyée par la méthode <codeph>itemToLabel()</codeph> de la colonne.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:rowIndex:get"><apiName>rowIndex</apiName><shortdesc>
      La méthode updateDisplayList() du contrôle Grid définit cette propriété avant d’appeler la méthode prepare(). L’index à base zéro de la ligne de la cellule faisant l’objet du rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>La méthode <codeph>updateDisplayList()</codeph> du contrôle Grid définit cette propriété avant d’appeler la méthode <codeph>prepare()</codeph>.</p>
     
      
      L’index à base zéro de la ligne de la cellule faisant l’objet du rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      La méthode updateDisplayList() du contrôle Grid définit cette propriété avant d’appeler la méthode prepare(). Contient la valeur true si la cellule du rendu d’élément fait partie de la sélection en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>La méthode <codeph>updateDisplayList()</codeph> du contrôle Grid définit cette propriété avant d’appeler la méthode <codeph>prepare()</codeph>.</p>
     
      
      Contient la valeur <codeph>true</codeph> si la cellule du rendu d'élément fait partie de la sélection en cours. 
     
      <p> Contrairement à un rendu d'élément de liste, les rendus d'élément de grille n'ont pas la responsabilité exclusive d'afficher un élément indiquant qu'ils font partie de la sélection. La grille elle-même affiche automatiquement la partie d'habillage selectionIndicator pour les lignes ou les cellules sélectionnées. Le rendu d'élément peut également modifier ses propriétés visuelles pour souligner qu'elle fait partie de la sélection.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      La méthode updateDisplayList() du contrôle Grid définit cette propriété avant d’appeler la méthode prepare().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showsCaretChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>La méthode <codeph>updateDisplayList() </codeph> du contrôle Grid définit cette propriété avant d’appeler la méthode <codeph>prepare()</codeph>.   </p>
     
      
      Contient la valeur <codeph>true</codeph> si la cellule du rendu d’élément est indiquée par le caret.
     
      <p> Contrairement à un rendu d'élément de liste, les rendus d'élément de grille n'ont pas la responsabilité exclusive d'afficher un élément indiquant que leur cellule ou ligne a le signe d'insertion. La grille elle-même affiche automatiquement la partie d'habillage caretIndicator pour la ligne ou la cellule du signe d'insertion. Le rendu d'élément peut également modifier ses propriétés visuelles pour mettre en évidence qu'il a le signe d'insertion.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderThumbSkin"><apiName>HSliderThumbSkin</apiName><shortdesc>Classe d’habillage par défaut du curseur d’un composant Spark HSlider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du curseur d’un composant Spark HSlider.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderThumbSkin:HSliderThumbSkin"><apiName>HSliderThumbSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ListSkin"><apiName>ListSkin</apiName><shortdesc>Classe d’habillage par défaut d’un composant Spark List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un composant Spark List.  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link></related-links><apiConstructor id="spark.skins.spark:ListSkin:ListSkin"><apiName>ListSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ListSkin:background"><apiName>background</apiName><shortdesc>Définit l’aspect de l’arrière-plan du composant de liste. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect d’arrière-plan du composant de liste. </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:bgFill"><apiName>bgFill</apiName><shortdesc>Définit la couleur de l’arrière-plan. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>Définit la couleur de l’arrière-plan. La couleur par défaut est 0xFFFFFF.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:dropIndicator"><apiName>dropIndicator</apiName><shortdesc conref="spark.components.List#dropIndicator">Définit l’aspect de l’indicateur de dépôt de List. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc conref="spark.components.List#dropIndicator">Définit l’aspect de l’indicateur de dépôt de List. Pour personnaliser l’aspect de l’indicateur de dépôt, créez une classe ListSkin. La présentation de List se charge de définir la dimension et la position de dropIndicator. La taille de <codeph>dropIndicator</codeph> est généralement définie pour être équivalente à la taille des espaces entre les éléments. Le paramètre minimal et le paramètre maximal ne sont généralement respectés que dans la direction de l’axe principal (l’axe des espaces). Par exemple, VerticalLayout ignore les paramètres <codeph>minWidth</codeph> et <codeph>maxWidth</codeph>, mais tient compte des paramètres <codeph>minHeight</codeph> et <codeph>maxHeight</codeph>.  
        
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:List</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:scroller"><apiName>scroller</apiName><shortdesc>Le composant Scroller pour ajouter des barres de défilement à la liste. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc>Le composant Scroller pour ajouter des barres de défilement à la liste. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnablePopUpContainerSkin"><apiName>SkinnablePopUpContainerSkin</apiName><shortdesc>La classe d’habillage par défaut d’un conteneur Spark SkinnablePopUpContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut d’un conteneur Spark SkinnablePopUpContainer.  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer"><linktext>spark.components.SkinnablePopUpContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnablePopUpContainerSkin:SkinnablePopUpContainerSkin"><apiName>SkinnablePopUpContainerSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:background"><apiName>background</apiName><shortdesc>Définit l’aspect de l’arrière-plan de la classe SkinnablePopUpContainer.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Définit l’aspect de l’arrière-plan de la classe SkinnablePopUpContainer.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:chrome"><apiName>chrome</apiName><shortdesc>Définit l’arrière-plan et le groupe de contenu utilisé par l’habillage.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>Définit l’arrière-plan et le groupe de contenu utilisé par l’habillage.</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnablePopUpContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TabBarSkin"><apiName>TabBarSkin</apiName><shortdesc>Classe d’habillage par défaut du composant Spark TabBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du composant Spark TabBar. Les objets ButtonBarButtons créés par le composant TabBarSkin font appel à la classe TabBarButtonSkin.   
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TabBar"><linktext>spark.components.TabBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext>spark.skins.spark.TabBarButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:TabBarSkin:TabBarSkin"><apiName>TabBarSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TabBarSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TabBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TabBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarLastButtonSkin"><apiName>ButtonBarLastButtonSkin</apiName><shortdesc>Classe d’habillage par défaut du dernier bouton sur un composant Spark ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Classe d’habillage par défaut du dernier bouton sur un composant Spark ButtonBar.  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarLastButtonSkin:ButtonBarLastButtonSkin"><apiName>ButtonBarLastButtonSkin</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage>