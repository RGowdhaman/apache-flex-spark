<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components.supportClasses"><apiName>spark.components.supportClasses</apiName><apiDetail/><apiClassifier id="spark.components.supportClasses:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
  Classe de base des composants de conteneur dont l’habillage peut être configuré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Etat désactivé.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Etat normal.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Classe de base des composants de conteneur dont l’habillage peut être configuré.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:SkinnableContainerBase:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableContainerBase:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      Renvoie le nom de l’état à appliquer à l’habillage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Chaîne spécifiant le nom de l’état à appliquer à l’habillage.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      Renvoie le nom de l’état à appliquer à l’habillage. Par exemple, un composant Button peut renvoyer la chaîne « up », « down », « over » ou « disabled » pour spécifier l’état.
     
      <p>Une sous-classe de SkinnableComponent doit remplacer cette méthode pour renvoyer une valeur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableContainerBase:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Contrôle Button désigné comme bouton par défaut pour le conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Contrôle Button désigné comme bouton par défaut pour le conteneur. Lorsque les contrôles du conteneur ont le focus, l’activation de la touche Entrée revient à cliquer sur ce contrôle Button.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Range"><apiName>Range</apiName><shortdesc>
  La classe Range contient une valeur et une plage de valeurs autorisées pour cette valeur, définie par les propriétés minimum et maximum.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Range&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Range
    <strong>Properties</strong>
    maximum="100"
    minimum="0"
    snapInterval="1"
    stepSize="1"
    value="0"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Range contient une valeur et une plage de valeurs autorisées pour cette valeur, définie par les propriétés <codeph>minimum</codeph> et <codeph>maximum</codeph>. La propriété <codeph>value</codeph> doit toujours être comprise entre les valeurs actuellement définies pour <codeph>minimum</codeph> et <codeph>maximum</codeph>. En outre, les valeurs <codeph>minimum</codeph> et <codeph>maximum</codeph> doivent être dans le bon ordre, de sorte que <codeph>(minimum &lt;= value &lt;= maximum)</codeph> soit <codeph>true</codeph>. Si la valeur de la propriété <codeph>snapInterval</codeph> n’est pas 0, la propriété <codeph>value</codeph> est également limitée à un multiple de <codeph>snapInterval</codeph>. 
 
  <p>Range est une classe de base pour différents contrôles nécessitant une fonction de plage, notamment TrackBase et Spinner.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#TrackBase"><linktext>spark.components.supportClasses.TrackBase</linktext></link><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Range:Range"><apiName>Range</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Range:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Augmente ou diminue la valeur via stepSize. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est true, ajoute <codeph>stepSize</codeph> à <codeph>value</codeph>, dans le cas contraire, la soustrait. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Augmente ou diminue <codeph>value</codeph> via <codeph>stepSize</codeph>. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:nearestValidValue"><apiName>nearestValidValue</apiName><shortdesc>
      Renvoie la somme du minimum et d’un nombre entier multiple de interval le plus proche de value, à moins que value soit plus proche de la limite maximale, auquel cas la valeur renvoyée est le maximum. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>La valeur valide la plus proche de l’entrée. 
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>La valeur de l’entrée. 
      </apiDesc></apiParam><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>Valeur de snapInterval ou un entier multiple de snapInterval. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la somme du minimum et d’un nombre entier multiple de <codeph>interval</codeph> le plus proche de <codeph>value</codeph>, à moins que <codeph>value</codeph> soit plus proche de la limite maximale, auquel cas la valeur renvoyée est le maximum. 
     
      <p>Si <codeph>interval</codeph> est égal à 0, la valeur est tronquée sur les limites minimales et maximales. </p>
     
      <p>Les valeurs valides pour une plage sont définies par la somme de la propriété <codeph>minimum</codeph> avec des multiples de <codeph>interval</codeph>. Elles sont également définies pour être inférieures ou égales à la propriété <codeph>maximum</codeph>. Le maximum ne doit pas être un multiple de <codeph>snapInterval</codeph>.</p>
     
      <p>Si, par exemple, <codeph>minimum</codeph> est égal à 1, <codeph>maximum</codeph> est égal à 6, et <codeph>snapInterval</codeph> est égal à 3, les valeurs possibles de cette plage sont 1, 2, 5, 6. De même, si <codeph>minimum</codeph> est égal à 2, <codeph>maximum</codeph> est égal à 9, et <codeph>snapInterval</codeph> est égal à 1,5, les valeurs possibles de cette plage sont 2, 3.5, 6.5, 5, 8, et 9. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Définit le magasin de sauvegarde pour la propriété value et distribue un événement valueCommit si la propriété est modifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Nouvelle valeur de la propriété <codeph>value</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit le magasin de sauvegarde pour la propriété <codeph>value</codeph> et distribue un événement <codeph>valueCommit</codeph> si la propriété est modifiée.  
     
      <p>Toutes les mises à jour de la propriété <codeph>value</codeph> provoquent l’appel de cette méthode.</p>
     
      <p>Cette méthode suppose que l’appelant a déjà utilisé la valeur <codeph>nearestValidValue()</codeph> pour limiter le paramètre value.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:Range:maximum:get"><apiName>maximum</apiName><shortdesc>
      Valeur valide maximale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>Valeur</codeph> valide maximale.
     
      <p>Les modifications apportées à la propriété value sont limitées par la propriété <codeph>commitProperties()</codeph> pour être inférieures ou égales au maximum avec la méthode <codeph>nearestValidValue()</codeph>. </p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:minimum:get"><apiName>minimum</apiName><shortdesc>
      Valeur valide minimale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>Valeur</codeph> valide minimale.
     
      <p>Les modifications apportées à la propriété value sont limitées par la propriété <codeph>commitProperties()</codeph> pour être supérieures ou égales au minimum avec la méthode <codeph>nearestValidValue()</codeph>.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:snapInterval:get"><apiName>snapInterval</apiName><shortdesc>
      La propriété snapInterval contrôle les valeurs valides de la propriété value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      La propriété snapInterval contrôle les valeurs valides de la propriété <codeph>value</codeph>. Si elles ne sont pas égales à zéro, les valeurs valides correspondent à la somme du <codeph>minimum</codeph> et des multiples entiers de cette propriété, pour toutes les sommes inférieures ou égales au <codeph>maximum</codeph>.
     
      <p>Si, par exemple, <codeph>minimum</codeph> est 10, <codeph>maximum</codeph> est 20 et cette propriété a la valeur 3, les valeurs valides de cette plage sont 10, 13, 16, 19 et 20.</p>
      
      <p>Si la valeur de cette propriété est zéro, alors les valeurs possibles sont uniquement limitées entre les valeurs minimum et maximum incluses. </p>
     
      <p>Cette propriété limite également les valeurs possibles pour la propriété <codeph>stepSize</codeph> lorsqu’elle est définie. Si cette propriété n’est pas définie de façon explicite et la propriété <codeph>stepSize</codeph> est définie, <codeph>snapInterval</codeph> prend par défaut la valeur <codeph>stepSize</codeph>. </p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      Ampleur de la modification de la propriété value lorsque la méthode changeValueByStep() est appelée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ampleur de la modification de la propriété <codeph>value</codeph> lorsque la méthode <codeph>changeValueByStep()</codeph> est appelée. Il doit s’agir d’un multiple de <codeph>snapInterval</codeph>, sauf si la valeur <codeph>snapInterval</codeph> est nulle. Si <codeph>stepSize</codeph> n’est pas un multiple, il est arrondi au multiple le plus proche supérieur ou égal à <codeph>snapInterval</codeph>. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Range:value:get"><apiName>value</apiName><shortdesc>
      La valeur actuelle pour cette plage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur actuelle pour cette plage.
      
      <p>Les modifications apportées à la propriété value sont limitées par la propriété <codeph>commitProperties()</codeph> pour être supérieures ou égales au <codeph>minimum</codeph>, inférieures ou égales au <codeph>maximum</codeph> et un multiple de <codeph>snapInterval</codeph> avec la méthode <codeph>nearestValidValue()</codeph>. </p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/setValue"><linktext>setValue</linktext></link><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
  Le composant ToggleButtonBase est la classe de base des composants de bouton Spark qui prennent en charge la propriété selected.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Etat désactivé du bouton lorsqu’il est sélectionné.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="downAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Etat abaissé du bouton lorsqu’il est sélectionné.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="overAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Etat survolé du bouton lorsqu’il est sélectionné.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="upAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Etat relevé du bouton lorsqu’il est sélectionné.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ToggleButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButtonBase
    <strong>Properties</strong>
    selected="false"
 
    <strong>events</strong>
    change="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant ToggleButtonBase est la classe de base des composants de bouton Spark qui prennent en charge la propriété <codeph>selected</codeph>. ToggleButton, CheckBox et RadioButton sont des sous-classes de ToggleButtonBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ToggleButtonBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la propriété selected du contrôle ToggleButtonBase change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>selected</codeph> du contrôle ToggleButtonBase change. Cet événement est distribué uniquement lorsque l’utilisateur actionne le contrôle à l’aide de la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ToggleButtonBase:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ToggleButtonBase:selected:get"><apiName>selected</apiName><shortdesc>
      Contient true si le bouton est à l’état abaissé, false s’il est à l’état relevé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient <codeph>true</codeph> si le bouton est à l’état abaissé, <codeph>false</codeph> s’il est à l’état relevé.
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:OverlayDepth"><apiName>OverlayDepth</apiName><shortdesc>
  La classe OverlayDepth définit les valeurs de profondeur par défaut pour différents éléments d’incrustation utilisés par Flex. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe OverlayDepth définit les valeurs de profondeur par défaut pour différents éléments d’incrustation utilisés par Flex. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiValue id="spark.components.supportClasses:OverlayDepth:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      Valeur de profondeur par défaut au-dessous de tous les éléments d’incrustation Flex. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur de profondeur par défaut au-dessous de tous les éléments d’incrustation Flex. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:DROP_INDICATOR"><apiName>DROP_INDICATOR</apiName><shortdesc>
	  Profondeur d’incrustation pour un indicateur de dépôt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Profondeur d’incrustation pour un indicateur de dépôt.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:FOCUS_PANE"><apiName>FOCUS_PANE</apiName><shortdesc>
	  Profondeur d’incrustation pour un volet de focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Profondeur d’incrustation pour un volet de focus.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:MASK"><apiName>MASK</apiName><shortdesc>
      Profondeur d’incrustation pour un masque. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Profondeur d’incrustation pour un masque. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:TOP"><apiName>TOP</apiName><shortdesc>
	  Valeur de profondeur par défaut au-dessus de tous les éléments d’incrustation Flex. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Valeur de profondeur par défaut au-dessus de tous les éléments d’incrustation Flex. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
  La classe ItemRenderer est la classe de base des fonctionnalités de rendu d’élément Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ItemRenderer
    <strong>Properties</strong>
    autoDrawBackground="true"
    selected="false"
    showsCaret="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:DataRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ItemRenderer est la classe de base des fonctionnalités de rendu d’élément Spark.
 
  <p>Les rendus d’élément prennent en charge des états d’affichage facultatifs. En règle générale, vous utilisez des états d’affichage de rendus d’éléments MXML afin de contrôler l’aspect d’un élément de données en fonction de l’interaction de l’utilisateur avec l’élément. La classe ItemRenderer prend en charge tous les états d’affichage, de sorte que vous puissiez utiliser ces rendus d’élément avec des classes à base de listes.</p>
 
  <p>Flex définit les états d’affichage suivants, que vous pouvez prendre en charge dans vos rendus d’élément : </p>
  <ul>
    <li>normal - l’élément de données n’a pas l’interaction avec l’utilisateur.</li>
    <li>hovered - la souris survole l’élément de données.</li>
    <li>selected - l’élément de données est sélectionné.</li>
    <li>dragging - l’élément de données est en cours de déplacement.</li>
    <li>normalAndShowCaret - l’élément de données a l’état Normal et a le focus dans la liste d’éléments. </li>
    <li>Hoveredandshowcaret - l’élément de données a l’état Hovered et a le focus dans la liste d’éléments.</li>
    <li>selectedAndShowCaret - l’élément de données a l’état Normal et a le focus dans la liste d’éléments.</li>
  </ul>
 
  <p>Lorsque l’utilisateur interagit avec un contrôle d’une manière qui modifie l’état d’affichage du rendu d’élément, Flex commence par déterminer si la fonctionnalité de rendu définit cet état d’affichage. Si le rendu d’élément prend en charge l’état d’affichage, Flex définit le rendu d’élément de sorte qu’il utilise cet état d’affichage. Si le rendu d’élément ne prend pas en charge l’état d’affichage, Flex n’a aucun effet.</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ItemRenderer:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:getCurrentRendererState"><apiName>getCurrentRendererState</apiName><shortdesc>
      Renvoie le nom de l’état à appliquer au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Chaîne spécifiant le nom de l’état à appliquer au rendu. 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie le nom de l’état à appliquer au rendu. Par exemple, un rendu d’élément List élémentaire renverrait la chaîne « normal », « hovered » ou « selected » pour spécifier l’état du rendu. Dans le cas d’interactions tactiles (ou d’interactions de souris dans lesquelles la sélection est ignorée), "down" et "downAndSelected" sont également des états importants.
     
      <p>Une sous-classe de l’objet ItemRenderer doit remplacer cette méthode pour renvoyer une valeur si le comportement souhaité est différent du comportement par défaut.</p>
     
      <p>Dans Flex 4.0, les 3 états principaux étaient "normal", "hovered" et "selected". Dans Flex 4.5, "down" et "downAndSelected" ont été ajoutés.</p>
     
      <p>L’ensemble complet des états pris en charge (par ordre de priorité) est le suivant : 
        <ul>
          <li>dragging</li>
          <li>downAndSelected</li>
          <li>selectedAndShowsCaret</li>
          <li>hoveredAndShowsCaret</li>
          <li>normalAndShowsCaret</li>
          <li>down</li>
          <li>selected</li>
          <li>hovered</li>
          <li>normal</li>
        </ul>
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:invalidateRendererState"><apiName>invalidateRendererState</apiName><shortdesc>
      Marque l’état du rendu comme non valide de sorte que le nouvel état soit défini lors d’une actualisation d’écran ultérieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Marque l’état du rendu comme non valide de sorte que le nouvel état soit défini lors d’une actualisation d’écran ultérieure.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Composant facultatif d’étiquette de fonctionnalité de rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      Composant facultatif d’étiquette de fonctionnalité de rendu d’élément. Ce composant est utilisé pour déterminer la valeur de la propriété <codeph>baselinePosition</codeph> dans le composant hôte de la fonctionnalité de rendu d’élément. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:autoDrawBackground:get"><apiName>autoDrawBackground</apiName><shortdesc>
      Spécifie si le rendu d’élément dessine l’arrière-plan de l’élément de données pendant l’interaction avec l’utilisateur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie si le rendu d’élément dessine l’arrière-plan de l’élément de données pendant l’interaction avec l’utilisateur. Les interactions englobent le déplacement de la souris au-dessus de l’élément, la sélection de l’élément et le déplacement du caret de l’élément. 
     
      <p>Si la valeur est définie sur <codeph>true</codeph>, l’arrière-plan pour le rendu d’élément est automatiquement dessiné et il dépend des styles définis (<codeph>contentBackgroundColor</codeph>, <codeph>alternatingItemColor</codeph>, <codeph>rollOverColor</codeph>, <codeph>downColor</codeph>, <codeph>selectionColor</codeph>) ainsi que de l’état du rendu d’élément. </p>
     
      <p>Si la valeur est définie sur <codeph>false</codeph>, le rendu d’élément ne dessine aucun arrière-plan. Votre rendu d’élément personnalisé est chargé de l’affichage des couleurs d’arrière-plan pour toutes les interactions avec les utilisateurs. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      Défini sur true lorsque l’utilisateur appuie sur un rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Défini sur <codeph>true</codeph> lorsque l’utilisateur appuie sur un rendu d’élément.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      Contient true si le rendu d’élément est en cours de glissement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si le rendu d’élément est en cours de glissement. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Défini sur true lorsque l’utilisateur survole avec la souris le rendu d’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Défini sur <codeph>true</codeph> lorsque l’utilisateur survole avec la souris le rendu d’élément.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      Index de l’élément dans le fournisseur de données du composant hôte du rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Index de l’élément dans le fournisseur de données du composant hôte du rendu d’élément.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      Chaîne à afficher dans le rendu d'élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      La chaîne à afficher dans l'option de rendu d'élément. 
     
      <p>Le composant hôte de la fonctionnalité de rendu d’élément peut utiliser la méthode <codeph>itemToLabel()</codeph> pour convertir l’élément de données en une chaîne devant être affichée par la fonctionnalité de rendu d’élément. </p>
     
      <p>Pour les contrôles tels que List et ButtonBar, vous pouvez utiliser les propriétés <codeph>labelField</codeph> ou <codeph>labelFunction</codeph> pour spécifier le champ de l’élément de données contenant la chaîne. Dans tous les autres cas, le composant hôte utilise la méthode <codeph>toString()</codeph> pour convertir l’élément de données en chaîne. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      Contient true si la fonctionnalité de rendu d’élément peut s’afficher comme étant sélectionnée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si la fonctionnalité de rendu d’élément peut s’afficher comme étant sélectionnée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Contient true si le rendu d’élément peut s’afficher comme focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si le rendu d’élément peut s’afficher comme focus.  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:GroupBase"><apiName>GroupBase</apiName><shortdesc>
  La classe GroupBase définit la classe de base des composants affichant des éléments visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" type="Number">
<description>
  En mode d’interaction tactile, le nombre de millisecondes à attendre après l’interaction de l’utilisateur a eu lieu avant l’affichage du composant dans un état visuellement abaissé.
 
  <p>La raison de ce délai tient au fait que lorsqu’un utilisateur lance un mouvement de défilement, nous ne souhaitons pas que les composants scintillent lorsqu’ils touchent l’écran. En utilisant un délai raisonnable, nous nous assurons que l’utilisateur obtient toujours des informations en retour lorsqu’il appuie sur un composant, sans que les informations en retour n’interviennent trop rapidement et ne s’affichent au cours d’une opération de défilement.</p>
  
  <p>Si le thème mobile est appliqué, la valeur par défaut pour ce style est de 100 ms pour les composants à l’intérieur d’un composant Scroller et de 0 ms pour les composants extérieurs à un composant Scroller.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton de défilement.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de surbrillance lorsque la souris survole le composant.
 
  <p>Ce style est applicable uniquement en mode <codeph>interactionMode</codeph> de la souris.</p>
 
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur de l’anneau de sélection lorsque le composant a le focus.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="uint">
<description>
  Couleur de l’arrière-plan d’un rendu d’élément lorsque l’élément est enfoncé
 
  <p>Si <codeph>downColor</codeph> est défini sur <codeph>undefined</codeph>, <codeph>downColor</codeph> n’est pas utilisé.</p>
 
  <p>La valeur par défaut du thème Spark est <codeph>undefined</codeph>. La valeur par défaut du thème Mobile est <codeph>0xE0E0E0</codeph>.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha lorsque le conteneur est désactivé. 
   </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur de l’arrière-plan pour ce composant.
 
  <p>Pour une liste, la modification de <codeph>contentBackgroundColor</codeph> changera le contenu couleur d’arrière-plan de la liste. Toutefois, si le rendu d’élément est opaque, l’utilisateur pourra ne pas voir la différence. La couleur du rendu d’élément est affectée par <codeph>alternatingItemColors</codeph>. Dans le thème Spark, par défaut, les rendus d’élément sont transparents (<codeph>alternatingItemColors = undefined</codeph>). Cependant, dans le thème Mobile, les rendus d’élément sont opaques par défaut (<codeph>alternatingItemColors = 0xFFFFFF</codeph>).</p>
  
  <p>La valeur par défaut du thème Spark est <codeph>0xFFFFFF</codeph>. La valeur par défaut du thème mobile est <codeph>0xF0F0F0</codeph>.</p> 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu à ce composant. 
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur principale d’un composant. 
   
  </description>
<default>0xCCCCCC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description>
  Couleurs à utiliser pour les arrière-plans des éléments de la liste. La valeur est un tableau d'une couleur ou plus. Les arrière-plans des éléments de liste prennent les couleurs du tableau par alternance. 
 
  <p>La valeur par défaut du thème Spark est <codeph>undefined</codeph>. La valeur par défaut du thème Mobile est <codeph>0xFFFFFF</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur d’accentuation utilisée par les habillages des composants. L’habillage de bouton par défaut utilise cette couleur pour teinter l’arrière-plan. La mise en surbrillance du rail du curseur utilise cette couleur.  
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:GroupBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:GroupBase
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    horizontalScrollPosition="null"
    luminosityClip="false"
    luminosityInvert="false"
    layout="BasicLayout"
    mask=""
    maskType="clip"
    mouseEnabledWhereTransparent="true"
    resizeMode="noScale"
    verticalScrollPosition="no default"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors="undefined"
    baselineShift="0"
    blockProgression="tb"
    breakOpportunity="auto"
    cffHinting="horizontalStem"
    chromeColor="0xCCCCCC"
    color="0x000000"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    clearFloats="none"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    disabledAlpha="0.5"
    dominantBaseline="auto"
    firstBaselineOffset="auto"
    focusColor="0x70B2EE"
    focusedTextSelectionColor="A8C6EE"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="E8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="cff"
    rollOverColor="0xCEDBEF"
    symbolColor="0x000000"
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="interWord"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor="0xE8E8E8"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe GroupBase définit la classe de base des composants affichant des éléments visuels. Un composant de groupe ne contrôle pas la présentation des éléments visuels qu’il contient. En revanche, la présentation est gérée par un composant de présentation séparé. 
   </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:GroupBase:GroupBase"><apiName>GroupBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:GroupBase:containsElement"><apiName>containsElement</apiName><shortdesc>
      Détermine si l’objet IVisualElement spécifié est un enfant de l’occurrence du conteneur ou l’occurrence en tant que telle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true si l’élément est un descendant du conteneur.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Objet enfant à tester.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si l’objet IVisualElement spécifié est un enfant de l’occurrence du conteneur ou l’occurrence en tant que telle. La recherche est approfondie, c’est-à-dire que si l’élément est un enfant, petit-enfant, arrière-petit-enfant, etc. de ce conteneur, la valeur renvoyée est true.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc conref="mx.core.UIComponent:createChildren()">
      Si l’objet de mise en page n’a pas encore été défini, createChildren() attribue à ce conteneur un objet de mise en page par défaut, BasicLayout.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent:createChildren()">
      <p>Si l’objet de mise en page n’a pas encore été défini, createChildren() attribue à ce conteneur un objet de mise en page par défaut, BasicLayout.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Modification de la position de défilement horizontal.
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Prend les valeurs suivantes :  
      <ul>
      <li> 
      <codeph>END</codeph> Renvoie le delta de défilement provoquant la justification à droite du rectangle scrollRect sur la zone de contenu.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Renvoie le delta de défilement provoquant la justification à gauche du rectangle scrollRect sur la zone de contenu.
      </li>
     
      <li> 
      <codeph>LEFT</codeph> Renvoie le delta de défilement provoquant la justification à gauche du rectangle scrollRect avec le premier élément qui englobe ou qui se situe à gauche du bord gauche du rectangle scrollRect.
      </li>
     
      <li>
      <codeph>PAGE_LEFT</codeph> Renvoie le delta de défilement provoquant la justification à droite du rectangle scrollRect avec le premier élément qui englobe ou qui se situe à gauche du bord gauche du rectangle scrollRect.
      </li>
     
      <li> 
      <codeph>PAGE_RIGHT</codeph> Renvoie le delta de défilement provoquant la justification à gauche du rectangle scrollRect avec le premier élément qui englobe ou qui se situe à droite du bord droit du rectangle scrollRect.
      </li>
     
      <li> 
      <codeph>RIGHT</codeph> Renvoie le delta de défilement provoquant la justification à droite du rectangle scrollRect avec le premier élément qui englobe ou qui se situe à droite du bord droit du rectangle scrollRect.
      </li>
           </ul>
     
      <p>L’implémentation appelle les méthodes <codeph>getElementBoundsLeftOfScrollRect()</codeph> et <codeph>getElementBoundsRightOfScrollRect()</codeph> pour déterminer les limites des éléments. Les classes de présentation remplacent généralement ces méthodes à la place de la méthode <codeph>getHorizontalScrollPositionDelta()</codeph>.</p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Modification de la position de défilement vertical.
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Prend les valeurs suivantes :  
      <ul>
      <li> 
      <codeph>DOWN</codeph> Renvoie le delta de défilement provoquant la justification en bas du rectangle scrollRect avec le premier élément qui englobe ou qui se situe en dessous du bord inférieur du rectangle scrollRect.
      </li>
     
      <li> 
      <codeph>END</codeph> Renvoie le delta de défilement provoquant la justification en bas du rectangle scrollRect sur la zone de contenu.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Renvoie le delta de défilement provoquant la justification en haut du rectangle scrollRect sur la zone de contenu.
      </li>
     
      <li> 
      <codeph>PAGE_DOWN</codeph> Renvoie le delta de défilement provoquant la justification en haut du rectangle scrollRect avec le premier élément qui englobe ou qui se situe en dessous du bord inférieur du rectangle scrollRect.
      </li>
     
      <codeph>PAGE_UP</codeph>
      <li>
      Renvoie le delta de défilement provoquant la justification en bas du rectangle scrollRect avec le premier élément qui englobe ou qui se situe au-dessus du bord supérieur du rectangle scrollRect.
      </li>
           <li> 
      <codeph>UP</codeph> Renvoie le delta de défilement provoquant la justification en haut du rectangle scrollRect avec le premier élément qui englobe ou qui se situe au-dessus du bord supérieur du rectangle scrollRect.
      </li>
           </ul>
     
      <p>L’implémentation appelle les méthodes <codeph>getElementBoundsAboveScrollRect()</codeph> et <codeph>getElementBoundsBelowScrollRect()</codeph> pour déterminer les limites des éléments. Les classes de présentation remplacent généralement ces méthodes à la place de la méthode <codeph>getVerticalScrollPositionDelta()</codeph>. </p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVirtualElementAt"><apiName>getVirtualElementAt</apiName><shortdesc>
      Les présentations respectant l’indicateur useVirtualLayout utilisent cette méthode lors de l’exécution de la méthode updateDisplayList() pour obtenir des éléments de présentation « en vue », c’est-à-dire </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Elément validé à l’index spécifié.
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément à récupérer.
      </apiDesc></apiParam><apiParam><apiItemName>eltWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Si elle est spécifiée, la largeur initiale de l’élément récemment créé ou recyclé. 
      </apiDesc></apiParam><apiParam><apiItemName>eltHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Si elle est spécifiée, la largeur initiale de l’élément récemment créé ou recyclé. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Les présentations respectant l’indicateur <codeph>useVirtualLayout</codeph> utilisent cette méthode lors de l’exécution de la méthode updateDisplayList() pour obtenir des éléments de présentation « en vue », c’est-à-dire des éléments présents dans la propriété scrollRect du groupe. 
     
      <p>Si l’élément à renvoyer n’est pas déjà un enfant visible, c’est-à-dire s’il a été créé ou recyclé et que eltWidth ou eltHeight est spécifié, la taille initiale de l’élément est définie avec setLayoutBoundsSize() avant sa validation. Cela est important pour les composants, tels que le texte, qui est redistribué lorsque la mise en forme est justifiée en fonction de la largeur ou de la hauteur du groupe. </p>
      
      <p>L’élément de présentation renvoyé aura été validé.</p>
     
      <p>Cette méthode crée ou recycle et valide à la demande les éléments de présentation.</p>
     
      <p>Cette méthode n’est pas destinée à être appelée directement. Elle est appelée par les présentations qui prennent en charge la virtualisation.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:setContentSize"><apiName>setContentSize</apiName><shortdesc>
      Définit les propriétés contentWidth et contentHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Nouvelle valeur de <codeph>contentWidth</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Nouvelle valeur de <codeph>contentHeight</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit les propriétés <codeph>contentWidth</codeph> et <codeph>contentHeight</codeph>. Cette méthode est destinée aux développeurs de classe de présentation, qui doivent l’appeler à partir de méthodes <codeph>updateDisplayList()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:GroupBase:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      Si la valeur est true, la mesure et la présentation sont effectuées lorsque la position ou la taille de l’enfant est modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la mesure et la présentation sont effectuées lorsque la position ou la taille de l’enfant est modifiée. <codeph>Si la valeur est false, mesure et la mise en page sont lieu qu’une seule fois, lorsque les enfants sont ajoutés ou supprimés dans le conteneur. </codeph>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:GroupBase:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentHeight:get"><apiName>contentHeight</apiName><shortdesc conref="spark.core.IViewport#contentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentWidth:get"><apiName>contentWidth</apiName><shortdesc conref="spark.core.IViewport#contentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:layout:get"><apiName>layout</apiName><shortdesc>
      Objet de présentation de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>spark.layouts.BasicLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Objet de présentation de ce conteneur. Cet objet est responsable des opérations de mesure et de présentation des éléments visuels du conteneur.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      Propriété qui contrôle si le masque de luminosité écrête le contenu masqué. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Propriété qui contrôle si le masque de luminosité écrête le contenu masqué. Cette propriété a un effet uniquement si un masque de type MaskType.LUMINOSITY a été appliqué à l’élément graphique.   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#GroupBase/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      Une propriété qui contrôle le calcul de la valeur de couleur RVB d’un élément graphique masqué par un masque de luminosité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Une propriété qui contrôle le calcul de la valeur de couleur RVB d’un élément graphique masqué par un masque de luminosité. Si elle est définie sur true, la valeur de couleur RVB d’un pixel dans le contenu source est inversée et multipliée par la région correspondante dans le masque. Si elle est définie sur false, la valeur de couleur RVB d’un pixel dans le contenu source est utilisée directement.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:maskType:get"><apiName>maskType</apiName><shortdesc>
      Type de masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP 
           </apiDefaultValue></apiValueDef><apiDesc>
      <p>Type de masque. Les valeurs possibles sont <codeph>MaskType.CLIP</codeph>, <codeph>MaskType.ALPHA</codeph> ou <codeph>MaskType.LUMINOSITY</codeph>.</p> 
           <p><b>Masquage d’écrêtage </b></p>
     
      <p>Lors d’un masquage en mode écrêtage, un masque d’écrêtage est réduit à 1 bit. Cela signifie qu’un masque n’affecte pas l’opacité d’un pixel dans le contenu source ; il ne modifie pas la valeur, si le pixel correspondant dans le masque possède une valeur alpha autre que zéro ou le rend complètement transparent, si la valeur alpha du pixel du masque est égale à zéro. </p>
     
      <p><b>Masquage alpha </b></p>
     
      <p>En mode alpha, l’opacité de chaque pixel du contenu source est multipliée par l’opacité de la région correspondante du masque. Par exemple, un pixel du contenu source d’une opacité de 1 qui est masqué par une région d’opacité de .5 produira une opacité de .5. Un pixel source d’une opacité de .8 masqué par une région d’une opacité de .5 affichera une opacité de .4. </p>
     
      <p><b>Masquage de luminosité</b></p>
     
      <p>Un masque de luminosité, parfois appelé « masque léger », fonctionne de manière analogue à un masque alpha, sauf que l’opacité et la valeur de couleur RVB d’un pixel dans le contenu source sont multipliées par l’opacité et la valeur de couleur RVB de la région correspondante dans le masque. </p>
     
      <p>Le masquage de luminosité n’est pas une fonctionnalité native de Flash, mais est disponible dans des outils Adobe Creative Suite tels qu’Adobe Illustrator et Adobe Photoshop. Pour obtenir l’effet visuel d’un masque de luminosité dans le contenu rendu par Flash, un élément graphique spécifiant un masque de luminosité instancie en fait un filtre Shader qui simule l’aspect visuel d’un masque de luminosité tel qu’il est rendu dans les outils Adobe Creative Suite. </p>
     
      <p>Les objets masqués par des masques de luminosité peuvent définir des propriétés pour contrôler la valeur de couleur RVB et l’écrêtage du masque. Voir les attributs de luminosityInvert et luminosityClip. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mask:get"><apiName>mask</apiName><shortdesc>
      Définit le masque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Définit le masque. Le masque est ajouté à la liste d’affichage. Le masque ne doit pas déjà être présent dans une liste d’affichage ni dans le tableau des éléments.  
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/mask"><linktext>flash.display.DisplayObject.mask</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mouseEnabledWhereTransparent:get"><apiName>mouseEnabledWhereTransparent</apiName><shortdesc>
      Lorsque la valeur est true, cette propriété s'assure que toutes les limites de l'occurrence Groupe répondent aux événements de souris (clics, survols, etc.).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsque la valeur est <codeph>true</codeph>, cette propriété s'assure que toutes les limites de l'occurrence Groupe répondent aux événements de souris (clics, survols, etc.). Cette propriété n’entre en vigueur que si des événements de souris, tactiles ou de mouvement flash player sont ajoutés à cette occurrence. En outre, il suppose que les appels à addEventListener()/removeEventListener() ne sont pas superflus.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:overlay:get"><apiName>overlay</apiName><shortdesc>
      Plan d’incrustation de ce groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:DisplayLayer</apiValueClassifier></apiValueDef><apiDesc>
      Plan d’incrustation de ce groupe. Tous les objets du plan d’incrustation sont affichés au-dessus des éléments du groupe. 
           <p><b>Remarque : </b>ne conservez pas cet objet car le groupe le détruit et le crée à la demande. </p>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:resizeMode:get"><apiName>resizeMode</apiName><shortdesc>
      Mode ResizeMode de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Mode ResizeMode de ce conteneur. Si le mode de redimensionnement est défini sur <codeph>ResizeMode.NO_SCALE</codeph>, le redimensionnement est effectué en plaçant les enfants à l’aide des nouvelles largeur et hauteur. Si le mode de redimensionnement mode est défini sur <codeph>ResizeMode.NOSCALE</codeph>, tous les enfants conservent leur largeur et leur hauteur sans mise à l’échelle et sont mis à l’échelle de façon à modifier la taille. 
     
     <p>La valeur par défaut est <codeph>ResizeMode.NO_SCALE</codeph>, ce qui correspond à "noScale". </p>
     
     </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
  La classe SkinnableComponent définit la classe de base des composants dont l’habillage peut être configuré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><Exclude kind="style" name="themeColor"/><styles><style name="skinClass" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Nom de la classe d’habillage à utiliser pour ce composant. L’habillage doit être une classe qui étend UIComponent.  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style name="errorSkin" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Nom de la classe d’habillage à utiliser pour ce composant lorsqu’une erreur de validation se produit.  
  
  </description>
<default>spark.skins.spark.ErrorSkin
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SkinnableComponent définit la classe de base des composants dont l’habillage peut être configuré. Les habillages utilisés par une classe SkinnableComponent sont généralement des classes enfant de la classe Skin.
 
  <p>Associe une classe d’habillage à une classe de composant en définissant la propriété de style <codeph>skinClass</codeph> de la classe de composant. Vous pouvez définir la propriété <codeph>skinClass</codeph> en langage CSS, comme l’illustre l’exemple suivant :</p>
 
  <pre>MyComponent
  {
    skinClass: ClassReference("my.skins.MyComponentSkin")
  }</pre>
 
  <p>L’exemple suivant définit la propriété <codeph>skinClass</codeph> en langage MXML :</p>
 
  <pre>
  &lt;MyComponent skinClass="my.skins.MyComponentSkin"/></pre>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Skin"><linktext>spark.components.supportClasses.Skin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SkinnableComponent:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:attachSkin"><apiName>attachSkin</apiName><shortdesc>
      Crée l’habillage du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée l’habillage du composant. Vous n’appelez pas cette méthode directement. Flex l’appelle automatiquement lors de l’appel des méthodes <codeph>createChildren()</codeph> ou <codeph>UIComponent.commitProperties()</codeph>. En règle générale, une sous-classe de SkinnableComponent ne remplace pas cette méthode.
     
      <p>Cette méthode instancie l’habillage du composant, ajoute l’habillage en tant qu’enfant du composant et résout toutes les associations de parties d’habillage.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:clearSkinParts"><apiName>clearSkinParts</apiName><shortdesc>
      Supprime les références aux parties d’habillages.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Supprime les références aux parties d’habillages. Vous n’appelez pas cette méthode directement. Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>detachSkin()</codeph>.
     
      <p>En règle générale, les sous-classes de SkinnableComponent ne remplacent pas cette méthode.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:createDynamicPartInstance"><apiName>createDynamicPartInstance</apiName><shortdesc>
      Crée une occurrence d’une partie d’habillage dynamique. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Occurrence de la partie ou null s’il est impossible de créer la partie. 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une occurrence d’une partie d’habillage dynamique. Les parties d’habillage dynamiques doivent toujours être instanciées par cette méthode et non être instanciées directement par l’appel de la méthode <codeph>newInstance()</codeph> sur la fabrique. Cette méthode crée la partie, mais elle ne l’ajoute pas à la liste d’affichage. Le composant doit appeler la méthode <codeph>Group.addElement()</codeph> ou la méthode appropriée pour ajouter la partie d’habillage à la liste d’affichage. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:detachSkin"><apiName>detachSkin</apiName><shortdesc>
      Détruit et supprime l’habillage de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Détruit et supprime l’habillage de ce composant. Vous n’appelez pas cette méthode directement. Flex l’appelle automatiquement lorsqu’un habillage est modifié lors de l’exécution. Cette méthode supprime l’habillage et efface toutes les associations de parties.
     
      <p>En règle générale, les sous-classes de SkinnableComponent ne remplacent pas cette méthode.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:findSkinParts"><apiName>findSkinParts</apiName><shortdesc>
      Recherchez les parties d’habillage dans la classe d’habillage et affectez-les aux propriétés du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Recherchez les parties d’habillage dans la classe d’habillage et affectez-les aux propriétés du composant. Vous n’appelez pas cette méthode directement. Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>attachSkin()</codeph>. En règle générale, une sous-classe de SkinnableComponent ne remplace pas cette méthode.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      Renvoie le nom de l’état à appliquer à l’habillage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Chaîne spécifiant le nom de l’état à appliquer à l’habillage.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie le nom de l’état à appliquer à l’habillage. Par exemple, un composant Button peut renvoyer la chaîne « up », « down », « over » ou « disabled » pour spécifier l’état.
     
      <p>Une sous-classe de SkinnableComponent doit remplacer cette méthode pour renvoyer une valeur.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getDynamicPartAt"><apiName>getDynamicPartAt</apiName><shortdesc>
      Renvoie une occurrence spécifique d’une partie dynamique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Occurrence de la partie ou null si la partie n’existe pas.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie dynamique.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de la partie dynamique.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie une occurrence spécifique d’une partie dynamique.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:invalidateSkinState"><apiName>invalidateSkinState</apiName><shortdesc>
      Marque le composant de sorte que le nouvel état de l’habillage soit défini lors d’une actualisation d’écran ultérieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Marque le composant de sorte que le nouvel état de l’habillage soit défini lors d’une actualisation d’écran ultérieure.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:numDynamicParts"><apiName>numDynamicParts</apiName><shortdesc>
      Renvoie le nombre d’occurrences d’une partie dynamique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Nombre d’occurrences de la partie dynamique.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie dynamique.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie le nombre d’occurrences d’une partie dynamique.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      Appelée lorsqu’une partie d’habillage est ajoutée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Occurrence de la partie. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsqu’une partie d’habillage est ajoutée. Vous n’appelez pas cette méthode directement. Dans le cas des parties statiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>attachSkin()</codeph>. Dans le cas des parties dynamiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>createDynamicPartInstance()</codeph>. 
     
      <p>Remplacez cette fonction pour associer un comportement à la partie. Si vous souhaitez remplacer le comportement pour une partie d’habillage héritée d’une classe de base, n’appelez pas la méthode <codeph>super.partAdded()</codeph>. Dans tous les autres cas, vous devez toujours appeler la méthode <codeph>super.partAdded()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      Appelée lorsqu’une occurrence de partie d’habillage est supprimée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Occurrence de la partie. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsqu’une occurrence de partie d’habillage est supprimée. Vous n’appelez pas cette méthode directement. Dans le cas des parties statiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>detachSkin()</codeph>. Dans le cas des parties dynamiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>removeDynamicPartInstance()</codeph>. 
     
      <p>Remplacez cette fonction pour supprimer le comportement de la partie.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:removeDynamicPartInstance"><apiName>removeDynamicPartInstance</apiName><shortdesc>
      Supprime une occurrence d’une partie dynamique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Occurrence de la partie. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime une occurrence d’une partie dynamique. Vous devez appeler cette méthode avant de supprimer une partie dynamique. Cette méthode ne supprime pas la partie de la liste d’affichage.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      Etat à utiliser pour faire correspondre les pseudo-sélecteurs CSS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Etat à utiliser pour faire correspondre les pseudo-sélecteurs CSS. Ce remplacement renvoie l’état actuel de l’habillage et non l’état du composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:skin:get"><apiName>skin</apiName><shortdesc>
      Occurrence de la classe d’habillage de cette occurrence de composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="skinChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:UIComponent"/></apiValueDef><apiDesc>
      Occurrence de la classe d’habillage de cette occurrence de composant. Il s’agit d’une propriété en lecture seule définie automatiquement lorsque Flex appelle la méthode <codeph>attachSkin()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:suggestedFocusSkinExclusions:get"><apiName>suggestedFocusSkinExclusions</apiName><shortdesc>
      Répertorie les parties d’habillage exclues des images bitmap capturées et utilisées pour afficher le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Répertorie les parties d’habillage exclues des images bitmap capturées et utilisées pour afficher le focus. Cette liste est utilisée uniquement si la propriété <codeph>focusSkinExclusions</codeph> de l’habillage est <codeph>null</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TextBase"><apiName>TextBase</apiName><shortdesc>
  Classe de base des contrôles Spark Text (par exemple, Label et RichText) qui affichent du texte à l’aide de styles CSS pour le format par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="uint">
<description>
  La couleur de l’arrière-plan de l’ensemble du cadre de délimitation de ce composant. Si ce style est <codeph>undefined</codeph> aucun arrière-plan n’est dessiné. Dans le cas contraire, cette couleur RVB est dessinée avec un niveau alpha déterminé par le style <codeph>backgroundAlpha</codeph>.
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="Number">
<description>
  Le niveau alpha de la couleur définie par le style <codeph>backgroundColor</codeph>. Les valeurs possibles sont comprises entre 0.0 et 1.0.
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IDisplayText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Classe de base des contrôles Spark Text (par exemple, Label et RichText) qui affichent du texte à l’aide de styles CSS pour le format par défaut.
 
  <p>Outre la possibilité d’ajouter une propriété <codeph>text</codeph>, cette classe ajoute également les propriétés <codeph>maxDisplayedLines</codeph> et <codeph>isTruncated</codeph> afin de prendre en charge la troncature. </p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:TextBase:TextBase"><apiName>TextBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:TextBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc>
	  Rapport de propriété en lecture seule si le texte a été tronqué. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Rapport de propriété en lecture seule si le texte a été tronqué. 
	 
	  <p>La troncature de texte signifie le remplacement du texte superflu à l’aide d’un indicateur de troncature, tel que « ... ». L’indicateur de troncature dépend des paramètres régionaux. Il n’est spécifié par la ressource « truncationIndicator » du groupe de ressources principal. </p>
	 
      <p>Si <codeph>maxDisplayedLines</codeph> est 0, aucune troncature ne se produit. Au lieu de cela, le texte est tout simplement écrêté s’il est supérieur aux limites du composant. </p>
     
      <p>Si <codeph>maxDisplayedLines</codeph> est un entier positif, le texte sera tronquée si nécessaire, pour réduire le nombre de lignes à cet entier. </p>
     
      <p>Si la valeur de <codeph>maxDisplayedLines</codeph> est -1, le texte sera tronqué afin d’afficher autant de lignes que possible dans la hauteur du composant. </p>
     
      <p>La troncature s’effectue uniquement si la valeur du style <codeph>lineBreak</codeph> est <codeph>"toFit"</codeph> ; la valeur de cette propriété est ignorée si <codeph>lineBreak</codeph> est <codeph>"explicit"</codeph>. </p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc>
      Entier qui détermine si et où le texte est tronqué. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Entier qui détermine si et où le texte est tronqué. 
	 
	  <p>La troncature de texte signifie le remplacement du texte superflu à l’aide d’un indicateur de troncature, tel que « ... ». L’indicateur de troncature dépend des paramètres régionaux. Il n’est spécifié par la ressource « truncationIndicator » du groupe de ressources principal. </p>
     
      <p>Si la valeur est 0, aucune troncature se produit. Au lieu de cela, le texte est tout simplement écrêté s’il est supérieur aux limites du composant. </p>
     
      <p>Si la valeur est un entier positif, le texte sera tronquée si nécessaire, pour réduire le nombre de lignes à cet entier. </p>
     
      <p>Si la valeur est -1, le texte sera tronqué afin d’afficher autant de lignes que possible dans la hauteur du composant. </p>
     
      <p>La troncature s’effectue uniquement si la valeur du style <codeph>lineBreak</codeph> est <codeph>"toFit"</codeph> ; la valeur de cette propriété est ignoré si <codeph>lineBreak</codeph> est <codeph>"explicit"</codeph>. </p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:showTruncationTip:get"><apiName>showTruncationTip</apiName><shortdesc>
	  Propriété contrôlant si le composant doit afficher une info-bulle toolTip lorsque le texte a été tronqué. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Propriété contrôlant si le composant doit afficher une info-bulle toolTip lorsque le texte a été tronqué. 
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:text:get"><apiName>text</apiName><shortdesc>
      Texte affiché par ce composant de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte affiché par ce composant de texte. 
	 
      <p>La mise en forme de ce texte est contrôlée par des styles CSS. Les styles pris en charge dépendent de la sous-classe. </p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
  La classe ScrollBarBase facilite le positionnement de la partie affichée des données lorsque le volume de données à afficher dans une zone est trop important.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style inherit="no" name="smoothScrolling" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
 Cette propriété détermine si la barre de défilement doit faire l’objet d’une animation progressive lors de la pagination et de l’incrémentation ou de la décrémentation. Si la valeur est false, les opérations de pagination et d’incrémentation ou de décrémentation passent directement aux emplacements cible. Lorsque la valeur est true, la barre de défilement et le contenu déplacé font l’objet d’une animation jusqu’à l’emplacement cible.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  Nombre de millisecondes entre les événements de page si l’utilisateur clique sur le rail et maintient le bouton de la souris enfoncé.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  Nombre de millisecondes entre le premier événement de la page et les événements de page suivants.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  Si la valeur est true (valeur par défaut), faire glisser le curseur de la barre de défilement à l’aide de la souris met immédiatement à jour sa valeur. Si la valeur est false, la valeur de la barre de défilement est uniquement mise à jour lorsque l’utilisateur relâche le bouton de la souris.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="autoThumbVisibility" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  Si la valeur est true (valeur par défaut), la visibilité du curseur est réinitialisée à chaque fois que la taille est mise à jour. Les remplacements de <codeph>updateSkinDisplayList()</codeph> dans <codeph>HScrollBar</codeph> et <codeph>VScrollBar</codeph> font apparaître la case de défilement si elle est plus petite que la zone, sauf si ce style est false. Définissez ce style sur false pour contrôler la visibilité du curseur directement.   
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fixedThumbSize" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  Si la valeur est true, la taille du curseur le long de l’axe de la barre de défilement correspond à sa taille préférée.
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="inactive" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10">
<description>
  Etat inactif. Cet l’état indique qu’il n’existe pas de contenu à faire défiler, ce qui signifie que <codeph>maximum</codeph> &lt;= <codeph>minimum</codeph>. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="decrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Habillage facultatif définissant un bouton qui, lorsqu’il est actionné, déplace la barre de défilement vers le haut. Cette propriété équivaut à un pas de diminution pour la propriété <codeph>value</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar up.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Habillage facultatif définissant un bouton qui, lorsqu’il est actionné, déplace la barre de défilement vers le bas. Cette propriété équivaut à un pas d’augmentation pour la propriété <codeph>value</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar down.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ScrollBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ScrollBarBase
    <strong>Properties</strong>
    pageSize="20"
    snapInterval="1"
    viewport="null"
     <strong>Styles</strong>
    autoThumbVisibility="true"
    fixedThumbSize="false"
    repeatDelay="500"
    repeatInterval="35"
    smoothScrolling="true"
    symbolColor="0x000000"
  /&gt;
  </pre> 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ScrollBarBase facilite le positionnement de la partie affichée des données lorsque le volume de données à afficher dans une zone est trop important. La classe ScrollBarBase affiche une paire de barres de défilement et une fenêtre. Dans ce contexte, une fenêtre est un composant UIComponent qui implémente une interface IViewport, par exemple Group.
  
  <p>Ce contrôle étend la classe TrackBase. Il s’agit de la classe de base des contrôles HScrollBar et VScrollBar.</p> 
 
  <p>Une barre de défilement se compose d’un rail, d’un curseur de défilement de taille variable et de deux boutons fléchés facultatifs. Pour calculer l’état d’affichage, la classe ScrollBarBase utilise quatre paramètres :</p>
   <ul>
    <li><codeph>minimum</codeph> : valeur minimale de la plage.</li>
    <li><codeph>maximum</codeph> : valeur maximale de la plage.</li>
    <li><codeph>value</codeph> : position actuelle, comprise entre les valeurs minimale et maximale de la plage.</li>
    <li>Taille de la fenêtre : nombre d’éléments de la plage pouvant être affichés simultanément. Le nombre d’éléments doit être inférieur ou égal à la plage, celle-ci correspondant à la série de valeurs comprises entre la valeur minimale et la valeur maximale de la plage.</li>
  </ul>
    </apiDesc></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ScrollBarBase:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animatePaging"><apiName>animatePaging</apiName><shortdesc>
     Anime l’opération pour passer à la valeur newValue. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>La valeur finale en cours de pagination. 
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiType value="Number"/><apiDesc>La quantité de mouvement horizontal ou vertical demandée. Cette valeur sert à calculer, avec le style <codeph>repeatInterval</codeph>, la durée totale pour passer à la nouvelle valeur. <codeph>pageSize</codeph> est généralement définie dynamiquement par le changeur de couleur contenant pour la valeur requise pour afficher le contenu à une limite de contenu logique. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Anime l’opération pour passer à la valeur <codeph>newValue</codeph>. Le paramètre <codeph>pageSize</codeph> sert à calculer le temps nécessaire à accéder à cette valeur, de sorte que le temps nécessaire pour animer une opération de pagination soit à peu près identique à la version non animée ; les deux opérations doivent se terminer au même endroit au même moment. 
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animateStepping"><apiName>animateStepping</apiName><shortdesc>
     Anime l’opération pour modifier l’instruction vers la valeur newValue. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>La valeur finale en cours de modification d’instruction. 
     </apiDesc></apiParam><apiParam><apiItemName>stepSize</apiItemName><apiType value="Number"/><apiDesc>La quantité de la modification d’instruction demandée. Cette valeur sert à calculer, avec le style <codeph>repeatInterval</codeph>, la durée totale pour modifier l’instruction vers la nouvelle valeur. <codeph>stepSize</codeph> est généralement définie dynamiquement par le changeur de couleur contenant pour la valeur requise pour afficher le contenu à une limite de contenu logique. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Anime l’opération pour modifier l’instruction vers la valeur <codeph>newValue</codeph>. Le paramètre <codeph>stepSize</codeph> sert à calculer le temps nécessaire à accéder à cette valeur, de sorte que le temps nécessaire pour animer une opération de pagination soit à peu près identique à la version non animée ; les deux opérations doivent se terminer au même endroit au même moment. 
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonDownHandler"><apiName>button_buttonDownHandler</apiName><shortdesc>
      Traite un clic sur le bouton d’incrémentation ou de décrémentation de la barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet événement.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Traite un clic sur le bouton d’incrémentation ou de décrémentation de la barre de défilement. Le clic provoque une incrémentation ou une décrémentation, qui est répétée si le bouton reste enfoncé. Le délai avant le début des répétitions et le délai entre les événements répétés sont déterminés par les styles <codeph>repeatDelay</codeph> et <codeph>repeatInterval</codeph> des objets Button sous-jacents.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonUpHandler"><apiName>button_buttonUpHandler</apiName><shortdesc>
      Gère le relâchement du bouton d’incrémentation ou de décrémentation de la barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet événement.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gère le relâchement du bouton d’incrémentation ou de décrémentation de la barre de défilement. Cette opération met fin à l’opération d’incrémentation ou de décrémentation démarrée sur ce bouton par l’événement buttonDown.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Ajoute la valeur pageSize à value ou la soustrait de cette dernière.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Détermine si l’action de pagination doit augmenter (<codeph>true</codeph>) ou diminuer (<codeph>false</codeph>) la valeur <codeph>value</codeph>. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute la valeur <codeph>pageSize</codeph> à <codeph>value</codeph> ou la soustrait de cette dernière. Dans le cas d’une addition, la nouvelle valeur <codeph>value</codeph> est le multiple de <codeph>pageSize</codeph> le plus proche supérieur à la valeur actuelle de <codeph>value</codeph>. Dans le cas d’une soustraction, la nouvelle valeur <codeph>value</codeph> est le multiple de <codeph>pageSize</codeph> le plus proche inférieur à la valeur actuelle. La valeur minimale de <codeph>value</codeph> est <codeph>pageSize</codeph>. 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ScrollBarBase:pageSize:get"><apiName>pageSize</apiName><shortdesc>
      Le changement dans la valeur de la propriété value lorsque vous appelez la méthode changeValueByPage().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>20
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le changement dans la valeur de la propriété <codeph>value</codeph> lorsque vous appelez la méthode <codeph>changeValueByPage()</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      La valeur de la barre de défilement lorsque le bouton de la souris est relâché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur de la barre de défilement lorsque le bouton de la souris est relâché. 
     
      <p>Si le style <codeph>liveDragging</codeph> est défini sur false, la valeur de la barre de défilement est uniquement définie lorsque l’utilisateur relâche le bouton de la souris. La valeur n’est pas mise à jour pendant que le curseur est déplacé. </p>
     
      <p>Cette propriété est mise à jour lorsque la barre de défilement se déplace, même si <codeph>liveDragging</codeph> est false. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:viewport:get"><apiName>viewport</apiName><shortdesc>
      Fenêtre contrôlée par cette barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Fenêtre contrôlée par cette barre de défilement. Si une fenêtre est spécifiée, toute modification apportée à sa taille réelle, à la taille de son contenu et à la position de défilement provoque l’exécution des méthodes ScrollBarBase correspondantes :
      <ul>
      <li><codeph>viewportResizeHandler()</codeph></li>
      <li><codeph>contentWidthChangeHandler()</codeph></li>
      <li><codeph>contentHeightChangeHandler()</codeph></li>
      <li><codeph>viewportVerticalScrollPositionChangeHandler()</codeph></li>
      <li><codeph>viewportHorizontalScrollPositionChangeHandler()</codeph></li>
      </ul>
     
      <p>Les classes VScrollBar et HScrollBar remplacent ces méthodes pour conserver leur propriétés <codeph>pageSize</codeph>, <codeph>maximum</codeph>, et <codeph>value</codeph> en synchronisation avec le port d’affichage. De même, elles remplacent leurs méthodes <codeph>changeValueByPage()</codeph> et <codeph>changeValueByStep()</codeph> pour utiliser les méthodes <codeph>scrollPositionDelta</codeph> su port d’affichage pour calculer les décalages de page et d’étape.</p>
        
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:snapInterval:set"><apiName>snapInterval</apiName><shortdesc>
      
      La propriété snapInterval contrôle les valeurs valides de la propriété value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      La propriété snapInterval contrôle les valeurs valides de la propriété <codeph>value</codeph>. Si elles ne sont pas égales à zéro, les valeurs valides correspondent à la somme du <codeph>minimum</codeph> et des multiples entiers de cette propriété, pour toutes les sommes inférieures ou égales au <codeph>maximum</codeph>.
     
      <p>Si, par exemple, <codeph>minimum</codeph> est 10, <codeph>maximum</codeph> est 20 et cette propriété a la valeur 3, les valeurs valides de cette plage sont 10, 13, 16, 19 et 20.</p>
      
      <p>Si la valeur de cette propriété est zéro, alors les valeurs possibles sont uniquement limitées entre les valeurs minimum et maximum incluses. </p>
     
      <p>Cette propriété limite également les valeurs possibles pour la propriété <codeph>stepSize</codeph> lorsqu’elle est définie. Si cette propriété n’est pas définie de façon explicite et la propriété <codeph>stepSize</codeph> est définie, <codeph>snapInterval</codeph> prend par défaut la valeur <codeph>stepSize</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
  La classe ButtonBase est la classe de base de tous les composants de bouton Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Etat désactivé du bouton.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="down" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Etat abaissé du bouton.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="over" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Etat survolé du bouton.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="up" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Etat relevé du bouton.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" type="Number">
<description>
  En mode d’interaction tactile, le nombre de millisecondes à attendre après l’interaction de l’utilisateur a eu lieu avant l’affichage du composant dans un état visuellement abaissé.
 
  <p>La raison de ce délai tient au fait que lorsqu’un utilisateur lance un mouvement de défilement, nous ne souhaitons pas que les composants scintillent lorsqu’ils touchent l’écran. En utilisant un délai raisonnable, nous nous assurons que l’utilisateur obtient toujours des informations en retour lorsqu’il appuie sur un composant, sans que les informations en retour n’interviennent trop rapidement et ne s’affichent au cours d’une opération de défilement.</p>
  
  <p>Si le thème mobile est appliqué, la valeur par défaut pour ce style est de 100 ms pour les composants à l’intérieur d’un composant Scroller et de 0 ms pour les composants extérieurs à un composant Scroller.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Nombre de millisecondes entre les événements <codeph>buttonDown</codeph> si l’utilisateur maintient le bouton de la souris enfoncé.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Nombre de millisecondes à attendre après le premier événement<codeph>buttonDown</codeph> avant de répéter les événements <codeph>buttonDown</codeph> à chaque intervalle <codeph>repeatInterval</codeph>.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="String">
<description>
  L’orientation de l’icône par rapport à l’étiquette. Les valides MXML valides sont <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> et <codeph>top</codeph>.
 
  <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> et <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Classe ou occurrence à utiliser comme icône par défaut. L’icône permet d’effectuer un rendu à partir de différentes sources graphiques, dont les suivantes :   
  <ul>
   <li>Une occurrence Bitmap ou BitmapData.</li>
   <li>Une classe représentant une sous-classe de DisplayObject. La classe BitmapFill instancie la classe et en crée un rendu de bitmap. </li>
   <li>Une occurrence d’un objet DisplayObject. La classe BitmapFill la copie dans un bitmap en vue du remplissage. </li>
   <li>Le nom d’un fichier d’image externe.  </li>
  </ul>
 
  </description>
<default>null 
 
  </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.primitives.BitmapImage.source.xml"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’anneau de focus pour ce composant. 
 
  </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Rayon des angles de ce composant. 
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="iconDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" required="false" var_type="spark.primitives:BitmapImage">
<description>
      Partie de l’habillage qui définit une icône facultative pour le bouton. 
      
      </description>

<playerversion>AIR 2.0
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines an optional icon for the button.</shortdesc></SkinPart><SkinPart name="labelDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Partie d’habillage définissant l’étiquette du bouton. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the label of the button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBase
    <strong>Properties</strong>
    autoRepeat="false"
    content="null"
    label=""
    stickyHighlighting="false"
  
    <strong>Events</strong>
    buttonDown="<i>No default</i>"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    cornerRadius="4"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    repeatDelay="500"
    repeatInterval="35"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
    wordSpacing="100%"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ButtonBase est la classe de base de tous les composants de bouton Spark. Les classes Button et ToggleButtonBase sont des sous-classes de ButtonBase. ToggleButton. Les classes ToggleButton, CheckBox et RadioButton sont des sous-classes de ToggleButtonBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link><link href="spark.components.supportClasses.xml#ToggleButtonBase"><linktext>spark.components.supportClasses.ToggleButtonBase</linktext></link><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ButtonBase_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur le contrôle ButtonBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur le contrôle ButtonBase. Si la valeur de la propriété <codeph>autoRepeat</codeph> est <codeph>true</codeph>, cet événement est redistribué en continu tant que le bouton demeure abaissé.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ButtonBase:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ButtonBase:protected:buttonReleased"><apiName>buttonReleased</apiName><shortdesc>
      Cette méthode est appelée lors de la gestion d’un événement MouseEvent.MOUSE_UP lorsque l’utilisateur clique sur le bouton. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Cette méthode est appelée lors de la gestion d’un <codeph>événement MouseEvent.MOUSE_UP</codeph> lorsque l’utilisateur clique sur le bouton. Elle est appelée uniquement lorsque le bouton est la cible et que la valeur de <codeph>mouseCaptured</codeph> est <codeph>true</codeph>. Elle permet aux sous-classes de mettre à jour les propriétés du bouton dès qu’il est cliqué pour éviter tout état transitionnel de ce dernier entre les événements de relâchement et de clic de souris. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      Remplacez cette méthode dans des sous-classes pour gérer l’événement de clic plutôt que d’ajouter un gestionnaire distinct.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Objet Event associé à l’événement. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplacez cette méthode dans des sous-classes pour traiter l’événement <codeph>click</codeph> plutôt que d’ajouter un gestionnaire distinct. Cette méthode n’est pas appelée si le bouton est désactivé.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:mouseEventHandler"><apiName>mouseEventHandler</apiName><shortdesc>
      Cette méthode traite les événements de souris, appelle la méthode clickHandler lorsque cela est nécessaire et met à jour les propriétés hovered et mouseCaptured.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet Event associé à l’événement. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Cette méthode traite les événements de souris, appelle la méthode <codeph>clickHandler</codeph> lorsque cela est nécessaire et met à jour les propriétés <codeph>hovered</codeph> et <codeph>mouseCaptured</codeph>.
     
      <p>Cette méthode est appelée pour traiter les événements <codeph>MouseEvent.ROLL_OVER</codeph>, <codeph>MouseEvent.ROLL_OUT</codeph>, <codeph>MouseEvent.MOUSE_DOWN</codeph>, <codeph>MouseEvent.MOUSE_UP</codeph> et<codeph>MouseEvent.CLICK</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ButtonBase:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      Indique si des événements buttonDown doivent être distribués de façon répétée si l’utilisateur maintient le bouton de sa souris enfoncé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si des événements <codeph>buttonDown</codeph> doivent être distribués de façon répétée si l’utilisateur maintient le bouton de sa souris enfoncé.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:content:get"><apiName>content</apiName><shortdesc>
      La propriété content permet de transmettre un objet arbitraire à utiliser dans un habillage personnalisé du bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      La propriété <codeph>content</codeph> permet de transmettre un objet arbitraire à utiliser dans un habillage personnalisé du bouton. Lorsqu’un habillage définit la partie facultative <codeph>labelDisplay</codeph>, une représentation de chaîne de la propriété <codeph>content</codeph> est déplacée vers la propriété <codeph>text</codeph> de cet habillage. L’habillage par défaut utilise ce mécanisme pour rendre la propriété <codeph>content</codeph> en tant qu’étiquette du bouton.  
     
      <p>La propriété <codeph>label</codeph> est une façade de type <codeph>String</codeph> de cette propriété. Cette propriété peut être liée et partage l’événement « contentChange » avec la propriété <codeph>label</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/label"><linktext>label</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Indique si le pointeur de la souris survole le bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si le pointeur de la souris survole le bouton. Utilisée pour déterminer l’état d’habillage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:keyboardPressed:get"><apiName>keyboardPressed</apiName><shortdesc>
      Indique si l’utilisateur appuie sur une touche du clavier alors que le bouton a le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si l’utilisateur appuie sur une touche du clavier alors que le bouton a le focus. Utilisée pour déterminer l’état d’habillage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:mouseCaptured:get"><apiName>mouseCaptured</apiName><shortdesc>
      Indique si le bouton de la souris est enfoncé et si le pointeur de la souris survolait le bouton au moment où l’événement MouseEvent.MOUSE_DOWN a été initialement distribué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si le bouton de la souris est abaissé et si le pointeur de la souris survolait le bouton au moment où l’événement <codeph>MouseEvent.MOUSE_DOWN</codeph> a été initialement distribué. Utilisée pour déterminer l’état d’habillage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:stickyHighlighting:get"><apiName>stickyHighlighting</apiName><shortdesc>
      Si la valeur est false, le bouton affiche son habillage d’état abaissé lorsque l’utilisateur clique dessus, mais passe à l’habillage d’état survolé dès que l’utilisateur déplace le pointeur à l’extérieur du bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>false</codeph>, le bouton affiche son habillage d’état abaissé lorsque l’utilisateur clique dessus, mais passe à l’habillage d’état survolé dès que l’utilisateur déplace le pointeur à l’extérieur du bouton. Si la valeur est <codeph>true</codeph>, le bouton affiche son habillage d’état abaissé lorsque l’utilisateur clique dessus, puis continue à afficher cet habillage, y compris si l’utilisateur déplace le pointeur à l’extérieur du bouton.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:label:set"><apiName>label</apiName><shortdesc>
      Texte à afficher sur le contrôle ButtonBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte à afficher sur le contrôle ButtonBase.
     
      <p>Si l’étiquette est plus large que le contrôle ButtonBase, elle est tronquée et se termine par des points de suspension (...). L’étiquette complète s’affiche sous forme d’info-bulle lorsque l’utilisateur vient survoler le contrôle. Si vous avez également défini une info-bulle à l’aide de la propriété <codeph>tooltip</codeph>, l’info-bulle s’affiche à la place du texte de l’étiquette.</p>
     
      <p>Il s’agit de la propriété ButtonBase par défaut.</p>
     
      <p>Cette propriété est une façade de type <codeph>String</codeph> de la propriété <codeph>content</codeph>. Cette propriété peut être liée et partage la distribution de l’événement « contentChange » avec la propriété <codeph>content</codeph>.</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/content"><linktext>content</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TrackBase"><apiName>TrackBase</apiName><shortdesc>
  La classe TrackBase est une classe de base pour les composants comprenant un rail et un ou plusieurs boutons de curseur, par exemple Slider et ScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Time" inherit="no" name="slideDuration" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" type="Number">
<description>
  Durée en millisecondes de l’animation de glissement lorsque vous cliquez sur le rail pour déplacer un curseur. Ce style est utilisé pour les composants Slider et Scrollbar. Dans le cas des composants Slider, tout clic sur le rail lance une animation utilisant ce style, pendant le déplacement du curseur jusqu’à la position sur laquelle l’utilisateur a cliqué. Dans le cas des composants ScrollBar, ce style est utilisé uniquement lorsque l’utilisateur appuie sur la touche Maj et clique sur le rail, provoquant ainsi le déplacement du curseur vers la position sur laquelle l’utilisateur a cliqué. Si l’utilisateur clique sur le rail d’un composant ScrollBar sans appuyer sur Maj, le comportement de pagination est utilisé. Le style <codeph>smoothScrolling</codeph> doit également être défini pour le composant ScrollBar pour qu’une animation soit lancée lorsque l’utilisateur clique tout en maintenant la touche Maj enfoncée.
  
 <p>Cette durée correspond à une animation qui s’étend sur la distance complète du rail. La durée de l’animation est réduite proportionnellement pour les distances inférieures.</p>
 
  </description>
<default>300
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Etat désactivé.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Etat normal.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="thumb" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Partie d’habillage définissant un bouton qui peut être déplacé le long du rail pour augmenter ou diminuer la propriété <codeph>value</codeph>. Toute modification apportée à la propriété <codeph>value</codeph> est automatiquement répercutée sur la position du bouton du curseur par rapport au rail.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that can be dragged along the track to increase or
      decrease the value property.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Partie d’habillage définissant un bouton qui, lorsqu’il est actionné, affecte à la propriété <codeph>value</codeph> la valeur correspondant à la position actuelle du bouton sur le rail.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that, when  pressed, sets the value property
      to the value corresponding with the current button position on the track.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TrackBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TrackBase
    <strong>Styles</strong>
    slideDuration="300"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"
    thumbDrag="<i>No default</i>"
    thumbPress="<i>No default</i>"
    thumbRelease="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TrackBase est une classe de base pour les composants comprenant un rail et un ou plusieurs boutons de curseur, par exemple Slider et ScrollBar. Elle déclare deux parties d’habillage obligatoires : <codeph>thumb</codeph> et <codeph>track</codeph>. La classe TrackBase fournit également le code permettant le déplacement du bouton de curseur, qui est partagé par les classes Slider et ScrollBar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.supportClasses.Slider.xml"><linktext>spark.components.supportClasses.Slider</linktext></link><link href="" invalidHref="spark.components.supportClasses.ScrollBar.xml"><linktext>spark.components.supportClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_RELEASE_thumbRelease"><apiName>thumbRelease</apiName><shortdesc>
  Distribué lorsque le curseur est relâché, ce qui signifie que l’utilisateur relâche le bouton de la souris après un événement thumbPress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_RELEASE</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le curseur est relâché, ce qui signifie que l’utilisateur relâche le bouton de la souris après un événement <codeph>thumbPress</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_PRESS_thumbPress"><apiName>thumbPress</apiName><shortdesc>
  Distribué lorsque le curseur est activé, ce qui signifie que l’utilisateur appuie sur le bouton de la souris alors que le pointeur survole le curseur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_PRESS</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le curseur est activé, ce qui signifie que l’utilisateur appuie sur le bouton de la souris alors que le pointeur survole le curseur.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_DRAG_thumbDrag"><apiName>thumbDrag</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur le curseur, puis le déplace avec sa souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_DRAG</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur le curseur, puis le déplace avec sa souris. Cet événement est toujours précédé d’un événement <codeph>thumbPress</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_START_changeStart"><apiName>changeStart</apiName><shortdesc>
  Distribué au début d’une interaction de l’utilisateur ou lorsqu’une animation démarre. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué au début d’une interaction de l’utilisateur ou lorsque l’animation démarre. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_END_changeEnd"><apiName>changeEnd</apiName><shortdesc>
  Distribué à la fin d’une interaction de l’utilisateur ou lorsqu’une animation se termine. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à la fin d’une interaction de l’utilisateur ou lorsque l’animation se termine. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la valeur du contrôle change suite à une interaction utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la valeur du contrôle change suite à une interaction utilisateur.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:TrackBase:TrackBase"><apiName>TrackBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:TrackBase:protected:pointToValue"><apiName>pointToValue</apiName><shortdesc>
      Conversion d’un emplacement en pixels x, y relatif à la piste en une valeur comprise entre des limites minimales et maximales. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Valeur comprise entre les valeurs minimum et maximum.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>La coordonnée x de l’emplacement par rapport à l’origine de la piste. 
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>La coordonnée y de l’emplacement par rapport à l’origine de la piste. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Conversion d’un emplacement en pixels x, y relatif à la piste en une valeur comprise entre des limites minimales et maximales.   
     
      <p>Les sous-classes TrickBase doivent remplacer cette méthode et effectuer des conversions qui prennent leur propre géométrie en compte. Par exemple, un curseur vertical peut calculer une valeur comme suit :
      <pre>
      return (y / track.height) (maximum - minimum);
      </pre>
      </p>
     
      <p>Par défaut, cette méthode renvoie seulement <codeph>minimum</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      Définit les limites des parties d’habillage, généralement le curseur, dont la géométrie n’est pas entièrement spécifiée par la présentation de l’habillage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit les limites des parties d’habillage, généralement le curseur, dont la géométrie n’est pas entièrement spécifiée par la présentation de l’habillage. 
     
      <p>La plupart des sous-classes annulent cette méthode pour mettre à jour la taille, la position et la visibilité du curseur en fonction des propriétés <codeph>minimum</codeph>, <codeph>maximum</codeph> et <codeph>value</codeph>. </p>
     
      <p>Par défaut, cette méthode n’a aucune action. </p> 
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components.supportClasses:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
      Une classe DisplayLayer maintient une liste ordonnée d’objets DisplayObjects triés en fonction de la profondeur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      Une classe DisplayLayer maintient une liste ordonnée d’objets DisplayObjects triés en fonction de la profondeur. N’instanciez pas cette classe, mais utilisez la propriété <codeph>overlay</codeph> de <codeph>Group</codeph> et <codeph>DataGroup</codeph>. 
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DisplayLayer:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
          Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Constructeur. 
         
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DisplayLayer:addDisplayObject"><apiName>addDisplayObject</apiName><shortdesc>
          Ajoute un objet displayObject de la profondeur spécifiée à la liste ordonnée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Index de l’objet. 
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet à ajouter.
         
          </apiDesc></apiParam><apiParam><apiItemName>depth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Profondeur de l’objet.   
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Ajoute un objet <codeph>displayObject</codeph> de la profondeur spécifiée à la liste ordonnée. La position de l’objet <codeph>displayObject</codeph> dans les listes triées est basée sur sa profondeur. L’objet est inséré après tous les objets ayant une valeur <codeph>depth</codeph> inférieure ou égale. 
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectAt"><apiName>getDisplayObjectAt</apiName><shortdesc>
          Renvoie l’objet DisplayObject avec l’index spécifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’objet. 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Renvoie l’objet DisplayObject avec l’index spécifié.  
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectDepth"><apiName>getDisplayObjectDepth</apiName><shortdesc>
          Renvoie la profondeur de l’objet DisplayObject spécifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Profondeur de l’objet.
         
          </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Renvoie la profondeur de l’objet DisplayObject spécifié. 
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:removeDisplayObject"><apiName>removeDisplayObject</apiName><shortdesc>
          Supprime l’objet displayObject spécifié de la liste triée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet supprimé. 
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Supprime l’objet <codeph>displayObject</codeph> spécifié de la liste triée. 
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DisplayLayer:numDisplayObjects:get"><apiName>numDisplayObjects</apiName><shortdesc>
          Nombre d’objets dans DisplayLayer. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          Nombre d’objets dans DisplayLayer.  
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SliderBase"><apiName>SliderBase</apiName><shortdesc>
  La classe SliderBase permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="fontWeight"/><Exclude kind="style" name="fontSize"/><Exclude kind="style" name="color"/><styles><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description>
  Lorsque la valeur est <codeph>true</codeph>, la valeur du curseur est validée lorsque l’utilisateur fait glisser ce dernier le long du rail et non lorsque le bouton du curseur est relâché.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’anneau de focus de ce composant. 
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataTip" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" required="false" type="mx.core.IDataRenderer" var_type="mx.core:IFactory">
<description>
      Partie d’habillage définissant une astuce sur les données qui affiche une version formatée de la valeur actuelle. L’astuce sur les données apparaît pendant que l’utilisateur fait glisser le curseur. Il s’agit d’une partie d’habillage dynamique qui doit être de type IFactory.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a dataTip that displays a formatted version of 
      the current value.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SliderBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SliderBase
    <strong>Properties</strong>
    dataTipFormatFunction="20"
    dataTipPrecision="2"
    maximum="10"
    showDataTip="true"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlph="0.55"
    focusColor="0xFFFFFF"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    liveDragging="true"
    local="en"
    renderingMode="CFF"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SliderBase permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail. La valeur actuelle du curseur est déterminée par son emplacement relatif entre ses extrémités, ce qui correspond aux valeurs minimum et maximum du curseur. La classe SliderBase est une classe de base pour HSlider et VSlider. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SliderBase:SliderBase"><apiName>SliderBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SliderBase:protected:updateDataTip"><apiName>updateDataTip</apiName><shortdesc>
      Utilisée pour placer l’astuce sur les données lorsqu’elle est visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dataTipInstance</apiItemName><apiType value="mx.core:IDataRenderer"/><apiDesc>L’occurrence <codeph>dataTip</codeph> pour la mise à jour et la position 
      </apiDesc></apiParam><apiParam><apiItemName>initialPosition</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Position initiale de l’occurrence <codeph>dataTip</codeph> dans l’habillage 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Utilisée pour placer l’astuce sur les données lorsqu’elle est visible. Les sous-classes doivent implémenter cette fonction. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SliderBase:dataTipPrecision"><apiName>dataTipPrecision</apiName><shortdesc>
      Nombre de décimales à utiliser pour le texte de l’astuce sur les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>2</apiData><apiType value="int"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de décimales à utiliser pour le texte de l’astuce sur les données. La valeur 0 arrondit toutes les valeurs à un nombre entier. Cette valeur est ignorée si une valeur est spécifiée pour <codeph>dataTipFormatFunction</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:showDataTip"><apiName>showDataTip</apiName><shortdesc>
      Si la valeur est true, une astuce sur les données contenant la valeur actuelle du curseur s’affiche lors de l’interaction utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, une astuce sur les données contenant la valeur actuelle du curseur s’affiche lors de l’interaction utilisateur. Par ailleurs, la partie d’habillage <codeph>dataTip</codeph> doit être définie dans l’habillage pour que l’astuce sur les données s’affiche. 
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:dataTipFormatFunction:get"><apiName>dataTipFormatFunction</apiName><shortdesc>
      Fonction de rappel qui formate le texte de l’astuce sur les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction de rappel qui formate le texte de l’astuce sur les données. La fonction prend un seul nombre comme argument et renvoie une chaîne mise en forme.
     
      <p>La fonction présente la signature suivante :</p>
      <pre>
      funcName(value:Number):Object
      </pre>
     
      <p>L’exemple ci-dessous ajoute le symbole du dollar avant le texte de l’astuce sur les données et formate le texte en utilisant la propriété <codeph>dataTipPrecision</codeph> d’un contrôle SliderBase appelé « slide » : </p>
     
      <pre>
      import mx.formatters.NumberBase;
      function myDataTipFormatter(value:Number):Object { 
          var dataFormatter:NumberBase = new NumberBase(".", ",", ".", ""); 
          return   "$ " + dataFormatter.formatPrecision(String(value), slide.dataTipPrecision); 
      }
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:maximum:get"><apiName>maximum</apiName><shortdesc>
      Nombre représentant la valeur maximale autorisée de value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre représentant la valeur maximale autorisée de <codeph>value</codeph>. Si la valeur de <codeph>minimum</codeph> ou <codeph>value</codeph> est supérieure à <codeph>maximum</codeph>, ces deux valeurs sont modifiées de manière à refléter la nouvelle valeur <codeph>maximum</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      Valeur du curseur lorsque le bouton de la souris est relâché. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur du curseur lorsque le bouton de la souris est relâché. Cette propriété contient également les valeurs temporaires définies pendant l’animation du curseur si la valeur du style <codeph>liveDragging</codeph> est true, la valeur réelle est uniquement définie lorsque l’animation se termine. 
     
      <p>Si le style <codeph>liveDragging</codeph> style est défini sur false, la valeur du curseur est uniquement définie lorsque l’utilisateur relâche le bouton de la souris. La valeur n’est pas mise à jour pendant le curseur est en cours de glissement. </p>
     
      <p>Cette propriété est mise à jour lorsque le curseur se déplace, même si <codeph>liveDragging</codeph> est false. </p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Skin"><apiName>Skin</apiName><shortdesc>
  La classe Skin définit la classe de base des habillages utilisés par les composants dont l’habillage peut être configuré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.skins:IHighlightBitmapCaptureClient</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Skin définit la classe de base des habillages utilisés par les composants dont l’habillage peut être configuré. La classe SkinnableComponent définit la classe de base des composants dont l’habillage peut être configuré.
 
  <p>En règle générale, les classes d’habillage sont écrites en langage MXML, comme l’illustre l’exemple suivant :</p>
 
  <pre>  &lt;?xml version="1.0"?>
  &lt;Skin xmlns="http://ns.adobe.com/mxml/2009">
  
  &lt;Metadata>
          &lt;!-- Specify the component that uses this skin class. -->
          [HostComponent("my.component.MyComponent")]
      &lt;/Metadata> 
      
      &lt;states>
          &lt;!-- Specify the states controlled by this skin. -->
      &lt;/states>
          
      &lt;!-- Define skin. -->
  
  &lt;/Skin></pre>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.SkinnableComponent.xml"><linktext>mx.core.SkinnableComponent</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Skin:Skin"><apiName>Skin</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Skin:beginHighlightBitmapCapture"><apiName>beginHighlightBitmapCapture</apiName><shortdesc>
      Appelé avant l’acquisition d’une image bitmap pour cet habillage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si le composant doit être de nouveau tracé. Sinon, la valeur <codeph>false</codeph> est renvoyée.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Appelé avant l’acquisition d’une image bitmap pour cet habillage. L’implémentation par défaut exclut les éléments du tableau <codeph>focusSkinExclusions</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Skin:endHighlightBitmapCapture"><apiName>endHighlightBitmapCapture</apiName><shortdesc>
      Appelé après l’acquisition d’une image bitmap pour cet habillage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si le composant doit être de nouveau tracé. Sinon, la valeur <codeph>false</codeph> est renvoyée.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Appelé après l’acquisition d’une image bitmap pour cet habillage. L’implémentation par défaut restaure les éléments du tableau <codeph>focusSkinExclusions</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:Skin:focusSkinExclusions:get"><apiName>focusSkinExclusions</apiName><shortdesc>
      Liste des ID des éléments qui doivent être exclus lors du rendu de l’anneau de focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Liste des ID des éléments qui doivent être exclus lors du rendu de l’anneau de focus. Seuls les éléments de type DisplayObject ou GraphicElement doivent être exclus. Les autres types d’éléments seront ignorés. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownController"><apiName>DropDownController</apiName><shortdesc>
  La classe DropDownController gère la souris, le clavier et les interactions de focus pour un bouton d’ancrage et son déroulement associé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DropDownController gère la souris, le clavier et les interactions de focus pour un bouton d’ancrage et son déroulement associé. Cette classe est utilisée par les composants déroulants, tels que la commande DropDownList, pour gérer l’ouverture et la fermeture de la liste déroulante par l’interaction de l’utilisateur. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DropDownController:DropDownController"><apiName>DropDownController</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownController:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Fermez la liste déroulante D et distribuez un événement DropDownEvent.CLOSE. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>Si la valeur est <codeph>true</codeph>, validez l’éléments de données sélectionné. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fermez la liste déroulante et distribuez un événement <codeph>DropDownEvent.CLOSE</codeph>.  
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Ouvrez la liste déroulante et distribuez l’événement DropdownEvent.OPEN. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ouvrez la liste déroulante et distribuez un événement <codeph>DropdownEvent.OPEN</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processFocusOut"><apiName>processFocusOut</apiName><shortdesc>
      Fermez la liste déroulante si elle n’est plus dans le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet d’événement de l’événement <codeph>FOCUS_OUT</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fermez la liste déroulante si elle n’est plus dans le focus. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processKeyDown"><apiName>processKeyDown</apiName><shortdesc>
      Gère les interactions utilisateur de clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si la valeur <codeph>keyCode</codeph> a été reconnue et gérée.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>L’objet d’événement issu de l’événement clavier.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gère les interactions de l'utilisateur avec le clavier.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownController:hitAreaAdditions"><apiName>hitAreaAdditions</apiName><shortdesc>
      Liste des objets d’affichage à considérer comme faisant partie de la zone active de la liste déroulante. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Vector$flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Liste des objets d’affichage à considérer comme faisant partie de la zone active de la liste déroulante. Des clics de souris sur n’importe quel composant répertorié comme une inclusion n’ pas automatiquement la fermeture de la liste déroulante. 
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:closeOnResize:get"><apiName>closeOnResize</apiName><shortdesc>
      Lorsque la valeur est true, le redimensionnement du gestionnaire système ferme la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsque la valeur est <codeph>true</codeph>, le redimensionnement du gestionnaire système ferme la liste déroulante. Pour les applications mobiles, vous pouvez définir cette propriété sur <codeph>false</codeph>, de sorte que la liste déroulante reste ouverte lorsque l’orientation de la page change.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      Contient la valeur true si la liste déroulante est ouverte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient la valeur <codeph>true</codeph> si la liste déroulante est ouverte.   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:rollOverOpenDelay:get"><apiName>rollOverOpenDelay</apiName><shortdesc>
      Spécifie le délai, en millisecondes, à attendre pour ouvrir la liste déroulante lorsque le bouton d’ancrage est survolé par la souris. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
             
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le délai, en millisecondes, à attendre pour ouvrir la liste déroulante lorsque le bouton d’ancrage est survolé par la souris. Si la valeur est définie sur <codeph>NaN</codeph>, alors la liste déroulante s’ouvre sur un clic, pas sur un survol.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:openButton:set"><apiName>openButton</apiName><shortdesc>
      Référence à la partie d’habillage openButton du composant déroulant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:ButtonBase</apiValueClassifier></apiValueDef><apiDesc>
      Référence à la partie d’habillage <codeph>openButton</codeph> du composant déroulant. 
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:systemManager:set"><apiName>systemManager</apiName><shortdesc>
      Référence à la classe SystemManager utilisée pour le suivi de la souris. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.managers:ISystemManager"/></apiValueDef><apiDesc>
      Une référence à la classe <codeph>SystemManager</codeph> utilisée pour le suivi de la souris. Si aucune classe n’est spécifiée, le contrôleur utilisera la classe systemManager associée à openButton. 
             
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
  La classe ButtonBarHorizontalLayout est une présentation spécialement conçue pour les habillages Spark ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ButtonBarHorizontalLayout est une présentation spécialement conçue pour les habillages Spark ButtonBar. La présentation place les enfants horizontalement, de gauche à droite. 
  
  <p>La présentation tente de dimensionner tous les enfants en fonction de leur taille préférée. Si l’espace est suffisant, les dimensions de chaque enfant correspondent à sa taille préférée, à laquelle vient s’ajouter l’espace disponible restant, réparti uniformément entre les enfants.</p>
 
  <p>Si l’espace est insuffisant et ne permet pas d’afficher tous les enfants à leur taille préférée, les enfants dont la largeur est inférieure à la largeur moyenne sont définis sur leur taille préférée et les autres éléments sont réduits d’autant.</p>
 
  <p>La hauteur de tous les enfants correspond à la hauteur du parent.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ButtonBarHorizontalLayout:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarHorizontalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      Espace horizontal entre les éléments de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Espace horizontal entre les éléments de présentation. Notez que l’écart n’est appliqué qu’entre les éléments de présentation ; aussi, si un seul élément est présent, l’écart est sans effet sur la présentation. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
  La classe ListItemDragProxy définit le proxy de glissement par défaut utilisé lors des glissements effectués depuis un contrôle basé sur Spark List. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ListItemDragProxy définit le proxy de glissement par défaut utilisé lors des glissements effectués depuis un contrôle basé sur Spark List. 
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ListItemDragProxy:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionState"><apiName>InteractionState</apiName><shortdesc>
      Valeurs de la propriété state de la classe InteractionStateDetector.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Valeurs de la propriété <codeph>state</codeph> de la classe InteractionStateDetector.
           </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionStateDetector"><linktext>spark.components.supportClasses.InteractionStateDetector</linktext></link></related-links><apiValue id="spark.components.supportClasses:InteractionState:DOWN"><apiName>DOWN</apiName><shortdesc>
          Le composant doit être à l’état abaissé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Le composant doit être à l’état abaissé.
          
          <p>L’utilisateur appuie actuellement sur ce composant.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:OVER"><apiName>OVER</apiName><shortdesc>
          Le composant doit être à l’état au-dessus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>over</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Le composant doit être dans l’état Au-dessus.
          
          <p>L’utilisateur survole actuellement ce composant.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:UP"><apiName>UP</apiName><shortdesc>
          Le composant doit être à l'état relevé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Le composant doit être à l'état relevé.
          
          <p>Aucune interaction ne se produit sur ce composant.</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
  la classe ButtonBarBase définit le comportement commun pour ButtonBar, TabBar et les sous-classes analogues.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBarBase" playerVersion="Flash10" type="String">
<description>
  L’orientation de l’icône par rapport à l’étiquette. Les valides MXML valides sont <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> et <codeph>top</codeph>.
 
  <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> et <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBarBase/&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  la classe ButtonBarBase définit le comportement commun pour ButtonBar, TabBar et les sous-classes analogues. Cette classe n’ajoute aucune nouvelle API. Elle affine cependant la sélection, le focus clavier et le comportement de navigation au clavier pour les éléments ItemRenderer du contrôle. Cette classe de base n’est pas destinée à être instanciée directement. 
 
  <p>Le fait de cliquer sur un objet ItemRenderer le sélectionne en définissant les propriétés <codeph>selectedIndex</codeph> et <codeph>caretIndex</codeph>. Si <codeph>requireSelection</codeph> est défini sur <codeph>false</codeph>, le fait de recliquer sur l’objet le désélectionne. Si le fournisseur de données est un objet <codeph>ISelectableList</codeph>, sa propriété <codeph>selectedIndex</codeph> est également définie. </p> 
 
  <p>Les événements de touche de direction sont traités par le réglage de <codeph>caretIndex</codeph>. Si la propriété <codeph>arrowKeysWrapFocus</codeph> est définie sur <codeph>true</codeph>, <codeph>caretIndex</codeph> enveloppe. L’actionnement de la barre d’espace sélectionne l’objet ItemRenderer au niveau de <codeph>caretIndex</codeph>. </p>
 
  <p>La propriété <codeph>showsCaret</codeph> de ItemRenderer au niveau de <codeph>caretIndex</codeph> est définie sur <codeph>true</codeph> lorsque ButtonBarBase a le focus et <codeph>caretIndex</codeph> a été atteint par un mouvement au clavier. Si <codeph>caretIndex</codeph> a été défini comme un effet secondaire de la réponse à un clic de la souris, <codeph>showsCaret</codeph> n’est pas défini. </p>
 
  <p>La propriété <codeph>allowDeselection</codeph> des rendus ItemRenderers <codeph>ButtonBarButton</codeph> est définie sur <codeph>!requireSelection</codeph>. </p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarBase:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p>Initialise le traitement par touche de tabulation : l’accès à ce composant par touche de tabulation lui donne le focus ; l’accès par un clic de la souris ne le lui donne pas. L’accès aux enfants par touche de tabulation est désactivé. </p> 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarBase:iconField:get"><apiName>iconField</apiName><shortdesc>
      Le nom du champ des éléments du fournisseur de données faisant office d’icône à afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le nom du champ des éléments du fournisseur de données faisant office d’icône à afficher. La propriété <codeph>iconFunction</codeph> remplace cette propriété.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBarBase:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      Une fonction fournie par l’utilisateur et à exécuter sur chaque élément pour en déterminer leur icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Une fonction fournie par l’utilisateur et à exécuter sur chaque élément pour en déterminer leur icône. La propriété <codeph>iconFunction</codeph> remplace la propriété <codeph>iconField</codeph>.
     
      <p>Vous pouvez fournir une propriété <codeph>iconFunction</codeph> qui recherche les champs appropriés et renvoie une icône affichable. </p>
     
      <p>La fonction d’icône accepte un seul argument, en l’occurrence l’élément de fournisseur de données, et renvoie une source BitmapImage valide.</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListBase"><apiName>ListBase</apiName><shortdesc>
  La classe ListBase est la classe de base de tous les composants qui prennent en charge la sélection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ListBase
 
    <strong>Properties</strong>
    arrowKeysWrapFocus="false"
    labelField="label"
    labelFunction="null"
    requireSelection="false"
    selectedIndex="-1"
    selectedItem="undefined"
    useVirtualLayout="false"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    change="<i>No default</i>"
    changing="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableDataContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ListBase est la classe de base de tous les composants qui prennent en charge la sélection. 
 
  <p><b>Remarque : </b>les contrôles basés sur une liste Spark (la classe Spark ListBase et ses sous-classes, telles que ButtonBar, ComboBox, DropDownList, List et TabBar) ne prennent pas en charge la classe BasicLayout en tant que valeur de la propriété <codeph>layout</codeph>. N’utilisez pas BasicLayout avec les contrôles basés sur une liste Spark. </p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Distribué après le changement de focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la modification du focus.  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué après la modification de la sélection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la modification de la sélection. Cet événement est distribué lorsque l’utilisateur interagit avec le contrôle. 
 
  <p>Lorsque vous modifiez par programmation la valeur de la propriété <codeph>selectedIndex</codeph> ou <codeph>selectedItem</codeph>, le contrôle ne distribue pas l’événement <codeph>change</codeph>. Il distribue en revanche l’événement <codeph>valueCommit</codeph>. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Distribué lorsque la sélection s’apprête à être modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la sélection s’apprête à être modifiée. L’appel de la méthode <codeph>preventDefault()</codeph> sur l’événement empêche la modification de la sélection.
  
  <p>Cet événement est distribué lorsque l’utilisateur interagit avec le contrôle. Lorsque vous modifiez par programmation la valeur de la propriété <codeph>selectedIndex</codeph> ou <codeph>selectedItem</codeph>, le contrôle ne distribue pas l’événement <codeph>changing</codeph>. Il distribue en revanche l’événement <codeph>valueCommit</codeph>. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  Distribué lorsque le pointeur de la souris cesse de survoler un élément du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le pointeur de la souris cesse de survoler un élément du contrôle.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  Distribué lorsque le pointeur de la souris survole un élément du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le pointeur de la souris survole un élément du contrôle.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ListBase:ListBase"><apiName>ListBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ListBase:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      Ajuste l’index sélectionné de sorte qu’il tienne compte des éléments qui sont ajoutés à ce composant ou qui en sont supprimés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Nouvel index.
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>La valeur est <codeph>true</codeph> si un élément a été ajouté au composant et <codeph>false</codeph> si un élément a été supprimé. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajuste l’index sélectionné de sorte qu’il tienne compte des éléments qui sont ajoutés à ce composant ou qui en sont supprimés. Cette méthode ajuste la valeur d’index sélectionnée et distribue un événement <codeph>valueCommit</codeph>. Elle ne distribue aucun événement <codeph>change</codeph>, car le changement ne se produit pas comme conséquence directe de l’interaction de l’utilisateur. De plus, elle ne distribue pas d’événement <codeph>changing</codeph> et n’autorise pas l’annulation de la sélection. En outre, elle n’appelle pas la méthode <codeph>itemSelected()</codeph>, car le même élément est sélectionné. Le seul élément modifié est l’index de l’élément. 
     
      <p>Un événement <codeph>valueCommit</codeph> est distribué lors de l’appel suivant de la méthode <codeph>commitProperties()</codeph>.</p>
     
      <p>Les événements <codeph>change</codeph> et <codeph>changing</codeph> ne sont pas envoyés lorsque la propriété <codeph>selectedIndex</codeph> est ajustée.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemAdded"><apiName>itemAdded</apiName><shortdesc>
      Appelé lorsqu’un élément a été ajouté à ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>L’index de l’élément en cours d’ajout.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé lorsqu’un élément a été ajouté à ce composant. Les propriétés associées à sélection et caret sont ajustées en conséquence.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemRemoved"><apiName>itemRemoved</apiName><shortdesc>
      Appelé lorsqu’un élément a été supprimé de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>L’index de l’élément en cours de suppression.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé lorsqu’un élément a été supprimé de ce composant. Les propriétés associées à sélection et caret sont ajustées en conséquence.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemSelected"><apiName>itemSelected</apiName><shortdesc>
      Appelée lorsqu’un élément est sélectionné ou désélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index d’élément sélectionné.
     
      </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si l’élément est sélectionné, <codeph>false</codeph> dans le cas contraire.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsqu’un élément est sélectionné ou désélectionné. Les sous-classes doivent remplacer cette méthode pour afficher la sélection.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemShowingCaret"><apiName>itemShowingCaret</apiName><shortdesc>
      Appelée dans tous les cas, que l’élément soit ou non dans son état d’insertion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index d’élément mis à l’état d’insertion. 
     
      </apiDesc></apiParam><apiParam><apiItemName>showsCaret</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si l’élément est à l’état d’insertion, <codeph>false</codeph> dans le cas contraire. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée dans tous les cas, que l’élément soit ou non dans son état d’insertion. Les sous-classes doivent remplacer cette méthode pour afficher le signe d’insertion. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      En fonction de l’élément de données, renvoie le texte correct normalement affiché par une fonctionnalité de rendu d’élément prenant en compte les propriétés labelField et labelFunction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne représentant le texte à afficher pour la fonctionnalité de rendu de l’élément transmise. 
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément de données. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      En fonction de l’élément de données, renvoie le texte correct normalement affiché par une fonctionnalité de rendu d’élément prenant en compte les propriétés <codeph>labelField</codeph> et <codeph>labelFunction</codeph>. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ListBase:NO_SELECTION"><apiName>NO_SELECTION</apiName><shortdesc>
      Constante statique représentant la valeur « no selection ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Constante statique représentant la valeur « no selection ».
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:arrowKeysWrapFocus"><apiName>arrowKeysWrapFocus</apiName><shortdesc>
      Si la valeur est true et que l’utilisateur navigue à l’aide des touches de direction, le composant l’enveloppe dès qu’une extrémité est atteinte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph> et que l’utilisateur navigue à l’aide des touches de direction, le composant l’enveloppe dès qu’une extrémité est atteinte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      Elément qui est actuellement le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Elément qui est actuellement le focus. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelField:get"><apiName>labelField</apiName><shortdesc>
      Le nom du champ dans les éléments dataprovider à afficher en tant qu'étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label" 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le nom du champ des éléments du fournisseur de données à afficher en tant qu’étiquette. Si la propriété labelField est définie sur une chaîne vide (""), aucun champ ne sera pris en compte sur le fournisseur de données pour représenter l’étiquette. La propriété <codeph>labelFunction</codeph> remplace cette propriété.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le libellé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le libellé. La propriété <codeph>labelFunction</codeph> remplace la propriété <codeph>labelField</codeph>.
     
      <p>Vous pouvez spécifier une valeur <codeph>labelFunction</codeph> recherchant les champs appropriés et renvoyant une chaîne affichable. La propriété <codeph>labelFunction</codeph> permet également de gérer le formatage et la localisation. </p>
     
      <p>La fonction label accepte un seul argument, en l’occurrence l’élément du fournisseur de données, et renvoie une chaîne.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      Si la valeur est true, un élément de données doit toujours être sélectionné dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, un élément de données doit toujours être sélectionné dans le contrôle. Si la valeur est <codeph>true</codeph>, la propriété <codeph>selectedIndex</codeph> est toujours définie sur une valeur comprise entre 0 et (<codeph>dataProvider.length</codeph> -1).
     
     <p>La valeur par défaut est <codeph>false</codeph> pour la plupart des sous-classes, à l’exception de TabBar. Dans ce cas, la valeur par défaut est <codeph>true</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index de base zéro de l’élément sélectionné ou -1 si aucun élément n’est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Index de base zéro de l’élément sélectionné ou -1 si aucun élément n’est sélectionné. La définition de la propriété <codeph>selectedIndex</codeph> désélectionne l’élément actuellement sélectionné et sélectionne l’élément présent à l’index spécifié.
     
      <p>La valeur est toujours comprise entre -1 et (<codeph>dataProvider.length</codeph> - 1). Si des éléments présents à un index inférieur à la valeur <codeph>selectedIndex</codeph> sont supprimés du composant, l’index sélectionné est réduit en conséquence.</p>
     
      <p>Si l’élément sélectionné est supprimé, l’index sélectionné est défini sur :</p>
     
      <ul>
        <li>-1 si la valeur <codeph>requiresSelection</codeph> = <codeph>false</codeph> ou s’il ne reste plus d’éléments ;</li>
        <li>0 si la valeur<codeph>requiresSelection</codeph> = <codeph>true</codeph> et qu’il reste au moins un élément.</li>
      </ul>
     
      <p>Lorsque l’utilisateur modifie la propriété <codeph>selectedIndex</codeph> en interagissant avec le contrôle, le contrôle distribue les événements <codeph>change</codeph> et <codeph>changing</codeph>. Lorsque vous modifiez la valeur de la propriété <codeph>selectedIndex</codeph> par programmation, il distribue l’événement <codeph>valueCommit</codeph>. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Elément actuellement sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Elément actuellement sélectionné. Le fait de définir cette propriété désélectionne l’élément actuellement sélectionné et sélectionne l’élément nouvellement spécifié.
     
      <p>Si <codeph>selectedItem</codeph> correspond à un élément non présent dans ce composant, aucun élément n’est sélectionné et la valeur de <codeph>selectedItem</codeph> devient <codeph>undefined</codeph>.</p>
     
      <p>Si l’élément sélectionné est supprimé, l’élément sélectionné est défini sur :</p>
     
      <ul>
        <li><codeph>undefined</codeph> si la valeur<codeph>requiresSelection</codeph> = <codeph>false</codeph> ou s’il ne reste plus d’éléments ;</li>
        <li>le premier élément si la valeur <codeph>requiresSelection</codeph> = <codeph>true</codeph> et qu’il reste au moins un élément.</li>
      </ul>
     
      <p>Lorsque l’utilisateur modifie la propriété <codeph>selectedItem</codeph> en interagissant avec le contrôle, le contrôle distribue les événements <codeph>change</codeph> et <codeph>changing</codeph>. Lorsque vous modifiez la valeur de la propriété <codeph>selectedItem</codeph> par programmation, il distribue l’événement <codeph>valueCommit</codeph>. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      Définit la valeur de la propriété useVirtualLayout de la mise en page associée à cette commande. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit la valeur de la propriété <codeph>useVirtualLayout</codeph> de la mise en page associée à cette commande. Si la mise en page est remplacée ultérieurement et la valeur de cette propriété est <codeph>true</codeph>, la propriété <codeph>useVirtualLayout</codeph> de la nouvelle mise en page est définie sur <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
  Une classe d’assistance que les composants peuvent utiliser qui les aide à déterminer s’ils doivent être à l’état relevé, au-dessus ou abaissé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Une classe d’assistance que les composants peuvent utiliser pour déterminer s’ils doivent être à l’état relevé, au-dessus ou abaissé.
 
  <p>Lorsque l’état change, si la transition doit être exécutée ; playTransitions.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionState"><linktext>spark.components.supportClasses.InteractionState</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:InteractionStateDetector_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribuée après le changement de l’état.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribuée après la modification de l’état.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:InteractionStateDetector:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
      Constructeur
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>component</apiItemName><apiType value="mx.core:UIComponent"/><apiDesc> L’objet UIComponent pour détecter l’état relevé/au-dessus/abaissé en cours. Les écouteurs d’événement sont joints à cet objet.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:InteractionStateDetector:state:get"><apiName>state</apiName><shortdesc>
      Renvoie l’état du composant. Les valeurs possibles sont : InteractionState.UP, InteractionState.DOWN et InteractionState.OVER.
        
      
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Renvoie l’état du composant 
     
      <p>Valeurs possibles :
        <ul>
          <li>InteractionState.UP</li>
          <li>InteractionState.DOWN</li>
          <li>InteractionState.OVER</li>
        </ul>
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.InteractionState;.xml"><linktext>spark.components.supportClasses.InteractionState;</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
  Le contrôle DropDownListBase contient une liste déroulante dans laquelle l’utilisateur peut sélectionner une valeur unique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="selectedItems"/><Exclude kind="property" name="selectedIndices"/><Exclude kind="property" name="dropEnabled"/><Exclude kind="property" name="dragMoveEnabled"/><Exclude kind="property" name="dragEnabled"/><Exclude kind="property" name="allowMultipleSelection"/><skinStates><SkinState name="open" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10">
<description>
  Etat de l’habillage pour l’état ouvert du contrôle DropDownListBase.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Contrôle la visibilité de l’ombre portée pour ce composant. 
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Rayon des angles de ce composant. 
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropDown" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      Partie d’habillage définissant la zone de l’élément déroulant. Lorsque le contrôle DropDownListBase est ouvert, le fait de cliquer à l’extérieur de la partie d’habillage de l’élément déroulant ferme la liste déroulante. 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down list area.</shortdesc></SkinPart><SkinPart name="openButton" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="true" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Partie d’habillage définissant le bouton d’ancrage.  
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the anchor button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;s:DropDownListBase 
    <strong>Styles</strong>
    cornerRadius="4"
    dropShadowVisible="true"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle DropDownListBase contient une liste déroulante dans laquelle l’utilisateur peut sélectionner une valeur unique. Son fonctionnement est très proche de celui de l’élément de formulaire SELECT en HTML.
 
  <p>Le contrôle DropDownListBase se compose d’un bouton d’ancrage et d’une liste déroulante. Utilisez le bouton d’ancrage pour ouvrir et fermer la liste déroulante.  
  </p>
 
  <p>Lorsque la liste déroulante est ouverte : </p>
  <ul>
    <li>Un clic sur le bouton d’ancrage ferme la liste déroulante et valide l’élément de données actuellement sélectionné. </li>
    <li>Un clic en dehors de la liste déroulante ferme la liste déroulante et valide l’élément de données actuellement sélectionné.</li>
    <li>Un clic sur un élément de données sélectionne cet élément et ferme la liste déroulante.</li>
    <li>Si la propriété <codeph>requireSelection</codeph> est <codeph>false</codeph>, le fait de cliquer sur un élément de données tout en maintenant la touche Ctrl enfoncée désélectionne l’élément et ferme la liste déroulante</li>
  </ul>
 
  </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur le bouton d’ancrage pour afficher la liste déroutante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur le bouton d’ancrage pour afficher la liste déroutante. Il est également distribué si l’utilisateur utilise Contrôle-flèche vers le bas pour ouvrir la liste dropDown. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué lorsque la liste déroulante se ferme pour une raison quelconque, par exemple lorsque l’utilisateur sélectionne un élément dans la liste déroulante. Clique en dehors de la liste déroulante. Clique sur le bouton d’ancrage pendant que la liste déroulante est affichée.
  
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la liste déroulante se ferme pour une raison quelconque, par exemple lorsque l’utilisateur :
  <ul>
      <li>sélectionne un élément dans la liste déroulante ;</li>
      <li>clique en dehors de la liste déroulante.</li>
      <li>clique sur le bouton d’ancrage pendant que la liste déroulante est affichée.</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:DropDownListBase:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownListBase:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Fermer la liste déroulante et distribuer un événement DropDownEvent.CLOSE. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>Si la valeur est <codeph>true</codeph>, valider l’éléments de données sélectionné. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fermer la liste déroulante et distribuer un événement <codeph>DropDownEvent.CLOSE</codeph>. 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownListBase:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Ouvrir la liste déroulante et distribuer un événement DropDownEvent.OPEN. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ouvrir la liste déroulante et distribuer un événement <codeph>DropdownEvent.OPEN</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownListBase:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      Occurrence de la classe DropDownController qui gère l’ensemble des interactions utilisateur de souris, clavier et focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:DropDownController</apiValueClassifier></apiValueDef><apiDesc>
      Occurrence de la classe DropDownController qui gère l’ensemble des interactions utilisateur de souris, clavier et focus. Flex appelle la méthode <codeph>initializeDropDownController()</codeph> après création de l’occurrence DropDownController dans le constructeur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownListBase:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
  Classe de base pour les composants habillables, tels que Spark TextInput et TextArea, qui incluent une occurrence de IEditableText dans leur habillage pour fournir des fonctionnalités d’affichage, de défilement, de sélection et de modification du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  Etat désactivé avec invite.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  Etat normal avec invite.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  Etat désactivé.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  Etat normal.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="yes" name="showPromptWhenFocused" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2" theme="mobile" type="Boolean">
<description>
  Contrôle la visibilité du texte d’invite de ce composant lorsqu’il est vide et qu’il a le focus.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’anneau de focus pour ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu pour ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  Contrôle la visibilité de la bordure de composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la bordure de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de la bordure de ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Alignement vertical ou justification. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Encart supérieur en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Encart droit en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Encart gauche en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Encart inférieur en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Contrôle le retour à la ligne des mots dans le conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style></styles><skinParts><SkinPart name="promptDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Contrôle Label ou autre IDisplayText pouvant être présent dans un habillage quelconque attribué à ce composant.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The Label or other IDisplayText that might be present
      in any skin assigned to this component.</shortdesc></SkinPart><SkinPart name="textDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IEditableText">
<description>
      Texte IEditableText pouvant être présent dans chaque habillage affecté à ce composant. Correspond à RichEditableText pour le thème Spark et à StyleableStageText pour le thème Mobile.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The IEditableText that may be present
      in any skin assigned to this component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:SkinnableTextBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnableTextBase
    autoCapitalize="none"  <b>[Mobile theme only]</b>
    autoCorrect="true"  <b>[Mobile theme only]</b>
    displayAsPassword="false"
    editable="true"
    imeMode="null"  <b>[Spark theme only]</b>
    maxChars="0"
    prompt="null"
    restrict="null"
    returnLabelKey="default"  <b>[Mobile theme only]</b>
    selectable="true"
    selectionHighlighting="whenFocused"  <b>[Spark theme only]</b>
    softKeyBoardType="default"  <b>[Mobile theme only]</b>
    text=""
    typicalText="null"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    contentBackgroundAlpha="1.0" 
    contentBackgroundColor="0xFFFFFF"
    focusAlpha="0.55"
    focusColor="0x70B2EE"
    showPromptWhenFocused="true"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"  <b>[Spark theme only]</b>
    selectionChange="<i>No default</i>"  <b>[Spark theme only]</b>
    textInput="<i>No default</i>"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>spark.core:ISoftKeyboardHintClient</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Classe de base pour les composants dont l’habillage peut être configuré, tels que Spark TextInput et TextArea, qui incluent une occurrence de IEditableText dans leur habillage pour fournir des fonctionnalités d’affichage, de défilement, de sélection et de modification du texte. Par défaut, IEditableText correspond à RichEditableText pour le thème Spark et à StyleableStageText pour le thème Mobile. StyleableTextField est également disponible pour le thème Mobile.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  Distribué lorsqu’une séquence de touches est sur le point d’être d’entrée pour le composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une séquence de touches est sur le point d’être entrée pour le composant.
   <p><b>Pour le thème Mobile, ceci n’est pas distribué.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué au terme d’une opération de modification par un utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué au terme d’une opération utilisateur de modification.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Distribué avant une opération utilisateur de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué avant une opération utilisateur de modification. Vous pouvez modifier l’opération ou annuler l’événement pour empêcher le traitement de l’opération. 
   <p><b>Pour le thème Mobile, ceci n’est pas distribué.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  Distribué après modification, quelle qu’en soit la raison, des propriétés selectionAnchorPosition et/ou selectionActivePosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après modification, quelle qu’en soit la raison, des propriétés <codeph>selectionAnchorPosition</codeph> et/ou <codeph>selectionActivePosition</codeph>.
   <p><b>Pour le thème Mobile, ceci n’est pas distribué.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:SkinnableTextBase:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableTextBase:appendText"><apiName>appendText</apiName><shortdesc conref="spark.core.IEditableText#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Texte à ajouter. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#appendText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/appendText()"><linktext>spark.components.RichEditableText.appendText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/appendText()"><linktext>spark.components.supportClasses.StyleableStageText.appendText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:insertText"><apiName>insertText</apiName><shortdesc conref="spark.core.IEditableText#insertText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Texte à insérer. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#insertText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/insertText()"><linktext>spark.components.RichEditableText.insertText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/insertText()"><linktext>spark.components.supportClasses.StyleableStageText.insertText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.core.IEditableText#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectAll()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectAll()"><linktext>spark.components.RichEditableText.selectAll()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectAll()"><linktext>spark.components.supportClasses.StyleableStageText.selectAll()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectRange"><apiName>selectRange</apiName><shortdesc conref="spark.core.IEditableText#selectRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>Position des caractères spécifiant la fin de la sélection qui reste fixe lorsque la sélection est étendue. 
           </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>Position des caractères spécifiant la fin de la sélection qui se déplace lorsque la sélection est étendue. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectRange()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectRange()"><linktext>spark.components.RichEditableText.selectRange()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectRange()"><linktext>spark.components.supportClasses.StyleableStageText.selectRange()</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCapitalize:get"><apiName>autoCapitalize</apiName><shortdesc>
      Conseil indiquant le comportement relatif à la casse que les claviers logiciels doivent utiliser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Conseil indiquant le comportement relatif à la casse que les claviers logiciels doivent utiliser. 
           <p>Les valeurs prises en charge sont définies dans flash.text.AutoCapitalize :</p>
     
      <ul>
          <li><codeph>"none"</codeph> - aucune majuscule automatique</li>
          <li><codeph>"word"</codeph> - mettre en majuscule la première lettre suivant un espace ou un signe de ponctuation</li>
          <li><codeph>"sentence"</codeph> - mettre en majuscule la première lettre suivant un point</li>
          <li><codeph>"all"</codeph> - mettre toutes les lettres en majuscules</li>
      </ul>
           <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AutoCapitalize.xml"><linktext>flash.text.AutoCapitalize</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCorrect:get"><apiName>autoCorrect</apiName><shortdesc>
      Conseil indiquant si un clavier logiciel doit utiliser le comportement de correction automatique, si ce dernier est pris en charge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Conseil indiquant si un clavier logiciel doit utiliser le comportement de correction automatique, si ce dernier est pris en charge.
      <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:editable:get"><apiName>editable</apiName><shortdesc>
      Spécifie si le texte est modifiable.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie si le texte est modifiable.
     
      <p><b>Pour le thème Spark, voir spark.components.RichEditableText.editable</b></p>
           <p><b>Pour le thème Mobile, voir spark.components.supportClasses.StyleableStageText.editable</b>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/editable"><linktext>spark.components.RichEditableText.editable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/editable"><linktext>spark.components.supportClasses.StyleableStageText.editable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. 
     
      <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/enableIME"><linktext>spark.components.RichEditableText.enableIME</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).
     
      <p><b>Pour le thème Spark, voir spark.components.RichEditableText.imeMode</b></p>
           <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/imeMode"><linktext>spark.components.RichEditableText.imeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:prompt:get"><apiName>prompt</apiName><shortdesc>
      Texte à afficher si/lorsque la propriété du texte réel est une chaîne vide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Texte à afficher si la propriété du texte réel est une chaîne vide.
     
      <p>Le texte d’invite s’affiche lors de la création initiale du contrôle de texte. Le texte d’invite disparaît lorsque le contrôle obtient le focus ou lorsque la propriété <codeph>text</codeph> du contrôle est une chaîne non vide. Le texte d’invite réapparaît lorsque le contrôle perd le focus, mais uniquement si aucun texte n’a été saisi (si la valeur du champ de texte est la chaîne vide).</p>
      
      <p>Pour les contrôles de texte, si l’utilisateur saisit du texte mais le supprime ultérieurement, le texte d’invite réapparaît lorsque le contrôle perd le focus. Vous pouvez également provoquer la réapparition du texte d’invite par programmation en définissant la propriété text du contrôle de texte sur la chaîne vide.</p>
      
      <p>Vous pouvez changer le style du texte d’invite avec les feuilles de style CSS. Si le contrôle comporte un texte d'invite et n'est pas désactivé, le style est défini par le pseudo-sélecteur <codeph>normalWithPrompt</codeph>. Si le contrôle est désactivé, les styles définis par le pseudo-sélecteur <codeph>disabledWithPrompt</codeph> sont utilisés.</p>
      
      <p>L’exemple de CSS suivant modifie la couleur du texte d’invite dans les contrôles qui utilisent SkinnableTextBase comme sous-classe (ceci inclut les contrôles Spark TextInput et TextArea) :
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|SkinnableTextBase:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:returnKeyLabel:get"><apiName>returnKeyLabel</apiName><shortdesc>
      Conseil indiquant l’étiquette à afficher pour la touche Entrée sur les claviers logiciels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Conseil indiquant l’étiquette à afficher pour la touche Entrée sur les claviers logiciels.
           <p>Les valeurs prises en charge sont définies dans flash.text.ReturnKeyLabel :</p>
     
      <ul>
          <li><codeph>"default"</codeph> - icône ou texte d’étiquette par défaut</li>
          <li><codeph>"done"</codeph> - icône ou texte d’étiquette indiquant la fin de la saisie de texte</li>
          <li><codeph>"go"</codeph> - icône ou texte d’étiquette indiquant qu’une action doit démarrer</li>
          <li><codeph>"next"</codeph> - icône ou texte d’étiquette indiquant un déplacement vers le champ suivant</li>
          <li><codeph>"search"</codeph> - icône ou texte d’étiquette indiquant que le texte entré doit être recherché</li>
      </ul>
           <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.ReturnKeyLabel.xml"><linktext>flash.text.ReturnKeyLabel</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectable:get"><apiName>selectable</apiName><shortdesc>
      Indicateur précisant si le contenu peut être sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si le contenu peut être sélectionné. Sur le Bureau, l’utilisateur peut sélectionner du contenu à l’aide de la souris, ou avec le clavier lorsque le contrôle a le focus du clavier. Sur un périphérique à interaction tactile, l’utilisateur peut sélectionner du texte avec ses doigts lorsqu’il a activé le mode de sélection pour le composant de texte.
     
      <p><b>Pour le thème Spark, voir spark.components.RichEditableText.selectable</b></p>
           <p><b>Pour le thème Mobile, voir spark.components.supportClasses.StyleableStageText.selectable</b>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectable"><linktext>spark.components.supportClasses.StyleableStageText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      La position d’un caractère, par rapport au début de la chaîne de caractères, en indiquant la fin de la sélection qui se déplace lorsque la sélection est étendue à l’aide des touches fléchées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      La position d’un caractère, par rapport au début de la chaîne <codeph>text</codeph> en indiquant la fin de la sélection qui se déplace lorsque la sélection est étendue à l’aide des touches fléchées. 
     
      <p><b>Pour le thème Spark, voir spark.components.RichEditableText.selectionActivePosition</b></p>
           <p><b>Pour le thème Mobile, voir spark.components.supportClasses.StyleableStageText.selectionActivePosition</b>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionActivePosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      La position d’un caractère, par rapport au début de la chaîne de caractères, en indiquant la fin de la sélection qui reste fixe lorsque la sélection est étendue à l’aide des touches fléchées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      La position d’un caractère, par rapport au début de la chaîne <codeph>text</codeph>, en indiquant la fin de la sélection qui reste fixe lorsque la sélection est étendue à l’aide des touches fléchées. 
     
      <p><b>Pour le thème Spark, voir spark.components.RichEditableText.selectionAnchorPosition</b></p>
           <p><b>Pour le thème Mobile, voir spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</b>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionAnchorPosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
      Détermine si la sélection du texte est mis en surbrillance. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si la sélection du texte est mise en surbrillance. 
     
      <p><b>Pour le thème Spark, voir spark.components.RichEditableText.selectionHighlighting</b></p>
           <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionHighlighting"><linktext>spark.components.RichEditableText.selectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:softKeyboardType:get"><apiName>softKeyboardType</apiName><shortdesc>
      Conseil indiquant le type de clavier logiciel à afficher pour ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Conseil indiquant le type de clavier logiciel à afficher pour ce composant.
           <p>Les valeurs prises en charge sont définies dans flash.text.SoftKeyboardType :</p>
     
      <ul>
          <li><codeph>"default"</codeph> - clavier par défaut</li>
          <li><codeph>"punctuation"</codeph> - place le clavier en mode d’entrée ponctuation/symbole</li>
          <li><codeph>"url"</codeph> - présente des touches programmables adaptées pour la saisie d’URL, comme une touche spécialisée qui insère « .com »</li>
          <li><codeph>"number"</codeph> - place le clavier en mode pavé numérique</li>
          <li><codeph>"contact"</codeph> - place le clavier dans un mode approprié pour la saisie des informations de contact</li>
          <li><codeph>"email"</codeph> - place le clavier en mode de saisie d’adresses électroniques, ce qui facilite la saisie du caractère arobase ou de « .com »</li>
      </ul>
           <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.SoftKeyboardType.xml"><linktext>flash.text.SoftKeyboardType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:text:get"><apiName>text</apiName><shortdesc>
      Texte affiché par ce composant de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte affiché par ce composant de texte. 
     
      <p><b>Pour le thème Spark, voir spark.components.RichEditableText.text</b></p>
           <p><b>Pour le thème Mobile, voir spark.components.supportClasses.StyleableStageText#text</b>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/text"><linktext>spark.components.supportClasses.StyleableStageText.text</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:typicalText:get"><apiName>typicalText</apiName><shortdesc>
      Texte qui est utilisé pour déterminer la largeur et la hauteur par défaut du contrôle, sans réellement être affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte qui est utilisé pour déterminer la largeur et la hauteur par défaut du contrôle, sans qu’il soit réellement affiché.
     
      <p><b>Pour le thème Spark, voir spark.components.RichEditableText.typicalText</b></p>
           <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/typicalText"><linktext>spark.components.RichEditableText.typicalText</linktext></link></related-links></apiValue></apiClassifier></apiPackage>