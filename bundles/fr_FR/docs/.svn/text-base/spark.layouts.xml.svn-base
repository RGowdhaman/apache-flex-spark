<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.layouts"><apiName>spark.layouts</apiName><apiDetail/><apiClassifier id="spark.layouts:VerticalAlign"><apiName>VerticalAlign</apiName><shortdesc>
  La classe VerticalAlign définit les valeurs possibles de la propriété verticalAlign de la classe HorizontalLayout. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe VerticalAlign définit les valeurs possibles de la propriété <codeph>verticalAlign</codeph> de la classe HorizontalLayout. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.xml#HorizontalLayout/verticalAlign"><linktext>HorizontalLayout.verticalAlign</linktext></link></related-links><apiValue id="spark.layouts:VerticalAlign:BASELINE"><apiName>BASELINE</apiName><shortdesc>
      Positionnez verticalement les enfants de sorte que leur texte soit aligné sur la ligne de base du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>baseline</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Positionnez verticalement les enfants de sorte que leur texte soit aligné sur la ligne de base du conteneur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalAlign:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      Aligner verticalement les enfants sur le bas du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Aligner verticalement les enfants sur le bas du conteneur. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalAlign:CONTENT_JUSTIFY"><apiName>CONTENT_JUSTIFY</apiName><shortdesc>
      Justifier le contenu des enfants par rapport au conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contentJustify</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Justifier le contenu des enfants par rapport au conteneur. Ceci dimensionne uniformément tous les enfants sur la hauteur de contenu du conteneur. La hauteur de contenu du conteneur est la taille de l’enfant le plus grand. Si tous les enfants sont plus petits que la hauteur du conteneur, tous les enfants seront dimensionnés à la hauteur du conteneur. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc>
      Justifier les enfants par rapport au conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Justifier les enfants par rapport au conteneur. Ceci dimensionne uniformément tous les enfants sur la même hauteur que le conteneur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalAlign:MIDDLE"><apiName>MIDDLE</apiName><shortdesc>
      Aligner verticalement les enfants sur le milieu du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Aligner verticalement les enfants sur le milieu du conteneur. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalAlign:TOP"><apiName>TOP</apiName><shortdesc>
      Aligner verticalement les enfants sur le haut du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Aligner verticalement les enfants sur le haut du conteneur. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.layouts:ColumnAlign"><apiName>ColumnAlign</apiName><shortdesc>
  La classe ColumnAlign définit les valeurs possibles de la propriété columnAlign de la classe TileLayout. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ColumnAlign définit les valeurs possibles de la propriété <codeph>columnAlign</codeph> de la classe TileLayout. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout/columnAlign"><linktext>TileLayout.columnAlign</linktext></link></related-links><apiValue id="spark.layouts:ColumnAlign:JUSTIFY_USING_GAP"><apiName>JUSTIFY_USING_GAP</apiName><shortdesc>
      Justifiez les lignes en augmentant l’écart vertical. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justifyUsingGap</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Justifiez les lignes en augmentant l’écart vertical. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:ColumnAlign:JUSTIFY_USING_WIDTH"><apiName>JUSTIFY_USING_WIDTH</apiName><shortdesc>
      Justifiez les lignes en augmentant la hauteur de ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justifyUsingWidth</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Justifiez les lignes en augmentant la hauteur de ligne. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:ColumnAlign:LEFT"><apiName>LEFT</apiName><shortdesc>
      Ne justifiez pas les lignes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Ne justifiez pas les lignes. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.layouts:FormLayout"><apiName>FormLayout</apiName><shortdesc>
  La classe FormLayout définit la présentation par défaut pour les habillages Spark Form.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts:VerticalLayout</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe FormLayout définit la mise en page par défaut pour les habillages Spark Form. FormLayout fournit une présentation verticale pour les conteneurs FormItem enfants dans le formulaire. Si l’un des conteneurs enfant utilise un élément FormItemLayout, FormLayout aligne les éléments ConstraintColumns de chaque enfant. Le nombre de colonnes des enfants doit être le même et les colonnes doivent avoir le même type de paramètre de largeur. Par exemple, si le premier enfant de la deuxième colonne a une largeur en pourcentage, alors la deuxième colonne du deuxième enfant doit également avoir une largeur en pourcentage.
   <p><b>Remarque</b> : utilisez uniquement la classe FormLayout avec le conteneur Spark Form. Ne l’utilisez pas pour mettre en forme le contenu d’autres conteneurs.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormItemLayout"><linktext>spark.layouts.FormItemLayout</linktext></link></related-links><apiConstructor id="spark.layouts:FormLayout:FormLayout"><apiName>FormLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.layouts:FormItemLayout"><apiName>FormItemLayout</apiName><shortdesc>
  Le FormItemLayout est utilisé par les FormItems pour fournir une mise en page basée sur des contraintes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts:ConstraintLayout</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le FormItemLayout est utilisé par les FormItems pour fournir une mise en page basée sur des contraintes. Les éléments sui utilisent FormItemLayout au sein d'un FormLayout sont alignés sur des colonnes.  
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.layouts:FormItemLayout:FormItemLayout"><apiName>FormItemLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.layouts:ConstraintLayout"><apiName>ConstraintLayout</apiName><shortdesc>
  La classe ConstraintLayout dispose les éléments de mise en page en fonction de leurs paramètres individuels et un ensemble de régions de contrainte définies par colonnes et lignes de contrainte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ConstraintLayout dispose les éléments de mise en page en fonction de leurs paramètres individuels et un ensemble de régions de contrainte définies par colonnes et lignes de contrainte. Même si vous pouvez utiliser toutes les propriétés et les contraintes de BasicLayout afin de positionner et de dimensionner des éléments, ConstraintLayout permet de créer des mises en page sœurs en imposant des contraintes aux éléments des colonnes et des lignes spécifiées. 
 
  <p><b>Remarque : </b>les contrôles basés sur une liste Spark (le contrôle List Spark et ses sous-classes, telles que ButtonBar, ComboBox, DropDownList et TabBar) ne prennent pas en charge la classe BasicLayout. N’utilisez pas BasicLayout avec les contrôles basés sur une liste Spark.</p>
 
  <p>Les contraintes prises en charge par élément sont <codeph>left</codeph>, <codeph>right</codeph>, <codeph>top</codeph>, <codeph>bottom</codeph>, <codeph>, baseline</codeph>, <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph>. Les tailles minimale et maximale de l’élément seront toujours respectées.</p>
 
  <p>Les colonnes et les lignes peuvent avoir une taille explicite ou un contenu explicite (s'ils n'ont pas de taille explicite). Les régions de taille explicite seront définies à leur taille spécifiée, alors que les régions de taille de contenu seront dimensionnées pour accueillir uniquement les éléments qui leur sont affectés par les contraintes. Si un élément recouvre plusieurs régions de taille de contenu, l'espace sera réparti également entre les régions de taille de contenu. </p>
 
  <p>La taille mesurée du conteneur est calculée en fonction des éléments, de leurs contraintes, de leur taille préférée et de la taille des lignes et des colonnes. La taille de chaque ligne et de chaque colonne est juste suffisante pour accueillir tous les éléments qui lui sont affectés par les contraintes à leur taille préférée, les contraintes étant satisfaites. La taille mesurée du conteneur est suffisante pour accueillir toutes les colonnes et les lignes ainsi que tout autre élément laissé à sa taille préférée, les contraintes étant satisfaites. </p>
 
  <p>Lors d’un appel de la méthode <codeph>updateDisplayList()</codeph>, la taille de l’élément est calculée selon les règles suivantes, répertoriées dans leur ordre de priorité respectif (les tailles minimale et maximale de l’élément sont toujours respectées) :</p>
  <ul>
    <li>Si la valeur <codeph>percentWidth</codeph> ou <codeph>percentHeight</codeph> de l’élément est définie, la taille de l’élément est calculée en tant que pourcentage de la taille du conteneur, où la taille disponible est la taille du conteneur moins les contraintes <codeph>left</codeph>, <codeph>right</codeph>, <codeph>top</codeph> ou <codeph>bottim</codeph>. </li>
 
    <li>Si l’élément comporte des contraintes left et right, sa largeur est définie sur la largeur du conteneur moins les contraintes <codeph>left</codeph> et <codeph>right</codeph>.</li>
 
    <li>Si l’élément comporte des contraintes <codeph>top</codeph> et <codeph>bottom</codeph>, sa hauteur est définie sur la hauteur du conteneur moins les contraintes <codeph>top</codeph> et <codeph>bottom</codeph>. </li>
 
    <li>L’élément est défini sur sa largeur et/ou hauteur préférée. </li>
  </ul>
 
  <p>La position de l’élément est calculée selon les règles suivantes, répertoriées dans leur ordre de priorité respectif : </p>
  <ul>
    <li>Si la ligne de base de l’élément est spécifiée, l’élément est positionné dans la direction verticale de sorte que sa position <codeph>baselinePosition</codeph> (généralement la ligne de base de sa première ligne de texte) soit alignée sur la contrainte <codeph>baseline</codeph>.</li>
 
    <li>Si les contraintes <codeph>top</codeph> ou <codeph>left</codeph> de l’élément sont spécifiées, l’élément est positionné de sorte que le coin supérieur gauche de ses limites de présentation soit décalé par rapport au coin supérieur gauche du conteneur par les valeurs spécifiées. </li>
 
    <li>Si les contraintes <codeph>bottom</codeph> ou <codeph>right</codeph> de l’élément sont spécifiées, l’élément est positionné de sorte que le coin inférieur droit de ses limites de présentation soit décalé par rapport au coin inférieur droit du conteneur par les valeurs spécifiées. </li>
 
    <li>Lorsqu’aucune contrainte ne détermine la position dans la direction horizontale ou verticale, l’élément est positionné en fonction de ses coordonnées x et y. </li>
  </ul>
 
  <p>La taille du contenu du conteneur est calculée comme la taille maximale des coordonnées de l'angle inférieur droit de tous les éléments de mise en page et régions de contraintes. </p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.layouts:ConstraintLayout:ConstraintLayout"><apiName>ConstraintLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.layouts:ConstraintLayout:protected:layoutContent"><apiName>layoutContent</apiName><shortdesc>
      Positionne les éléments de la cible de mise en forme à l’aide de la largeur et de la hauteur actuelles des colonnes et des lignes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Positionne les éléments de la cible de mise en forme à l’aide de la largeur et de la hauteur actuelles des colonnes et des lignes. Utilisé par FormItemLayout après la définition de nouvelles largeurs de colonne pour mettre en forme les éléments en utilisant ces nouvelles largeurs.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.layouts:ConstraintLayout:protected:measureAndPositionColumnsAndRows"><apiName>measureAndPositionColumnsAndRows</apiName><shortdesc>
      Utilisé par FormItemLayout pour mesurer et définir de nouvelles largeurs de colonne et hauteurs de rangée avant la présentation des éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constrainedWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>L'épaisseur totale disponible pour les colonnes à étirer ou rétrécir leur pourcentage de largeur des colonnes. Si la valeur est NaN, pourcentage de largeur des colonnes sont libre et s'adapte à leur contenu.
      </apiDesc></apiParam><apiParam><apiItemName>constrainedHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Hauteur totale disponible pour les lignes à étirer ou rétrécir leurs pour cent des lignes de hauteur. Si la valeur est NaN, pourcentage des lignes de hauteur sont libre et s'adapte à leur contenu.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Utilisé par FormItemLayout pour mesurer et définir de nouvelles largeurs de colonne et hauteurs de rangée avant la présentation des éléments.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.layouts:ConstraintLayout:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc>
      Un vecteur des instances de ConstraintColumn qui partitionne le conteneur cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>
      Un vecteur des instances de ConstraintColumn qui partitionne le conteneur cible. L’occurrence ConstraintColumn qui se trouve à l’index 0 correspond à la colonne le plus à gauche. L’index augmente de gauche à droite. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:ConstraintLayout:constraintRows:get"><apiName>constraintRows</apiName><shortdesc>
      Un vecteur des instances de ConstraintRow qui partitionne le conteneur cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$mx.containers.utilityClasses:ConstraintRow"/></apiValueDef><apiDesc>
      Un vecteur des instances de ConstraintRow qui partitionne le conteneur cible. L’instance de ConstraintRow qui se trouve à l’index 0 correspond à la colonne supérieure ; les index sont disposés en ordre croissant de haut en bas. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.layouts:TileLayout"><apiName>TileLayout</apiName><shortdesc>
  La classe TileLayout dispose les éléments de présentation dans des colonnes et des lignes de cellules de taille identique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;s:TileLayout&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TileLayout 
    <strong>Properties</strong>
    columnAlign="left"
    columnWidth="NaN"
    horizontalAlign="justify"
    horizontalGap="6"
    orientation="rows"
    requestedColumnCount="-1"
    requestedRowCount="-1"
    rowAlign="top"
    rowCount="-1"
    rowHeight="NaN"
    verticalAlign="justify"
    verticalGap="6"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TileLayout dispose les éléments de présentation dans des colonnes et des lignes de cellules de taille identique. La classe TileLayout utilise des propriétés qui contrôlent l’orientation, le nombre, la taille, l’écart et la justification des colonnes et des lignes, ainsi que d’alignement des éléments dans les cellules.
   <p>Les contraintes prises en charge par élément sont <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph>. Les tailles minimale et maximale d’élément seront toujours respectées et, lorsque cela est possible, la taille d’un élément sera limitée à une taille inférieure ou égale à la taille de cellule.</p>
   <p>Lorsque cette valeur n’est pas définie de manière explicite, la propriété <codeph>columnWidth</codeph> est calculée en tant que largeur de limite préférée maximale de tous les éléments et la propriété <codeph>columnHeight</codeph> en tant que hauteur de limite préférée maximale de tous les éléments.</p>
   <p>Lorsque cette valeur n’est pas définie de manière explicite, les nombres <codeph>columnCount</codeph> et <codeph>rowCount</codeph> sont calculés à partir de n’importe quels paramètres de largeur/hauteur explicites pour la cible de présentation et les propriétés <codeph>columnWidth</codeph> et <codeph>columnHeight</codeph>. Si aucune valeur n’est spécifiée, les valeurs <codeph>columnCount</codeph> et <codeph>rowCount</codeph> sont sélectionnées de sorte que la zone de pixel résultante soit aussi carrée que possible.</p>
 
 <p> La taille mesurée est calculée à partir des valeurs <codeph>columnCount</codeph>, <codeph>rowCount</codeph>, <codeph>columnWidth</codeph> et <codeph>rowHeight</codeph> et des tailles d’écart.</p>
   <p>La taille mesurée par défaut, lorsqu’aucune propriété n’a été explicitement définie, correspond à une zone aussi carrée que possible et est suffisante pour recevoir tous les éléments.</p>
   <p>Dans les autres cas, la taille mesurée peut ne pas être suffisante pour recevoir tous les éléments ; par exemple, lorsque les valeurs <codeph>columnCount</codeph> et <codeph>rowCount</codeph> sont explicitement définies sur des valeurs telles que <codeph>columnCount</codeph> * <codeph>rowCount</codeph> &lt; nombre d’éléments.</p>
   <p>La taille mesurée minimale est calculée de la même manière que la taille mesurée, mais il est garanti qu’elle englobe suffisamment de lignes et de colonnes le long de l’axe mineur pour recevoir tous les éléments. </p>
   </apiDesc></apiClassifierDetail><apiConstructor id="spark.layouts:TileLayout:TileLayout"><apiName>TileLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.layouts:TileLayout:protected:calculateDropIndex"><apiName>calculateDropIndex</apiName><shortdesc>
      
      Renvoie l’index dans lequel un nouvel élément doit être inséré lorsque l’utilisateur relâche la souris sur les coordonnées spécifiées à l’issue d’un glisser-déposer. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Index de dépôt ou -1 si l’opération n’est pas disponible aux coordonnées spécifiées. 
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée x de l’opération glisser-déposer, selon les coordonnées locales. 
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée y de l’opération glisser-déposer, selon les coordonnées locales de la cible de dépôt. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie l’index dans lequel un nouvel élément doit être inséré lorsque l’utilisateur relâche la souris sur les coordonnées spécifiées à l’issue d’un glisser-déposer. Appelé par la méthode <codeph>calculatedDropLocation()</codeph>. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.layouts:TileLayout:protected:calculateDropIndicatorBounds"><apiName>calculateDropIndicatorBounds</apiName><shortdesc>
      
      Calcule les limites de l’indicateur de dépôt qui fournit des informations visuelles à l’utilisateur sur l’emplacement d’insertion des éléments à l’issue d’une opération glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Limites de l’indicateur de dépôt ou null. 
     
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>dropLocation</apiItemName><apiOperationClassifier>spark.layouts.supportClasses:DropLocation</apiOperationClassifier><apiDesc>Objet DropLocation valide préalablement renvoyé par la méthode <codeph>calculateDropLocation()</codeph>. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Calcule les limites de l’indicateur de dépôt qui fournit des informations visuelles à l’utilisateur sur l’emplacement d’insertion des éléments à l’issue d’une opération glisser-déposer. Appelé par la méthode <codeph>showDropIndicator()</codeph>. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.layouts:TileLayout:columnAlign:get"><apiName>columnAlign</apiName><shortdesc>
      Indique comment justifier les colonnes entièrement visibles sur la largeur du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ColumnAlign.LEFT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique comment justifier les colonnes entièrement visibles sur la largeur du conteneur. Les valeurs ActionScript peuvent être <codeph>ColumnAlign.LEFT</codeph>, <codeph>ColumnAlign.JUSTIFY_USING_GAP</codeph> et <codeph>ColumnAlign.JUSTIFY_USING_WIDTH</codeph>. Les valeurs MXML peuvent être <codeph>left</codeph>, <codeph>justifyUsingGap</codeph> et <codeph>justifyUsingWidth</codeph>.
           <p>Lorsqu’elles sont définies sur <codeph>ColumnAlign.LEFT</codeph>, elles désactivent la justification de colonne. Des colonnes ou des espaces peuvent être partiellement visibles entre la dernière colonne et le bord droit du conteneur. Il s’agit de la valeur par défaut.</p>
           <p>Lorsque défini sur <codeph>ColumnAlign.JUSTIFY_USING_GAP</codeph> - la valeur <codeph>horizontalGap</codeph> réelle augmente de sorte que le bord droit de la dernière colonne entièrement visible s’aligne sur le bord droit du conteneur. S’il n’y a qu’une seule colonne entièrement visible, la valeur <codeph>horizontalGap</codeph> réelle augmente de sorte que toute colonne partiellement visible soit repoussée juste au-delà du bord droit du conteneur. Notez que la définition explicite de la propriété <codeph>horizontalGap</codeph> ne désactive pas la justification. Elle détermine uniquement la valeur de l’écart initial. La justification peut augmenter. </p>
           <p>Lorsque défini sur <codeph>ColumnAlign.JUSTIFY_USING_WIDTH</codeph> - la valeur <codeph>columnWidth</codeph> réelle augmente de sorte que le bord droit de la dernière colonne entièrement visible s’aligne sur le bord droit du conteneur. Notez que la définition explicite de la propriété <codeph>propriétés columnWidth</codeph> ne désactive pas la justification. Elle détermine la valeur de la largeur de la colonne initiale. La justification peut augmenter. </p>
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/horizontalGap"><linktext>horizontalGap</linktext></link><link href="spark.layouts.xml#TileLayout/columnWidth"><linktext>columnWidth</linktext></link><link href="spark.layouts.xml#TileLayout/rowAlign"><linktext>rowAlign</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:columnCount:get"><apiName>columnCount</apiName><shortdesc>
      Contient le nombre réel de colonnes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Contient le nombre réel de colonnes. 
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/rowCount"><linktext>rowCount</linktext></link><link href="spark.layouts.xml#TileLayout/columnAlign"><linktext>columnAlign</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
      Contient la véritable largeur de la colonne, en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Contient la véritable largeur de la colonne, en pixels. 
           <p>Si elle n’est pas définie de façon explicite, la largeur de la colonne est déterminée à partir de la largeur de l’élément le plus large.  </p>
           <p>Si la propriété <codeph>columnAlign</codeph> est définie sur <codeph>"justifyUsingWidth"</codeph>, la largeur de la colonne augmente jusqu’atteindre celle du conteneur pour justifier les colonnes entièrement visibles. </p>
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/rowHeight"><linktext>rowHeight</linktext></link><link href="spark.layouts.xml#TileLayout/columnAlign"><linktext>columnAlign</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc>
      Indique comment aligner les éléments dans les cellules dans la direction horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.JUSTIFY&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique comment aligner les éléments dans les cellules dans la direction horizontale. Les valeurs prises en charge sont <codeph>HorizontalAlign.LEFT</codeph>, <codeph>HorizontalAlign.CENTER</codeph>, <codeph>HorizontalAlign.RIGHT</codeph> et <codeph>HorizontalAlign.JUSTIFY</codeph>.
           <p>Lorsque défini sur <codeph>HorizontalAlign.JUSTIFY</codeph>, la largeur de chaque élément est définie sur <codeph>columnWidth</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:TileLayout:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc>
      Espace horizontal entre les colonnes, en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Espace horizontal entre les colonnes, en pixels. 
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/verticalGap"><linktext>verticalGap</linktext></link><link href="spark.layouts.xml#TileLayout/columnAlign"><linktext>columnAlign</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:orientation:get"><apiName>orientation</apiName><shortdesc>
      Indique si les éléments sont organisés ligne par ligne ou colonne par colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TileOrientation.ROWS
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si les éléments sont organisés ligne par ligne ou colonne par colonne. Les valeurs ActionScript peuvent être <codeph>TileOrientation.ROWS</codeph> et <codeph>TileOrientation.COLUMNS</codeph>. Les valeurs MXML peuvent être <codeph>rows</codeph> et <codeph>columns</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:TileLayout:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
      Nombre de pixels entre la bordure inférieure du conteneur et le bord inférieur du dernier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure inférieure du conteneur et le bord inférieur du dernier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:TileLayout:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
      Nombre de pixels entre la bordure gauche du conteneur et le bord gauche du premier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure gauche du conteneur et le bord gauche du premier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:TileLayout:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
      Nombre de pixels entre la bordure droite du conteneur et le bord droit du premier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure droite du conteneur et le bord droit du premier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:TileLayout:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
      Nombre de pixels entre la bordure supérieure du conteneur et le bord supérieur du premier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure supérieure du conteneur et le bord supérieur du premier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:TileLayout:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc>
      Nombre de colonnes à afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de colonnes à afficher.
     
      <p>Défini sur -1 pour permettre à la présentation TileLayout de déterminer automatiquement le nombre de colonnes.</p>
           <p>Si la propriété <codeph>orientation</codeph> est définie sur <codeph>TileOrientation.ROWS</codeph>, sa définition n’a aucun effet. Dans ce cas, la propriété <codeph>rowCount</codeph> est définie de façon explicite et la largeur du conteneur est définie de façon explicite.  </p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/columnCount"><linktext>columnCount</linktext></link><link href="spark.layouts.xml#TileLayout/columnAlign"><linktext>columnAlign</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc>
      Nombre de rangées à afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de rangées à afficher.
     
      <p>Défini sur -1 pour supprimer le remplacement explicite et permettre à la présentation TileLayout de déterminer automatiquement le nombre de lignes. </p>
           <p>Si la propriété <codeph>orientation</codeph> est définie sur <codeph>TileOrientation.colonnes</codeph>, sa définition n’a aucun effet. Dans ce cas, <codeph>columnCount</codeph> est défini de façon explicite, tout comme la hauteur du conteneur. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/rowCount"><linktext>rowCount</linktext></link><link href="spark.layouts.xml#TileLayout/rowAlign"><linktext>rowAlign</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:rowAlign:get"><apiName>rowAlign</apiName><shortdesc>
      Indique comment justifier les lignes entièrement visibles sur la hauteur du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>RowAlign.TOP
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique comment justifier les lignes entièrement visibles sur la hauteur du conteneur. Les valeurs ActionScript peuvent être <codeph>RowAlign.TOP</codeph>, <codeph>RowAlign.JUSTIFY_USING_GAP</codeph> et <codeph>RowAlign.JUSTIFY_USING_HEIGHT</codeph>. Les valeurs MXML peuvent être <codeph>top</codeph>, <codeph>justifyUsingGap</codeph> et <codeph>justifyUsingHeight</codeph>.
           <p>Lorsqu’elle est définie sur <codeph>RowAlign.TOP</codeph>, elle désactive la justification de colonne. Des lignes ou des espaces peuvent être partiellement visibles entre la dernière ligne et le bord inférieur du conteneur. Il s’agit de la valeur par défaut.</p>
           <p>Lorsque défini sur <codeph>RowAlign.JUSTIFY_USING_GAP</codeph> - la valeur <codeph>verticalGap</codeph> réelle augmente de sorte que le bord inférieur de la dernière ligne entièrement visible s’aligne sur le bord inférieur du conteneur. S’il n’y a qu’une seule ligne entièrement visible, la valeur <codeph>verticalGap</codeph> augmente de sorte que toute ligne partiellement visible soit repoussée au-delà du bord inférieur du conteneur. Notez que la définition explicite de la propriété <codeph>verticalGap</codeph> ne désactive pas la justification, mais uniquement détermine la valeur de l’écart initial. La justification peut ensuite l’augmenter. </p>
           <p>Lorsque défini sur <codeph>RowAlign.JUSTIFY_USING_HEIGHT</codeph> - la valeur <codeph>rowHeight</codeph> augmente de sorte que le bord inférieur de la dernière ligne entièrement visible s’aligne sur le bord inférieur du conteneur. Notez que la définition explicite de la valeur <codeph>rowHeight</codeph> ne désactive pas la justification, mais détermine la la valeur de la hauteur de ligne initiale. La justification peut ensuite l’augmenter. </p>
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/verticalGap"><linktext>verticalGap</linktext></link><link href="spark.layouts.xml#TileLayout/rowHeight"><linktext>rowHeight</linktext></link><link href="spark.layouts.xml#TileLayout/columnAlign"><linktext>columnAlign</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:rowCount:get"><apiName>rowCount</apiName><shortdesc>
      Nombre de rangées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de rangées.
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/requestedRowCount"><linktext>requestedRowCount</linktext></link><link href="spark.layouts.xml#TileLayout/columnCount"><linktext>columnCount</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:rowHeight:get"><apiName>rowHeight</apiName><shortdesc>
      Hauteur de rangée, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur de rangée, en pixels.
           <p>Si elle n’est pas définie explicitement, la hauteur de la ligne est déterminée à partir du maximum de la hauteur des éléments.</p>
           Si <codeph>rowAlign</codeph> est défini sur « justifyUsingHeight », la hauteur de ligne réelle augmente pour justifier les lignes entièrement visibles sur la hauteur du conteneur.
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/columnWidth"><linktext>columnWidth</linktext></link><link href="spark.layouts.xml#TileLayout/rowAlign"><linktext>rowAlign</linktext></link></related-links></apiValue><apiValue id="spark.layouts:TileLayout:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
      Indique comment aligner les éléments dans les cellules dans la direction verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>VerticalAlign.JUSTIFY&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique comment aligner les éléments dans les cellules dans la direction verticale. Les valeurs prises en charge sont <codeph>VerticalAlign.TOP</codeph>, <codeph>VerticalAlign.MIDDLE</codeph>, <codeph>VerticalAlign.BOTTOM</codeph> et <codeph>VerticalAlign.JUSTIFY</codeph>.
           <p>Lorsque défini sur <codeph>VerticalAlign.JUSTIFY</codeph>, la hauteur de chaque élément est définie sur <codeph>rowHeight</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:TileLayout:verticalGap:get"><apiName>verticalGap</apiName><shortdesc>
      Espace vertical entre les lignes, en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Espace vertical entre les lignes, en pixels. 
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#TileLayout/horizontalGap"><linktext>horizontalGap</linktext></link><link href="spark.layouts.xml#TileLayout/rowAlign"><linktext>rowAlign</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.layouts:VerticalLayout"><apiName>VerticalLayout</apiName><shortdesc>
  La classe VerticalLayout dispose les éléments de présentation dans une séquence verticale, de haut en bas, avec des écarts facultatifs entre les éléments et une marge facultative autour de la séquence des éléments. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;s:VerticalLayout&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VerticalLayout 
    <strong>Properties</strong>
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedMaxRowCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount="-1"
    rowHeight="<i>calculated</i>"
    variableRowHeight="true"
    verticalAlign="top"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe VerticalLayout dispose les éléments de présentation dans une séquence verticale, de haut en bas, avec des écarts facultatifs entre les éléments et une marge facultative autour de la séquence des éléments. 
   <p>La position verticale des éléments est déterminée en les disposant dans une séquence verticale, de bas en haut, en prenant en compte la marge avant le premier élément et les écarts entre les éléments. </p>
   <p>La position horizontale des éléments est déterminée par la propriété <codeph>horizontalAlign</codeph> de la mise en forme. </p>
   <p>Pendant l’exécution de la méthode <codeph>measure()</codeph>, la taille par défaut du conteneur est calculée en accumulant les tailles préférées des éléments, y compris les écarts et la marge. Lorsque la valeur de <codeph>requestedRowCount</codeph> est définie, seul l’espace réservé à cette quantité d’éléments est mesuré, en commençant par le premier élément. </p>
   <p>Pendant l’exécution de la méthode <codeph>updateDisplayList()</codeph>, la hauteur de chaque élément est calculée selon les règles suivantes, répertoriées dans leur ordre de priorité respectif (les hauteurs minimale et maximale de l’élément sont toujours respectées) : </p>
  <ul>
    <li>Si <codeph>variableRowHeight</codeph> a la valeur <codeph>false</codeph>, définissez la hauteur de l’élément sur la valeur de la propriété <codeph>rowHeight</codeph>. </li>
     <li>Si la valeur <codeph>percentHeight</codeph> de l’élément est définie, calculez la hauteur de l’élément en distribuant la hauteur de conteneur disponible entre tous les éléments avec le paramètre <codeph>percentHeight</codeph>. La hauteur de conteneur disponible est égale à la hauteur de conteneur moins les écarts, la marge et l’espace occupé par le reste des éléments. La propriété <codeph>percentHeight</codeph> de l’élément est ignorée lorsque la présentation est virtualisée. </li>
     <li>Définissez la hauteur de l’élément sur sa hauteur préférée. </li>
  </ul>
   <p>La largeur de chaque élément est calculée selon les règles suivantes, répertoriées dans leur ordre de priorité respectif (les largeurs minimale et maximale de l’élément sont toujours respectées) : </p>
  <ul>
    <li>Si <codeph>horizontalAlign</codeph> a la valeur <codeph>"justify"</codeph>, définissez la largeur de l’élément sur la largeur du conteneur. </li>
     <li>Si <codeph>horizontalAlign</codeph> a la valeur <codeph>"contentJustify"</codeph>, définissez la largeur de l’élément sur le maximum entre la largeur du conteneur et la largeur préférée de tous les éléments. </li>
     <li>Si la valeur <codeph>percentWidth</codeph> de l’élément est définie, calculez la largeur de l’élément en tant que pourcentage de la largeur du conteneur. </li>
     <li>Définissez la largeur de l’élément sur sa largeur préférée. </li>
  </ul>
   </apiDesc></apiClassifierDetail><apiConstructor id="spark.layouts:VerticalLayout:VerticalLayout"><apiName>VerticalLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.layouts:VerticalLayout:fractionOfElementInView"><apiName>fractionOfElementInView</apiName><shortdesc>
      Renvoie 1.0 si l’index spécifié n’est pas entièrement visible, 0.0 s’il ne l’est plus ou une valeur comprise entre 0.0 et 1.0 qui représente le pourcentage de l’index partiellement visible. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Pourcentage de l’élément spécifié visible. Renvoie 0.0 si l’index spécifié n’est pas valide ou s’il correspond à un élément nul, ou un élément ILayoutElement pour lequel <codeph>includeInLayout</codeph> comporte la valeur <codeph>false</codeph>. 
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de la rangée.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie 1.0 si l’index spécifié n’est pas entièrement visible, 0.0 s’il ne l’est plus ou une valeur comprise entre 0.0 et 1.0 qui représente le pourcentage de l’index partiellement visible. 
     
      <p>Un index est visible si l’élément de présentation non nul correspondant se trouve dans les limites verticales du rectangle <codeph>scrollRect</codeph> du conteneur et est inclus dans la mise en forme.</p>
      
      <p>Si l’index spécifié est partiellement visible, la valeur renvoyée est le pourcentage de l’élément de présentation correspondant qui est visible. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.layouts:VerticalLayout:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc>
      Index du premier élément de présentation faisant partie de la présentation et situé dans le rectangle de défilement de la cible de présentation, ou -1 si rien n’a encore été affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Index du premier élément de présentation faisant partie de la présentation et situé dans le rectangle de défilement de la cible de présentation, ou -1 si rien n’a encore été affiché.
      
      <p>« Partie de la présentation » signifie que l’élément est non nul et que sa propriété <codeph>includeInLayout</codeph> est égale à <codeph>true</codeph>. </p>
     
      <p>Notez que l’élément de présentation ne peut être que partiellement visible. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.layouts.fractionOfElementInView().xml"><linktext>fractionOfElementInView()</linktext></link></related-links></apiValue><apiValue id="spark.layouts:VerticalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      Espace vertical entre les éléments de présentation, en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Espace vertical entre les éléments de présentation, en pixels. Notez que l’écart n’est appliqué qu’entre les éléments de présentation ; aussi, si un seul élément est présent, l’écart est sans effet sur la présentation. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc> 
      Alignement horizontal des éléments de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Alignement horizontal des éléments de présentation. Si la valeur est <codeph>"left"</codeph>, <codeph>"right"</codeph>ou <codeph>"center"</codeph> l’élément de présentation est aligné par rapport à la propriété <codeph>contentWidth</codeph> du conteneur. 
     
      <p>Si la valeur est égale à la valeur de <codeph>"contentJustify"</codeph>, la largeur réelle de l’élément de présentation est définie sur la largeur <codeph>contentWidth</codeph> du conteneur. La propriété <codeph>contentWidth</codeph> du conteneur est la largeur du plus grand élément de présentation. Si tous les éléments de présentation sont inférieurs à la largeur du conteneur, définissez la largeur de tous les éléments de présentation sur la largeur du conteneur. </p>
     
      <p>Si la valeur est égale à la valeur de <codeph>"justify"</codeph>, la largeur réelle de l’élément de présentation est définie sur la largeur de la cible.</p>
           <p>Cette propriété est sans effet sur la taille mesurée de la présentation. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc>
      Index de la dernière ligne faisant partie de la présentation et situé dans le rectangle de défilement de la cible de présentation, ou -1 si rien n’a encore été affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de la dernière ligne faisant partie de la présentation et situé dans le rectangle de défilement de la cible de présentation, ou -1 si rien n’a encore été affiché.
     
      <p>« Partie de la présentation » signifie que l’enfant est non nul et que sa propriété <codeph>includeInLayout</codeph> est égale à <codeph>true</codeph>. </p>
     
      <p>Notez que la ligne ne peut être que partiellement visible. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.layouts.firstIndexInView.xml"><linktext>firstIndexInView</linktext></link><link href="" invalidHref="spark.layouts.fractionOfElementInView.xml"><linktext>fractionOfElementInView</linktext></link></related-links></apiValue><apiValue id="spark.layouts:VerticalLayout:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
      Nombre de pixels entre la bordure inférieure du conteneur et le bord inférieur du dernier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure inférieure du conteneur et le bord inférieur du dernier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
      Nombre de pixels entre la bordure gauche du conteneur et le bord gauche du premier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure gauche du conteneur et le bord gauche du premier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
      Nombre de pixels entre la bordure droite du conteneur et le bord droit du premier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure droite du conteneur et le bord droit du premier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
      Nombre de pixels entre la bordure supérieure du conteneur et le bord supérieur du premier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure supérieure du conteneur et le bord supérieur du premier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc>
      La hauteur mesurée de cette présentation est suffisamment grande pour afficher au plus requestedMaxRowCount éléments de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      </apiDefaultValue></apiValueDef><apiDesc>
      La hauteur mesurée de cette présentation est suffisamment grande pour afficher au plus <codeph>requestedMaxRowCount</codeph> éléments de présentation. 
     
      <p>Si la valeur de <codeph>requestedRowCount</codeph> est définie, cette propriété n’a aucun effet. </p>
           <p>Si la taille réelle du conteneur a été explicitement définie, cette propriété est sans effet.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#VerticalLayout/requestedRowCount"><linktext>requestedRowCount</linktext></link><link href="spark.layouts.xml#VerticalLayout/requestedMinRowCount"><linktext>requestedMinRowCount</linktext></link></related-links></apiValue><apiValue id="spark.layouts:VerticalLayout:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc>
      La hauteur mesurée de cette présentation est suffisamment grande pour afficher au moins les éléments de présentation requestedMinRowCount. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      </apiDefaultValue></apiValueDef><apiDesc>
      La hauteur mesurée de cette présentation est suffisamment grande pour afficher au moins les éléments de présentation <codeph>requestedMinRowCount</codeph>.  
     
      <p>Si la valeur de <codeph>requestedRowCount</codeph> est définie, cette propriété n’a aucun effet. </p>
           <p>Si la taille réelle du conteneur a été explicitement définie, cette propriété est sans effet.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#VerticalLayout/requestedRowCount"><linktext>requestedRowCount</linktext></link><link href="spark.layouts.xml#VerticalLayout/requestedMaxRowCount"><linktext>requestedMaxRowCount</linktext></link></related-links></apiValue><apiValue id="spark.layouts:VerticalLayout:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc>
      La taille mesurée de cette présentation sera suffisante pour afficher les premiers éléments de présentation requestedRowCount.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      </apiDefaultValue></apiValueDef><apiDesc>
      La taille mesurée de cette présentation sera suffisante pour afficher les premiers éléments de présentation <codeph>requestedRowCount</codeph>. 
     
      <p>Si <codeph>requestedRowCount</codeph> est égal à -1, la taille mesurée sera suffisante pour tous les éléments de présentation. </p>
     
      <p>Si la taille réelle du conteneur a été explicitement définie, cette propriété est sans effet.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#VerticalLayout/requestedMinRowCount"><linktext>requestedMinRowCount</linktext></link><link href="spark.layouts.xml#VerticalLayout/requestedMaxRowCount"><linktext>requestedMaxRowCount</linktext></link></related-links></apiValue><apiValue id="spark.layouts:VerticalLayout:rowCount:get"><apiName>rowCount</apiName><shortdesc>
      Nombre actuel d’éléments visibles. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre actuel d’éléments visibles. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:rowHeight:get"><apiName>rowHeight</apiName><shortdesc>
      Si la valeur de variableRowHeight est false, cette propriété spécifie la hauteur réelle de chaque enfant, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Si la valeur de <codeph>variableRowHeight</codeph> est <codeph>false</codeph>, cette propriété spécifie la hauteur réelle de chaque enfant, en pixels.
     
      <p>Si la valeur de <codeph>variableRowHeight</codeph> est <codeph>true</codeph> (valeur par défaut), cette propriété est sans effet.</p>
     
      <p>La valeur par défaut de cette propriété correspond à la hauteur préférée de l’élément <codeph>typicalLayoutElement</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc>
      Spécifie si les éléments de présentation est alloué leurs hauteur par défaut. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie si éléments de mise en page sont définies sur leur hauteur par défaut. Définir cette propriété sur <codeph>false</codeph> spécifie des lignes de hauteur fixe.
     
      <p>Si la valeur est <codeph>false</codeph>, la hauteur réelle de chaque élément de présentation sera égale à la valeur de <codeph>rowHeight</codeph>. Si cette propriété est définie sur <codeph>false</codeph>, la présentation ignore la largeur <codeph>percentHeight</codeph> des éléments de présentation. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:VerticalLayout:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc> 
      Alignement vertical du contenu par rapport à la hauteur du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Alignement vertical du contenu par rapport à la hauteur du conteneur. 
     
      <p>Si la valeur est <codeph>"bottom"</codeph>, <codeph>"middle"</codeph>ou <codeph>"top"</codeph> les éléments de présentation sont alignés par rapport à la propriété <codeph>contentHeight</codeph> du conteneur. </p>
           <p>Cette propriété n’a pas d’effet lorsque <codeph>clipAndEnableScrolling</codeph> est défini sur true et que <codeph>contentHeight</codeph> est supérieure à la hauteur du conteneur. </p>
           <p>Cette propriété est sans effet sur la taille mesurée de la présentation. </p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.layouts:HorizontalLayout"><apiName>HorizontalLayout</apiName><shortdesc>
  La classe HorizontalLayout dispose les éléments de présentation dans une séquence horizontale, de gauche à droite, avec des écarts facultatifs entre les éléments et une marge facultative autour des éléments. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;s:HorizontalLayout&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:HorizontalLayout 
    <strong>Properties</strong>
    columnWidth="<i>calculated</i>"
    gap="6"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount="-1"
    requestedMaxColumnCount="-1"
    requestedMinColumnCount="-1"
    variableColumnWidth="true"
    verticalAlign="top"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe HorizontalLayout dispose les éléments de présentation dans une séquence horizontale, de gauche à droite, avec des écarts facultatifs entre les éléments et une marge facultative autour des éléments. 
   <p>La position horizontale des éléments est déterminée en les disposant dans une séquence horizontale, de gauche à droite, en prenant en compte la marge avant le premier élément et les écarts entre les éléments. </p>
   <p>La position verticale des éléments est déterminée par la propriété <codeph>verticalAlign</codeph> de la présentation. </p>
   <p>Pendant l’exécution de la méthode <codeph>measure()</codeph>, la taille par défaut du conteneur est calculée en accumulant les tailles préférées des éléments, y compris les écarts et la marge. Lorsque la propriété <codeph>requestedColumnCount</codeph> est définie sur une valeur autre que -1, seul l’espace pour ce nombre d’éléments est mesuré en commençant par le premier élément. </p>
   <p>Pendant l’exécution de la méthode <codeph>updateDisplayList()</codeph>, la largeur de chaque élément est calculée selon les règles suivantes, répertoriées dans leur ordre de priorité respectif (les largeurs minimale et maximale de l’élément sont toujours respectées) : </p>
  <ul>
    <li>Si<codeph> variableColumnWidth</codeph> a la valeur <codeph>false</codeph>, définissez la largeur de l’élément sur la valeur de la propriété <codeph>columnWidth</codeph>. </li>
     <li>Si la valeur <codeph>percentWidth</codeph> de l’élément est définie, calculez la largeur de l’élément en distribuant la largeur de conteneur disponible entre tous les éléments avec le paramètre <codeph>percentWidth</codeph>. La largeur de conteneur disponible est égale à la largeur de conteneur moins les écarts, la marge et l’espace occupé par le reste des éléments. La propriété <codeph>percentWidth</codeph> de l’élément est ignorée lorsque la présentation est virtualisée. </li>
     <li>Définissez la largeur de l’élément sur sa largeur préférée. </li>
  </ul>
   <p>La hauteur de chaque élément est calculée selon les règles suivantes, répertoriées dans leur ordre de priorité respectif (les hauteurs minimale et maximale de l’élément sont toujours respectées) : </p>
  <ul>
    <li>Si <codeph>verticalAlign</codeph> a la valeur <codeph>"justify"</codeph>, définissez la hauteur de l’élément sur la hauteur du conteneur. </li>
     <li>Si <codeph>verticalAlign</codeph> a la valeur <codeph>"contentJustify"</codeph>, définissez la hauteur de l’élément sur le maximum entre la hauteur du conteneur et la hauteur préférée de tous les éléments. </li>
     <li>Si la propriété <codeph>percentHeight</codeph> de l’élément est définie, calculez la hauteur de l’élément en tant que pourcentage de la hauteur du conteneur. </li>
     <li>Définissez la hauteur de l’élément sur sa hauteur préférée. </li>
  </ul>
   </apiDesc></apiClassifierDetail><apiConstructor id="spark.layouts:HorizontalLayout:HorizontalLayout"><apiName>HorizontalLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.layouts:HorizontalLayout:fractionOfElementInView"><apiName>fractionOfElementInView</apiName><shortdesc>
      Renvoie 1.0 si l’index spécifié n’est pas entièrement visible, 0.0 s’il ne l’est plus ou une valeur comprise entre 0.0 et 1.0 qui représente le pourcentage de l’index partiellement visible. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Pourcentage de l’élément spécifié visible. Renvoie 0.0 si l’index spécifié n’est pas valide ou s’il correspond à un élément nul, ou un élément ILayoutElement pour lequel <codeph>includeInLayout</codeph> comporte la valeur <codeph>false</codeph>. 
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de la colonne. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie 1.0 si l’index spécifié n’est pas entièrement visible, 0.0 s’il ne l’est plus ou une valeur comprise entre 0.0 et 1.0 qui représente le pourcentage de l’index partiellement visible. 
     
      <p>Un index est visible si l’élément de présentation non nul correspondant se trouve dans les limites horizontales du rectangle <codeph>scrollRect</codeph> du conteneur et est inclus dans la présentation.</p>
      
      <p>Si l’index spécifié est partiellement visible, la valeur renvoyée est le pourcentage de l’élément de présentation correspondant qui est visible. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.layouts:HorizontalLayout:columnCount:get"><apiName>columnCount</apiName><shortdesc>
      Renvoie le nombre actuel d’éléments visibles. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Renvoie le nombre actuel d’éléments visibles. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
      Si la valeur de la propriété variableColumnWidth est false, cette propriété spécifie la largeur réelle de chaque élément de présentation, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Si la valeur de la propriété <codeph>variableColumnWidth</codeph> est <codeph>false</codeph>, cette propriété spécifie la largeur réelle de chaque élément de présentation, en pixels.
     
      <p>Si la valeur de la propriété <codeph>variableColumnWidth</codeph> est <codeph>true</codeph> (valeur par défaut), cette propriété est sans effet.</p>
     
      <p>La valeur par défaut de cette propriété correspond à la largeur préférée de l’élément spécifié par la propriété <codeph>typicalLayoutElement</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc>
      Index de la première colonne faisant partie de la présentation et situé dans le rectangle le défilement de la cible de présentation, ou -1 si rien n’a encore été affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de la première colonne faisant partie de la présentation et situé dans le rectangle le défilement de la cible de présentation, ou -1 si rien n’a encore été affiché. Notez que la colonne ne peut être que partiellement visible. 
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.layouts.lastIndexInView.xml"><linktext>lastIndexInView</linktext></link><link href="" invalidHref="spark.layouts.fractionOfElementInView.xml"><linktext>fractionOfElementInView</linktext></link></related-links></apiValue><apiValue id="spark.layouts:HorizontalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      Espace horizontal entre les éléments de présentation, en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Espace horizontal entre les éléments de présentation, en pixels. Notez que l’écart n’est appliqué qu’entre les éléments de présentation ; aussi, si un seul élément est présent, l’écart est sans effet sur la présentation. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc> 
      Alignement horizontal du contenu par rapport à la largeur du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Alignement horizontal du contenu par rapport à la largeur du conteneur. Si la valeur est <codeph>"left"</codeph>, <codeph>"right"</codeph>ou <codeph>"center"</codeph> l’élément de présentation est aligné par rapport à la propriété <codeph>contentWidth</codeph> du conteneur. 
           <p>Cette propriété n’a pas d’effet lorsque <codeph>clipAndEnableScrolling</codeph> est défini sur true et que <codeph>contentWidth</codeph> est supérieur à la largeur du conteneur. </p>
           <p>Cette propriété est sans effet sur la taille mesurée de la présentation. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc>
      Index de la dernière colonne faisant partie de la présentation et situé dans le rectangle de défilement de la cible de présentation, ou -1 si rien n’a encore été affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de la dernière colonne faisant partie de la présentation et situé dans le rectangle de défilement de la cible de présentation, ou -1 si rien n’a encore été affiché. Notez que la colonne ne peut être que partiellement visible. 
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.layouts.firstIndexInView.xml"><linktext>firstIndexInView</linktext></link><link href="" invalidHref="spark.layouts.fractionOfElementInView.xml"><linktext>fractionOfElementInView</linktext></link></related-links></apiValue><apiValue id="spark.layouts:HorizontalLayout:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
      Nombre minimal de pixels séparant le bord inférieur du conteneur et le bas de tous les éléments de présentation du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le nombre minimum de pixels séparant le bord inférieur de conteneur et le bas de tous les éléments de présentation du conteneur.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
      Nombre de pixels entre la bordure gauche du conteneur et le bord gauche du premier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure gauche du conteneur et le bord gauche du premier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
      Nombre de pixels entre la bordure droite du conteneur et le bord droit du dernier élément de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels entre la bordure droite du conteneur et le bord droit du dernier élément de présentation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
      Le nombre minimum de pixels séparant le bord supérieur de conteneur et la partie supérieure de tous les éléments de présentation du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre minimal de pixels séparant le bord supérieur du conteneur et le haut de tous les éléments de présentation du conteneur.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc>
      La taille mesurée de cette présentation sera suffisante pour afficher les premiers éléments de présentation requestedColumnCount.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      </apiDefaultValue></apiValueDef><apiDesc>
      La taille mesurée de cette présentation sera suffisante pour afficher les premiers éléments de présentation <codeph>requestedColumnCount</codeph>. Si <codeph>requestedColumnCount</codeph> est égal à -1, la taille mesurée sera suffisante pour tous les éléments de présentation. 
     
      <p>Si la taille réelle du container utilisant cette présentation a été explicitement définie, cette propriété est sans effet.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#HorizontalLayout/requestedMinColumnCount"><linktext>requestedMinColumnCount</linktext></link><link href="spark.layouts.xml#HorizontalLayout/requestedMaxColumnCount"><linktext>requestedMaxColumnCount</linktext></link></related-links></apiValue><apiValue id="spark.layouts:HorizontalLayout:requestedMaxColumnCount:get"><apiName>requestedMaxColumnCount</apiName><shortdesc>
      La largeur mesurée de cette présentation est suffisamment grande pour afficher au plus requestedMaxColumnCount éléments de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      </apiDefaultValue></apiValueDef><apiDesc>
      La largeur mesurée de cette présentation est suffisamment grande pour afficher au plus <codeph>requestedMaxColumnCount</codeph> éléments de présentation. 
     
      <p>Si la valeur de <codeph>requestedColumnCount</codeph> est définie, cette propriété n’a aucun effet. </p>
           <p>Si la taille réelle du container utilisant cette présentation a été explicitement définie, cette propriété est sans effet.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#HorizontalLayout/requestedColumnCount"><linktext>requestedColumnCount</linktext></link><link href="spark.layouts.xml#HorizontalLayout/requestedMinColumnCount"><linktext>requestedMinColumnCount</linktext></link></related-links></apiValue><apiValue id="spark.layouts:HorizontalLayout:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc>
      La largeur mesurée de cette présentation est suffisamment grande pour afficher au moins les éléments de présentation requestedMinColumnCount. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      </apiDefaultValue></apiValueDef><apiDesc>
      La largeur mesurée de cette présentation est suffisamment grande pour afficher au moins les éléments de présentation <codeph>requestedMinColumnCount</codeph>.  
     
      <p>Si la valeur de <codeph>requestedColumnCount</codeph> est définie, cette propriété n’a aucun effet. </p>
           <p>Si la taille réelle du container utilisant cette présentation a été explicitement définie, cette propriété est sans effet.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.xml#HorizontalLayout/requestedColumnCount"><linktext>requestedColumnCount</linktext></link><link href="spark.layouts.xml#HorizontalLayout/requestedMaxColumnCount"><linktext>requestedMaxColumnCount</linktext></link></related-links></apiValue><apiValue id="spark.layouts:HorizontalLayout:variableColumnWidth:get"><apiName>variableColumnWidth</apiName><shortdesc>
      Si la valeur est true, elle indique que les éléments de présentation doivent se voir allouer leur largeur préférée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, elle indique que les éléments de présentation doivent se voir allouer leur largeur préférée.
           <p>Définir cette propriété sur <codeph>false</codeph> spécifie des colonnes de largeur fixe. La largeur réelle de chaque élément de présentation est la valeur de la propriété <codeph>columnWidth</codeph>. La présentation ne tient pas compte de la propriété <codeph>percentWidth</codeph> des éléments d’une présentation. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalLayout:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc> 
      Alignement vertical des éléments de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Alignement vertical des éléments de présentation.
     
      <p>Si la valeur est <codeph>"bottom"</codeph>, <codeph>"middle"</codeph>ou <codeph>"top"</codeph> les éléments de présentation sont alignés par rapport à la propriété <codeph>contentHeight</codeph> du conteneur. </p>
     
      <p>Si la valeur est <codeph>"contentJustify"</codeph>, la hauteur réelle de l’élément de présentation est définie sur la propriété <codeph>contentHeight</codeph> du conteneur. La hauteur de contenu du conteneur est la hauteur de l’enfant le plus grand. Si tous les éléments de présentation sont inférieurs à la hauteur du conteneur, définissez la hauteur de tous les éléments de présentation sur la hauteur du conteneur. </p>
     
      <p>Si la valeur est <codeph>"justify"</codeph>, la hauteur réelle de l’élément de présentation est définie sur la hauteur du conteneur. </p>
           <p>Si la valeur est <codeph>baseline</codeph>, les éléments sont positionnés de sorte que leur texte soit aligné sur le maximum de l’ascension du texte des éléments.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.layouts:TileOrientation"><apiName>TileOrientation</apiName><shortdesc>
  La classe TileOrientation définit les valeurs possibles de la propriété orientation de la classe TileLayout. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TileOrientation définit les valeurs possibles de la propriété <codeph>orientation</codeph> de la classe TileLayout. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout/orientation"><linktext>TileLayout.orientation</linktext></link></related-links><apiValue id="spark.layouts:TileOrientation:COLUMNS"><apiName>COLUMNS</apiName><shortdesc>
      Organise les éléments colonne par colonne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>columns</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Organise les éléments colonne par colonne. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:TileOrientation:ROWS"><apiName>ROWS</apiName><shortdesc>
      Organise les éléments ligne par ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rows</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Organise les éléments ligne par ligne. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.layouts:RowAlign"><apiName>RowAlign</apiName><shortdesc>
  La classe RowAlign définit les valeurs possibles de la propriété rowAlign de la classe TileLayout. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe RowAlign définit les valeurs possibles de la propriété <codeph>rowAlign</codeph> de la classe TileLayout. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout/rowAlign"><linktext>TileLayout.rowAlign</linktext></link></related-links><apiValue id="spark.layouts:RowAlign:JUSTIFY_USING_GAP"><apiName>JUSTIFY_USING_GAP</apiName><shortdesc>
      Justifiez les lignes en augmentant l’écart vertical. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justifyUsingGap</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Justifiez les lignes en augmentant l’écart vertical. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:RowAlign:JUSTIFY_USING_HEIGHT"><apiName>JUSTIFY_USING_HEIGHT</apiName><shortdesc>
      Justifiez les lignes en augmentant la hauteur de ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justifyUsingHeight</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Justifiez les lignes en augmentant la hauteur de ligne. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:RowAlign:TOP"><apiName>TOP</apiName><shortdesc>
      Ne justifiez pas les lignes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Ne justifiez pas les lignes. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.layouts:HorizontalAlign"><apiName>HorizontalAlign</apiName><shortdesc>
  La classe HorizontalAlign définit les valeurs possibles de la propriété horizontalAlign de la classe VerticalLayout. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe HorizontalAlign définit les valeurs possibles de la propriété <codeph>horizontalAlign</codeph> de la classe VerticalLayout. 
 
 </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.xml#VerticalLayout/horizontalAlign"><linktext>VerticalLayout.horizontalAlign</linktext></link></related-links><apiValue id="spark.layouts:HorizontalAlign:CENTER"><apiName>CENTER</apiName><shortdesc>
      Aligner les enfants au centre du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Aligner les enfants au centre du conteneur. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalAlign:CONTENT_JUSTIFY"><apiName>CONTENT_JUSTIFY</apiName><shortdesc>
      Justifier le contenu des enfants par rapport au conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contentJustify</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Justifier le contenu des enfants par rapport au conteneur. Ceci dimensionne uniformément tous les enfants sur la largeur de contenu du conteneur. La largeur de contenu du conteneur est la taille de l’enfant le plus grand. Si tous les enfants sont plus petits que la largeur du conteneur, tous les enfants seront dimensionnés à la largeur du conteneur. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc>
      Justifier les enfants par rapport au conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Justifier les enfants par rapport au conteneur. Ceci dimensionne uniformément tous les enfants sur la même largeur que le conteneur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalAlign:LEFT"><apiName>LEFT</apiName><shortdesc>
      Aligner les enfants sur la gauche du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Aligner les enfants sur la gauche du conteneur. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.layouts:HorizontalAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      Aligner les enfants sur la droite du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Aligner les enfants sur la droite du conteneur. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.layouts:BasicLayout"><apiName>BasicLayout</apiName><shortdesc>
  La classe BasicLayout dispose les éléments de présentation selon leurs paramètres, indépendants les uns des autres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;s:BasicLayout&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no additional tag attributes:</p>
 
  <pre>
  &lt;s:BasicLayout/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe BasicLayout dispose les éléments de présentation selon leurs paramètres, indépendants les uns des autres. BasicLayout, également appelé présentation absolue, requiert le positionnement explicite de chaque enfant de conteneur. Vous pouvez utiliser les propriétés <codeph>x</codeph> et <codeph>y</codeph> de l’enfant ou des contraintes pour positionner chaque enfant. 
 
  <p><b>Remarque : </b>les contrôles basés sur une liste Spark (le contrôle List Spark et ses sous-classes, telles que ButtonBar, ComboBox, DropDownList et TabBar) ne prennent pas en charge la classe BasicLayout. N’utilisez pas BasicLayout avec les contrôles basés sur une liste Spark. </p>
 
  <p>Les contraintes prises en charge par élément sont <codeph>left</codeph>, <codeph>right</codeph>, <codeph>top</codeph>, <codeph>bottom</codeph>, <codeph>horizontalCenter</codeph>, <codeph>verticalCenter</codeph>, <codeph>baseline</codeph>, <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph>. Les tailles minimale et maximale de l’élément seront toujours respectées.</p>
 
  <p>La taille mesurée du conteneur est calculée à partir des éléments, de leurs contraintes et de leurs tailles préférées. La taille mesurée du conteneur est suffisante pour tenir dans tous les éléments à leur taille préférée, avec leurs contraintes satisfaites. </p>
 
  <p>Voici quelques exemples de méthodes de calcul de la taille mesurée : 
  <ul>
    <li>Si le conteneur a un seul élément avec une contrainte <codeph>left</codeph> spécifiée, la largeur mesurée du conteneur est égale à la largeur préférée de l’élément plus la valeur de la contrainte <codeph>left</codeph>.</li>
 
    <li>Si le conteneur a un seul élément avec la valeur <codeph>percentWidth</codeph> spécifiée, la largeur mesurée du conteneur est égale à la largeur préférée de l’élément. Même si la valeur <codeph>percentWidth</codeph> de l’élément n’est pas directement reflétée dans les calculs, elle sera respectées lors d’un appel de la méthode <codeph>updateDisplayList()</codeph>. </li>
 
    <li>Si le conteneur a un seul élément avec contrainte <codeph>baseline</codeph> spécifiée, la hauteur mesurée du conteneur est égale à la hauteur préférée de l’élément plus la <codeph>baseline</codeph> et moins la valeur de la propriété <codeph>baselinePosition</codeph> de l’élément. </li>
 
    <li>Si le conteneur a un seul élément avec une contrainte de valeur <codeph>verticalCenter</codeph> spécifiée, la hauteur mesurée du conteneur est égale à la hauteur préférée de l’élément plus la valeur <codeph>verticalCenter</codeph> de la contrainte. </li>
  </ul>
 </p>
 
  <p>Lors d’un appel de la méthode <codeph>updateDisplayList()</codeph>, la taille de l’élément est calculée selon les règles suivantes, répertoriées dans leur ordre de priorité respectif (les tailles minimale et maximale de l’élément sont toujours respectées) :</p>
  <ul>
    <li>Si la valeur <codeph>percentWidth</codeph> ou <codeph>percentHeight</codeph> de l’élément est définie, la taille de l’élément est calculée en tant que pourcentage de la taille du conteneur, où la taille disponible est la taille du conteneur moins les contraintes <codeph>left</codeph>, <codeph>right</codeph>, <codeph>top</codeph> ou <codeph>bottom</codeph>. </li>
 
    <li>Si l’élément comporte des contraintes left et right, sa largeur est définie sur la largeur du conteneur moins les contraintes <codeph>left</codeph> et <codeph>right</codeph>. </li>
 
    <li>Si l’élément comporte des contraintes <codeph>top</codeph> et <codeph>bottom</codeph>, sa hauteur est définie sur la hauteur du conteneur moins les contraintes <codeph>top</codeph> et <codeph>bottom</codeph>. </li>
 
    <li>L’élément est défini sur sa largeur et/ou hauteur préférée. </li>
  </ul>
 
  <p>La classe BasicLayout calcule sa taille minimale comme le maximum des tailles enfants minimales :</p>
 
  <ol>
    <li>Pour chaque enfant du conteneur, déterminez la taille minimale à laquelle l’enfant doit pouvoir se réduire :
        <ul>
          <li>Si l’enfant est limité par la largeur ou la hauteur de son parent, il peut se réduire à sa largeur ou hauteur minimale. Utilisez la taille minimale de l’enfant.</li>
          <li>Si l’enfant n’est pas limité par le parent, il conserve sa taille préférée. Utilisez la taille préférée de l’enfant.  </li>
        </ul></li>
     <li>Recherchez le maximum des tailles avec l’étape 1. </li>
  </ol>
 
  <p>Par conséquent, si un enfant est limité par son parent, la mise en forme utilise la taille minimale de l’enfant. Dans le cas contraire, elle utilise la taille préférée de l’enfant pour calculer la taille minimale du conteneur.</p>
 
  <p>La position de l’élément est calculée selon les règles suivantes, répertoriées dans leur ordre de priorité respectif : </p>
  <ul>
    <li>Les contraintes <codeph>horizontalCenter</codeph> ou <codeph>verticalCenter</codeph> indiquent la distance entre le centre du conteneur et le centre de l’élément. Définissez les contraintes <codeph>horizontalCenter</codeph> ou <codeph>verticalCenter</codeph> sur zéro pour centrer l’élément dans le conteneur dans la direction horizontale ou verticale. </li>
 
    <li>Si la ligne de base de l’élément est spécifiée, l’élément est positionné dans la direction verticale de sorte que sa position <codeph>baselinePosition</codeph> (généralement la ligne de base de sa première ligne de texte) soit alignée sur la contrainte <codeph>baseline</codeph>.</li>
 
    <li>Si les contraintes <codeph>top</codeph> ou <codeph>left</codeph> de l’élément sont spécifiées, l’élément est positionné de sorte que le coin supérieur gauche de ses limites de présentation soit décalé par rapport au coin supérieur gauche du conteneur par les valeurs spécifiées. </li>
 
    <li>Si les contraintes <codeph>bottom</codeph> ou <codeph>right</codeph> de l’élément sont spécifiées, l’élément est positionné de sorte que le coin inférieur droit de ses limites de présentation soit décalé par rapport au coin inférieur droit du conteneur par les valeurs spécifiées. </li>
 
    <li>Lorsqu’aucune contrainte ne détermine la position dans la direction horizontale ou verticale, l’élément est positionné en fonction de ses coordonnées x et y. </li>
  </ul>
 
  <p>La taille du contenu du conteneur est calculée comme taille maximale des coordonnées de du coin inférieur droit de tous les éléments de présentation. </p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.layouts:BasicLayout:BasicLayout"><apiName>BasicLayout</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage>