<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
  La classe DataRenderer est la classe de base pour les composants de données dans Spark. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:DataRenderer
    <strong>Properties</strong>
    data=""
  
    <strong>Events</strong>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DataRenderer est la classe de base pour les composants de données dans Spark.  
 
  <p><b>Remarque :</b> cette classe est susceptible d’être supprimée dans une version ultérieure.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:DataRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataRenderer:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DataRenderer:data:get"><apiName>data</apiName><shortdesc>
      Implémentation de la propriété data, telle que définie par l’interface IDataRenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Implémentation de la propriété <codeph>data</codeph>, telle que définie par l’interface IDataRenderer.
      
      <p>Cette propriété peut être liée. Elle distribue des événements « dataChange ».</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TextArea"><apiName>TextArea</apiName><shortdesc>
  Le composant TextArea est un contrôle d’entrée de texte qui permet aux utilisateurs d’entrer et de modifier plusieurs lignes de texte formaté.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:verticalScrollPolicy">
  Indique dans quelles conditions la barre de défilement verticale doit s’afficher.
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:horizontalScrollPolicy">
  Indique dans quelles conditions la barre de défilement horizontale doit s’afficher.
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:TextArea" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="scroller" owner="spark.components:TextArea" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Composant Scroller facultatif de l’habillage, utilisé pour faire défiler le texte RichEditableText. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller in the skin,
      used to scroll the RichEditableText.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextArea&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextArea
    <strong>Properties</strong>
    heightInLines="<i>Calculated default</i>"  <b>[Spark theme only]</b>
    textFlow="<i>TextFlow</i>"  <b>[Spark theme only]</b>
    typicalText=null  <b>[Spark theme only]</b>
    widthInChars="<i>Calculated default</i>"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    horizontalScrollPolicy="auto"  <b>[Spark theme only]</b>
    symbolColor=""
    verticalScrollPolicy="auto"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant TextArea est un contrôle d’entrée de texte qui permet aux utilisateurs d’entrer et de modifier plusieurs lignes de texte formaté.
   <p><b>L’habillage pour le thème Spark utilise la classe RichEditableText. Cela signifie que le contrôle TextArea Spark prend en charge la bibliothèque TLF (Text Layout Framework), qui repose sur le moteur FTE (Flash Text Engine).</b>Associés, ces calques offrent des fonctionnalités de modification de texte, notamment de typographie et de présentation internationales de qualité supérieure. L’habillage comprend un élément Scroller qui peut afficher les barres de défilement horizontales et verticales permettant de parcourir le texte et prend en charge le défilement vertical avec la molette de la souris. Le contrôle RichEditableText est accessible en tant que classe <codeph>textDisplay</codeph> et le contrôle Scroller en tant que classe <codeph>scroller</codeph>. </p>
  
  <p><b>L’habillage pour le thème Mobile utilise la classe StyleableStageText.</b> Etant donné que StyleableStageText utilise des champs de texte natifs, la saisie et la manipulation de texte sont améliorés sur les périphériques mobiles. Il existe toutefois des <xref href="supportClasses/StyleableStageText.html">limitations et différences</xref> dont vous devez tenir compte. Etant donné que StageText ne peut pas mesurer de texte, le contrôle TextArea doit recevoir des valeurs <codeph>width</codeph> et <codeph>height</codeph> explicites, basées sur des pourcentages ou des contraintes. StyleableStageText est accessible en tant qu’objet <codeph>textDisplay</codeph>. Si vous souhaitez utiliser l’habillage basé sur TextField plutôt que l’habillage basé sur StageText, définissez la propriété <codeph>skinClass</codeph> sur <codeph>"spark.skins.mobile.TextAreaSkin"</codeph>.</p>
   <p>Vous pouvez définir le texte à afficher, ou obtenir le texte que l’utilisateur a entré, à l’aide de la propriété <codeph>text</codeph>. </p>
   <p>Le texte est mis en forme à l’aide de styles CSS, tels que <codeph>fontFamily</codeph> et <codeph>fontSize</codeph>. </p>
   <p>Pour le thème Spark, les propriétés <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> permettent de spécifier la largeur et la hauteur du composant TextArea de manière à les mettre à l’échelle en fonction de la taille de police ou vous pouvez utiliser la propriété <codeph>typicalText</codeph>. Notez que si vous utilisez <codeph>typicalText</codeph>, les propriétés <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> sont ignorées. Pour tous les thèmes, vous pouvez également spécifier une largeur ou une hauteur explicite en pixels ou utiliser un pourcentage de largeur et de hauteur ou des contraintes telles que <codeph>left</codeph> et <codeph>right</codeph> ou <codeph>top</codeph> et <codeph>bottom</codeph>.</p>
   <p>Vous pouvez utiliser la propriété <codeph>maxChars</codeph> pour limiter le nombre de caractères saisis par l’utilisateur et la propriété <codeph>restrict</codeph> pour limiter le type des caractères saisis par l’utilisateur. Pour utiliser cette option pour l’entrée de mots de passe, définissez la propriété <codeph>displayAsPassword</codeph> sur <codeph>true</codeph>. </p>
   <p>Pour le thème Mobile, les propriétés spécifiques au clavier logiciel, <codeph>autoCapitalize</codeph>, <codeph>autoCorrect</codeph>, <codeph>returnKeyLabel</codeph> et <codeph>softKeyboardType</codeph> spécifient les indicateurs du clavier. Si un clavier logiciel est présent, mais ne prend pas en charge une fonctionnalité représentée par le conseil, le conseil est ignoré. Dans les environnements mobiles comportant uniquement des claviers matériels, ces conseils sont ignorés. 
  </p>
  
  <p><b>Zone de texte pour le thème Spark</b></p>
 
  <p>Les principales différences entre les contrôles Spark TextArea et MX TextArea sont les suivantes : 
  <ul>
    <li>Spark TextArea offre des fonctionnalités typographiques et de présentation de texte optimisées, ainsi qu’une meilleure prise en charge des langues internationales. </li>
    <li>Le composant Spark TextArea possède un modèle orienté objet. de texte enrichi, contrairement à la version MX. </li>
    <li>Le composant Spark TextArea offre une meilleure prise en charge de l’affichage de grandes quantités de texte. </li>
    <li>Par rapport à la version MX, l’incorporation de polices doit s’effectuer de manière différente dans Spark TextArea. Pour savoir comment utiliser l’attribut <codeph>embedAsCFF</codeph> lors de l’intégration d’une police, consultez la documentation relative à la police. </li>
  </ul></p>
   <p>Le contrôle Spark TextArea utilise le modèle de texte enrichi orienté objet TLF, dans lequel les éléments de présentation de texte, tels que les divisions, les paragraphes, les étendues, les hyperliens, et les images sont représentés à l’exécution par des objets ActionScript. Vous pouvez en outre accéder et manipuler ces objets via un programme. TextFlow est l’objet central de TLF permettant de représenter le texte enrichi. Spécifiez le texte enrichi d’un contrôle TextArea en définissant sa propriété <codeph>textFlow</codeph> sur une occurrence TextFlow. </p>
 
  <p>Si vous n’avez pas besoin d’afficher un texte possédant plusieurs formats, définissez la propriété <codeph>text</codeph> du composant TextArea sur une chaîne de texte brut. Consultez les descriptions des propriétés <codeph>text</codeph> et <codeph>textFlow</codeph> pour plus d’informations sur leurs interactions ; par exemple, vous pouvez en définir une et obtenir l’autre. </p>
   <p>Lors de la compilation, vous pouvez placer des balises de marquage TLF dans la balise TextArea, comme l’illustre l’exemple suivant : 
  <pre>
  &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:TextArea>
  </pre>
  Dans cet exemple, le compilateur MXML définit la propriété <codeph>content</codeph> du composant TextArea, ce qui entraîne la création d’un objet TextFlow à partir de l’élément FlowElements spécifié. </p>
   <p>Le contrôle TextArea n’inclut pas d’interface utilisateur permettant de modifier la mise en forme du texte, mais contient des API que vous pouvez utiliser pour formater le texte par programmation. Vous pouvez par exemple créer un bouton qui, lorsqu’il est cliqué, affiche le texte sélectionné en gras. </p>
   <p>Le formatage de texte par défaut est déterminé par des styles CSS, par exemple <xref href="supportClasses/SkinnableTextBase.html#style:fontFamily">fontFamily</xref> et <xref href="supportClasses/SkinnableTextBase.html#style:fontSize">fontSize</xref>. Les informations de formatage de l’objet TextFlow remplacent le formatage par défaut fourni par les styles CSS. </p>
   <p>Vous pouvez définir plusieurs caractéristiques du contenu du composant TextArea avec des styles. En voici quelques-unes : </p>
   <ul><li>Contrôlez l’espacement entre les lignes avec le style <codeph>lineHeight</codeph>. </li>
  <li>Contrôlez l’espacement entre les paragraphes avec les styles <codeph>paragraphSpaceBefore</codeph> et <codeph>paragraphSpaceAfter</codeph>. </li>
  <li>Alignez ou justifiez le texte à l’aide des styles <codeph>textAlign</codeph> et <codeph>textAlignLast</codeph>. </li>
  <li>Mettez le texte en retrait à partir de la bordure du contrôle à l’aide des styles <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> et <codeph>paddingBottom</codeph>. </li>
  </ul>
   <p>Par défaut, le texte revient à la ligne sur le bord droit du contrôle. Une barre de défilement verticale s’affiche automatiquement lorsque la longueur du texte dépasse celle du composant TextArea. Si vous définissez le style <codeph>lineBreak</codeph> sur <codeph>explicit</codeph>, les nouvelles lignes commencent uniquement aux sauts de ligne explicites. Cela a le même effet que l’utilisation de CR (<codeph>\r)</codeph>), LF (<codeph>\n</codeph>) ou CR+LF (<codeph>\r\n</codeph>) dans <codeph>text</codeph>, ou de <codeph>&lt;p></codeph> et <codeph>&lt;br /></codeph> dans le marquage TLF. Dans ces cas, une barre de défilement horizontale s’affiche automatiquement si des lignes de texte sont plus larges que le contrôle. </p>
    <p>Le composant Spark TextArea peut afficher du texte rédigé de gauche à droite (LTR), par exemple, en français, de droite à gauche (RTL), comme en arabe, et du texte bidirectionnel, par exemple une phrase française au sein d’une phrase arabe. Si le sens du texte prédominant est de droite à gauche, définissez le style <codeph>direction</codeph> sur <codeph>rtl</codeph>. Par défaut, le style <codeph>textAlign</codeph> pour la valeur <codeph>start</codeph>, ce qui aligne le texte à gauche lorsque <codeph>direction</codeph> est définie sur <codeph>ltr</codeph> et à droite lorsque <codeph>direction</codeph> est définie sur <codeph>rtl</codeph>. Pour obtenir l’alignement inverse, définissez <codeph>textAlign</codeph> sur <codeph>end</codeph>. </p>
   <p>Le composant Spark TextArea prend également en charge un nombre illimité d’opération d’annulation/rétablissement au cours d’une session d’édition. Une session d’édition commence lorsque le contrôle obtient le focus clavier et se termine lorsque le contrôle perd le focus. </p>
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
   <p>Pour le thème Spark, le contrôle TextArea possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>188 pixels de large par 149 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>36 pixels de large et 36 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.TextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>Pour le thème Mobile, le contrôle TextArea possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.mobile.StageTextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea/text"><linktext>text</linktext></link><link href="spark.components.xml#TextArea/textFlow"><linktext>textFlow</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextAreaSkin.xml"><linktext>spark.skins.mobile.StageTextAreaSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextAreaSkin.xml"><linktext>spark.skins.mobile.TextAreaSkin</linktext></link><link href="spark.skins.spark.xml#TextAreaSkin"><linktext>spark.skins.spark.TextAreaSkin</linktext></link></related-links><apiConstructor id="spark.components:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TextArea:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>Objet TextLayoutFormat.
          
          </apiDesc></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>Vecteur de chaînes qui indique les noms des formats requis ou <codeph>null</codeph> pour demander tous les formats. 
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Position de caractère indiquant la fin fixe de la sélection. 
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Position de caractère indiquant une fin de sélection pouvant être déplacée. 
                   </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="spark.components.RichEditableText#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>Format TextLayoutFormat à appliquer à la sélection. 
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>La position d’un caractère, par rapport au début de la chaîne de caractères, en indiquant la fin de la sélection qui reste fixe lorsque la sélection est étendue à l’aide des touches fléchées. 
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>La position d’un caractère, par rapport au début de la chaîne de caractères, en indiquant la fin de la sélection qui se déplace lorsque la sélection est étendue à l’aide des touches fléchées.  
         
          </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TextArea:content:get"><apiName>content</apiName><shortdesc>
      Cette propriété est conçue pour une utilisation dans MXML au moment de la compilation. pour obtenir ou définir du contenu de texte enrichi à l’exécution, utilisez la propriété textFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Cette propriété est conçue pour une utilisation dans MXML au moment de la compilation. pour obtenir ou définir du contenu de texte enrichi à l’exécution, utilisez la propriété <codeph>textFlow</codeph>. Adobe recommande d’utiliser la propriété <codeph>textFlow</codeph> pour obtenir et définir le contenu de texte à l’exécution, car il est de type TextFlow plutôt que qu’Object. Un objet TextFlow est la représentation canonique du contenu de texte enrichi dans Text Layout Framework. 
           <p>La propriété <codeph>content</codeph>, la propriété par défaut pour TextArea, vous permet d’écrire au format MXML, comme l’illustre l’exemple suivant :
      <pre>
      &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World&lt;/s:span>&lt;/s:TextArea>
      </pre>
      dans cet exemple, les éléments String et SpanElement que vous pouvez spécifier en tant que contenu à utiliser pour créer un objet TextFlow. </p>
           <p>Cette propriété est typé sous forme d’objet car vous pouvez la définir en tant que chaîne, FlowElement ou tableau de chaînes et FlowElements. Dans l’exemple ci-dessus, le contenu est un tableau à deux éléments. Le premier élément de tableau est la chaîne « Hello ». Le deuxième élément de tableau est un objet SpanElement avec le texte « World » dans en gras. </p>
     
      <p>Quelle que soit la méthode de spécification du contenu, ce dernier est converti en objet TextFlow. Lorsque vous obtenez la valeur de cette propriété, vous obtenez l’objet TextFlow résultant. </p>
     
      <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
      Hauteur par défaut du contrôle, mesurée en lignes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur par défaut du contrôle, en lignes. 
           <p>Pour le thème Spark, voir <b>spark.components.RichEditableText.heightInLines</b></p>
           <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/heightInLines"><linktext>spark.components.RichEditableText.heightInLines</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      TextFlow représentant le texte enrichi affiché par ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      TextFlow représentant le texte enrichi affiché par ce composant. 
           <p>Pour le thème Spark, voir <b>spark.components.RichEditableText.textFlow</b></p>
           <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      Largeur par défaut du contrôle, mesurée en unités em.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur par défaut du contrôle, mesurée en unités em.
           <p>Pour le thème Spark, voir <b>spark.components.RichEditableText.widthInChars</b></p>
           <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Grid"><apiName>Grid</apiName><shortdesc>
  Le contrôle Grid affiche une liste d’éléments de données désignée sous le nom de fournisseur de données dans un tableau pouvant défiler (ou « grille »), un élément par ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Grid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Grid 
    <strong>Properties</strong>
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Grid affiche une liste d’éléments de données désignée sous le nom de <i>fournisseur de données</i> dans un tableau pouvant défiler (ou « grille »), un élément par ligne. Chaque colonne de la grille, définie par un objet GridColumn, affiche une valeur basée sur l’élément de la ligne correspondante. Le fournisseur de données de la grille est modifiable, c’est-à-dire qu’il est possible d’ajouter, de supprimer ou de modifier ses éléments. De même, la liste des colonnes est modifiable.
 
  <p>Le composant Grid est destiné à être utilisé en tant qu’élément d’habillage de DataGrid ou en tant qu’élément d’autres composants composites personnalisés. Par conséquent, il ne peut pas être doté d’un habillage, ne contient pas de dispositif de défilement ni de barres de défilement et ne fournit pas de gestion par défaut des événements de la souris ou du clavier.</p>
 
  <p>Chaque <i>cellule</i> visible de la grille est affichée par une occurrence GridItemRenderer créée à l’aide de la propriété <codeph>itemRenderer</codeph>. Spécifie un rendu d’élément pour chaque colonne. Avant son affichage, chaque occurrence de rendu d’élément est configurée avec la valeur de l’élément du fournisseur de données correspondant à cette ligne. Les rendus d’éléments sont créés selon les besoins et, pour éviter la création d’un nombre excessif d’éléments, ils sont regroupés et recyclés.</p>
 
  <p>Le contrôle Grid prend en charge la sélection, conformément à la propriété <codeph>selectionMode</codeph>. L’ensemble des index de ligne ou de cellule sélectionnés peut être modifié ou interrogé par programmation à l’aide des méthodes de sélection, telles que <codeph>setSelectedIndex</codeph> ou <codeph>selectionContainsIndex()</codeph>.</p>
 
  <p>Le contrôle Grid affiche les indicateurs de survol, de signe d’insertion et de sélection en fonction de la propriété <codeph>selectionMode</codeph> et des propriétés d’index de ligne et de colonne correspondantes, telles que <codeph>hoverRowIndex</codeph> et <codeph>columnRowIndex</codeph>. Un indicateur peut être n’importe quel élément visuel. Les indicateurs qui implémentent IGridVisualElement peuvent se configurer eux-mêmes, conformément à la ligne et à la colonne dans lesquelles ils sont utilisés.</p>
 
  <p>Le contrôle Grid prend en charge un défilement fluide. Les positions de défilement vertical et horizontal définissent l’origine des pixels de la partie visible de la grille et la mise en forme de la grille affiche seulement le nombre de rendus d’éléments de cellule nécessaire pour combler l’espace libre.  </p>
 
  <p>Le contrôle Grid prend en charge les lignes de hauteur variable qui calculent automatiquement la hauteur en fonction du contenu du rendu d’élément. Cette prise en charge est appelée <i>virtualisation</i> de grille, car la mise en correspondance des positions de défilement (pixels) avec les index de ligne et de colonne est généralement basée sur des informations incomplètes à propos de la taille préférée des cellules de la grille. La grille met en cache les hauteurs de ligne calculées qui ont défilé à l’écran et estime le reste en fonction d’un seul <codeph>typicalItem</codeph>.</p>
 
  <p>Les transitions dans les rendus d’éléments DataGrid ne sont pas prises en charge. La classe GridItemRenderer ayant désactivé sa propriété <codeph>transitions</codeph>, le fait de la définir n’aura aucun effet.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links><adobeApiEvent id="spark.components:Grid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Distribué après la modification du signe d’insertion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la modification du signe d’insertion.  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Distribué lorsque l'utilisateur double-clique sur la souris au-dessus d'une cellule.
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l'utilisateur double-clique sur la souris double-clique au-dessus d'une cellule.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Distribué lorsque l'utilisateur clique sur une cellule.
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l'utilisateur clique sur une cellule
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Distribué lorsque la souris quitte une cellule de grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la souris quitte une cellule de grille.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Distribué lorsque la souris pénètre dans une cellule de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la souris pénètre dans une cellule de la grille.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris sur une cellule de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris sur une cellule de la grille. Au cours d’une opération de déplacement, il est également distribué après un événement <codeph>gridMouseDown</codeph> lorsque l’utilisateur relâche le bouton de la souris, même si la souris n’est plus dans la grille.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Distribué après un événement gridMouseDown si la souris se déplace avant que l’utilisateur ne relâche le bouton de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après un événement <codeph>gridMouseDown</codeph> si la souris se déplace avant que l’utilisateur ne relâche le bouton de la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Distribué lorsque l'utilisateur appuie sur le bouton de la souris sur une cellule de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l'utilisateur appuie sur le bouton de la souris au-dessus d'une cellule de la grille.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Grid:Grid"><apiName>Grid</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Grid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_CELL ou GridSelectionMode.MULTIPLE_CELLS, ajoute la cellule à la sélection et définit la position du caret pour la cellule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>rowIndex</codeph> ou <codeph>columnIndex</codeph> n’est pas valide, ou si <codeph>selectionMode</codeph> n’est pas valide.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, ajoute la cellule à la sélection et définit la position du caret pour la cellule. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>L’élément <codeph>rowIndex</codeph> est l’index dans le fournisseur de données de l’élément contenant la cellule sélectionnée. La <codeph>columnIndex</codeph> est l'index dans les <codeph> colonnes</codeph> de la colonne contenant la cellule sélectionnée.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.MULTIPLE_ROWS, ajoute cette ligne à la sélection et définit la position du caret pour cette ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>index</codeph> n’est pas valide ou si <codeph>selectionMode</codeph> n’est pas valide. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, ajoute cette ligne à la sélection et définit la position du caret pour cette ligne. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>L’élément <codeph>rowIndex</codeph> est l’index dans le fournisseur de données de l’élément contenant la cellule sélectionnée. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:clearSelection"><apiName>clearSelection</apiName><shortdesc>
      Supprime la totalité des lignes et cellules sélectionnées, si selectionMode n'est pas GridSelectionMode.NONE.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la sélection a été modifiée ou <codeph>false</codeph> s’il n’y avait aucune sélection au préalable.
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Supprime la totalité des lignes et cellules sélectionnées, si <codeph>selectionMode</codeph> n'est pas <codeph>GridSelectionMode.NONE</codeph>. Supprime le caret et définit le point d'ancrage pour l'élément initial.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc>
      Si nécessaire, définissez les propriétés verticalScrollPosition et horizontalScrollPosition afin que la cellule spécifiée soit entièrement visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>L’index de rangée de base 0 de la cellule du rendu d’élément ou -1 pour spécifier une colonne.
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>L'index à base 0 de la cellule de l'option de rendu d'élément ou -1 pour spécifier une ligne.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si nécessaire, définissez les propriétés <codeph>verticalScrollPosition</codeph> et <codeph>horizontalScrollPosition</codeph> afin que la cellule spécifiée soit entièrement visible. Si <codeph>rowIndex</codeph> a la valeur -1 et que <codeph>columnIndex</codeph> est spécifié, ajustez simplement la propriété <codeph>horizontalScrollPosition</codeph> afin que la colonne spécifiée soit visible. Si <codeph>columnIndex</codeph> a la valeur -1 et que <codeph>rowIndex</codeph> est spécifié, ajustez simplement la propriété <codeph>verticalScrollPosition</codeph> afin que la ligne spécifiée soit visible.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellAt"><apiName>getCellAt</apiName><shortdesc>
      Renvoie les index de ligne et de colonne de la cellule qui chevauche le pixel à la coordonnée de grille spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La position de la cellule, ou null. 
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:CellPosition</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>La coordonnée x du pixel par rapport à la grille.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>La coordonnée y du pixel par rapport à la grille.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie les index de ligne et de colonne de la cellule qui chevauche le pixel au niveau de la coordonnée spécifiée dans la grille. Si aucune cellule de ce type n'existe, la valeur null est renvoyée.
     
      <p>L'exemple de fonction ci-dessous utilise cette méthode pour calculer la valeur du <codeph>dataField</codeph> pour une cellule de la grille.</p> 
      <pre>
      function getCellData(x:Number, y:Number):Object
      {
          var cell:CellPosition = getCellAt(x, y);
          if (!cell)
              return null;
          var GridColumn:column = grid.columns.getItemAt(cell.columnIndex);
          return grid.dataProvider.getItemAt(cell.rowIndex)[column.dataField];
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellBounds"><apiName>getCellBounds</apiName><shortdesc>
      Renvoie les limites actuelles de pixels de la cellule, ou null si aucune cellule de ce type n'existe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Un <codeph>rectangle</codeph> qui représente les limites de pixels de la cellule, ou null.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la ligne.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la colonne. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie les limites actuelles de pixels de la cellule, ou null si aucune cellule de ce type n'existe. Les limites de la cellule sont rapportées dans les coordonnées de la grille.
     
      <p>Si toutes les colonnes de la ligne spécifiée et toutes les lignes la précédant n’ont pas encore défilé jusqu’à apparaître à l’écran, les limites renvoyées peuvent n’être qu’une approximation, basée sur toutes les propriétés <codeph>typicalItem</codeph> de la colonne.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellX"><apiName>getCellX</apiName><shortdesc>
      Renvoyez la coordonnée X de l’origine de la cellule spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La coordonnée x de l’origine de la cellule spécifiée.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la ligne.
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la colonne. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoyez la coordonnée X de l’origine de la cellule spécifiée. Si l’ensemble des limites de la cellule ne sont pas nécessaires, cette méthode est plus efficace que <codeph>getCellBounds().x</codeph>.
     
      <p>Si toutes les colonnes de la ligne spécifiée et toutes les lignes la précédant n'ont pas encore défilé jusqu'à apparaître à l'écran, la valeur renvoyée peut n'être qu'une approximation, basée sur toutes les propriétés <codeph>typicalItem</codeph> de la colonne.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellY"><apiName>getCellY</apiName><shortdesc>
      Renvoyez la coordonnée Y de l’origine de la cellule spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La coordonnée y de l’origine de la cellule spécifiée.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la ligne.
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la colonne. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoyez la coordonnée Y de l’origine de la cellule spécifiée. Si l’ensemble des limites de la cellule ne sont pas nécessaires, cette méthode est plus efficace que <codeph>getCellBounds().y</codeph>.
     
      <p>Si toutes les colonnes de la rangée spécifiée et toutes les rangées la précédant n'ont pas encore défilé jusqu'à apparaître à l'écran, la valeur renvoyée peut n'être qu'une approximation, basée sur toutes les propriétés <codeph>typicalItem</codeph> de la colonne.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellsAt"><apiName>getCellsAt</apiName><shortdesc>
      Renvoie un vecteur d’objets CellPosition dont les propriétés rowIndex et columnIndex spécifient les index de ligne et de colonne des cellules qui chevauchent la région spécifiée dans la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Vecteur d'objets comme <codeph>Vector.&lt;Object>([{rowIndex:0, columnIndex:0}, ...])</codeph>. 
      
      </apiDesc><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>La coordonnée x du pixel à l'origine de la région, par rapport à la grille.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>La coordonnée x du pixel à l'origine de la région, par rapport à la grille. 
     
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Largeur de la région, en pixels. 
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Hauteur de la région, en pixels. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie un vecteur d’objets CellPosition dont les propriétés <codeph>rowIndex</codeph> et <codeph>columnIndex</codeph> spécifient les index de ligne et de colonne des cellules qui chevauchent la région spécifiée dans la grille. Si aucune cellule de ce type n'existe, un vecteur vide est renvoyé.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnBounds"><apiName>getColumnBounds</apiName><shortdesc>
      Renvoie les limites actuelles de pixels de la colonne spécifiée, ou null si aucune colonne de ce type n'existe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Un <codeph>rectangle</codeph> qui représente les limites en pixels de la colonne, ou null.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la colonne. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie les limites actuelles de pixels de la colonne, ou null si aucune colonne de ce type n'existe. Les limites de la colonne sont rapportées dans les coordonnées de la grille.
     
      <p>Si toutes les cellules dans la colonne indiquée n'ont pas encore défilé à l'écran, les limites rapportées peuvent n'être qu'une approximation, basée sur la propriété <codeph>typicalItem</codeph> de la colonne.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnIndexAt"><apiName>getColumnIndexAt</apiName><shortdesc>
      Renvoie l'indice de colonne correspondant aux coordonnées spécifiées, ou -1 si les coordonnées sont hors limites.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’index de la colonne ou -1 si les coordonnées sont hors limites. 
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>La coordonnée x du pixel par rapport à la grille.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>La coordonnée y du pixel par rapport à la grille.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l'indice de colonne correspondant aux coordonnées spécifiées, ou -1 si les coordonnées sont hors limites. Les coordonnées sont résolues par rapport à la grille.
     
      <p>Si toutes les colonnes ou lignes de la grille n'ont pas encore défilé à l'écran, l'index renvoyé peut n'être qu'une approximation, basée sur toutes les propriétés <codeph>typicalItem</codeph> des colonnes.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnWidth"><apiName>getColumnWidth</apiName><shortdesc>
      Renvoyez la largeur de la colonne spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La largeur de la colonne spécifiée.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la colonne. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoyez la largeur de la colonne spécifiée. Si l’ensemble des limites de la cellule ne sont pas nécessaires, cette méthode est plus efficace que <codeph>getColumnBounds().width</codeph>.
     
      <p>Si la propriété width de la colonne spécifiée n’est pas définie, la valeur renvoyée peut n’être qu’une approximation. La largeur de colonne réelle est calculée uniquement après que la colonne a défilé jusqu’à apparaître à l’écran.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getItemRendererAt"><apiName>getItemRendererAt</apiName><shortdesc>
      Si le rendu d’élément demandé est visible, renvoie une référence au rendu d’élément en cours d’affichage sur la cellule spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le rendu d’élément ou la valeur null si l’emplacement de la cellule n’est pas valide.
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule de l'option de rendu d'élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le rendu d’élément demandé est visible, renvoie une référence au rendu d’élément en cours d’affichage sur la cellule spécifiée. Notez qu’une fois que le rendu d’élément renvoyé n’est plus visible, il peut être recyclé et ses propriétés réinitialisées.  
     
      <p>Si le rendu d’élément demandé n’est pas visible, chaque fois que cette méthode est appelée, un nouveau rendu d’élément est créée. Le nouveau rendu d’élément n’est pas visible</p>
     
      <p>Si la colonne spécifiée n’a pas une largeur explicite, la largeur de cette cellule est basée sur l’élément <codeph>typicalItem</codeph>. Si un élément <codeph>typicalItem</codeph> n’a encore été spécifié ou mesuré, la largeur du rendu d’élément adopte la valeur par défaut <codeph>150</codeph>.</p>
     
      <p>Si la propriété de grille <codeph>variableRowHeight</codeph> a la valeur <codeph>true</codeph> (valeur par défaut) et qu’une hauteur de ligne globale n’a pas été mise en cache pour la ligne spécifiée, la hauteur du rendu d’élément est basée sur l’élément <codeph>typicalItem</codeph>. Si l’élément <codeph>typicalItem</codeph> n’a encore été spécifié ou mesuré, la hauteur du rendu d’élément adopte sa hauteur préférée.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowBounds"><apiName>getRowBounds</apiName><shortdesc>
      Renvoie les limites actuelles de pixels de la ligne, ou null si aucune ligne de ce type n'existe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Un <codeph>rectangle</codeph> qui représente les limites de pixels de la ligne, ou null.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la ligne.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie les limites actuelles de pixels de la ligne spécifiée, ou null si aucune ligne de ce type n'existe. Les limites de la ligne sont rapportées dans les coordonnées de la grille.
     
      <p>Si toutes les colonnes de la ligne spécifiée et toutes les lignes la précédant n’ont pas encore défilé jusqu’à apparaître à l’écran, les limites renvoyées peuvent n’être qu’une approximation, basée sur toutes les propriétés <codeph>typicalItem</codeph> de la colonne.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowIndexAt"><apiName>getRowIndexAt</apiName><shortdesc>
      Renvoie l'index de ligne correspondant aux coordonnées spécifiées, ou -1 si les coordonnées sont hors limites.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L'index de la ligne correspondant aux coordonnées spécifiées.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée x.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée y.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l'index de la ligne correspondant aux coordonnées spécifiées, ou -1 si les coordonnées sont hors limites. Les coordonnées sont résolues par rapport à la grille.
     
      <p>Si toutes les colonnes ou lignes de la grille n'ont pas encore défilé à l'écran, l'index renvoyé peut n'être qu'une approximation, basée sur toutes les propriétés <codeph>typicalItem</codeph> des colonnes.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleColumnIndices"><apiName>getVisibleColumnIndices</apiName><shortdesc>
      Renvoie les index des colonnes actuellement visibles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Un vecteur de la colonne les index visibles.
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie les index des colonnes actuellement visibles. Notez que les fonctionnalités de rendu d'élément de la première et de la dernière colonnes peuvent n'être que partiellement visibles. Le contenu vecteur renvoyé apparaît dans l'ordre de son affichage.
     
      <p>L'exemple suivant utilise cette méthode pour calculer un vecteur d'objets GridColumn visibles.</p>
      <pre>
      function getVisibleColumns():Vector.&lt;GridColumn>
      {
          var visibleColumns = new Vector.&lt;GridColumn>;
          for each (var columnIndex:int in grid.getVisibleColumnIndices())
              visibleColumns.push(grid.columns.getItemAt(columnIndex));
          return visibleColumns;
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleRowIndices"><apiName>getVisibleRowIndices</apiName><shortdesc>
      Renvoyez les index du fournisseur de données et les index de marge des lignes actuellement visibles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Un vecteur des index de lignes visibles.
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Renvoyez les index du fournisseur de données et les index de marge des lignes actuellement visibles. Les index qui sont supérieurs ou égaux à la longueur de <codeph>dataProvider</codeph> représentent des lignes de marge. Notez que les fonctionnalités de rendu d'élément de la première et de la dernière colonnes peuvent n'être que partiellement visibles. Les éléments de contenu du vecteur renvoyé apparaissent dans l'ordre de leur affichage.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc>
      Si la cellule spécifiée est visible, elle est réaffichée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L’index de rangée de base 0 de la cellule qui a changé ou -1.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Index de colonne de base 0 de la cellule qui a changé ou -1.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si la cellule spécifiée est visible, elle est réaffichée. Si <codeph>variableRowHeight=true</codeph>, la hauteur de la ligne correspondante risque de changer.
     
      <p>Si columnIndex a la valeur -1, la ligne entière est invalidée. De même, si <codeph>rowIndex a la valeur -1</codeph>, la colonne entière est invalidée.</p>
     
      <p>Cette méthode doit être appelée lorsqu’un des aspects du fournisseur de données est modifié au niveau de l’élément <codeph>rowIndex</codeph> et que ce changement risque d’influer sur l’affichage de la cellule spécifiée. L’appel de cette méthode est semblable à l’appel de la méthode <codeph>dataProvider.itemUpdated()</codeph>, qui conseille au contrôle Grid de réafficher toutes les lignes affichant l’élément spécifié. L’utilisation de cette méthode peut être relativement efficace, car elle réduit la portée des modifications à une seule cellule.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc>
      Efface les données de largeur de colonne mises en cache qui étaient basées sur la propriété typicalItem et demande une nouvelle transmission de mise en forme.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Efface les données de largeur de colonne mises en cache qui étaient basées sur la propriété <codeph>typicalItem</codeph> et demande une nouvelle transmission de mise en forme. Appelez cette méthode si un des aspects de la propriété <codeph>typicalItem</codeph> a changé et que cette modification doit être répercutée par la mise en forme de la grille.  
     
      <p>Cette méthode est appelée automatiquement si la propriété <codeph>typicalItem</codeph> est modifiée directement, c’est-à-dire si la propriété est définie sur une nouvelle valeur, qui n’est pas « == » à la valeur actuelle.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:isCellVisible"><apiName>isCellVisible</apiName><shortdesc>
      Renvoie true si la cellule spécifiée est au moins partiellement visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>True si la cellule (ou de la ligne si columnIndex == - 1) est au moins partiellement visible
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>L'index de colonne à base 0 de la cellule de l'option de rendu d'élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie <codeph>true</codeph> si la cellule spécifiée est au moins partiellement visible. Si <codeph>columnIndex == - 1</codeph>, renvoie <codeph>true</codeph> si la ligne spécifiée est au moins partiellement visible. Si <codeph>rowIndex == - 1</codeph>, renvoie <codeph>true</codeph> si la colonne spécifiée est au moins partiellement visible. Si <codeph>columnIndex</codeph> et <codeph>rowIndex</codeph> ont tous les deux la valeur -1, renvoie <codeph>false</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc>
      Si selectionMode est GridSelectionMode.SINGLE_CELL ou GridSelectionMode.MULTIPLE_CELLS, supprime la cellule de la sélection et définit la position du signe d’insertion pour la cellule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>rowIndex</codeph> ou <codeph>columnIndex</codeph> n’est pas valide, ou si <codeph>selectionMode</codeph> n’est pas valide.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, supprime la cellule de la sélection et définit la position du caret pour la cellule. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>L’élément <codeph>rowIndex</codeph> est l’index dans le fournisseur de données de l’élément contenant la cellule sélectionnée. La <codeph>columnIndex</codeph> est l'index dans les <codeph> colonnes</codeph> de la colonne contenant la cellule sélectionnée.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, supprime cette ligne de la sélection et définit la position du caret pour cette ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>index</codeph> n’est pas valide ou si <codeph>selectionMode</codeph> n’est pas valide. 
           
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, supprime cette ligne de la sélection et définit la position du caret pour ligne. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>L’élément <codeph>rowIndex</codeph> est l’index dans le fournisseur de données de l’élément contenant la cellule sélectionnée. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectAll"><apiName>selectAll</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.MULTIPLE_ROWS, sélectionne toutes les lignes et supprime le caret ou si le selectionMode est GridSelectionMode.MULTIPLE_CELLS, sélectionne toutes les cellules et supprime le caret.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la sélection a été modifiée.
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Si le mode <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, sélectionne toutes les rangées et supprime le signe d’insertion ou si le mode <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, sélectionne toutes les cellules et supprime le signe d’insertion. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>Si des éléments sont ajoutés à l’élément <codeph>dataProvider</codeph> ou si des éléments <codeph>column</codeph> sont ajoutés après l’appel de cette méthode, les nouvelles rangées ou cellules de la nouvelle colonne sont sélectionnées.</p>
     
      <p>Ce mode « selectAll » implicite se termine lorsque l’une des actions suivantes se produit :
      <ul>
        <li>La sélection est effacée à l’aide de <codeph>clearSelection</codeph>.</li>
        <li>La sélection est réinitialisée à l’aide de l’une des options suivantes : <codeph>setSelectedCell</codeph>, <codeph>setSelectedCells</codeph>, <codeph>setSelectedIndex</codeph>, <codeph>selectIndices</codeph>.</li>
        <li><codeph>dataProvider</codeph> est actualisé et <codeph>preserveSelection</codeph> a la valeur false ;</li>
        <li><codeph>dataProvider</codeph> est réinitialisé ;</li>
        <li><codeph>columns</codeph> est actualisée, <codeph>preserveSelection</codeph> a la valeur <codeph>false</codeph> et <codeph>selectionMode</codeph> a la valeur <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> ;</li>
        <li><codeph>columns</codeph> est réinitialisée et <codeph>selectionMode</codeph> a la valeur <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>.</li> 
      </ul></p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/clearSelection"><linktext>spark.components.Grid.clearSelection</linktext></link><link href="spark.components.xml#Grid/selectIndices"><linktext>spark.components.Grid.selectIndices</linktext></link><link href="spark.components.xml#Grid/setSelectedCell"><linktext>spark.components.Grid.setSelectedCell</linktext></link><link href="spark.components.xml#Grid/setSelectedCells"><linktext>spark.components.Grid.setSelectedCells</linktext></link><link href="spark.components.xml#Grid/setSelectedIndex"><linktext>spark.components.Grid.setSelectedIndex</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc> 
      Si le selectionMode est GridSelectionMode.MULTIPLE_CELLS, définit la sélection pour toutes les cellules de la région de cellules et la position du caret sur la dernière cellule de la région de cellules.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si la région de cellules n’est pas valide ou si <codeph>selectionMode</codeph> n’est pas valide.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de l'origine de la région de cellules.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de l'origine de la région de cellules.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc>Nombre de lignes, en commençant par <codeph>rowIndex</codeph> à inclure dans la région de cellules.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc>Nombre de colonnes, en commençant par <codeph>columnIndex</codeph> à inclure dans la région de cellules.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, définit la sélection pour toutes les cellules dans la région de cellules et place le caret dans la dernière cellule de la région de cellules. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>L’élément <codeph>rowIndex</codeph> est l’index dans le fournisseur de données de l’élément contenant l’origine de la région de cellules. Le <codeph>columnIndex</codeph> est l'index dans les <codeph>colonnes</codeph> de la colonne contenant l'origine de la région de cellules.</p>
     
      <p>Cette méthode est sans effet si la région de cellules n'est pas entièrement contenue dans la grille.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectIndices"><apiName>selectIndices</apiName><shortdesc>
      Si selectionMode est GridSelectionMode.MULTIPLE_ROWS, définit la sélection sur les lignes spécifiées et définit la position du caret sur endRowIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si des index ne sont pas valides, si <codeph>startRowIndex</codeph> n’est pas inférieur ou égal à <codeph>endRowIndex</codeph> ou si la propriété <codeph>selectionMode</codeph> n’est pas valide. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Index de ligne en base 0 pour la première ligne de la sélection.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Nombre de lignes de la sélection.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, définit la sélection sur les lignes spécifiées et définit la position du caret sur <codeph>endRowIndex</codeph>. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>Chaque index représente un élément dans  le fournisseur de données à inclure dans la sélection.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.MULTIPLE_CELLS, renvoie true si les cellules de la région de cellules sont incluses dans la sélection en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la sélection actuelle contient toutes les cellules de la région de cellules.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Nombre de lignes, en commençant par <codeph>rowIndex</codeph> à inclure dans la région de cellules.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc>Nombre de colonnes, en commençant par <codeph>columnIndex</codeph> à inclure dans la région de cellules.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, renvoie <codeph>true</codeph> si les cellules de la région de cellules sont incluses dans la sélection en cours.
     
      <p>L’élément <codeph>rowIndex</codeph> doit être compris entre 0 et la longueur du fournisseur de données. Le <codeph>columnIndex</codeph> doit être compris entre 0 et la longueur de <codeph>colonnes</codeph>. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_CELL ou GridSelectionMode.MULTIPLE_CELLS, renvoie true si la cellule est incluse dans la sélection en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la sélection actuelle contient la cellule.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, renvoie <codeph>true</codeph> si la cellule figure dans la sélection en cours.
     
      <p>L’élément <codeph>rowIndex</codeph> doit être compris entre 0 et la longueur du fournisseur de données. Le <codeph>columnIndex</codeph> doit être compris entre 0 et la longueur de <codeph>colonnes</codeph>. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc>
      Si selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, renvoie true si la ligne au niveau d’index est incluse dans la sélection en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la sélection contient la ligne.
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L’index de ligne en base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, renvoie <codeph>true</codeph> si la ligne au niveau d’<codeph>index</codeph> est incluse dans la sélection en cours.
     
      <p>L’élément <codeph>rowIndex</codeph> est l’index dans le fournisseur de données de l’élément contenant la cellule sélectionnée. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.MULTIPLE_ROWS, renvoie true si les lignes dans les index sont incluses dans la sélection en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la sélection actuelle contient ces lignes.
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Vecteur d’index de ligne en base 0 à inclure dans la sélection. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, renvoie <codeph>true</codeph> si les lignes dans <codeph>indices</codeph> sont incluses dans la sélection en cours.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_CELL ou GridSelectionMode.MULTIPLE_CELLS, définit la sélection et la position du caret sur cette cellule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>rowIndex</codeph> ou <codeph>columnIndex</codeph> n’est pas valide, ou si <codeph>selectionMode</codeph> n’est pas valide.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, définit la sélection et la position du caret pour cette cellule. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>L’élément <codeph>rowIndex</codeph> est l’index dans le fournisseur de données de l’élément contenant la cellule sélectionnée. La <codeph>columnIndex</codeph> est l'index dans les <codeph> colonnes</codeph> de la colonne contenant la cellule sélectionnée.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, définit la sélection et la position du caret sur cette ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>index</codeph> n’est pas valide ou si <codeph>selectionMode</codeph> n’est pas valide. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, définit la sélection et la position du caret sur cette ligne. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>L’élément <codeph>rowIndex</codeph> est l’index dans le fournisseur de données de l’élément contenant la cellule sélectionnée. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiValue id="spark.components:Grid:anchorColumnIndex:get"><apiName>anchorColumnIndex</apiName><shortdesc>
      L’index de colonne de l’ancrage pour la sélection maj. suivante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      L’index de colonne de l’<i>ancrage</i> pour la sélection maj. suivante. L’ancrage est l’élément sélectionné en dernier. Il définit l’élément d’ancrage lorsque plusieurs éléments sont sélectionnés dans la grille. Lorsque vous sélectionnez plusieurs éléments, le jeu d’éléments s’étend à partir de l’ancrage jusqu’à l’élément du signe d’insertion.
     
      <p>Les gestionnaires d'événement de grille doivent utiliser cette propriété pour enregistrer l'emplacement du déplacement le plus récent de la souris ou frappe sur le clavier sans utilisation de la touche maj. qui définit une extrémité de la prochaine sélection potentielle de la touche maj. L'index du caret définit l'autre extrémité.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:anchorRowIndex:get"><apiName>anchorRowIndex</apiName><shortdesc>
      L’index de ligne de l’ancrage pour la sélection maj. suivante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      L’ index de ligne de l’<i>ancrage</i> pour la sélection maj. suivante. L’ancrage est l’élément sélectionné en dernier. Il définit l’élément d’ancrage lorsque plusieurs éléments sont sélectionnés dans la grille. Lorsque vous sélectionnez plusieurs éléments, le jeu d’éléments s’étend à partir de l’ancrage jusqu’à l’élément du signe d’insertion.
     
      <p>Les gestionnaires d'événement de grille doivent utiliser cette propriété pour enregistrer l'emplacement du déplacement le plus récent de la souris ou frappe sur le clavier sans utilisation de la touche maj. qui définit une extrémité de la prochaine sélection potentielle de la touche maj. L'index du caret définit l'autre extrémité.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:caretColumnIndex:get"><apiName>caretColumnIndex</apiName><shortdesc>
      Si showCaretIndicator est true, l’index de colonne de l’élément caretIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>showCaretIndicator</codeph> est <codeph>true</codeph>, l’index de colonne de l’élément <codeph>caretIndicator</codeph>.
     
      <p>Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, l’indicateur occupe toute la ligne et la propriété <codeph>caretColumnIndex</codeph> est ignorée. Si <codeph>selectionMode</codeph>est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, <codeph>caretIndicator</codeph> occupe la cellule spécifiée.</p>
     
      <p>La définition de <codeph>caretColumnIndex</codeph> sur -1 signifie que l’index de colonne n’est pas défini et qu’aucun signe d’insertion de cellule n’est affiché.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretIndicator:get"><apiName>caretIndicator</apiName><shortdesc>
      Si selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, un seul élément visuel est affiché pour la ligne du signe d’insertion. Si selectionMode est GridSelectionMode.SINGLE_CELL ou GridSelectionMode.MULTIPLE_CELLS, l’élément visuel affiché pour la cellule du signe d’insertion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, un seul élément visuel est affiché pour la ligne du signe d’insertion. Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, l’élément visuel affiché pour la cellule du signe d’insertion.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretRowIndex:get"><apiName>caretRowIndex</apiName><shortdesc>
      Si showCaretIndicator est true, l’index de ligne de l’élément caretIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>showCaretIndicator</codeph> est <codeph>true</codeph>, l’index de ligne de l’élément <codeph>caretIndicator</codeph>. Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, l’indicateur occupe toute la ligne et la propriété <codeph>caretColumnIndex</codeph> est ignorée. Si <codeph>selectionMode</codeph>est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, <codeph>caretIndicator</codeph> occupe la cellule spécifiée.
     
      <p>La définition de <codeph>caretRowIndex</codeph> sur -1 signifie que l’index de ligne n’est pas défini et le signe d’insertion n’est pas affiché.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      Un élément visuel affiché entre chaque colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Un élément visuel affiché entre chaque colonne.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columns:get"><apiName>columns</apiName><shortdesc>
      La liste des objets GridColumn affichés par cette grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      La liste des objets GridColumn affichés par cette grille. Chaque colonne sélectionne d’autres propriétés d’éléments du fournisseur de données à afficher.
      
      <p>Les objets GridColumn peuvent uniquement apparaître dans les <codeph>colonnes</codeph> d’un seul contrôle Grid.</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      L’objet DataGrid pour lequel ce contrôle Grid sert de partie d’habillage de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      L’objet DataGrid pour lequel ce contrôle Grid sert de partie d’habillage de la grille.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Une liste des éléments de données qui correspondent aux lignes de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Une liste des éléments de données qui correspondent aux lignes de la grille. Chaque colonne de grille est associée à une propriété des éléments de données pour afficher cette propriété dans les <i>cellules</i> de la grille.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      Si showHoverIndicator est true, spécifie l’index de colonne de l’élément hoverIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>showHoverIndicator</codeph> est <codeph>true</codeph>, spécifie l’index de colonne de l’élément <codeph>hoverIndicator</codeph>. Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, l’indicateur occupe toute la ligne et la propriété <codeph>hoverColumnIndex </codeph> est ignorée. Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, l’indicateur <codeph>hoverIndicator</codeph> occupe la cellule spécifiée.
      
      <p>La définition de l’élément <codeph>hoverColumnIndex</codeph> sur -1 (valeur par défaut) indique que l’index de colonne n’est pas défini et qu’aucun indicateur de survol de cellule ne s’affiche.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverIndicator:get"><apiName>hoverIndicator</apiName><shortdesc>
      Si selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>. Un seul élément visuel affiché pour la ligne qui se trouve sous la souris. Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, l’élément visuel de la cellule.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverRowIndex:get"><apiName>hoverRowIndex</apiName><shortdesc>
      Si showHoverIndicator est true, spécifie l’index de colonne de l’élément hoverIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>showHoverIndicator</codeph> est <codeph>true</codeph>, spécifie l’index de colonne de l’élément <codeph>hoverIndicator</codeph>. Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, l’indicateur occupe toute la ligne et la propriété <codeph>hoverColumnIndex </codeph> est ignorée. Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, l’indicateur <codeph>hoverIndicator</codeph> occupe la cellule spécifiée.
     
      <p>La définition de l’élément <codeph>hoverRowIndex</codeph> sur -1 (valeur par défaut) indique que l’index de ligne n’est pas défini et qu’aucun indicateur de survol ne s’affiche.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      L'option de rendu d'élément qui est utilisée pour les colonnes qui n'en spécifient aucun.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Le rendu d'élément qui est utilisé pour les colonnes qui n'en spécifient aucun.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc>
      Si la valeur est true, la sélection est conservée lorsque le fournisseur de données actualise sa collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la sélection est conservée lorsque le fournisseur de données actualise sa collection. Dans la mesure où cette actualisation nécessite l’enregistrement de chaque élément de la sélection, cette action n’est pas souhaitable si la sélection est volumineuse.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc>
      La largeur mesurée de cette grille est suffisante pour afficher requestedColumnCount premières colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La largeur mesurée de cette grille est suffisante pour afficher les <codeph>requestedColumnCount</codeph> premières colonnes. Si <codeph>requestedColumnCount</codeph> est -1, la largeur mesurée est suffisante pour toutes les colonnes.
     
      <p>Si la taille réelle de la grille a été explicitement définie, cette propriété est sans effet.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc>
      La hauteur mesurée de la grille est suffisante pour afficher au plus requestedMaxRowCount lignes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La hauteur mesurée de la grille est suffisante pour afficher au plus <codeph>requestedMaxRowCount</codeph> lignes.
     
      <p>Cette propriété n’a aucun effet si l’une des affirmations suivantes est vraie ;
      <ul>
          <li>la valeur <codeph>requestedRowCount</codeph> est définie.</li>
          <li>La taille réelle de la grille a été définie explicitement.</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc>
      La largeur mesurée de cette grille est suffisante pour afficher au moins requestedMinColumnCount colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La largeur mesurée de cette grille est suffisante pour afficher au moins <codeph>requestedMinColumnCount</codeph> colonnes.
     
      <p>Cette propriété n’a aucun effet si l’une des affirmations suivantes est vraie ;
      <ul>
          <li>la valeur <codeph>requestedColumnCount</codeph> est définie.</li>
          <li>La taille réelle de la grille a été définie explicitement.</li>
          <li>La grille est incluse dans un composant Scroller.</li>
      </ul>
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc>
      La hauteur mesurée de cette grille est suffisante pour afficher au moins requestedMinRowCount lignes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La hauteur mesurée de cette grille est suffisante pour afficher au moins <codeph>requestedMinRowCount</codeph> lignes.
     
      <p>Cette propriété n’a aucun effet si l’une des affirmations suivantes est vraie ;
      <ul>
          <li>la valeur <codeph>requestedRowCount</codeph> est définie.</li>
          <li>La taille réelle de la grille a été définie explicitement.</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc>
      La hauteur mesurée de cette grille est suffisante pour afficher les requestedRowCount premières lignes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La hauteur mesurée de cette grille est suffisante pour afficher les <codeph>requestedRowCount</codeph> premières lignes. 
     
      <p>Si <codeph>requestedRowCount</codeph> est égal à -1, la taille mesurée sera suffisante pour tous les éléments de présentation. </p>
     
      <p>Si la taille réelle de la grille a été explicitement définie, cette propriété est sans effet.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      Si la valeur est true et que la propriété selectionMode n’est pas GridSelectionMode.NONE, un élément doit toujours être sélectionné dans la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph> et que la propriété <codeph>selectionMode</codeph> n’est pas <codeph>GridSelectionMode.NONE</codeph>, un élément doit toujours être sélectionné dans la grille.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc>
      Indique si l’utilisateur peut modifier la taille des colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
        
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si l’utilisateur peut modifier la taille des colonnes. Si la valeur est <codeph>true</codeph>, l’utilisateur peut agrandir ou rétrécir les colonnes du contrôle DataGrid en faisant glisser les lignes séparant les cellules d’en-tête. Si la valeur est <codeph>true</codeph>, les propriétés <codeph>resizeable</codeph> des colonnes individuelles doivent également être définies sur <codeph>false</codeph> pour empêcher l’utilisateur de redimensionner une certaine colonne.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:rowBackground:get"><apiName>rowBackground</apiName><shortdesc>
      Un élément visuel qui affiche l’arrière-plan de chaque ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowBackgroundChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Un élément visuel qui affiche l’arrière-plan de chaque ligne.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc>
      Si variableRowHeight est false, cette propriété spécifie la hauteur réelle de chaque ligne, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Si <codeph>variableRowHeight</codeph> est <codeph>false</codeph>, cette propriété spécifie la hauteur réelle de chaque ligne, en pixels.
     
      <p>Si <codeph>variableRowHeight</codeph> a la valeur <codeph>true</codeph>, la valeur de cette propriété est utilisée comme hauteur estimée des rangées qui n’ont pas encore fait l’objet d’un défilement pour être affichées, à la place de la hauteur préférée des rendus configurés avec la propriété <codeph>typicalItem</codeph>. De même, lorsque la grille complète son affichage avec des lignes vides, cette propriété spécifie la hauteur des lignes vides.</p>
     
      <p>Si <codeph>variableRowHeight</codeph> est <codeph>false</codeph><codeph>, la valeur par défaut de cette propriété est la valeur maximale hauteur entre la hauteur préférée des options de rendu par colonne créées pour le typicalItem</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowSeparator:get"><apiName>rowSeparator</apiName><shortdesc>
      Un élément visuel qui s'affiche entre chaque ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Un élément visuel qui s'affiche entre chaque ligne.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc>
      Si selectionMode est GridSelectionMode.SINGLE_CELL ou GridSelectionMode.MULTIPLE_CELLS, renvoie la première cellule sélectionnée à partir de la ligne 0 et de la colonne 0, en passant par chaque colonne d’une ligne avant de passer à la ligne suivante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL </codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, renvoie la première cellule sélectionnée à partir de la ligne 0 et de la colonne 0, en passant par chaque colonne d’une ligne avant de passer à la ligne suivante.
     
      <p>Lorsque l'utilisateur change la sélection en utilisant la commande, celle-ci distribue cet événement <codeph>selectionChange</codeph>. Lorsque l'utilisateur change la sélection par programmation, celle-ci distribue l'événement <codeph>valueCommit</codeph>.</p>
     
      <p> Cette propriété est destinée à être utilisée pour initialiser ou établir une liaison avec la sélection dans le balisage MXML. La méthode <codeph>setSelectedCell()</codeph> doit être utilisée pour les mises à jour de la sélection par programmation, par exemple, lors de l’écriture d’un gestionnaire d’événement de clavier ou de souris. </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_CELL ou GridSelectionMode.MULTIPLE_CELLS, renvoie un vecteur d'objets CellPosition représentant les positions des cellules sélectionnées dans la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, renvoie un vecteur d'objets CellPosition représentant les positions des cellules sélectionnées dans la grille.
     
      <p>Lorsque l'utilisateur change la sélection en utilisant la commande, celle-ci distribue cet événement <codeph>selectionChange</codeph>. Lorsque l'utilisateur change la sélection par programmation, celle-ci distribue l'événement <codeph>valueCommit</codeph>.</p>
     
      <p> Cette propriété est destinée à être utilisée pour initialiser ou établir une liaison avec la sélection dans le balisage MXML. La méthode <codeph>setSelectedCell()</codeph> doit être utilisée pour les mises à jour de la sélection par programmation, par exemple, lors de l’écriture d’un gestionnaire d’événement de clavier ou de souris. </p> 
     
      <p>La valeur par défaut est un <codeph>vecteur vide.&lt;CellPosition></codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, renvoie la valeur rowIndex de la première ligne sélectionnée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, renvoie la valeur rowIndex de la première ligne sélectionnée. 
     
      <p>Lorsque l'utilisateur change la sélection en utilisant la commande, celle-ci distribue cet événement <codeph>selectionChange</codeph>. Lorsque l'utilisateur change la sélection par programmation, celle-ci distribue l'événement <codeph>valueCommit</codeph>.</p>
     
      <p> Cette propriété est destinée à être utilisée pour initialiser ou établir une liaison avec la sélection dans le balisage MXML. La méthode <codeph>setSelectedCell()</codeph> doit être utilisée pour les mises à jour de la sélection par programmation, par exemple, lors de l’écriture d’un gestionnaire d’événement de clavier ou de souris. </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, renvoie un vecteur des index de lignes sélectionnées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, renvoie un vecteur des index de lignes sélectionnées. Pour tous les autres modes de sélection, cette méthode est sans effet.
     
      <p>Lorsque l'utilisateur change la sélection en utilisant la commande, celle-ci distribue cet événement <codeph>selectionChange</codeph>. Lorsque l'utilisateur change la sélection par programmation, celle-ci distribue l'événement <codeph>valueCommit</codeph>.</p>
     
      <p> Cette propriété est destinée à être utilisée pour initialiser ou établir une liaison avec la sélection dans le balisage MXML. La méthode setSelectedCell() doit être utilisée pour les mises à jour de la sélection par programmation, par exemple, lors de l’écriture d’un gestionnaire d’événement de clavier ou de souris. </p> > 
     
      <p><codeph>La valeur par défaut est un vecteur vide.&lt;int></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Si selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, renvoie l’élément du fournisseur de données qui est actuellement sélectionné, ou undefined si aucune ligne n’est sélectionnée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, renvoie l’élément du fournisseur de données qui est actuellement sélectionné, ou <codeph>undefined</codeph> si aucune ligne n’est sélectionnée.  
     
      <p>Lorsque l'utilisateur change la sélection en utilisant la commande, celle-ci distribue cet événement <codeph>selectionChange</codeph>. Lorsque l'utilisateur change la sélection par programmation, celle-ci distribue l'événement <codeph>valueCommit</codeph>.</p>
     
      <p> Cette propriété est destinée à être utilisée pour initialiser ou établir une liaison avec la sélection dans le balisage MXML. La méthode <codeph>setSelectedCell()</codeph> doit être utilisée pour les mises à jour de la sélection par programmation, par exemple, lors de l’écriture d’un gestionnaire d’événement de clavier ou de souris. </p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      Si le selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, renvoie un vecteur de l'objet dataProvider éléments qui sont actuellement sélectionnées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc>
      Si le <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, renvoie un vecteur des éléments du dataProvider éléments qui sont actuellement sélectionnés.
     
      <p>Lorsque l'utilisateur change la sélection en utilisant la commande, celle-ci distribue cet événement <codeph>selectionChange</codeph>. Lorsque l'utilisateur change la sélection par programmation, celle-ci distribue l'événement <codeph>valueCommit</codeph>.</p>
     
      <p> Cette propriété est destinée à être utilisée pour initialiser ou établir une liaison avec la sélection dans le balisage MXML. La méthode setSelectedCell() doit être utilisée pour les mises à jour de la sélection par programmation, par exemple, lors de l’écriture d’un gestionnaire d’événement de clavier ou de souris. </p> 
      
      <p>La valeur par défaut est un <codeph>vecteur vide.&lt;Object></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectionIndicator:get"><apiName>selectionIndicator</apiName><shortdesc>
      Si selectionMode est GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, un élément visuel s’affiche pour chaque ligne sélectionnée. Si selectionMode est GridSelectionMode.SINGLE_CELL ou GridSelectionMode.MULTIPLE_CELLS, un élément visuel s’affiche pour chaque cellule sélectionnée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, un élément visuel s’affiche pour chaque ligne sélectionnée. Si <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELL</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, un élément visuel s’affiche pour chaque cellule sélectionnée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc>
      Si selectionMode a la valeur GridSelectionMode.SINGLE_ROW ou GridSelectionMode.MULTIPLE_ROWS, renvoie le nombre de rangées sélectionnées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si le mode <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_ROW</codeph> ou <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, renvoie le nombre de rangées sélectionnées. Si le mode <codeph>selectionMode</codeph> est <codeph>GridSelectionMode.SINGLE_CELLS</codeph> ou <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, renvoie le nombre de cellules sélectionnées.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc>
      Mode de sélection du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Mode de sélection du contrôle. Les valeurs possibles sont : <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, <codeph>GridSelectionMode.NONE</codeph>, <codeph>GridSelectionMode.SINGLE_CELL</codeph>, et <codeph>GridSelectionMode.SINGLE_ROW</codeph>.
     
      <p>La modification du selectionMode provoque la suppression de la sélection en cours et la définition de caretRowIndex et caretColumnIndex sur -1.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      Si la valeur est true, un objet dataTip est affiché pour toutes les cellules visibles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, un objet dataTip s’affiche pour toutes les cellules visibles. Si la valeur est <codeph>false</codeph> (valeur par défaut), un objet dataTip s’affiche uniquement si la propriété <codeph>showDataTips</codeph> de la colonne a la valeur <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      La mise en forme de la grille s’assure que les colonnes dont la largeur n’est pas spécifiée sont suffisamment larges pour afficher un élément de rendu pour cet élément de fournisseur de données par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La mise en forme de la grille s’assure que les colonnes dont la largeur n’est pas spécifiée sont suffisamment larges pour afficher un élément de rendu pour cet élément de fournisseur de données par défaut. Si un élément typique n’est pas spécifié, le premier élément du fournisseur de données est utilisé.
     
      <p>Restriction : si <codeph>typicalItem</codeph> est une interface IVisualItem, elle ne doit pas être membre du fournisseur de données.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc>
      Si la valeur est true, la hauteur de chaque ligne est la hauteur préférée des cellules affichées jusqu’à présent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la hauteur de chaque ligne est la hauteur maximale préférée des cellules affichées jusqu’à présent.
     
      <p>Si la valeur est <codeph>false</codeph>, la hauteur de chaque ligne est simplement la valeur de la propriété <codeph>rowHeight</codeph>. Si la propriété <codeph>rowHeight</codeph> n’est pas spécifiée, la hauteur de chaque ligne est définie par la propriété <codeph>typicalItem</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Application"><apiName>Application</apiName><shortdesc>
  Flex définit un conteneur par défaut ou un conteneur d’application, permettant d’ajouter du contenu à l’application sans définir explicitement un autre conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="direction"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Application" playerVersion="Flash10" type="uint">
<description>
  Couleur d’arrière-plan de l’application. Cette couleur est utilisée comme couleur de scène de l’application et couleur d’arrière-plan pour la balise HTML embed. 
   </description>
<default>0x464646
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Application" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Partie de l’habillage qui définit l’aspect de la barre de contrôle du conteneur. Par défaut, la classe ApplicationSkin définit la zone de la barre de contrôle s’affichant au bas de la zone de contenu du conteneur Application avec un arrière-plan gris. 
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Application&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Application
    <strong>Properties</strong>
    applicationDPI=<i>Device dependent</i>"
    backgroundColor="0xFFFFFF"
    colorCorrection="default"
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    frameRate="24"
    pageTitle""
    preloader="<i>No default</i>"
    preloaderChromeColor="<i>No default</i>"
    resizeForSoftKeyboard=true"
    runtimeDPIProvider="RuntimeDPIProvider"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    splashScreenImage=""
    splashScreenMinimumDisplayTime="1000"
    splashScreenScaleMode="none"
    usePreloader="true"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
     <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex définit un conteneur par défaut ou un conteneur d’application, permettant d’ajouter du contenu à l’application sans définir explicitement un autre conteneur.
   <p>Le contrôle Application possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>375 Pixels de hauteur et 500 pixels de largeur dans la version autonome de Flash Player et l’ensemble de l’espace disponible dans un navigateur </entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixels de large et 0 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucune limite</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.ApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ApplicationContainerExample.mxml"><swfblock conref="examples/ApplicationContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Application_flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR_uncaughtError"><apiName>uncaughtError</apiName><shortdesc>
  Distribué lorsqu'une erreur non interceptée est captée par le gestionnaire d'exceptions globales
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR</apiEventType><adobeApiEventClassifier>flash.events.UncaughtErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu'une erreur non interceptée est captée par le gestionnaire d'exceptions globales.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  Distribué lorsqu’un appel HTTPService échoue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un appel HTTPService échoue.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Distribué après l’initialisation de l’application, traité par le gestionnaire LayoutManager et lié à la liste d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après l’initialisation de l’application, traité par le gestionnaire LayoutManager et lié à la liste d’affichage.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Application:Application"><apiName>Application</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        Spécifie la cadence d’images de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
           </apiDefaultValue></apiValueDef><apiDesc>
        Spécifie la cadence d’images de l’application.
             <p><b>Remarque :</b> cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        Spécifie une chaîne qui apparaît dans la barre de titre du navigateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
        Spécifie une chaîne qui s’affiche dans la barre de titre du navigateur. Cette propriété fournit la même fonctionnalité que la balise HTML <codeph>&lt;title></codeph>.
             <p><b>Remarque :</b> cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML. La valeur définie dans le code MXML est conçue pour une utilisation avec un outil d’actualisation des modèles HTML fournis avec le SDK.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
      Spécifie la couleur chrome utilisée par le composant de préchargement par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
      Spécifie la couleur chrome utilisée par le composant de préchargement par défaut. Cette propriété joue le même rôle que le style <codeph>chromeColor</codeph> utilisé par les habillages Spark. En règle générale, cette propriété doit être définie sur la même valeur que la propriété de style <codeph>chromeColor</codeph> du conteneur Application.
           <p>Remarque : cette propriété ne peut pas être définie par le code ActionScript. Elle doit être définie dans le code MXML.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloader"><apiName>preloader</apiName><shortdesc>
      Le conteneur d’application prend en charge un preloader d’application qui utilise une barre de progression de téléchargement pour indiquer l’avancement du téléchargement et de l’initialisation du fichier SWF d’une application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Le conteneur d’application prend en charge un preloader d’application qui utilise une barre de progression de téléchargement pour indiquer l’avancement du téléchargement et de l’initialisation du fichier SWF d’une application. Par défaut, le preloader d’application est activé. Le preloader contrôle le nombre d’octets téléchargés et met à jour la barre de progression en permanence. 
           <p>Utilisez cette propriété pour indiquer le chemin d’accès d’un composant qui définit un indicateur de progression personnalisé. Pour créer un indicateur de progression personnalisé, vous créez normalement une sous-classe de la classe SparkDownloadProgressBar ou DownloadProgressBar, ou de la classe flash.display.Sprite qui implémente l’interface mx.preloaders.IPreloaderDisplay. </p>
           <p><b>Remarque :</b> cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.preloaders.SparkDownloadProgressBar.xml"><linktext>mx.preloaders.SparkDownloadProgressBar</linktext></link><link href="" invalidHref="mx.preloaders.DownloadProgressBar.xml"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="" invalidHref="flash.display.Sprite.xml"><linktext>flash.display.Sprite</linktext></link><link href="" invalidHref="mx.preloaders.IPreloaderDisplay.xml"><linktext>mx.preloaders.IPreloaderDisplay</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Spécifie la profondeur maximale de la pile d’appels de Flash Player ou AIR avant l’arrêt du lecteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
           </apiDefaultValue></apiValueDef><apiDesc>
        Spécifie la profondeur maximale de la pile d’appels Flash Player ou AIR avant l’arrêt du lecteur. Il s’agit essentiellement de la limite de débordement de pile.
             <p><b>Remarque :</b> cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        Spécifie la durée maximale (en secondes) pendant laquelle un gestionnaire d’événements ActionScript peut s’exécuter avant que Flash Player ou AIR ne suppose qu’il est arrêté, et l’annule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
           </apiDefaultValue></apiValueDef><apiDesc>
        Spécifie la durée maximale d’exécution d’un gestionnaire d’événement ActionScript, en secondes, au bout de laquelle Flash Player ou AIR suppose qu’il est bloqué et abandonne l’opération. La valeur maximale autorisée est 60 secondes.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:splashScreenMinimumDisplayTime"><apiName>splashScreenMinimumDisplayTime</apiName><shortdesc>
      Durée minimale, en millisecondes, d’affichage de l’image d’écran de démarrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1000
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Durée minimale, en millisecondes, d’affichage de l’image d’écran de démarrage. Spécifiez l’image de l’écran de démarrage à l’aide de la propriété <codeph>splashScreenImage</codeph>.
           <p><b>Remarque :</b> la propriété a un effet uniquement lorsque la propriété <codeph>splashScreenImage</codeph> est définie et que la propriété <codeph>preloader</codeph> est définie sur spark.preloaders.SplashScreen. La classe spark.preloaders.SplashScreen est le préchargeur par défaut des applications Mobile Flex. Cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.</p>
           <p><b>Remarque :</b> vous devez ajouter frameworks\libs\mobile\mobilecomponents.swc au chemin de la bibliothèque de l’application pour prendre en charge l’écran d’introduction dans une application de bureau.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenScaleMode"><apiName>splashScreenScaleMode</apiName><shortdesc>
      Mode de mise à l’échelle de l’image d’écran de démarrage : la valeur « none » implique que la taille de l’image est définie pour correspondre à sa taille intrinsèque. La valeur stretch définit la largeur et la hauteur de l’image pour qu’elles correspondent à la largeur et la hauteur de la scène, en modifiant éventuellement les proportions du contenu. La valeur letterbox définit la largeur et la hauteur de l’image en se rapprochant le plus possible de la largeur et de la hauteur de la scène, tout en conservant les proportions.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"none"
      </apiDefaultValue></apiValueDef><apiDesc>
      Le mode de mise à l’échelle de l’image d’écran de démarrage:
      
      <ul>
          <li>La valeur <codeph>none</codeph> implique que la taille de l’image est définie pour correspondre à sa taille intrinsèque.</li>
               <li>La valeur <codeph>stretch</codeph> définit la largeur et la hauteur de l’image pour qu’elles correspondent à la largeur et la hauteur de la scène, en modifiant éventuellement les proportions du contenu.</li>
               <li>La valeur <codeph>letterbox</codeph> définit la largeur et la hauteur de l’image en se rapprochant le plus possible de la largeur et de la hauteur de la scène, tout en conservant les proportions. L’image est étirée au maximum des limites de la scène, en ajoutant un espacement dans la scène pour conserver les proportions, si nécessaire. </li>
               <li>La valeur <codeph>zoom</codeph> est similaire à <codeph>letterbox</codeph>, sauf que <codeph>zoom</codeph> étend l’image au-delà des limites de la scène, pour supprimer l’espacement requis afin de conserver les proportions. Ce paramètre a pour effet d’utiliser la surface complète de la scène, mais peut également rogner une partie de l’image.</li>
      </ul>
           <p>La partie de la scène qui n’est pas couverte par l’image s’affiche dans la couleur <codeph>backgroundColor</codeph> du conteneur de l’application.</p>
           <p><b>Remarque :</b> la propriété a un effet uniquement lorsque la propriété <codeph>splashScreenImage</codeph> est définie et que la propriété <codeph>preloader</codeph> est définie sur spark.preloaders.SplashScreen. La classe spark.preloaders.SplashScreen est le préchargeur par défaut des applications Mobile Flex. Cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.</p>
           <p><b>Remarque :</b> vous devez ajouter frameworks\libs\mobile\mobilecomponents.swc au chemin de la bibliothèque de l’application pour prendre en charge l’écran d’introduction dans une application de bureau.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        Si la valeur est true, provoque l’affichage du fichier de préchargement de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
        Si la valeur est <codeph>true</codeph>, spécifie l’affichage du préchargement de l’application.
             <p><b>Remarque :</b> cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      La valeur PPP de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      La valeur PPP de l’application. Par défaut, il s’agit de la valeur PPP du périphérique sur lequel l’application est en cours d’exécution. Lorsqu’elle est définie dans MXML, Flex met à l’échelle l’application afin que sa valeur PPP corresponde à <codeph>runtimeDPI</codeph>. Cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:aspectRatio:get"><apiName>aspectRatio</apiName><shortdesc>
      Renvoie les proportions de la scène de niveau supérieur en fonction de sa largeur et de sa hauteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Renvoie les proportions de la scène de niveau supérieur en fonction de sa largeur et de sa hauteur. Si la largeur de la scène est supérieure à sa hauteur, la scène est considérée comme étant dans l’orientation « paysage ». Dans le cas contraire, la valeur portrait est renvoyée.
      
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:colorCorrection:get"><apiName>colorCorrection</apiName><shortdesc>
     Valeur de la propriété colorCorrection de la scène.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ColorCorrection.DEFAULT
         </apiDefaultValue></apiValueDef><apiDesc>
     Valeur de la propriété <codeph>colorCorrection</codeph> de la scène. Si cette application n’a pas accès à la propriété <codeph>colorCorrection</codeph> de la scène, la valeur de la propriété <codeph>colorCorrection</codeph> est <codeph>null</codeph>.
         <p>Seule l’application principale est autorisée à définir la propriété <codeph>colorCorrection</codeph>. Si une application imbriquée doit définir la propriété de correction colorimétrique, elle doit la définir en faisant référence à l’occurrence de l’application principale.</p>
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.ColorCorrection.xml"><linktext>flash.display.ColorCorrection</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Ensemble de composants à inclure dans la zone de la barre de contrôle du conteneur Application. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Ensemble de composants à inclure dans la zone de la barre de contrôle du conteneur Application. L’emplacement et l’aspect de la zone de la barre de contrôle du conteneur Panel sont déterminés par la classe spark.skins.spark.ApplicationSkin class. Par défaut, la classe ApplicationSkin définit la zone de la barre de contrôle s’affichant au bas de la zone de contenu du conteneur Application avec un arrière-plan gris. Création d’un habillage personnalisé pour modifier l’aspect par défaut de la barre de contrôle. 
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      Définit la présentation de la zone de la barre de contrôle du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Définit la présentation de la zone de la barre de contrôle du conteneur. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      Si la valeur est true, la barre de contrôle est visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la barre de contrôle est visible. L’indicateur n’a aucun effet si aucune valeur n’est définie pour la propriété <codeph>controlBarContent</codeph>. 
           <p><b>Remarque :</b> le conteneur Application ne surveille pas la propriété <codeph>controlBarGroup</codeph>. Si d’autres éléments de code le rendent invisible, la mise à jour du conteneur Application peut ne pas s’effectuer correctement. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      Objet contenant des paires nom-valeur représentant les paramètres fournis à cette application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet contenant des paires nom-valeur représentant les paramètres fournis à cette application.
           <p>L’utilisation d’une boucle for-in permet d’extraire tous les noms et toutes les valeurs de l’objet parameters.</p>
           <p>Il existe deux sources de paramètres : la chaîne de requête de l’URL de l’application et la valeur du paramètre HTML FlashVars (qui affecte uniquement l’application principale).</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      Certains périphériques ne prennent en charge aucun clavier matériel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      Certains périphériques ne prennent en charge aucun clavier matériel. Au lieu de cela, ces périphériques utilisent un clavier affiché à l’écran lorsque cela est nécessaire. Le clavier à l’écran, également appelé clavier logiciel ou virtuel, se ferme après la saisie des informations par l’utilisateur, ou lorsque l’utilisateur annule l’opération. La valeur <codeph>true</codeph> signifie que l’application est redimensionnée lorsque le clavier logiciel est ouvert ou fermé.  
           <p>Pour activer le redimensionnement de l’application, vous devez également définir l’attribut <codeph>&lt;softKeyboardBehavior></codeph> dans le fichier descripteur xml de l’application sur <codeph>none</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:runtimeDPIProvider:get"><apiName>runtimeDPIProvider</apiName><shortdesc>
      Classe qui étend RuntimeDPIProvider et remplace les calculs Flex par défaut pour runtimeDPI.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>spark.components.RuntimeDPIProvider
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Classe qui étend RuntimeDPIProvider et remplace les calculs Flex par défaut pour <codeph>runtimeDPI</codeph>.
     
      <p>Les mappages par défaut de Flex sont les suivants :
         <adobetable class="innertable">
            
            
            
         <tgroup cols="2"><tbody><row><entry>160 ppp</entry><entry>&lt;200 ppp</entry></row><row><entry>240 ppp</entry><entry>>=200 ppp et &lt;280 ppp</entry></row><row><entry>320 ppp</entry><entry>>=280 ppp</entry></row></tbody></tgroup></adobetable>
      </p>
     
      Cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link><link href="" invalidHref="mx.core.RuntimeDPIProvider.xml"><linktext>mx.core.RuntimeDPIProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:runtimeDPI:get"><apiName>runtimeDPI</apiName><shortdesc>
      La valeur PPP du périphérique sur lequel l’application est en cours d’exécution.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      La valeur PPP du périphérique sur lequel l’application est en cours d’exécution. Flex arrondit la valeur à l’un des choix <codeph>DPIClassification</codeph>. 
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenImage:get"><apiName>splashScreenImage</apiName><shortdesc>
      La classe d’image du préchargeur SplashScreen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc>
      La classe d’image du préchargeur SplashScreen. Vous définissez normalement cette propriété sur une ressource incorporée ou sur le nom d’une classe <codeph>SplashScreenImage</codeph> définie dans un autre fichier MXML. Exemple de définition d’une classe splashScreenImage sur une image intégrée :
           <pre>splashScreenImage="@Embed('Default.png')"</pre>
           <p><b>Remarque :</b> la propriété a un effet uniquement lorsque la propriété <codeph>preloader</codeph> est définie sur spark.preloaders.SplashScreen. La classe spark.preloaders.SplashScreen est le préchargeur par défaut des applications Mobile Flex. Cette propriété ne peut pas être définie par du code ActionScript. Elle doit être définie par du code MXML.</p>
           <p><b>Remarque :</b> vous devez ajouter frameworks\libs\mobile\mobilecomponents.swc au chemin de la bibliothèque de l’application pour prendre en charge l’écran d’introduction dans une application de bureau.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.preloaders.SplashScreen.xml"><linktext>spark.preloaders.SplashScreen</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:url:get"><apiName>url</apiName><shortdesc>
      URL à partir de laquelle le fichier SWF de l’application a été chargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      URL à partir de laquelle le fichier SWF de l’application a été chargé.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      URL à laquelle la source de l’application peut être affichée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      URL à laquelle la source de l’application peut être affichée. Le fait de définir cette propriété provoque l’insertion d’un élément de menu « Afficher la source » dans le menu contextuel par défaut de l’application. La sélection de l’élément de menu ouvre l’URL <codeph>viewSourceURL</codeph> dans une nouvelle fenêtre.
           <p>La propriété <codeph>viewSourceURL</codeph> doit être définie à l’aide de MXML et non à l’aide d’ActionScript, comme le montre l’exemple suivant :</p>
           <pre>
        &lt;Application viewSourceURL="http://path/to/source">
          ...
        &lt;/Application></pre>
                </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Button"><apiName>Button</apiName><shortdesc>
  Le composant Button est un bouton rectangulaire standard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Alpha des ombres du texte.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Couleur des ombres du texte.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:Button" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur appliquée au bouton lorsque l’indicateur mis en évidence est true.  
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Button&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Button 
    <strong>Properties</strong>
    emphasized="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant Button est un bouton rectangulaire standard. L’apparence du composant Button indique à l’utilisateur qu’il peut appuyer dessus. L’habillage par défaut a une étiquette de texte. Définissez une classe d’habillage personnalisée pour ajouter une image au contrôle. 
 
  <p>Les contrôles Button utilisent généralement des écouteurs d’événements pour effectuer une action lorsque l’utilisateur les sélectionne. Lorsque l’utilisateur clique sur un contrôle Button alors que celui-ci est activé, un événement <codeph>click</codeph> et un événement <codeph>buttonDown</codeph> sont distribués. Un contrôle Button distribue toujours des événements comme <codeph>mouseMove</codeph>, <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph>, <codeph>rollOut</codeph>, <codeph>mouseDown</codeph> et <codeph>mouseUp</codeph>, qu’ils soient activés ou non.</p>
 
  <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
 
  <p>Le contrôle Button possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Suffisamment large pour afficher l’étiquette de texte du contrôle</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>21 pixels de large et 21 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.ButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonSkin"><linktext>spark.skins.spark.ButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:Button:Button"><apiName>Button</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
     Indique que le bouton par défaut a été demandé par le gestionnaire de focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="emphasizedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
     Indique que le bouton par défaut a été demandé par le gestionnaire de focus. Cette propriété est généralement définie par le gestionnaire de focus lorsqu’un bouton joue le rôle de bouton par défaut dans un conteneur ou un formulaire. Lorsque la valeur est true, le style <codeph>emphasized</codeph> est ajouté à la propriété <codeph>styleName</codeph> du bouton.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.managers.FocusManager.defaultButton.xml"><linktext>mx.managers.FocusManager.defaultButton</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  Le composant CheckBox se compose d’un libellé facultatif et d’une petite case contenant ou non une coche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:CheckBox" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:CheckBox" playerVersion="Flash10" theme="mobile" type="String">
<description>
  L’orientation de l’icône par rapport à l’étiquette. Les valides MXML valides sont <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> et <codeph>top</codeph>.
 
  <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> et <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:CheckBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
  <pre>
  &lt;s:CheckBox
    <strong>Properties</strong>
    symbolColor="0x000000"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant CheckBox se compose d’un libellé facultatif et d’une petite case contenant ou non une coche. 
 
  <p>Lorsqu’un utilisateur clique sur un composant CheckBox ou sur le texte associé, le composant CheckBox définit sa propriété <codeph>selected</codeph> sur <codeph>true</codeph> si la case est cochée et sur <codeph>false</codeph> si elle n’est pas cochée.</p>
 
  <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
 
  <p>Le contrôle CheckBox possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Suffisamment large pour afficher l’étiquette de texte du contrôle</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>18 pixels de large et 18 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.CheckBoxSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#CheckBoxSkin"><linktext>spark.skins.spark.CheckBoxSkin</linktext></link></related-links><apiConstructor id="spark.components:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Group"><apiName>Group</apiName><shortdesc>
  La classe Group est la classe conteneur de base des éléments visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="mxmlContent"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Alpha des ombres du texte.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Couleur des ombres du texte.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Group&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Group
    <strong>Properties</strong>
    blendMode="auto"
    mxmlContent="null"
    scaleGridBottom="null"
    scaleGridLeft="null"
    scaleGridRight="null"
    scaleGridTop="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Group est la classe conteneur de base des éléments visuels. Le conteneur Group accepte comme enfants les composants qui implémentent l’interface IUIComponent ou l’interface IGraphicElement. Utilisez ce conteneur pour gérer les enfants visuels, qui sont à la fois des composants visuels et des composants graphiques. 
 
  <p>Pour améliorer les performances et limiter la taille de l’application, l’habillage du conteneur Group ne peut pas être configuré. Pour appliquer un habillage, utilisez plutôt la classe SkinnableContainer.</p>
 
  <p><b>Remarque :</b> la grille de mise à l’échelle peut ne pas fonctionner correctement lorsqu’il n’existe aucun enfant de classe DisplayObject au sein du groupe, comme un composant ou un autre groupe. Si les enfants de l’objet sont des objets GraphicElement et qu’ils partagent tous l’objet DisplayObject du groupe, la grille de mise à l’échelle fonctionne correctement. </p> 
 
  <p>Définir l’une des propriétés suivantes sur un enfant de classe GraphicElement requiert que la classe GraphicElement crée sa propre classe DisplayObject, niant par conséquent les propriétés de la grille de mise à dans le groupe. </p>  
 
  <pre>
  alpha
  blendMode other than BlendMode.NORMAL or "auto"
  colorTransform
  filters
  mask
  matrix
  rotation
  scaling
  3D properties
  bounds outside the extent of the Group
  </pre>
 
  <p>Le conteneur Group présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="GroupExample.mxml"><swfblock conref="examples/GroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  Distribué lorsqu’un élément visuel est supprimé de l’espace de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un élément visuel est supprimé de l’espace de contenu. <codeph>event.element</codeph> correspond à l’élément visuel supprimé.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  Distribué lorsqu’un élément visuel est ajouté à l’espace de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un élément visuel est ajouté à l’espace de contenu. <codeph>event.element</codeph> correspond à l’élément visuel ajouté.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Group:Group"><apiName>Group</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Group:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      Informe le composant hôte qu’un élément a été modifié et doit à nouveau être tracé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Elément modifié.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Informe le composant hôte qu’un élément a été modifié et doit à nouveau être tracé. L’occurrence Group appelle la méthode <codeph>validateDisplayList()</codeph> sur l’interface IGraphicElement pour permettre un nouveau tracé.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      Signale au composant hôte qu’un élément a été modifié et qu’il doit valider les propriétés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Elément modifié.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale au composant hôte qu’un élément a été modifié et qu’il doit valider les propriétés. L’occurrence Group appelle la méthode <codeph>validateProperties()</codeph> sur l’interface IGraphicElement pour permettre la validation des propriétés.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      Signale à l’hôte qu’une couche d’élément a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Elément dont la taille a été modifiée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à l’hôte qu’une couche d’élément a été modifiée. L’occurrence Group évalue à nouveau les séquences d’éléments en utilisant les objets DisplayObject partagés et peut ainsi réaffecter les objets DisplayObject et tracer à nouveau les séquences. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      Signale au composant hôte qu’une taille d’élément a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Elément dont la taille a été modifiée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale au composant hôte qu’une taille d’élément a été modifiée. L’occurrence Group appelle la méthode <codeph>validateSize()</codeph> sur l’interface IGraphicElement pour permettre la validation de la taille.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:Group:baselinePositionElement:get"><apiName>baselinePositionElement</apiName><shortdesc>
      L'élément utilisé pour calculer la position de base de GroupBase 
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      L'élément utilisé pour calculer la position de base de GroupBase 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:blendMode:get"><apiName>blendMode</apiName><shortdesc>
      Valeur de la classe BlendMode qui spécifie le mode de fusion à utiliser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur de la classe BlendMode qui spécifie le mode de fondu à utiliser. Une image bitmap peut être dessinée en interne de deux manières. Si un mode de fondu ou un masque de découpage externe est activé, l’image bitmap est dessinée en ajoutant une forme carrée remplie avec l’image bitmap au rendu vectoriel. Si vous tentez de définir une valeur non valide pour cette propriété, Flash Player ou Adobe AIR la remplace par <codeph>BlendMode.NORMAL</codeph>. 
     
      <p>La valeur « auto » (valeur par défaut) est spécifique à l’utilisation de blendMode par Group et indique que l’élément blendMode sous-jacent doit être <codeph>BlendMode.NORMAL</codeph>, à moins que <codeph>alpha</codeph> ne soit égal ni à 0 ni à 1 lorsqu’il est défini sur <codeph>BlendMode.LAYER</codeph>. Ce comportement garantit que la composition des objets graphiques des groupes est correcte lorsque le groupe est translucide. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/blendMode"><linktext>flash.display.DisplayObject.blendMode</linktext></link><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Group:scaleGridBottom:get"><apiName>scaleGridBottom</apiName><shortdesc>
      Spécifie la coordonnée inférieure de la grille d’échelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie la coordonnée inférieure de la grille d’échelle.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridLeft:get"><apiName>scaleGridLeft</apiName><shortdesc>
     Spécifie la coordonnée gauche de la grille d’échelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Spécifie la coordonnée gauche de la grille d’échelle.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridRight:get"><apiName>scaleGridRight</apiName><shortdesc>
     Spécifie la coordonnée droite de la grille d’échelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Spécifie la coordonnée droite de la grille d’échelle.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridTop:get"><apiName>scaleGridTop</apiName><shortdesc>
     Spécifie la coordonnée supérieure de la grille d’échelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Spécifie la coordonnée supérieure de la grille d’échelle.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc>
      Enfants de contenu visuel de cette occurrence Group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Enfants de contenu visuel de cette occurrence Group. Cette méthode est utilisée en interne par Flex et n’est pas conçue pour l’utilisation directe par des développeurs. 
     
      <p>Les éléments de contenu doivent être des objets IVisualItem. Un tableau <codeph>mxmlContent</codeph> ne doit pas être partagé entre plusieurs conteneurs d’occurrence Group, car un élément visuel ne peut se trouver que dans un seul conteneur à la fois.</p>
     
      <p>Si le contenu est un tableau, ne modifiez pas directement le tableau. Utilisez plutôt les méthodes définies par la classe Group.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconPlacement"><apiName>IconPlacement</apiName><shortdesc>
      La classe IconPlacement définit les constantes des valeurs autorisées du style iconPlacement d’un composant Button, CheckBox, RadioButton ou ToggleButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      La classe IconPlacement définit les constantes des valeurs autorisées du style <codeph>iconPlacement</codeph> d’un composant Button, CheckBox, RadioButton ou ToggleButton.
      
      </apiDesc></apiClassifierDetail><apiValue id="spark.components:IconPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
          Spécifie que l’icône doit s’afficher sous l’étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Spécifie que l’icône doit s’afficher sous l’étiquette.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
          Spécifie que l’icône doit s’afficher à gauche de l’étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Spécifie que l’icône doit s’afficher à gauche de l’étiquette.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
          Spécifie que l’icône doit s’afficher à droite de l’étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Spécifie que l’icône doit s’afficher à droite de l’étiquette.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:TOP"><apiName>TOP</apiName><shortdesc>
          Spécifie que l’icône doit s’afficher au-dessus de l’étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Spécifie que l’icône doit s’afficher au-dessus de l’étiquette.
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextInput"><apiName>TextInput</apiName><shortdesc>
  TextInput est un contrôle d’entrée des textes permettant aux utilisateurs de saisir et de modifier une seule ligne de texte au format uniforme. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="lineBreak"/><Exclude kind="style" name="verticalAlign"/><DefaultProperty name="text"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextInput&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextInput
    <strong>Properties</strong>
    widthInChars="<i>Calculated default</i>"  <b>[applies to Spark theme]</b>
  
    <strong>Events</strong>
    enter="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextInput est un contrôle d’entrée des textes permettant aux utilisateurs de saisir et de modifier une seule ligne de texte au format uniforme. 
   <p><b>L’habillage TextInput pour le thème Spark utilise la classe RichEditableText. Cela signifie que le contrôle TextInput Spark prend en charge la bibliothèque TLF (Text Layout Framework), qui repose sur le moteur FTE (Flash Text Engine).</b>Associés, ces calques offrent des fonctionnalités de modification de texte, notamment de typographie et de présentation internationales de qualité supérieure. </p>
 
  <p><b>L’habillage TextInput pour le thème Mobile utilise la classe StyleableStageText au lieu de RichEditableText.</b> Etant donné que StyleableStageText utilise des champs de texte natifs, la saisie et la manipulation de texte sont améliorés sur les périphériques mobiles. Il existe toutefois des <xref href="supportClasses/StyleableStageText.html">limitations et différences</xref> dont vous devez tenir compte. Les contrôles de texte natifs utilisés par StageText appliquent des marges différentes autour du texte. Pour éviter le défilement vertical, l’habillage TextInput basé sur StageText tente d’estimer cette marge et de la compenser. En raison de cette compensation et d’autres différences dans le traitement du texte par les contrôles de texte natifs, la hauteur par défaut du contrôle TextInput avec l’habillage basé sur StageText est différente de sa hauteur par défaut avec l’habillage TextInput basé sur TextField.
 </p>
   <p>Vous pouvez définir le texte à afficher, ou obtenir le texte que l’utilisateur a entré, à l’aide de la propriété <codeph>texte</codeph>. Cette propriété étant une chaîne, si l’utilisateur entre une valeur numérique, elle est indiquée sous la forme, par exemple, « 123.45 » plutôt que 123.45. </p>
   <p>Le texte est formatée à l’aide de styles CSS, tels que <codeph>fontFamily</codeph> et <codeph>fontSize</codeph>. </p>
   <p>Pour le thème Spark, vous pouvez spécifier la largeur du contrôle à l’aide de la propriété <codeph>widthInChars</codeph>, qui fournit un moyen pratique pour spécifier la largeur de manière à la mettre à l’échelle en fonction de la taille de police, ou vous pouvez utiliser la propriété <codeph>typicalText</codeph>. Notez que si vous utilisez <codeph>typicalText</codeph>, la propriété <codeph>widthInChars</codeph> est ignorée. Pour tous les thèmes, vous pouvez également spécifier une largeur explicite en pixels, un pourcentage de largeur, ou utiliser des contraintes telles que <codeph>left</codeph> et <codeph>right</codeph>. Vous n’avez pas normalement besoin de spécifier la hauteur. La hauteur par défaut du contrôle est suffisante pour afficher une ligne de texte. 
  </p>
   <p>Vous pouvez utiliser la propriété <codeph>maxChars</codeph> pour limiter le nombre de caractères saisis par l’utilisateur et la propriété <codeph>restrict</codeph> pour limiter le type des caractères saisis par l’utilisateur. Pour utiliser cette option pour l’entrée de mots de passe, définissez la propriété <codeph>displayAsPassword</codeph> sur <codeph>true</codeph>. </p>
   <p>Pour le thème Mobile, les propriétés spécifiques au clavier logiciel, <codeph>autoCapitalize</codeph>, <codeph>autoCorrect</codeph>, <codeph>returnKeyLabel</codeph> et <codeph>softKeyboardType</codeph> spécifient les indicateurs du clavier. Si un clavier logiciel est présent, mais ne prend pas en charge une fonctionnalité représentée par le conseil, le conseil est ignoré. Dans les environnements mobiles comportant uniquement des claviers matériels, ces conseils sont ignorés. 
  </p>
  
  <p>Ce contrôle distribue un événement <codeph>FlexEvent.ENTER</codeph> lorsque l’utilisateur appuie sur la touche Entrée plutôt que d’insérer un saut de ligne, car cette option ne pas en charge entrez plusieurs lignes de texte. Par défaut, ce contrôle possède des sauts de ligne explicites. </p>
   <p>Il s’agit d’un contrôle habillable dont l’habillage par défaut contient soit une instance RichEditableText pour le thème Spark, soit une instance StyleableStageText pour le thème Mobile. Il gère l’affichage et la modification du texte. ( L’habillage gère également le traçage de la bordure et de l’arrière-plan). Cette instance RichEditableText ou StyleableStageText est accessible en tant qu’objet <codeph>textDisplay</codeph>. Pour le thème Mobile, si vous souhaitez utiliser l’habillage basé sur TextField plutôt que l’habillage basé sur StageText, définissez la propriété <codeph>skinClass</codeph> sur <codeph>"spark.skins.mobile.TextInputSkin"</codeph>.</p>
   <p>Pour le thème Spark, étant donné que RichEditableText utilise TLF, le contrôle TextInput Spark prend en charge l’affichage du texte rédigé de gauche à droite (LTR), par exemple, en français, de droite à gauche (RTL), comme en arabe, et du texte bidirectionnel, par exemple une phrase française au sein d’une phrase arabe. Si le sens du texte prédominant est de droite à gauche, définissez le style <codeph>direction</codeph> sur <codeph>rtl</codeph>. Par défaut, le style <codeph>textAlign</codeph> pour la valeur <codeph>start</codeph>, ce qui aligne le texte à gauche lorsque <codeph>direction</codeph> est définie sur <codeph>ltr</codeph> et à droite lorsque <codeph>direction</codeph> est définie sur <codeph>rtl</codeph>. Pour obtenir l’alignement inverse, définissez <codeph>textAlign</codeph> sur <codeph>end</codeph>. </p>
   <p>L’utilisation de TLF permet à RichEditableText de prendre en charge un nombre illimité d’opération d’annulation/rétablissement au cours d’une session d’édition. Une session d’édition commence lorsque le contrôle obtient le focus clavier et se termine lorsque le contrôle perd le focus. </p>
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
   <p>Pour le thème Spark, le contrôle TextInput possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>128 pixels de large par 22 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.TextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>Pour le thème Mobile, le contrôle TextInput possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.mobile.StageTextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextInputSkin.xml"><linktext>spark.skins.mobile.StageTextInputSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextInputSkin.xml"><linktext>spark.skins.mobile.TextInputSkin</linktext></link><link href="spark.skins.spark.xml#TextInputSkin"><linktext>spark.skins.spark.TextInputSkin</linktext></link><link href="spark.components.xml#TextArea"><linktext>TextArea</linktext></link></related-links><adobeApiEvent id="spark.components:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  Distribué lorsque l’utilisateur appuie sur la touche Entrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur appuie sur la touche Entrée.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TextInput:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      Largeur par défaut du contrôle, mesurée en unités em.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
           </apiDefaultValue></apiValueDef><apiDesc>
      Largeur par défaut du contrôle, mesurée en unités em.
           <p>Un em est une unité de mesure typographiques égale à la taille en points. Il ne s’agit pas nécessairement de la largeur exacte du caractère« M », mais dans la plupart des polices le « M » correspond à environ un em de large. Le style <codeph>fontSize</codeph> du contrôle est utilisé pour calculer l’unité em en pixels. </p>
           <p>Vous pouvez par exemple, définir cette propriété sur 20 si vous souhaitez que la largeur du composant TextInput soit suffisante pour afficher 20 caractères. </p>
           <p>Cette propriété sera ignorée si vous spécifiez une largeur explicite, un pourcentage de largeur ou les deux contraintes <codeph>left</codeph> et <codeph>right</codeph>. </p>
           <p>Cette propriété sera également ignorée si la propriété <codeph>typicalText</codeph> est spécifiée.</p>
     
      <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
          
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Form"><apiName>Form</apiName><shortdesc>
  Le conteneur Spark Form permet de contrôler la présentation d’un formulaire, de marquer des champs de formulaire comme étant obligatoires ou facultatifs, de traiter les messages d’erreur et de lier vos données de formulaire au modèle de données Flex, afin de vérifier et de valider les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Form">
<description>
  Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Form&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:Form&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/s:Form&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur Spark Form permet de contrôler la mise en forme d’un formulaire, de marquer des champs de formulaire comme étant obligatoires ou facultatifs, de traiter les messages d’erreur et de lier vos données de formulaire au modèle de données Flex, afin de vérifier et de valider les données. Il vous permet également d’utiliser des feuilles de style pour configurer l’apparence de vos formulaires.
 
  <p>Le tableau ci-dessous décrit les composants à utiliser pour créer des formulaires dans Flex :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="3"><thead><row><entry>Composant</entry><entry>Balise</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Form</entry>
           <entry><codeph>&lt;s:Form></codeph></entry>
           <entry>Définit le conteneur du formulaire dans son ensemble, y compris la mise en forme globale du formulaire. Utilisez les contrôles FormHeading et FormItem pour définir le contenu. Vous pouvez également insérer d’autres types de composants dans un conteneur Form.</entry>
        </row><row>
           <entry>FormHeading</entry>
           <entry><codeph>&lt;s:FormHeading></codeph></entry>
           <entry>Définit un titre dans votre formulaire.  </entry>
        </row><row>
           <entry>FormItem</entry>
           <entry><codeph>&lt;s:FormItem></codeph></entry>
           <entry>Contient un ou plusieurs enfants de formulaire, disposés horizontalement ou verticalement. Les enfants peuvent être des contrôles ou d’autres conteneurs. Un même conteneur Form peut contenir plusieurs conteneurs FormItem.</entry>
        </row><row>
           <entry>FormLayout</entry>
           <entry><codeph>&lt;s:FormLayout></codeph></entry>
           <entry>Définit la présentation par défaut des habillages de formulaire Spark.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example><example conref="StackedFormSkinExample.mxml"><swfblock conref="examples/StackedFormSkinExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormSkin"><linktext>spark.skins.spark.FormSkin</linktext></link></related-links><apiConstructor id="spark.components:Form:Form"><apiName>Form</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Form:invalidElements:get"><apiName>invalidElements</apiName><shortdesc>
      Tableau trié des éléments descendants qui se trouvent dans un état non valide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau trié des éléments descendants qui se trouvent dans un état non valide. Les éléments du tableau sont des objets avec les propriétés suivantes :
     
      <ul>
        <li>element:UIComponent - l’élément descendant non valide ;</li>
     
        <li>position:Vector.&lt;int> - un vecteur d’entiers représentant la position de l’élément dans l’arborescence de la liste d’affichage. Cette propriété est utilisée pour le tri du tableau.</li>  
      </ul>
     
      <p>Si un descendant est supprimé du formulaire, le dictionnaire n’est pas mis à jour.</p> 
         
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  Le contrôle NumericStepper permet de sélectionner un nombre dans un jeu ordonné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:NumericStepper">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu à ce composant. 
   </description>
<default>1
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Contrôle la visibilité de la bordure de composant. 
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la bordure de ce composant. 
   </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de la bordure de ce composant. 
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#NumericStepper/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#NumericStepper/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components:NumericStepper" playerVersion="Flash10" required="true" var_type="spark.components:TextInput">
<description>
      Partie d’habillage définissant un contrôle TextInput, qui permet à l’utilisateur de modifier la valeur du composant NumericStepper. La valeur est arrondie et validée lorsque l’utilisateur appuie sur la touche Entrée, place le focus en dehors du composant NumericStepper ou incrémente/décrémente le composant NumericStepper. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a TextInput control 
      which allows a user to edit the value of
      the NumericStepper component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:NumericStepper&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:NumericStepper
     <strong>Properties</strong>
    imeMode="null"
    maxChars="0"
    maximum="10"
    valueFormatFunction=""
    valueParseFunction=""
     <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
   baselineShift="0.0"
   blockProgression="TB"
   borderAlpha="0.5"
   borderColor="0x000000"
   borderVisible="true"
   breakOpportunity="AUTO"
   cffHinting="HORIZONTAL_STEM"
   color="0"
   contentBackgroundAlpha="1.0"
   contentBackgroundColor="0xFFFFFF"
   clearFloats="none"
   digitCase="DEFAULT"
   digitWidth="DEFAULT"
   direction="LTR"
   dominantBaseline="AUTO"
   firstBaselineOffset="AUTO"
   focusedTextSelectionColor=""
   fontFamily="Arial"
   fontLookup="DEVICE"
   fontSize="12"
   fontStyle="NORMAL"
   fontWeight="NORMAL"
   inactiveTextSelection=""
   justificationRule="AUTO"
   justificationStyle="AUTO"
   kerning="AUTO"
   leadingModel="AUTO"
   ligatureLevel="COMMON"
   lineHeight="120%"
   lineThrough="false"
   listAutoPadding="40"
   listStylePosition="outside"
   listStyleType="disc"
   locale="en"
   paragraphEndIndent="0"
   paragraphSpaceAfter="0"
   paragraphSpaceBefore="0"
   paragraphStartIndent="0"
   renderingMode="CFF"
   tabStops="null"
   textAlign="START"
   textAlignLast="START"
   textAlpha="1"
   textDecoration="NONE"
   textIndent="0"
   textJustify="INTER_WORD"
   textRotation="AUTO"
   trackingLeft="0"
   trackingRight="0"
   typographicCase="DEFAULT"
   unfocusedTextSelectionColor=""
   whiteSpaceCollapse="COLLAPSE"
   wordSpacing="100%,50%,150%"
 /&gt;
 </pre>
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components:Spinner</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle NumericStepper permet de sélectionner un nombre dans un jeu ordonné. Le composant NumericStepper offre les mêmes fonctions que le composant Spinner, mais il ajoute un contrôle TextInput permettant de modifier directement la valeur du composant, au lieu de la modifier à l’aide des boutons de direction du contrôle. 
   <p>Le contrôle NumericStepper se compose d’une zone de texte d’une seule ligne et d’une paire de boutons fléchés permettant de parcourir les valeurs possibles. Les flèches Haut et Bas et la molette de la souris permettent également de passer en revue les valeurs. Une valeur d’entrée est validée lorsque l’utilisateur appuie sur la touche Entrée, place le focus à l’extérieur du composant ou incrémente/décrémente le composant NumericStepper en appuyant sur un bouton de direction ou en appelant la méthode <codeph>step()</codeph>.</p>
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
   <p>Le contrôle NumericStepper possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>53 pixels de large par 23 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>40 pixels de large et 40 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classes d’habillage par défaut </entry>
           <entry>spark.skins.spark.NumericStepperSkin
              <p>spark.skins.spark.NumericStepperTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#NumericStepperSkin"><linktext>spark.skins.spark.NumericStepperSkin</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      Constructeur
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle obtient le focus et rétablit la valeur précédente lorsque le contrôle perd le focus.
          <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs possibles de cette propriété. Vous pouvez également spécifier <codeph>null</codeph> si vous ne souhaitez pas spécifier d’éditeur IME.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      Nombre maximal de caractères pouvant être entré dans le champ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre maximal de caractères pouvant être saisis dans le champ. La valeur 0 signifie que tout nombre de caractères peut être entré.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueFormatFunction:get"><apiName>valueFormatFunction</apiName><shortdesc>
      Fonction de rappel qui formate la valeur affichée dans la propriété textDisplay de l’habillage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction de rappel qui formate la valeur affichée dans la propriété <codeph>textDisplay</codeph> de l’habillage. La fonction prend un seul nombre comme argument et renvoie une chaîne mise en forme.
           <p>La fonction présente la signature suivante :</p>
      <pre>
      funcName(value:Number):String
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueParseFunction:get"><apiName>valueParseFunction</apiName><shortdesc>
      Fonction de rappel qui extrait la valeur numérique à partir de la valeur affichée dans le champ textDisplay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction de rappel qui extrait la valeur numérique à partir de la valeur affichée dans le champ <codeph>textDisplay</codeph>. La fonction accepte une seule chaîne comme argument et renvoie un nombre.
           <p>La fonction présente la signature suivante :</p>
      <pre>
      funcName(value:String):Number
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:maximum:set"><apiName>maximum</apiName><shortdesc>
      Nombre représentant la valeur maximale autorisée de value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre représentant la valeur maximale autorisée de <codeph>value</codeph>. Si la valeur de <codeph>minimum</codeph> ou <codeph>value</codeph> est supérieure à <codeph>maximum</codeph>, ces deux valeurs sont modifiées de manière à refléter la nouvelle valeur <codeph>maximum</codeph>.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Spinner"><apiName>Spinner</apiName><shortdesc>
  Un composant Spinner sélectionne une valeur dans un ensemble trié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Spinner">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabled" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  Etat désactivé.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  Etat normal.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’anneau de focus pour ce composant. 
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Rayon des angles de ce composant. 
   </description>
<default>2
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="decrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Partie d’habillage définissant le bouton qui diminue la valeur <codeph>value</codeph> d’une valeur égale à <codeph>stepSize</codeph> lorsque l’utilisateur appuie dessus.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, decrements the value property
      by stepSize.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Partie d’habillage définissant le bouton qui augmente la valeur <codeph>value</codeph> d’une valeur égale à <codeph>stepSize</codeph> lorsque l’utilisateur appuie dessus.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, increments the value property
      by stepSize.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Spinner&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Spinner
    <strong>Properties</strong>
    allowValueWrap="false"
  
    <strong>Events</strong>
    change="<i>No default</i>"
     <strong>Styles</strong>
    cornerRadius="2"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
      
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un composant Spinner sélectionne une valeur dans un ensemble trié. Il utilise deux boutons qui augmentent ou diminuent la valeur actuelle en fonction de la valeur actuelle de la propriété <codeph>stepSize</codeph>.
  
  <p>Un composant Spinner se compose de deux boutons, l’un servant à augmenter la valeur actuelle et l’autre à la diminuer. Les utilisateurs peuvent également utiliser les flèches Haut et Bas et la molette de la souris pour passer en revue les valeurs. Une valeur d’entrée est validée lorsque l’utilisateur appuie sur la touche Entrée, place le focus à l’extérieur du composant ou incrémente/décrémente le composant Spinner en appuyant sur un bouton de direction ou en appelant la méthode <codeph>changeValueByStep()</codeph>.</p>
   <p>Les valeurs possibles d’un composant Spinner correspondent aux valeurs autorisées par la propriété <codeph>value</codeph>. Les valeurs autorisées sont la somme du minimum et de nombres entiers multiples de la propriété <codeph>snapInterval</codeph> qui sont inférieurs ou égaux à la valeur <codeph>maximum</codeph>. Par exemple :</p>
  
  <ul>
    <li><codeph>minimum</codeph> = -1</li>
    <li><codeph>maximum</codeph> = 10</li>
    <li><codeph>snapInterval</codeph> = 3</li>
  </ul>
  
  Par conséquent, les valeurs possibles sont {-1,2,5,8,10}.
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
   <p>Le contrôle Spinner possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>19 pixels de large par 23 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>12 pixels de large et 12 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.SpinnerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="SpinnerExample.mxml"><swfblock conref="examples/SpinnerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#SpinnerSkin"><linktext>spark.skins.spark.SpinnerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Spinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la valeur du contrôle Spinner change suite à une interaction utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la valeur du contrôle Spinner change suite à une interaction utilisateur.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Spinner:Spinner"><apiName>Spinner</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Spinner:allowValueWrap:get"><apiName>allowValueWrap</apiName><shortdesc>
      Détermine le comportement du contrôle pour un pas lorsque la valeur value actuelle correspond à la valeur maximum ou minimum. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine le comportement du contrôle pour un pas lorsque la valeur <codeph>value</codeph> actuelle correspond à la valeur <codeph>maximum</codeph> ou <codeph>minimum</codeph>. Si la valeur de <codeph>valueWrap</codeph> est <codeph>true</codeph>, la propriété <codeph>value</codeph> encapsule les valeurs de <codeph>maximum</codeph> à <codeph>minimum</codeph> ou de <codeph>minimum</codeph> à <codeph>maximum</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ResizeMode"><apiName>ResizeMode</apiName><shortdesc>
  La classe ResizeMode définit une énumération des modes utilisés par un composant pour redimensionner ses enfants dans les dimensions définies par le système de présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ResizeMode définit une énumération des modes utilisés par un composant pour redimensionner ses enfants dans les dimensions définies par le système de présentation.
 
  <p>Le composant peut modifier ses propres dimensions (<codeph>width</codeph> et <codeph>height</codeph>) et remettre en forme ses enfants de façon adaptée (il s’agit du mode de redimensionnement par défaut).</p>
 
  <p>Le composant peut également changer d’échelle, auquel cas aucune modification des enfants n’est nécessaire. Cette option est prise en charge par la classe <codeph>Group</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ResizeMode:NO_SCALE"><apiName>NO_SCALE</apiName><shortdesc>
      Effectue un redimensionnement en modifiant les paramètres width et height.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Effectue un redimensionnement en modifiant les paramètres <codeph>width</codeph> et <codeph>height</codeph>.
     
      <p>Le composant commence toujours par définir ses propres dimensions, avant de mettre en forme ses enfants à la taille réelle spécifiée par la présentation ou l’utilisateur.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ResizeMode:SCALE"><apiName>SCALE</apiName><shortdesc>
      Effectue un redimensionnement en définissant les propriétés scaleX et scaleY.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Effectue un redimensionnement en définissant les propriétés <codeph>scaleX</codeph> et <codeph>scaleY</codeph>.
     
      <p>Le composant commence toujours par définir ses propres dimensions avant de mettre en forme ses enfants à la taille mesurée. L’échelle est ajustée à la taille spécifiée par la présentation ou l’utilisateur.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
  La classe NavigatorContent définit un conteneur Spark qui peut être utilisé dans un composant de navigateur MX, tel que les conteneurs TabNavigator ViewStack et Accordion. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NavigatorContent&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NavigatorContent
    <strong>Properties</strong>
    icon="null"
    label=""
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe NavigatorContent définit un conteneur Spark qui peut être utilisé dans un composant de navigateur MX, tel que les conteneurs TabNavigator ViewStack et Accordion. 
 
  <p>N’utilisez pas de conteneurs NavigatorContent en dehors d’un composant de navigation MX. </p>
 
  <p>La création du conteneur NavigatorContent est basé sur la stratégie de création de son conteneur de navigation parent :  </p>
 
  <ul>
    <li>Si la stratégie de création du parent est none, la stratégie de création de NavigatorContent a également cette valeur. </li>
    <li>Si la stratégie de création du parent est all, la stratégie de création de NavigatorContent a également cette valeur. </li>
    <li>Si la stratégie de création du parent est auto, la stratégie de création de NavigatorContent est none. </li>
  </ul>
 
  <p>Le conteneur NavigatorContent ne prend pas en charge la stratégie de création en file d’attente. </p>
 
  <p>Le conteneur NavigatorContent présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NavigatorContentExample.mxml"><swfblock conref="examples/NavigatorContentExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiConstructor id="spark.components:NavigatorContent:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      Classe de l’icône affichée par certains conteneurs de navigateur pour représenter cet objet Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Classe de l’icône affichée par certains conteneurs de navigateur pour représenter cet objet Container.
     
      <p>Par exemple, si ce conteneur est un enfant d’un élément TabNavigator, cette icône s’affiche dans l’onglet correspondant. Si ce conteneur est un enfant d’un composant Accordion, cette icône s’affiche dans l’en-tête correspondant.</p>
     
      <p>Pour incorporer l’icône dans le fichier SWF, utilisez la directive de compilateur MXML @Embed().</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>L’image peut être un fichier JPEG, GIF, PNG, SVG ou SWF.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      Texte affiché par certains conteneurs de navigateur pour représenter ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte affiché par certains conteneurs de navigateur pour représenter cet objet Container.
     
      <p>Par exemple, si ce conteneur est un enfant d’un élément TabNavigator, cette chaîne s’affiche dans l’onglet correspondant. Si ce conteneur est un enfant d’un composant Accordion, cette chaîne s’affiche dans l’en-tête correspondant.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VSlider"><apiName>VSlider</apiName><shortdesc>
  Le contrôle HSlider (curseur vertical) permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VSlider">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:VSlider/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle HSlider (curseur vertical) permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail. Le rail du curseur s’étend de bas en haut. La valeur actuelle du curseur est déterminée par son emplacement relatif entre ses extrémités, ce qui correspond aux valeurs minimum et maximum du curseur.
 
  <p>Le curseur peut autoriser une plage continue de valeurs entre ses valeurs minimales et maximales, ou être limité à des valeurs à intervalles spécifiques entre la valeur minimale et maximale. Il peut également utiliser une astuce sur les données pour afficher sa valeur actuelle.</p>
   <p>Le contrôle VSlider possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>11 pixels de large par 100 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>11 pixels de large et 11 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classes d’habillage par défaut </entry>
           <entry>spark.skins.spark.VSliderSkin
              <p>spark.skins.spark.VSliderThumbSkin</p>
              <p>spark.skins.spark.VSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VSliderExample.mxml"><swfblock conref="examples/VSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VSliderSkin"><linktext>spark.skins.spark.VSliderSkin</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
  Le composant ToggleButton définit un bouton bascule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ToggleButton">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ToggleButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButton/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant ToggleButton définit un bouton bascule. Le fait de cliquer sur le bouton permet de passer alternativement de l’état relevé à l’état abaissé. Si vous cliquez sur le bouton alors que celui-ci est à l’état relevé, il passe à l’état abaissé. Vous devez cliquer à nouveau sur le bouton pour repasser à l’état relevé.
 
  <p>Cet état peut être obtenu ou défini par programmation, par le biais de la propriété <codeph>selected</codeph>.</p>
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
   <p>Le contrôle ToggleButton possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Suffisamment large pour afficher l’étiquette de texte du contrôle</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>21 pixels de large et 21 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.ToggleButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ToggleButtonExample.mxml"><swfblock conref="examples/ToggleButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ToggleButtonSkin"><linktext>spark.skins.spark.ToggleButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleButton:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:FormHeading"><apiName>FormHeading</apiName><shortdesc>
  Le conteneur Spark FormHeading affiche un en-tête pour un groupe de contrôles dans un conteneur Spark Form.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:FormHeading">
<description>
  Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’arrière-plan du composant.
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Niveau alpha de l’arrière-plan de ce composant. Les valeurs possibles sont comprises entre 0.0 et 1.0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:FormHeading" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#FormHeading/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#FormHeading/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#FormHeading/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#FormHeading/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:FormHeading" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormHeading" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Une référence à l'élément visuel qui affiche l’étiquette de cet élément FormItem.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormHeading&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormHeading
    <strong>Properties</strong>
    label=""
  
    <strong>Common Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur Spark FormHeading affiche un en-tête pour un groupe de contrôles dans un conteneur Spark Form. Vous pouvez insérer plusieurs conteneurs FormHeading dans un même conteneur Form.
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormHeadingSkin"><linktext>spark.skins.spark.FormHeadingSkin</linktext></link></related-links><apiConstructor id="spark.components:FormHeading:FormHeading"><apiName>FormHeading</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:FormHeading:label:get"><apiName>label</apiName><shortdesc>
      Texte à afficher dans le composant FormHeading.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte à afficher dans le composant FormHeading.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  Le contrôle HScrollBar (barre de défilement horizontale) permet de contrôler la partie des données affichées lorsque le volume de données à afficher horizontalement dans une zone d’affichage est trop important.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:HScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:HScrollBar
     <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle HScrollBar (barre de défilement horizontale) permet de contrôler la partie des données affichées lorsque le volume de données à afficher horizontalement dans une zone d’affichage est trop important.
 
  <p>Bien que vous puissiez utiliser le contrôle HScrollBar de façon autonome, il convient généralement de l'ajouter à un autre groupe de composants pour bénéficier de la fonctionnalité de défilement.</p>
   <p>Le contrôle HScrollBar possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>85 pixels de large par 15 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>35 pixels de large et 35 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classes d’habillage par défaut </entry>
           <entry>spark.skins.spark.HScrollBarSkin
              <p>spark.skins.spark.HScrollBarThumbSkin</p>
              <p>spark.skins.spark.HScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="HScrollBarExample.mxml"><swfblock conref="examples/HScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HScrollBarSkin"><linktext>spark.skins.spark.HScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:HScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Distribué lorsque la propriété horizontalScrollPosition s’apprête à être modifiée en raison d’un événement mouseWheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>horizontalScrollPosition</codeph> s’apprête à être modifiée en raison d’un événement <codeph>mouseWheel</codeph>.
 
  <p>Le comportement par défaut consiste à faire défiler horizontalement par le nombre d’« étapes » de la propriété <codeph>delta</codeph> de l’événement. La méthode <codeph>getHorizontalScrollPositionDelta</codeph> de la fenêtre utilisant soit <codeph>LEFT</codeph>, soit <codeph>RIGHT</codeph>, en fonction de la direction du défilement, détermine la largeur de l’étape.</p>
 
  <p>L’appel de la méthode <codeph>preventDefault()</codeph> sur l’événement empêche la modification de la position du défilement horizontal. Sinon, si vous modifiez la propriété <codeph>delta</codeph> de l’événement, cette valeur est utilisée comme nombre d’« étapes » horizontales.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:HScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Incrémentez value d’une page si increase est true ou valeur de décrémentation d’une page si increase est false. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Incrémenter (<codeph>true</codeph>) ou décrémenter (<codeph>false</codeph>) <codeph>value</codeph>.  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Incrémentez <codeph>value</codeph> d’une page si <codeph>increase</codeph> est <codeph>true</codeph> ou décrémentez <codeph>value</codeph> d’une page si <codeph>increase</codeph> est <codeph>false</codeph>. L’augmentation de la valeur <codeph>value</codeph> de la barre de défilement fait défiler la fenêtre vers la droite. La diminution de la valeur <codeph>value</codeph> fait défiler la fenêtre vers la gauche. 
      
      <p>Si la propriété <codeph>viewport</codeph> est définie, sa méthode <codeph>getHorizontalScrollPositionDelta()</codeph> est utilisée pour calculer la taille de l’incrémentation par page. Si <codeph>viewport</codeph> est null, la propriété <codeph>pageSize</codeph> de la barre de défilement est utilisée. </p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Si la valeur de la fenêtre d’affichage n’est pas null, modifie la position de défilement horizontal (ligne précédente ou ligne suivante) en faisant défiler la fenêtre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Définit si le défilement de ligne est réalisé vers le haut (<codeph>true</codeph>) ou vers le bas (<codeph>false</codeph>). 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si la valeur de <codeph>viewport</codeph> n’est pas null, modifie la position de défilement horizontal (ligne précédente ou ligne suivante) en faisant défiler la fenêtre. Cette méthode calcule la longueur de défilement en appelant la méthode <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph> et en utilisant <codeph>flash.ui.Keyboard.RIGHT</codeph> ou <codeph>flash.ui.Keyboard.LEFT</codeph>. Elle appelle ensuite la méthode <codeph>setValue()</codeph> pour définir une valeur appropriée pour la propriété <codeph>IViewport.horizontalScrollPosition</codeph>.
           <p>Si la valeur de <codeph>viewport</codeph> est null, l’appel de cette méthode modifie la position de défilement (ligne précédente ou ligne suivante) en appelant la méthode <codeph>changeValueByStep()</codeph>.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Met à jour la propriété value et, si l’affichage n’a pas la valeur null, définit sa position horizontalScrollPosition sur value. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Nouvelle valeur de la propriété <codeph>value</codeph>. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met à jour la propriété <codeph>value</codeph> et si la fenêtre d’affichage n’est pas null, définir sa position <codeph>horizontalScrollPosition</codeph> sur <codeph>value</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#HScrollBar/viewport"><linktext>viewport</linktext></link></related-links></apiOperation><apiValue id="spark.components:HScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      Fenêtre contrôlée par cette barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Fenêtre contrôlée par cette barre de défilement.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ScrollSnappingMode"><apiName>ScrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List/scrollSnappingMode"><linktext/></link><link href="spark.components.xml#Scroller/scrollSnappingMode"><linktext/></link></related-links><apiValue id="spark.components:ScrollSnappingMode:CENTER"><apiName>CENTER</apiName><shortdesc>
          Les éléments sont accrochés au centre de la fenêtre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Les éléments sont accrochés au centre de la fenêtre.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:LEADING_EDGE"><apiName>LEADING_EDGE</apiName><shortdesc>
          Les éléments sont accrochés sur le bord gauche (horizontal) ou supérieur (vertical) de la fenêtre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>leadingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Les éléments sont accrochés sur le bord gauche (horizontal) ou supérieur (vertical) de la fenêtre.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:NONE"><apiName>NONE</apiName><shortdesc>
          L’alignement du défilement est désactivé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
          L’alignement du défilement est désactivé.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:TRAILING_EDGE"><apiName>TRAILING_EDGE</apiName><shortdesc>
          Les éléments sont accrochés sur le bord droit (horizontal) ou inférieur (vertical) de la fenêtre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>trailingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Les éléments sont accrochés sur le bord droit (horizontal) ou inférieur (vertical) de la fenêtre.
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
  La classe SkinnablePopUpContainer est un conteneur SkinnableContainer qui fonctionne comme une fenêtre contextuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="closed" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash10">
<description>
  état fermé.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="no" name="softKeyboardEffectDuration" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash11" type="Number">
<description>
  
 
  </description>
<default>150
  
  </default>

<playerversion>AIR 3.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SkinnablePopUpContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnablePopUpContainer 
    <strong>Events</strong>
    close="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SkinnablePopUpContainer est un conteneur SkinnableContainer qui fonctionne comme une fenêtre contextuelle. Une utilisation habituelle d'un conteneur SkinnablePopUpContainer est d'ouvrir une fenêtre simple dans une application, tel qu'un fenêtre d'alerte, pour indiquer que l'utilisateur doit effectuer une action.
   <p>Vous ne pouvez pas créer un conteneur SkinnablePopUpContainer en tant que partie intégrante du normal la mise en forme de son conteneur parent. Au lieu de cela, il s'affiche comme une fenêtre contextuelle au-dessus de l'objet parent. Par conséquent, vous ne créez pas directement dans le code MXML de votre application.</p>
   <p>Au lieu de cela, vous créez est en tant que composant MXML, souvent dans un autre fichier MXML. Pour afficher le composant créer une instance du composant MXML, puis appelez la <codeph>open()</codeph> méthode. Vous pouvez également définir la taille et la position du composant lors de l'ouverture de ce document.</p>  
   <p>Pour fermer le composant, appelez la méthode <codeph>close()</codeph>. Si la fenêtre contextuelle doit renvoyer des données à un gestionnaire, vous pouvez ajouter un écouteur pour l’événement <codeph>PopUp.CLOSE</codeph> et spécifier les données renvoyées dans la méthode <codeph>close()</codeph>.</p>
   <p>La SkinnablePopUpContainer est initialement dans sa <codeph>fermé</codeph> état d'habillage. Lorsqu'il s'ouvre, il ajoute lui-même comme une fenêtre contextuelle à l'occurrence PopUpManager, et la transition vers la <codeph>normal</codeph> état d'habillage. Pour définir des animations d’ouverture et de fermeture, utilisez un habillage personnalisé avec des transitions entre les états d’habillage <codeph>closed</codeph> et <codeph>normal</codeph>.</p>
 
  <p>Le conteneur SkinnablePopUpContainer présente les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row><row><entry>Classe d’habillage par défaut</entry><entry>spark.skins.spark.SkinnablePopUpContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#SkinnablePopUpContainerSkin"><linktext>spark.skins.spark.SkinnablePopUpContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué par le conteneur lorsqu’il est fermé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par le conteneur lorsqu’il est fermé.
 
  <p>Cet événement est distribué lorsque le conteneur passe de l’état d’habillage <codeph>normal</codeph> à l’état <codeph>closed</codeph> et que la transition vers cet état se termine.</p>
 
  <p>Cet événement fournit un mécanisme pour transmettre des informations de validation à partir du conteneur à un écouteur d’événement. Un scénario d’utilisation standard correspond à la construction d’une boîte de dialogue à choix multiples avec un bouton Annuler. Lorsqu’une option valide est sélectionnée, vous fermez la fenêtre contextuelle avec un appel à la méthode <codeph>close()</codeph>, transmettant la valeur <codeph>true</codeph> au paramètre <codeph>commit</codeph> et transmettant éventuellement des données pertinentes supplémentaires. Une fois que le composant SkinnablePopUpContainer a terminé la fermeture, il distribue cet événement. Ensuite, dans l’écouteur d’événement, vous pouvez vérifier la propriété <codeph>commit</codeph> et effectuer l’action appropriée.  </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Distribué par le conteneur lorsqu’il est ouvert et prêt pour l’interaction avec l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par le conteneur lorsqu’il est ouvert et prêt pour une interaction avec l’utilisateur.
 
  <p>Cet événement est distribué lorsque le conteneur passe de l’état d’habillage <codeph>closed</codeph> à l’état <codeph>normal</codeph> et que la transition vers cet état se termine.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnablePopUpContainer:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnablePopUpContainer:close"><apiName>close</apiName><shortdesc>
      Remplace l’état d’habillage actuel par closed, attend la fin de l’exécution des transitions d’état, distribue un événement PopUpEvent.CLOSE et supprime le conteneur de l’objet PopUpManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Spécifie si le retour des données doivent être validées par l'application. La valeur de cet argument est écrit dans le <codeph>valider</codeph> propriété de la <codeph>PopUpEvent</codeph> objet d'événement.
     
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>Spécifie les données renvoyées à l'application. La valeur de cet argument est écrit sur le <codeph>données</codeph> propriété de la <codeph>PopUpEvent</codeph> objet d'événement.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplace l’état d’habillage actuel par <codeph>closed</codeph>, attend la fin de l’exécution des transitions d’état, distribue un événement <codeph>PopUpEvent.CLOSE</codeph> et supprime le conteneur de l’objet PopUpManager.
           <p>Utilisez la <codeph>close()</codeph> méthode de la SkinnablePopUpContainer conteneur à transmettre des données vers l'application principale à partir de la fenêtre contextuelle. Un scénario d’utilisation standard correspond à la construction d’une boîte de dialogue avec un bouton Annuler. Lorsqu’une option valide est sélectionnée dans la boîte de dialogue, vous la fermez avec un appel à la méthode <codeph>close()</codeph>, transmettant la valeur <codeph>true</codeph> au paramètre <codeph>commit</codeph> et transmettant éventuellement des données pertinentes supplémentaires. Lorsque le SkinnablePopUpContainer a terminé la fermeture, il ne distribue le <codeph>fermer</codeph> événement. Dans l'écouteur d'événement pour le <codeph>fermer</codeph> événement, vous pouvez vérifier le <codeph>valider</codeph> paramètre et effectuer les mesures appropriées.  </p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>open</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:protected:createSoftKeyboardEffect"><apiName>createSoftKeyboardEffect</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc> 
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn><apiParam><apiItemName>yTo</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>heightTo</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
        
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:open"><apiName>open</apiName><shortdesc>
      Ouvre le conteneur comme une fenêtre contextuelle, et bascule l'état d'habillage d'être clos à la normale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Le propriétaire du conteneur. La fenêtre contextuelle s'affiche sur ce conteneur.
           </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si le conteneur doit être modal. Un conteneur modale prend toutes les saisies du clavier et de la souris jusqu'à ce qu'il est fermé. Un contrôle conteneur permet à d'autres composants pour accepter d'entrée alors que la fenêtre contextuelle est ouvert.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ouvre le conteneur comme une fenêtre contextuelle, et bascule l'état d'habillage à partir de <codeph>fermé</codeph> à <codeph>normal</codeph>. Après et des transitions terminer la lecture, il distribue l <codeph>FlexEvent.OPEN</codeph> événement.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>close</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:updatePopUpPosition"><apiName>updatePopUpPosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnablePopUpContainer:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      Contient la valeur true lorsque le conteneur est ouvert et actuellement affiché comme une fenêtre contextuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient la valeur <codeph>true</codeph> lorsque le conteneur est ouvert et actuellement affiché comme une fenêtre contextuelle.  
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>open</linktext></link><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>close</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:moveForSoftKeyboard:get"><apiName>moveForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownList"><apiName>DropDownList</apiName><shortdesc>
  Le contrôle DropDownList contient une liste déroulante dans laquelle l’utilisateur peut sélectioner une seule valeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DropDownList">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:DropDownList" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Partie d’habillage facultative contenant l’invite ou le texte de l’élément sélectionné. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that holds the prompt or the text of the selected item.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownList&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DropDownList 
    <strong>Properties</strong>
    prompt=""
    typicalItem="null"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle DropDownList contient une liste déroulante dans laquelle l’utilisateur peut sélectionner une seule valeur. Son fonctionnement est très proche de celui de l’élément de formulaire SELECT en HTML.
   <p>Le contrôle DropDownList se compose du bouton d’ancrage, de la zone d’invite de la liste déroulante. Utilisez le bouton d’ancrage pour ouvrir et fermer la liste déroulante. La zone dvinvite affiche une chaîne d’invite ou l’élément sélectionné dans la liste déroulante. </p>
   <p>Lorsque la liste déroulante est ouverte : </p>
  <ul>
    <li>Un clic sur le bouton d’ancrage ferme la liste déroulante et valide l’élément de données actuellement sélectionné. </li>
    <li>Un clic en dehors de la liste déroulante ferme la liste déroulante et valide l’élément de données actuellement sélectionné.</li>
    <li>Un clic sur un élément de données sélectionne cet élément et ferme la liste déroulante.</li>
    <li>Si la propriété <codeph>requireSelection</codeph> est <codeph>false</codeph>, le fait de cliquer sur un élément de données tout en maintenant la touche Ctrl enfoncée désélectionne l’élément et ferme la liste déroulante</li>
  </ul>
   <p><b>Remarque : </b>les contrôles basés sur une liste Spark (la classe Spark ListBase et ses sous-classes, telles que ButtonBar, ComboBox, DropDownList, List et TabBar) ne prennent pas en charge la classe BasicLayout en tant que valeur de la propriété <codeph>layout</codeph>. N’utilisez pas BasicLayout avec les contrôles basés sur une liste Spark. </p>
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
  
  <p>Le contrôle DropDownList possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>112 pixels de large et 21 pixels de haut</entry></row><row><entry>Taille minimale</entry><entry>112 pixels de large et 21 pixels de haut</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row><row><entry>Classe d’habillage par défaut</entry><entry>spark.skins.spark.DropDownListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><apiConstructor id="spark.components:DropDownList:DropDownList"><apiName>DropDownList</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DropDownList:prompt:get"><apiName>prompt</apiName><shortdesc>
      Invite du contrôle DropDownList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           
      </apiDefaultValue></apiValueDef><apiDesc>
      Invite du contrôle DropDownList. L’invite est une chaîne affichée dans le contrôle DropDownList quand <codeph>selectedIndex</codeph> = -1. La chaîne ressemble généralement à « Sélectionnez un... ». La sélection d’un élément dans la liste déroulante remplace l’invite avec le texte de l’élément sélectionné. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DropDownList:typicalItem:set"><apiName>typicalItem</apiName><shortdesc>
      Les présentations utilisent la taille préférée de l’élément typicalItem lorsque des tailles de ligne ou de colonne fixes sont requises, mais qu’aucune valeur rowHeight ou columnWidth spécifique n’est définie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Les présentations utilisent la taille préférée de l’élément <codeph>typicalItem</codeph> lorsque des tailles de ligne ou de colonne fixes sont requises, mais qu’aucune valeur <codeph>rowHeight</codeph> ou <codeph>columnWidth</codeph> spécifique n’est définie. De même, les présentations virtuelles utilisent cet élément pour définir la taille des éléments de présentation qui n’ont pas été déplacés de manière à devenir visibles.
           <p>Le conteneur utilise l’élément de données standard et la fonctionnalité de rendu d’élément associée pour déterminer la taille par défaut des enfants du conteneur. Si l’élément standard est défini, il n’est pas nécessaire que le conteneur définisse la taille de chaque enfant lorsqu’ils sont tracés à l’écran. </p>
           <p>Le fait de définir cette propriété définit automatiquement la propriété <codeph>typicalLayoutElement</codeph> de la présentation.</p>
     
      <p>Restriction : si <codeph>typicalItem</codeph> est une interface IVisualItem, elle ne doit pas être membre du fournisseur de données.</p>
     
      <p>Remarque : la définition de <codeph>typicalItem</codeph> remplace toute largeur ou hauteur explicite définie sur la partie d’habillage <codeph>labelDisplay</codeph>.  </p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
  La classe GridColumnHeaderGroup affiche une ligne d’en-têtes de colonne et de séparateurs alignée avec la mise en forme de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Encart supérieur, en pixels, de tous les rendus d’en-tête. 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Encart droit, en pixels, du dernier rendu d’en-tête. 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Encart gauche, en pixels, du premier rendu d’en-tête. 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Encart inférieur, en pixels, de tous les rendus d’en-tête. 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="separatorAffordance" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Espace horizontal de chaque côté d’un séparateur de colonnes qui est considéré faire partie du séparateur par souci de distribution des événements de souris.
 
  <p>Les séparateurs sont souvent d’une largeur d’un seul pixel, ce qui rend difficiles les interactions avec eux. Cette valeur est utilisée par <codeph>getSeparatorIndexAt()</codeph> pour donner aux séparateurs une plus large zone, afin que les événements de séparateur soient distribués lorsque la souris est plus proche que <codeph>separatorMouseWidth</codeph> du point médian horizontal d’un séparateur.</p> 
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
</productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:GridColumnHeaderGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:GridColumnHeaderGroup 
    <strong>Properties</strong>
    columnSeperator="null"
    dataGrid="null"  
    downColumnIndex="-1"  
    headerRenderer="null"  
    hoverColumnIndex="-1"  
    visibleSortIndicatorIndices="<i>empty Vector.&lt;int&gt<i>"
 
    <strong>Styles</strong>
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    separatorAffordance="5" 
 
    <strong>Events</strong>
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    separatorClick="<i>No default</i>"
    separatorDoubleClick="<i>No default</i>"
    separatorMouseDrag="<i>No default</i>"
    separatorMouseUp="<i>No default</i>"
    separatorMouseRollOut="<i>No default</i>"
    separatorMouseRollOver="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe GridColumnHeaderGroup affiche une ligne d’en-têtes de colonne et de séparateurs alignée avec la mise en forme de la grille.  
 
  <p>Les en-têtes sont rendus par la classe spécifiée par la propriété <codeph>headerRenderer</codeph>. Les séparateurs sont rendus par la classe spécifiée par la propriété <codeph>columnSeparator</codeph>. La mise en forme, qui ne peut pas être modifiée, est virtuelle. En d’autres termes, les rendus et les séparateurs qui ont fait l’objet d’un défilement pour ne plus être affichés sont réutilisés.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>Grid</linktext></link></related-links><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK_separatorDoubleClick"><apiName>separatorDoubleClick</apiName><shortdesc>
  Distribué lors d’un double-clic de la souris sur un séparateur d’en-tête de colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lors d’un double-clic de la souris sur un séparateur d’en-tête de colonne.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_CLICK_separatorClick"><apiName>separatorClick</apiName><shortdesc>
  Distribué lors d’un clic de la souris sur un séparateur d’en-tête de colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lors d’un clic de la souris sur un séparateur d’en-tête de colonne.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OUT_separatorRollOut"><apiName>separatorRollOut</apiName><shortdesc>
  Distribué lorsque le pointeur de la souris quitte la zone définie par un séparateur de colonnes et separatorMouseWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le pointeur de la souris quitte la zone définie par un séparateur de colonnes et <codeph>separatorMouseWidth</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OVER_separatorRollOver"><apiName>separatorRollOver</apiName><shortdesc>
  Distribué lorsque le pointeur de la souris entre dans la zone définie par un séparateur de colonnes et separatorMouseWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le pointeur de la souris entre dans la zone définie par un séparateur de colonnes et <codeph>separatorMouseWidth</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_UP_separatorMouseUp"><apiName>separatorMouseUp</apiName><shortdesc>
  Distribué après un événement separatorMouseDown lorsque l’utilisateur relâche le bouton de la souris, même si la souris n’est plus dans la zone du séparateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après un événement <codeph>separatorMouseDown</codeph> lorsque l’utilisateur relâche le bouton de la souris, même si la souris n’est plus dans la zone du séparateur.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_DRAG_separatorMouseDrag"><apiName>separatorMouseDrag</apiName><shortdesc>
  Distribué après un événement separatorMouseDown si la souris se déplace avant que l’utilisateur ne relâche le bouton de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après un événement <codeph>separatorMouseDown</codeph> si la souris se déplace avant que l’utilisateur ne relâche le bouton de la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Distribué lorsque l'utilisateur double-clique sur un en-tête de colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l'utilisateur double-clique sur un en-tête de colonne.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Distribué lorsque l'utilisateur clique sur la souris sur un en-tête de colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l'utilisateur clique sur la souris sur un en-tête de colonne.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Distribué lorsque la souris quitte un en-tête de colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la souris quitte un en-tête de colonne.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Distribué lorsque la souris arrive sur un en-tête de colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la souris arrive sur un en-tête de colonne.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Distribué après un événement gridMouseDown, lorsque l’utilisateur relâche le bouton de la souris, même si la souris ne se trouve plus dans la classe GridColumnHeaderGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après un événement <codeph>gridMouseDown</codeph>, lorsque l’utilisateur relâche le bouton de la souris, même si la souris ne se trouve plus dans la classe GridColumnHeaderGroup.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Distribué après un événement gridMouseDown si la souris se déplace avant que l’utilisateur ne relâche le bouton de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après un événement <codeph>gridMouseDown</codeph> si la souris se déplace avant que l’utilisateur ne relâche le bouton de la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Distribué lorsque l'utilisateur appuie sur le bouton de la souris sur un en-tête de colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l'utilisateur appuie sur le bouton de la souris sur un en-tête de colonne.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:GridColumnHeaderGroup:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderBounds"><apiName>getHeaderBounds</apiName><shortdesc>
      Renvoie les limites actuelles de pixels de l’en-tête spécifié (rendu), ou null si aucune colonne de ce type n’existe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Un <codeph>rectangle</codeph> qui représente les limites de pixels de l’en-tête de colonne, ou null.
     
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index à base 0 de la colonne. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie les limites actuelles de pixels de l’en-tête spécifié (rendu), ou null si aucune colonne de ce type n’existe. Les limites de l’en-tête sont reportées dans les coordonnées GridColumnHeaderGroup.
     
      <p>Si toutes les colonnes visibles qui précèdent la colonne spécifiée n’ont pas encore défilé à l’écran, les limites renvoyées peuvent n’être qu’une approximation, basée sur toutes les propriétés <codeph>typicalItem</codeph> de la grille.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderIndexAt"><apiName>getHeaderIndexAt</apiName><shortdesc>
      Renvoie l'index de colonne correspondant aux coordonnées spécifiées, ou -1 si les coordonnées sont hors limites.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L'index de la colonne ou -1 si les coordonnées sont hors limites. 
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>La coordonnée x du pixel par rapport à la classe <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>La coordonnée y du pixel par rapport à la classe <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l'index de colonne correspondant aux coordonnées spécifiées, ou -1 si les coordonnées sont hors limites. Les coordonnées sont résolues par rapport à la cible de mise en forme de la classe GridColumnHeaderGroup.
     
      <p>Si toutes les colonnes ou lignes de la grille n’ont pas encore défilé à l’écran, l’index renvoyé peut n’être qu’une approximation, basée sur la propriété <codeph>typicalItem</codeph> de toutes les colonnes.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderRendererAt"><apiName>getHeaderRendererAt</apiName><shortdesc>
      Si le rendu d’en-tête demandé est visible, renvoie une référence au rendu d’en-tête en cours d’affichage pour la colonne spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le rendu d’élément ou la valeur null si l’index de colonne n’est pas valide.
     
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L’index de colonne à base 0 de la colonne du rendu d’en-tête.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si le rendu d’en-tête demandé est visible, renvoie une référence au rendu d’en-tête en cours d’affichage pour la colonne spécifiée. Notez qu’une fois que le rendu d’en-tête renvoyé n’est plus visible, il peut être recyclé et ses propriétés réinitialisées.  
     
      <p>Si le rendu d’en-tête demandé n’est pas visible, chaque fois que cette méthode est appelée, un nouveau rendu d’en-tête est créé. Le nouveau rendu d’élément n’est pas visible</p>
     
      <p>La largeur du rendu renvoyé est identique à celle des rendus d’éléments renvoyés par la méthode DataGrid/getItemRendererAt().</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getSeparatorIndexAt"><apiName>getSeparatorIndexAt</apiName><shortdesc>
      Renvoie l’index du séparateur de colonnes correspondant aux coordonnées spécifiées, ou -1 si les coordonnées ne chevauchent pas un séparateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’index de la colonne ou -1 si les coordonnées ne chevauchent pas un séparateur.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>La coordonnée x du pixel par rapport à la classe <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>La coordonnée y du pixel par rapport à la classe <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’index du séparateur de colonnes correspondant aux coordonnées spécifiées, ou -1 si les coordonnées ne chevauchent pas un séparateur. Les coordonnées sont résolues par rapport à la cible de mise en forme de la classe GridColumnHeaderGroup.
     
      <p>Un séparateur est considéré comme « chevauchant » l’emplacement spécifié si la coordonnée x se situe à l’intérieur de la classe <codeph>separatorMouseWidth</codeph> du milieu horizontal du séparateur.</p>
      
      <p>L’index du séparateur est identique à celui de la colonne de gauche, en supposant que la classe <codeph>layoutDirection</codeph> de ce composant ait la valeur <codeph>« ltr »</codeph>. Cela signifie que tous les en-têtes de colonnes sont entourés de deux séparateurs, à l’exception de la première colonne visible, qui ne possède qu’un seul séparateur sur la droite, et de la dernière colonne visible, qui ne possède qu’un seul séparateur sur la gauche.</p>
     
      <p>Si toutes les colonnes ou lignes de la grille n’ont pas encore défilé à l’écran, l’index renvoyé peut n’être qu’une approximation, basée sur la propriété <codeph>typicalItem</codeph> de toutes les colonnes.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:isSortIndicatorVisible"><apiName>isSortIndicatorVisible</apiName><shortdesc>
      Renvoie la valeur true si l’indicateur de tri pour la colonne spécifiée est visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si l’indicateur de tri pour la colonne spécifiée est visible.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L’index de colonne basé sur 0 de la colonne du rendu d’en-tête.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la valeur <codeph>true</codeph> si l’indicateur de tri pour la colonne spécifiée est visible. Il s’agit seulement d’une version plus efficace de : 
      <pre>
          visibleSortIndicatorIndices.indexOf(columnIndex) != -1</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:GridColumnHeaderGroup:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      Un élément visuel qui s’affiche entre chaque colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Un élément visuel qui s’affiche entre chaque colonne.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      Le contrôle DataGrid qui définit la mise en forme des colonnes et la position de défilement horizontal pour ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Le contrôle DataGrid qui définit la mise en forme des colonnes et la position de défilement horizontal pour ce composant. Cette propriété est définie par le contrôle DataGrid après l’ajout de sa partie de l’habillage <codeph>grid</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:downColumnIndex:get"><apiName>downColumnIndex</apiName><shortdesc>
      Spécifie l’index de colonne du rendu d’en-tête actuellement enfoncé par l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie l’index de colonne du rendu d’en-tête actuellement enfoncé par l’utilisateur.
      
      <p>La définition de <codeph>downColumnIndex</codeph> sur -1 (valeur par défaut) signifie que l’index de colonne est non défini et que le rendu d’en-tête a sa propriété <codeph>down</codeph> définie sur <codeph>false</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:headerRenderer:get"><apiName>headerRenderer</apiName><shortdesc>
      La classe IGridItemRenderer utilisée pour effectuer le rendu de chaque en-tête de colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="headerRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      La classe IGridItemRenderer utilisée pour effectuer le rendu de chaque en-tête de colonne.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      Spécifie l’index de colonne du rendu d’en-tête actuellement survolé par l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie l’index de colonne du rendu d’en-tête actuellement survolé par l’utilisateur.
      
      <p>La définition de <codeph>hoverColumnIndex</codeph> sur -1 (valeur par défaut) signifie que l’index de colonne est non défini et que le rendu d’en-tête a sa propriété <codeph>hovered</codeph> définie sur <codeph>false</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:visibleSortIndicatorIndices:get"><apiName>visibleSortIndicatorIndices</apiName><shortdesc>
      Un vecteur d’index de colonnes correspondant aux rendus d’en-têtes dont les indicateurs de tri sont actuellement visibles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="visibleSortIndicatorIndicesChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>an empty Vector.&amp;lt;int&amp;gt;
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Un vecteur d’index de colonnes correspondant aux rendus d’en-têtes dont les indicateurs de tri sont actuellement visibles.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
  Le composant PopUpAnchor est utilisé pour placer un contrôle contextuel ou déroulant, tel qu’un composant DropDownList, dans la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="popUp"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:PopUpAnchor&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:PopUpAnchor
 
    <strong>Properties</strong>
    displayPopUp="false"
    popUp=""
    popUpHeightMatchesAnchorHeight="false"
    popUpPosition="topLeft"
    popUpWidthMatchesAnchorWidth="false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant PopUpAnchor est utilisé pour placer un contrôle contextuel ou déroulant, tel qu’un composant DropDownList, dans la présentation. Un élément contextuel ou déroulant étant ajouté à la liste d’affichage par la classe PopUpManager, il ne prend normalement pas part à la présentation. Le composant PopUpAnchor est un objet UIComponent ajouté à un conteneur et mis forme. Il est chargé de dimensionner et placer le contrôle contextuel ou déroulant par rapport à lui-même. Il n’a pas d’aspect visuel. 
   <p>Le contrôle PopUpAnchor possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>0</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="PopUpAnchorExample.mxml"><swfblock conref="examples/PopUpAnchorExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.components:PopUpAnchor:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
      Constructeur
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:PopUpAnchor:protected:calculatePopUpPosition"><apiName>calculatePopUpPosition</apiName><shortdesc>
      Appelée lorsque le contrôle popUp est placé, lorsqu’il est affiché ou encore lorsque la méthode updatePopUpTransform() est appelée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Position absolue du contrôle <codeph>popUp</codeph> dans le système de coordonnées global.  
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque le contrôle <codeph>popUp</codeph> est placé, lorsqu’il est affiché ou encore lorsque la méthode <codeph>updatePopUpTransform()</codeph> est appelée. Remplacez cette fonction pour modifier la position du contrôle <codeph>popUp</codeph>.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:PopUpAnchor:updatePopUpTransform"><apiName>updatePopUpTransform</apiName><shortdesc>
      Met à jour la matrice de transformation du contrôle popUp. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Met à jour la matrice de transformation du contrôle <codeph>popUp</codeph> En règle générale, vous pouvez appeler cette fonction pendant l’exécution d’un effet sur le composant PopUpAnchor.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:PopUpAnchor:popUpPosition:set"><apiName>popUpPosition</apiName><shortdesc>
      Position du contrôle popUp lorsqu’il est ouvert, par rapport au composant PopUpAnchor. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>PopUpPosition.TOP_LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Position du contrôle <codeph>popUp</codeph> lorsqu’il est ouvert, par rapport au composant PopUpAnchor. Les valeurs possibles sont les suivantes : <codeph>"left", "right", "above", "below", "center"</codeph> et <codeph>"topLeft"</codeph>
     
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#PopUpPosition"><linktext>spark.components.PopUpPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:PopUpAnchor:displayPopUp:set"><apiName>displayPopUp</apiName><shortdesc>
      Si la valeur est true, le contrôle popUp est ajouté à l’occurrence PopUpManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, le contrôle <codeph>popUp</codeph> est ajouté à l’occurrence PopUpManager. Si la valeur est <codeph>false</codeph>, le contrôle est supprimé.   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpHeightMatchesAnchorHeight:set"><apiName>popUpHeightMatchesAnchorHeight</apiName><shortdesc>
      Si la valeur est true, la hauteur du contrôle popUp est définie sur la valeur de la hauteur de l’occurrence PopUpAnchor. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la hauteur du contrôle <codeph>popUp </codeph> est définie sur la valeur de la la hauteur de l’occurrence PopUpAnchor. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpWidthMatchesAnchorWidth:set"><apiName>popUpWidthMatchesAnchorWidth</apiName><shortdesc>
      Si la valeur est true, la largeur du contrôle popUp est définie sur la valeur de la largeur de l’occurrence PopUpAnchor. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la largeur du contrôle <codeph>popUp </codeph> est définie sur la valeur de la largeur de l’occurrence PopUpAnchor. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUp:set"><apiName>popUp</apiName><shortdesc>
      Interface IFlexDisplayObject à ajouter à l’occurrence PopUpManager lorsque l’occurrence PopUpAnchor est ouverte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="popUpChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      Interface IFlexDisplayObject à ajouter à l’occurrence PopUpManager lorsque l’occurrence PopUpAnchor est ouverte. Si le contrôle <codeph>popUp</codeph> implémente IFocusManagerContainer, <codeph>popUp</codeph> possède son propre FocusManager. Si l’utilisateur utilise la touche de tabulation pour naviguer entre les contrôles, seuls les commandes du contrôle <codeph>popUp</codeph> sont accessibles.  
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:List"><apiName>List</apiName><shortdesc>
  Le contrôle List affiche une liste d’éléments verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  Indique dans quelles conditions la barre de défilement verticale doit s’afficher.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> (« on ») : la barre de défilement est toujours affichée.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> (« off ») : la barre de défilement n’est jamais affichée. La fenêtre peut toujours faire l’objet d’un défilement par programmation, en définissant sa propriété verticalScrollPosition.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> (« auto ») : la barre de défilement est affichée lorsque la valeur contentHeight de la fenêtre est supérieure à sa hauteur.
  </li>
  </ul>
 
  <p>
  La stratégie de défilement affecte la taille mesurée de la partie d'habillage du composant Scroller. Ce style est simplement une couverture pour la propriété verticalScrollPolicy de la partie d’habillage du composant Scroller. Ce n’est pas un style d’héritage et, par exemple, il n’aura pas d’incidence sur les rendus d’élément.
  </p>
   <p>Lors de l’utilisation d’un contrôle de liste horizontale dans une application mobile, définissez <codeph>horizontalScrollPolicy</codeph> sur <codeph>on</codeph> et <codeph>verticalScrollPolicy</codeph> sur <codeph>auto</codeph> pour activer les effets horizontaux de rebond et de tirage. Dans le cas contraire, le contrôle utilise les effets verticaux de rebond et de tirage.</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:List" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur d’arrière-plan d’un rendu lorsque l’utilisateur le sélectionne.
   <p>La valeur par défaut du thème Halo est <codeph>0x7FCEFF</codeph>. La valeur par défaut du thème Spark est <codeph>0xA8C6EE</codeph>. La valeur par défaut du thème Mobile est <codeph>0xE0E0E0</codeph>.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  Indique dans quelles conditions la barre de défilement horizontale doit s’afficher.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> (« on ») : la barre de défilement est toujours affichée.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> (« off ») : la barre de défilement n’est jamais affichée. La fenêtre peut toujours faire l’objet d’un défilement par programmation, en définissant sa propriété horizontalScrollPosition.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> (« auto ») : la barre de défilement est affichée lorsque la valeur contentWidth de la fenêtre est supérieure à sa largeur. 
  </li>
  </ul>
 
  <p>La stratégie de défilement affecte la taille mesurée de la partie d'habillage du composant Scroller. Ce style est simplement une couverture pour la propriété horizontalScrollPolicy de la partie d’habillage du composant Scroller. Ce n’est pas un style d’héritage et, par exemple, il n’aura pas d’incidence sur les rendus d’élément.</p>
   <p>Lors de l’utilisation d’un contrôle de liste horizontale dans une application mobile, définissez <codeph>horizontalScrollPolicy</codeph> sur <codeph>on</codeph> et <codeph>verticalScrollPolicy</codeph> sur <codeph>auto</codeph> pour activer les effets horizontaux de rebond et de tirage. Dans le cas contraire, le contrôle utilise les effets verticaux de rebond et de tirage.</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="dropIndicatorSkin" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  Si la partie d’habillage <codeph>dropIndicator</codeph> n’est pas spécifiée dans l’habillage List, une occurrence de cette classe est créée et utilisée pour l’indicateur de dépôt par défaut au cours des opérations de glisser-déposer pour lesquelles List est une cible de dépôt potentielle. 
   </description>
<default>spark.skins.spark.ListDropIndicator
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dragIndicatorClass" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  Classe dont il faut créer une occurrence pour l’indicateur de glissement lors des opérations de glisser-déposer initiées par la classe List. Doit être de type <codeph>IFlexDisplayObject</codeph>. 
   <p>Si la classe implémente l’interface <codeph>ILayoutManagerClient</codeph>, l’occurrence est validée par la classe DragManager. </p>
   <p>Si la classe implémente l’interface <codeph>IVisualElement</codeph>, la propriété <codeph>owner</codeph> de l’occurrence est définie sur la classe List qui initie le glissement. </p>
   <p>La classe DragManager AIR prend un instantané de l’occurrence, tandis que la classe DragManager des autres applications que AIR utilise directement l’occurrence. </p>
   </description>
<default>spark.components.supportClasses.ListItemDragProxy
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:List" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu pour ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  Contrôle la visibilité de la bordure de composant. 
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur de la bordure de ce composant. 
    </description>
<default>#696969
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de la bordure de ce composant. 
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropIndicator" owner="spark.components:List" playerVersion="Flash10" required="false" type="flash.display.DisplayObject" var_type="mx.core:IFactory">
<description>
      Une partie d'habillage qui définit l'apparence de l'indicateur de redimensionnement. L’indicateur de dépôt est redimensionné et positionné par la présentation pour souligner l’emplacement d’insertion lors du déplacement sur la liste. 
           <p>Par défaut, l’indicateur de dépôt d’un contrôle Spark est une ligne unie qui s’étend sur la largeur du contrôle. Créez un indicateur de dépôt personnalisé en créant une classe d’habillage personnalisée pour la cible de dépôt. Dans la classe d’habillage, créez une partie d’habillage nommée <codeph>dropIndicator</codeph> dans la zone &lt;fx:Declarations>.</p>
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the appearance of the drop indicator.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:List" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Objet Scroller facultatif utilisé pour faire défiler le contrôle List.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:List&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:List
    <strong>Properties</strong>
    allowMultipleSelection="false"
    dragEnabled="false"
    dragMoveEnabled="false"
    dropEnabled="false"
    selectedIndices="null"
    selectedItems="null"
    useVirtualLayout="true"
 
    <strong>Styles</strong>
    alternatingItemColors="undefined"
    borderAlpha="1.0"
    borderColor="0#CCCCCC"
    borderVisible="true"
    contentBackgroundColor="0xFFFFFF"
    downColor="0xA8C6EE"
    dragIndicator="ListItemDragProxy"
    dropIndicatorSkin="ListDropIndicator"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle List affiche une liste d’éléments verticale. Son fonctionnement est proche de celui de l’élément de formulaire SELECT en HTML. Si d’autres éléments peuvent être affichés en même temps, il peut afficher une barre de défilement verticale permettant à l’utilisateur d’accéder à tous les éléments de la liste. Une barre de défilement horizontale facultative permet à l’utilisateur de voir les éléments lorsque toute la largeur des éléments de la liste risque de ne pas pouvoir être affichée. L’utilisateur peut sélectionner un ou plusieurs éléments de la liste, selon la valeur de la propriété <codeph>allowMultipleSelection</codeph>.
   <p><b>Remarque : </b>les contrôles basés sur une liste Spark (la classe Spark ListBase et ses sous-classes, telles que ButtonBar, ComboBox, DropDownList, List et TabBar) ne prennent pas en charge la classe BasicLayout en tant que valeur de la propriété <codeph>layout</codeph>. N’utilisez pas BasicLayout avec les contrôles basés sur une liste Spark. Lorsqu’une mise en forme est spécifiée, la propriété typicalLayoutElement de la mise en forme ne doit pas être définie ; elle est automatiquement définie sur un rendu d’élément créé avec l’objet <codeph>typicalItem</codeph> de la liste.</p>
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
   <p>Le contrôle List possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>112 pixels de large par 112 pixels de haut</entry></row><row><entry>Taille minimale</entry><entry>112 pixels de large par 112 pixels de haut</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row><row><entry>Classe d’habillage par défaut</entry><entry>spark.skins.spark.ListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ListExample.mxml"><swfblock conref="examples/ListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ListSkin"><linktext>spark.skins.spark.ListSkin</linktext></link></related-links><apiConstructor id="spark.components:List:List"><apiName>List</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:List:addDragData"><apiName>addDragData</apiName><shortdesc>
      Ajoute les éléments sélectionnés à l’objet DragSource dans le cadre d’une opération glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragSource</apiItemName><apiType value="mx.core:DragSource"/><apiDesc>Objet DragSource auquel ajouter les données.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute les éléments sélectionnés à l’objet DragSource dans le cadre d’une opération glisser-déposer. Remplacez cette méthode pour ajouter d’autres données à la source du glissement.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelectionAndCaretUponNavigation"><apiName>adjustSelectionAndCaretUponNavigation</apiName><shortdesc>
      Ajuste la sélection en fonction des touches ou des combinaisons de touches rencontrées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Evénement de clavier rencontré
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajuste la sélection en fonction des touches ou des combinaisons de touches rencontrées. La touche est transmise à la méthode getNavigationDestinationIndex() de la présentation pour déterminer vers quel index naviguer en fonction de l’élément qui a actuellement le focus. Une fois l’index déterminé, une sélection unique, un élément d’insertion et, si nécessaire, des sélections multiples sont mises à jour pour refléter le nouvel élément sélectionné.   
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      Ajuste l’index sélectionné de sorte qu’il tienne compte des éléments qui sont ajoutés à ce composant ou qui en sont supprimés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Nouvel index.
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>La valeur est <codeph>true</codeph> si un élément a été ajouté au composant et <codeph>false</codeph> si un élément a été supprimé. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajuste l’index sélectionné de sorte qu’il tienne compte des éléments qui sont ajoutés à ce composant ou qui en sont supprimés. 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:calculateSelectedIndices"><apiName>calculateSelectedIndices</apiName><shortdesc>
      Méthode d’aide pour calculer les modifications de sélection actuelles lorsqu’un élément est cliqué. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Index de l’élément mis à jour en fonction desquels la nouvelle sélection est validée. 
     
      </apiDesc><apiType value="Vector$int"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément qui a été cliqué. 
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiDesc>True si la touche Maj est enfoncée. 
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiDesc>True si la touche Ctrl est enfoncée. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode d’aide pour calculer les modifications de sélection actuelles lorsqu’un élément est cliqué. 
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/selectedIndices"><linktext>selectedIndices</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:protected:copyItemWithUID"><apiName>copyItemWithUID</apiName><shortdesc>
      Effectue une copie profonde de l’objet en appelant la méthode ObjectUtil.copy() et remplace la propriété UID de la copie (si elle est présente) par une nouvelle valeur en appelant la méthode UIDUtil.createUID().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Copie de l’objet.
           </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à copier.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Effectue une copie profonde de l’objet en appelant la méthode <codeph>ObjectUtil.copy()</codeph> et remplace la<codeph>propriété UID</codeph> de la copie (si elle est présente) par une nouvelle valeur en appelant la méthode <codeph>UIDUtil.createUID()</codeph>.
     
      <p>Cette méthode est utilisée pour copier avec l’opération Glisser-déposer.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.utils.ObjectUtil.xml"><linktext>mx.utils.ObjectUtil</linktext></link><link href="" invalidHref="mx.utils.UIDUtil.xml"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:createDragIndicator"><apiName>createDragIndicator</apiName><shortdesc>
      Crée une occurrence de la classe utilisée pour afficher les propriétés visuelles des éléments déplacés au cours d’une opération glisser-déposer. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>IFlexDisplayObject représentant l’indicateur de glissement.
      
      </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Crée une occurrence de la classe utilisée pour afficher les propriétés visuelles des éléments déplacés au cours d’une opération glisser-déposer. Le gestionnaire par défaut <codeph>DragEvent.DRAG_START</codeph> transmet l’occurrence à la méthode <codeph>DragManager.doDrag()</codeph>. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:createDropIndicator"><apiName>createDropIndicator</apiName><shortdesc>
      Crée une occurrence de la classe dropIndicator utilisée pour afficher les propriétés visuelles de l’emplacement de dépôt au cours d’une opération glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la classe dropIndicator définie dans la présentation. 
           </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Crée une occurrence de la classe dropIndicator utilisée pour afficher les propriétés visuelles de l’emplacement de dépôt au cours d’une opération glisser-déposer. L’occurrence est définie dans la propriété <codeph>dropIndicator</codeph> de la présentation. 
           <p>Si vous remplacez le gestionnaire d’événements <codeph>dragEnter</codeph>, puis appelez la méthode <codeph>preventDefault()</codeph> pour que le gestionnaire par défaut ne s’exécute pas, appelez <codeph>createDropIndicator()</codeph> pour créer l’indicateur de dépôt. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/destroyDropIndicator"><linktext>destroyDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:destroyDropIndicator"><apiName>destroyDropIndicator</apiName><shortdesc>
      Libère l’occurrence dropIndicator actuellement définie dans la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la classe dropIndicator qui a été supprimée.  
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Libère l’occurrence <codeph>dropIndicator</codeph> actuellement définie dans la présentation.
           <p>Si vous remplacez le gestionnaire d’événements <codeph>dragExit</codeph>, puis appelez la méthode <codeph>preventDefault()</codeph> pour que le gestionnaire par défaut ne s’exécute pas, appelez <codeph>destroyDropIndicator()</codeph> pour supprimer l’indicateur de dépôt. </p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/createDropIndicator"><linktext>createDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:ensureIndexIsVisible"><apiName>ensureIndexIsVisible</apiName><shortdesc>
      Une méthode pratique qui gère défilement d’un élément de données à l’écran. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément de données.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Une méthode pratique qui gère défilement d’un élément de données à l’écran. Si l’élément de données à l’index spécifié n’est pas entièrement visible, la classe List effectue un défilement jusqu’à ce qu’il soit visible. Si l’élément de données est déjà visible, aucun autre défilement ne se produit.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:List:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      Si la valeur est true, l’option sélection multiple est activée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, l’option sélection multiple est activée. Lorsqu’elle bascule au moment de l’exécution, la sélection en cours est effacée. Il ne doit pas être activé lorsque la propriété <codeph>interactionMode</codeph> a la valeur <codeph>touch</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      Indicateur précisant si vous pouvez faire glisser les éléments hors du contrôle et les déposer dans d’autres contrôles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si vous pouvez faire glisser les éléments hors du contrôle et les déposer dans d’autres contrôles. Si la valeur est <codeph>true</codeph>, vous pouvez utiliser le glissement pour ce contrôle. Si la propriété <codeph>dropEnabled</codeph> a également la valeur <codeph>true</codeph>, vous pouvez faire glisser les éléments et les déposer dans ce contrôle pour les réorganiser.
     
      <p>Le glisser-déposer n’est pas pris en charge sur les périphériques mobiles pour lesquels <codeph>interactionMode</codeph> est défini sur <codeph>touch</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      Indicateur précisant si les éléments peuvent être déplacés au lieu d’être simplement copiés du contrôle dans le cadre d’une opération Glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si les éléments peuvent être déplacés au lieu d’être simplement copiés du contrôle dans le cadre d’une opération Glisser-déposer. Si la valeur est <codeph>true</codeph> et si la propriété <codeph>dragEnabled</codeph> a la valeur <codeph>true</codeph>, les éléments peuvent être déplacés. Il arrive souvent que les éléments du fournisseur de données ne puissent pas ou ne doivent pas être supprimés. Une opération de déplacement (MOVE) ne doit donc pas être autorisée lors d’une opération Glisser-déposer.
     
      <p>Le glisser-déposer n’est pas pris en charge sur les périphériques mobiles pour lesquels <codeph>interactionMode</codeph> est défini sur <codeph>touch</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      Indicateur précisant si les éléments glissés peuvent être déposés dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si les éléments glissés peuvent être déposés dans le contrôle.
           <p>Si vous définissez cette propriété sur <codeph>true</codeph>, le contrôle accepte tous les formats de données et suppose que le format des données glissées correspond à celui des données résidant dans le fournisseur de données. Pour vérifier explicitement le format des données en cours de glissement, vous devez gérer un ou plusieurs des événements de glissement, comme <codeph>dragEnter</codeph> et <codeph>dragOver</codeph>, puis appeler la méthode <codeph>preventDefault()</codeph> de l’événement DragEvent pour personnaliser la façon dont la classe List accepte les données déposées.</p>
     
      <p>Le glisser-déposer n’est pas pris en charge sur les périphériques mobiles pour lesquels <codeph>interactionMode</codeph> est défini sur <codeph>touch</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      Indique si le défilement de page est actuellement activé pour ce composant Scroller.
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le défilement de page est actuellement activé pour ce composant Scroller.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      Mode d’accrochage du défilement actuellement appliqué à ce composant Scroller. La modification de cette propriété sur une autre valeur que « off » peut se traduire par une modification immédiate de la position du défilement afin de garantir qu’un élément est correctement « accroché » en position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"off"
           </apiDefaultValue></apiValueDef><apiDesc>
      Mode d’accrochage du défilement actuellement appliqué à ce composant Scroller.
           <p>La modification de cette propriété sur une autre valeur que « off » peut se traduire par une modification immédiate de la position du défilement afin de garantir qu’un élément est correctement « accroché » en position. Ce changement de la position du défilement n’est pas animé.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:List:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      Un vecteur de ints représentant les indices du ou des éléments actuellement sélectionnés. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Un vecteur de ints représentant les indices du ou des éléments actuellement sélectionnés. Si l’option sélections multiples est désactivée en définissant <codeph>allowMultipleSelection</codeph> sur la valeur <codeph>false</codeph> et que cette propriété est définie, l’élément de données correspondant au premier index du vecteur est sélectionné.  
           <p>Si la sélection multiple est activée en définissant <codeph>allowMultipleSelection</codeph> sur <codeph>true</codeph>, cette propriété contient une liste des index sélectionnés dans l’ordre inverse de sélection. Cela signifie que le premier élément du vecteur correspond au dernier élément sélectionné. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      Vecteur d’objets représentant les éléments de données actuellement sélectionnés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Vecteur d’objets représentant les éléments de données actuellement sélectionnés. Si l’option sélections multiples est désactivée en définissant <codeph>allowMultipleSelection</codeph> sur la valeur <codeph>false</codeph> et que cette propriété est définie, l’élément de données correspondant au premier index du vecteur est sélectionné.  
           <p>Si la sélection multiple est activée en définissant <codeph>allowMultipleSelection</codeph> sur <codeph>true</codeph>, cette propriété contient une liste des éléments sélectionnés dans l’ordre inverse de sélection. Cela signifie que le premier élément du vecteur correspond au dernier élément sélectionné. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      
      Définit la valeur de la propriété useVirtualLayout de la mise en page associée à cette commande. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Définit la valeur de la propriété <codeph>useVirtualLayout</codeph> de la mise en page associée à cette commande. Si la mise en page est remplacée ultérieurement et la valeur de cette propriété est <codeph>true</codeph>, la propriété <codeph>useVirtualLayout</codeph> de la nouvelle mise en page est définie sur <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:hasFocusableChildren:set"><apiName>hasFocusableChildren</apiName><shortdesc>
      Indicateur qui indique si les fonctionnalités de rendu d’élément de cette classe List susceptibles de recevoir le focus peuvent prendre le focus du clavier. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur qui indique si les fonctionnalités de rendu d’élément de cette classe List susceptibles de recevoir le focus peuvent prendre le focus du clavier.  
           <p><b>Remarque : </b>cette fonction est similaire à la propriété <codeph>tabChildren</codeph> utilisée par Flash Player. Utilisez la propriété <codeph>hasFocusableChildren</codeph> avec les applications Flex. N’utilisez pas la propriété <codeph>tabChildren</codeph>. </p>
           <p>La valeur de cette propriété est généralement <codeph>false</codeph>, car la plupart des composants reçoivent le focus ou le délèguent à un sous-composant interne unique et apparaissent comme s’ils avaient reçu le focus. Vous pouvez choisir de définir cette valeur sur true sur un objet List de sorte que le contenu de ce dernier puisse recevoir le focus. </p>
     
      <p>Si cette propriété est définie et que l’habillage List contient une partie d’habillage Scroller, la valeur est traitée par proxy sur le composant Scroller. </p> 
     
      <p>Si la valeur est <codeph>true</codeph>, ce traitement par proxy signifie que le contenu du composant Scroller, comme les fonctionnalités de rendu d’élément, peut maintenant recevoir le focus. Par exemple, cela signifie que la première frappe de la touche de tabulation place le focus sur le contrôle List dandis que la deuxième frappe place le focus sur le premier enfant du composant Scroller pouvant recevoir le focus. </p> 
      
      <p>Si la valeur est <codeph>false</codeph>, la première frappe de la touche tabulation place le focus sur le contrôle List, tandis que la deuxième frappe déplace le focus sur le prochain contrôle pouvant recevoir le focus après List. </p> 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
  La classe BorderContainer définit un ensemble de styles CSS qui contrôlent l’aspect de la bordure et remplissage d’arrière-plan du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:BorderContainer">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  Si la valeur est <codeph>true</codeph>, le conteneur a un effet d’ombre portée. 
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Rayon des angles arrondis de la bordure. 
   </description>
<default>0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderWeight" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Epaisseur du contour pour la bordure.  
   </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  Détermine si la bordure est visible ou non. Si la valeur est <codeph>false</codeph>, aucune bordure n’est visible à l’exception d’un cadre défini à l’aide de la propriété <codeph>borderStroke</codeph>.  
   
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="inset,solid" inherit="no" name="borderStyle" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  Style du cadre de sélection. Les valeurs possibles sont <codeph>"solid"</codeph> et <codeph>"inset"</codeph>. 
 
  </description>
<default>solid
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:BorderContainer" playerVersion="Flash10" type="uint">
<description>
  Couleur de la bordure.
  
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Niveau Alpha de la couleur définie par le style <codeph>borderColor</codeph>. Les valeurs possibles sont comprises entre 0.0 et 1.0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="scale,clip,repeat" inherit="no" name="backgroundImageFillMode" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  Détermine l’adaptation de l’image d’arrière-plan aux dimensions. Si vous définissez la valeur de cette propriété dans MXML, utilisez la chaîne (par exemple, « repeat »). Si vous définissez la valeur de cette propriété dans ActionScript, utilisez la constante (par exemple, <codeph>BitmapFillMode.CLIP</codeph>).
 
  <p>Lorsque cette valeur est définie sur <codeph>BitmapFillMode.CLIP</codeph> (« clip »), l’image se termine sur le bord de la région. </p>
 
  <p>Lorsque cette valeur est définie sur <codeph>BitmapFillMode.REPEAT</codeph> (« repeat »), l’image se répète pour remplir la région. </p>
   <p>Lorsque cette valeur est définie sur <codeph>BitmapFillMode.SCALE</codeph> (scale), l’image s’étire pour remplir la région.</p>
 
  </description>
<default>&lt;code>BitmapFillMode.SCALE&lt;/code>
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Object">
<description>
  Image d’arrière-plan d’un conteneur. Si <codeph>backgroundColor</codeph> et <codeph>backgroundImage</codeph> sont définis simultanément, <codeph>backgroundColor</codeph> est ignoré. La valeur par défaut est <codeph>undefined</codeph>, c’est-à-dire « non définie ». Si ce style et le style de la propriété <codeph>backgroundColor</codeph> ne sont pas définis, le composant est doté d’un arrière-plan transparent.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:BorderContainer&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
   <pre>
  &lt;s:BorderContainer
    <b>Properties</b>
    backgroundFill="null"
    borderStroke="null"
 
    <b>Styles</b>
    backgroundImage="undefined"
    backgroundImageFillMode="scale"
    borderAlpha="1.0"
    borderColor="0xB7BABC"
    borderStyle="solid"
    borderVisible="true"
    borderWeight="1"
    cornerRadius="0"
    dropShadowVisible="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe BorderContainer définit un ensemble de styles CSS qui contrôlent l’aspect de la bordure et le remplissage d’arrière-plan du conteneur.  
   <p><b>Remarque :</b> les styles CSS et les propriétés de classe étant utilisés pour contrôler l’aspect de la classe BorderContainer, vous ne pouvez pas créer un habillage personnalisé pour cette dernière. Si vous créez un habillage personnalisé, la classe d’habillage doit appliquer tous les styles pour contrôler l’aspect du conteneur. </p>
   <p>Par défaut, le trait de la bordure est arrondi. Si vous ne souhaitez pas de coins arrondis, définissez la propriété <codeph>joints</codeph> du trait sur <codeph>JointStyle.MITER</codeph>.  </p>
  
  <p>Le conteneur BorderContainer présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>112 pixels de large par 112 pixels de haut</entry></row><row><entry>Taille minimale</entry><entry>112 pixels de large par 112 pixels de haut</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row><row><entry>Classe d’habillage par défaut</entry><entry>spark.skins.spark.BorderContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="BorderContainerExample.mxml"><swfblock conref="examples/BorderContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#BorderContainerSkin"><linktext>spark.skins.spark.BorderContainerSkin</linktext></link></related-links><apiConstructor id="spark.components:BorderContainer:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:BorderContainer:backgroundFill:get"><apiName>backgroundFill</apiName><shortdesc>
      Définit l’arrière-plan du conteneur BorderContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IFill"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit l’arrière-plan du conteneur BorderContainer. La définition de cette propriété remplace les styles <codeph>backgroundAlpha</codeph>, <codeph>backgroundColor</codeph>, <codeph>backgroundImage</codeph> et <codeph>backgroundImageFillMode</codeph>. 
     
      <p>L’exemple suivant utilise la propriété <codeph>backgroundFill</codeph> pour définir la couleur d’arrière-plan sur rouge : </p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:backgroundFill> 
             &lt;s:SolidColor 
                 color="red" 
                 alpha="1"/> 
         &lt;/s:backgroundFill> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:BorderContainer:borderStroke:get"><apiName>borderStroke</apiName><shortdesc>
      Définit le trait du conteneur BorderContainer. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IStroke"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit le trait du conteneur BorderContainer. La définition de cette propriété remplace les styles <codeph>borderAlpha</codeph>, <codeph>borderColor</codeph>, <codeph>borderStyle</codeph>, <codeph>borderVisible</codeph> et <codeph>borderWeight</codeph>.   
     
      <p>L’exemple suivant définit la propriété <codeph>borderStroke</codeph> : </p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:borderStroke> 
             &lt;mx:SolidColorStroke 
                 color="black" 
                 weight="3"/> 
         &lt;/s:borderStroke> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRenderer"><apiName>IItemRenderer</apiName><shortdesc>
  L’interface IItemRenderer définit l’ensemble de base des API qu’une classe doit implémenter pour créer une fonctionnalité de rendu d’élément capable de communiquer avec un composant hôte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IItemRenderer définit l’ensemble de base des API qu’une classe doit implémenter pour créer une fonctionnalité de rendu d’élément capable de communiquer avec un composant hôte. Le composant hôte, par exemple un contrôle List ou ButtonBar, doit implémenter l’interface IItemRendererOwner. 
   
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRendererOwner"><linktext>spark.components.IItemRendererOwner</linktext></link></related-links><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      Contient true si le rendu d’élément est en cours de glissement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient <codeph>true</codeph> si le rendu d’élément est en cours de glissement. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      Index de l’élément dans le fournisseur de données du composant hôte du rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de l’élément dans le fournisseur de données du composant hôte du rendu d’élément.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      Chaîne à afficher dans le rendu d'élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      La chaîne à afficher dans l'option de rendu d'élément. 
     
      <p>Le composant hôte de la fonctionnalité de rendu d’élément peut utiliser la méthode <codeph>itemToLabel()</codeph> pour convertir l’élément de données en une chaîne devant être affichée par la fonctionnalité de rendu d’élément. </p>
     
      <p>Pour les contrôles tels que List et ButtonBar, vous pouvez utiliser les propriétés <codeph>labelField</codeph> ou <codeph>labelFunction</codeph> pour spécifier le champ de l’élément de données contenant la chaîne. Dans tous les autres cas, le composant hôte utilise la méthode <codeph>toString()</codeph> pour convertir l’élément de données en chaîne. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      Contient true si la fonctionnalité de rendu d’élément peut s’afficher comme étant sélectionnée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient <codeph>true</codeph> si la fonctionnalité de rendu d’élément peut s’afficher comme étant sélectionnée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      Contient true si le rendu d’élément peut s’afficher comme focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient <codeph>true</codeph> si le rendu d’élément peut s’afficher comme focus.  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
  Le contrôle VideoPlayer est un lecteur vidéo dont l’habillage peut être configuré et qui prend en charge le téléchargement progressif, la diffusion multidébit et la diffusion vidéo en flux continu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoPlayer">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/><skinStates><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat désactivé de l’objet VideoPlayer en mode plein écran.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackErrorAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat d’erreur de lecture de l’objet VideoPlayer en mode plein écran. Une erreur s’est produite lors de la lecture de la vidéo.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="bufferingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat de mise en tampon de l’objet VideoPlayer en mode plein écran.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="pausedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat d’interruption de l’objet VideoPlayer en mode plein écran.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat de lecture de l’objet VideoPlayer en mode plein écran.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="readyAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat opérationnel de l’objet VideoPlayer en mode plein écran. La vidéo est prête à être lue. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loadingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat de chargement de l’objet VideoPlayer en mode plein écran. VideoPlayer est en cours de chargement ou de connexion à la source.  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitializedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat d’absence d’initialisation de l’objet VideoPlayer en mode plein écran. A ce stade, VideoPlayer a été construit, mais la source n’a pas été définie et aucune tentative de connexion n’est en cours. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat désactivé de l’objet VideoPlayer.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackError" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat d’erreur de lecture de l’objet VideoPlayer. Une erreur s’est produite lors de la lecture de la vidéo.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="buffering" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat de mise en tampon de l’objet VideoPlayer.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="paused" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat d’interruption de l’objet VideoPlayer.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat de lecture de l’objet VideoPlayer.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat opérationnel de l’objet VideoPlayer. La vidéo est prête à être lue. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat de chargement de l’objet VideoPlayer. VideoPlayer est en cours de chargement ou de connexion à la source.  
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Etat d’absence d’initialisation de l’objet VideoPlayer. VideoPlayer a été construit à ce stade, mais la source n’a pas été définie et aucune tentative de connexion n’est en cours. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Le délai, en millisecondes à attendre en mode plein écran sans interaction de l’utilisateur avant que les commandes de lecture vidéo soient masquées.   
 
  <p>Si défini sur <codeph>infinity</codeph>, les contrôles de lecture ne sont pas masqués en mode plein écran. La modification de cette valeur lorsque le mode plein écran est déjà activé n’a aucun effet. </p>
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Contrôle la visibilité de l’ombre portée pour ce composant. 
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#VideoPlayer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#VideoPlayer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="videoDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="true" var_type="spark.components:VideoDisplay">
<description>
      Partie d’habillage obligatoire définissant l’objet VideoDisplay.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines the VideoDisplay.</shortdesc></SkinPart><SkinPart name="currentTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Partie d’habillage facultative permettant d’afficher la valeur actuelle de <codeph>codecurrentTime</codeph>. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the current value of codecurrentTime.</shortdesc></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Partie d’habillage d’un bouton permettant de basculer en mode plein écran. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a button to toggle fullscreen mode.</shortdesc></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      Partie d’habillage facultative pour le bouton de sourdine. Le bouton sourdine possède deux propriétés, l’une <codeph>muted</codeph> et l’’autre <codeph>volume</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the mute button.</shortdesc></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Partie d’habillage facultative pour le bouton de pause.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the pause button.</shortdesc></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Partie d’habillage facultative pour le bouton de lecture.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the play button.</shortdesc></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      Partie d’habillage facultative pour l’ensemble des contrôles du lecteur. Cet habillage est utilisé pour déterminer les éléments à masquer lorsque le lecteur est en mode plein écran et qu’il y a aucune interaction avec l’utilisateur. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for all of the player controls.</shortdesc></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      Partie d’habillage facultative pour un bouton de lecture/pause. Lorsque la vidéo est en cours de lecture, la propriété <codeph>selected</codeph> est définie sur <codeph>true</codeph>. Lorsque la vidéo est en pause ou arrêtée, la propriété <codeph>selected</codeph> est définie sur <codeph>false</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a play/pause button.</shortdesc></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      Partie d’habillage facultative pour la barre de défilement de la vidéo (le scénario).
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the scrub bar (the 
      timeline).</shortdesc></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Partie d’habillage facultative pour le bouton d’arrêt.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the stop button.</shortdesc></SkinPart><SkinPart name="durationDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Partie d’habillage facultative permettant d’afficher la durée.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the duration.</shortdesc></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      Partie d’habillage facultative pour la commande de volume.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the volume control.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    dropShadowVisible="true"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle VideoPlayer est un lecteur vidéo dont l’habillage peut être configuré et qui prend en charge le téléchargement progressif, la diffusion multidébit et la diffusion vidéo en flux continu. Il prend en charge la lecture de fichiers FLV et F4V. Le contrôle VideoPlayer contient une interface utilisateur complète permettant de contrôler de la lecture vidéo. 
 
  <p><codeph>VideoDisplay</codeph> est la version chromeless que ne prend pas en charge l’habillage. Elle est utile lorsque vous ne souhaitez pas que l’utilisateur interagisse avec le contrôle. </p>
   <p>Le contrôle VideoPlayer possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>263 pixels de large par 184 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoPlayerExample.mxml"><swfblock conref="examples/VideoPlayerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoDisplay"><linktext>spark.components.VideoDisplay</linktext></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  Distribué lorsque l’état de MediaPlayer change. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’état de MediaPlayer change. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  Distribué lorsque la propriété duration du support a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>duration</codeph> du support a été modifiée.
 
  <p>L’événement risque de ne pas être distribué si la source est définie sur null ou qu’une erreur de lecture se produit. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  Distribué lorsque la propriété currentTime de l’objet MediaPlayer a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>currentTime</codeph> de l’objet MediaPlayer a été modifiée.
 
  <p>L’événement risque de ne pas être distribué si la source est définie sur null ou qu’une erreur de lecture se produit. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Distribué lorsque la tête de lecture atteint la durée de lisibilité du support. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la tête de lecture atteint la durée de lisibilité du support. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  Distribué à la réception des données au fur et à mesure d’un téléchargement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à la réception des données au fur et à mesure d’un téléchargement. Cet événement est distribué uniquement lors de la lecture d’une vidéo par téléchargement direct depuis un serveur, en général, en émettant une demande HTTP. Il n’est pas distribué lors de la lecture d’une vidéo à partir d’un serveur de supports spécial, tel que Flash Media Server. 
 
  <p>L’événement risque de ne pas être distribué si la source est définie sur null ou qu’une erreur de lecture se produit. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      Convertit une valeur temporelle, exprimée en secondes, en chaîne, utilisée par les composants currentTime et duration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Valeur temporelle formatée.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Valeur temporelle à formater, exprimée en secondes.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit une valeur temporelle, exprimée en secondes, en chaîne, utilisée par les composants <codeph>currentTime</codeph> et <codeph>duration</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:pause"><apiName>pause</apiName><shortdesc conref="spark.components.VideoDisplay#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’habillage n’a pas été chargé et qu’il n’existe pas d’objet videoDisplay.     
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:play"><apiName>play</apiName><shortdesc conref="spark.components.VideoDisplay#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’habillage n’a pas été chargé entièrement et qu’il n’existe pas d’objet videoDisplay.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:seek"><apiName>seek</apiName><shortdesc conref="spark.components.VideoDisplay#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’habillage n’a pas été chargé entièrement et qu’il n’existe pas d’objet videoDisplay.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>Temps de recherche, en secondes.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:stop"><apiName>stop</apiName><shortdesc conref="spark.components.VideoDisplay#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’habillage n’a pas été chargé entièrement et qu’il n’existe pas d’objet videoDisplay.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.components.VideoDisplay#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.components.VideoDisplay#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.components.VideoDisplay#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.components.VideoDisplay#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:currentTime:get"><apiName>currentTime</apiName><shortdesc conref="spark.components.VideoDisplay#currentTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#currentTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:duration:get"><apiName>duration</apiName><shortdesc conref="spark.components.VideoDisplay#duration">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#duration">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:loop:get"><apiName>loop</apiName><shortdesc conref="spark.components.VideoDisplay#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:muted:get"><apiName>muted</apiName><shortdesc conref="spark.components.VideoDisplay#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playing:get"><apiName>playing</apiName><shortdesc conref="spark.components.VideoDisplay#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.VideoDisplay#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.components.VideoDisplay#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:source:get"><apiName>source</apiName><shortdesc conref="spark.components.VideoDisplay#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:videoObject:get"><apiName>videoObject</apiName><shortdesc conref="spark.components.VideoDisplay#videoObject">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#videoObject">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc conref="spark.components.VideoDisplay#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#volume">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  Le contrôle ButtonBar définit un groupe horizontal de boutons de commande associés de façon logique et pourvus d’une apparence et d’une navigation communes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="firstButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Partie d’habillage définissant le premier bouton.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the first button.</shortdesc></SkinPart><SkinPart name="lastButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Partie d’habillage définissant le dernier bouton.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the last button.</shortdesc></SkinPart><SkinPart name="middleButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="true" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Partie d’habillage définissant le ou les boutons intermédiaires.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the middle button(s).</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ButtonBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBar
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ButtonBar définit un groupe horizontal de boutons de commande associés de façon logique et pourvus d’une apparence et d’une navigation communes.
 
  <p>L’utilisation courante d’une barre de boutons vise à regrouper un jeu de boutons associés, ce qui leur donne une apparence et une navigation communes et à gérer la logique de l’événement <codeph>click</codeph> à un seul endroit. </p>
 
  <p>Le contrôle ButtonBar crée des contrôles Button en fonction de la valeur de sa propriété <codeph>dataProvider</codeph>. Utiliser des méthodes telles que <codeph>addItem()</codeph> et <codeph>removeItem()</codeph> pour manipuler la propriété <codeph>dataProvider</codeph> pour ajouter et supprimer les éléments de données. Le contrôle ButtonBar ajoute ou supprime automatiquement les enfants nécessaires en fonction des modifications apportées à la propriété <codeph>dataProvider</codeph>.</p>
 
  <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
 
  <p>Pour les projets non mobiles, vous pouvez utiliser le contrôle ButtonBar pour définir l’enfant actif d’un conteneur ViewStack, comme l’illustre l’exemple suivant :</p>
 
  <p><b>Remarque : </b>les contrôles basés sur une liste Spark (la classe Spark ListBase et ses sous-classes, telles que ButtonBar, ComboBox, DropDownList, List et TabBar) ne prennent pas en charge la classe BasicLayout en tant que valeur de la propriété <codeph>layout</codeph>. N’utilisez pas BasicLayout avec les contrôles basés sur une liste Spark. </p>
 
  <pre>
  &lt;s:ButtonBar dataProvider="{myViewStack}" requireSelection="true" /> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  <p>Le contrôle ButtonBar possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher tous les boutons </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>Aucune limite</entry></row><row><entry>Classe d’habillage par défaut</entry><entry>spark.skins.spark.ButtonBarSkin</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Label"><apiName>Label</apiName><shortdesc>
  Label est un composant UIComponent de faible niveau qui peut effectuer le rendu d’une ou plusieurs lignes de texte dans un format uniforme. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="text"/><styles><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Alignement vertical ou justification. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Encart supérieur en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Encart droit en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Encart gauche en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Encart inférieur en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Contrôle le retour à la ligne des mots dans le conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Label" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Label/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Label/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Label/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Label/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Label" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Label&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Label 
    <strong>Properties</strong>
    fontContext=""
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Label est un composant UIComponent de faible niveau qui peut effectuer le rendu d’une ou plusieurs lignes de texte dans un format uniforme. Le texte à afficher est déterminé par la propriété <codeph>text</codeph> héritée de TextBase. Formatage du texte est spécifié par les styles CSS de l’élément, tels que <codeph>fontFamily</codeph> et <codeph>fontSize</codeph>. 
 
  <p>Label utilise le moteur Flash Text Engine (FTE) de Flash Player pour fournir une typographie de qualité internationale. Label étant rapide et léger, il est particulièrement adapté à une utilisation qui implique le rendu de nombreux petits morceaux de non-texte interactif, tels que des fonctionnalités de rendu d’élément et des étiquettes des habillage Button.</p>
 
  <p>L’architecture Spark fournit trois « primitives » de texte, Label, RichText et RichEditableText, dans le cadre de sa philosophie d’achat en fonction des besoins. Etiquette est la plus rapide et la plus légère, mais est limitée en termes de capacités : pas de formatage complexe, de défilement, de sélection, de modification et d’hyperliens. RichText et RichEditableText sont construits sur la bibliothèque TLF (Text Layout Framework) plutôt que sur FTE. RichText ajoute la possibilité de lire du texte au formatage complexe, mais n’est absolument pas interactif. RichEditableText est le plus lent et le plus lourd, mais offre des fonctionnalités exhaustives : il prend en charge le défilement avec des objets TextLines virtualisés, la sélection, la modification, les hyperliens et les images chargées à partir d’URL. Vous devez utiliser la solution la plus rapide adaptée à vos besoins. </p>
 
  <p>Le contrôle Spark Label est similaire au contrôle Label MX, mx.controls.Label. Les principales différences sont les suivantes : 
  <ul>
    <li>Spark Label utilise FTE, le nouveau moteur de texte du lecteur, alors que MX Label utilise la classe TextField. </li>
    <li>Spark Label offre une meilleure typographie, et une meilleure prise en charge des langues internationales que MX Label. </li>
    <li>Spark Label peut afficher plusieurs lignes, contrairement à MX Label. </li>
    <li>MX label peut afficher un sous-ensemble HTML limité, alors que Spark Label peut afficher uniquement du texte au formatage uniforme. </li>
    <li>MX Label peut être sélectionnable, contrairement à Spark Label. </li>
  </ul></p>
 
  <p>Dans Spark Label, trois séquences de caractères explicites sont reconnues en tant que sauts de ligne : CR (<codeph>"\r")</codeph>), LF (<codeph>"\n"</codeph>) et CR+LF (<codeph>"\r\n"</codeph>). </p>
 
  <p>Si vous ne spécifiez aucun type de largeur pour Label, la ligne la plus longue, tel que déterminée par ces sauts de ligne explicites, détermine la largeur de Label. </p>
 
  <p>Si vous spécifiez un type de largeur, le texte revient à la ligne sur le bord droit du composant, car la valeur par défaut du style <codeph>lineBreak</codeph> est <codeph>"toFit"</codeph>. Si le texte s’étend au-delà du bas du composant, il est écrêté. </p>
 
  <p>Pour désactiver ce retour automatique à la ligne, définissez le style <codeph>lineBreak</codeph> sur <codeph>"explicit"</codeph>. Les lignes sont alors rompues uniquement aux endroits où le <codeph>text</codeph> contient un saut de ligne explicite. Les extrémités des lignes qui s’étendent au-delà du bord droit sont écrêtées. </p>
 
  <p>Si votre texte dépasse l’espace d’affichage, Label permet de le tronquer. La troncature de texte signifie le remplacement du texte superflu à l’aide d’un indicateur de troncature, tel que « ... ». Consultez les propriétés héritées <codeph>maxDisplayedLines</codeph> et <codeph>isTruncated</codeph>. </p>
 
  <p>Vous pouvez contrôler l’espacement des lignes avec le style <codeph>lineHeight</codeph>. Vous pouvez aligner le texte horizontalement et verticalement dans les limites de l’élément à l’aide des styles<codeph>textAlign</codeph>, <codeph>textAlignLast</codeph> et <codeph>verticalAlign</codeph>. Vous pouvez mettre le texte en retrait à partir des bords de l’élément de l’aide des styles <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> et <codeph>paddingBottom</codeph>. </p>
 
  <p>Par défaut, un composant Label ne possède aucun arrière-plan, mais vous pouvez en tracer un en utilisant les styles <codeph>backgroundColor</codeph> et <codeph>backgroundAlpha</codeph>. Les bordures ne sont pas prises en charge. Si vous avez besoin d’une bordure ou d’un arrière-plan plus complexe, utilisez un autre élément graphique, tel qu’un Rect, derrière le composant Label. </p>
 
  <p>Le composant label peut afficher du texte rédigé de gauche à droite (LTR), par exemple, en français, de droite à gauche (RTL), comme en arabe, et du texte bidirectionnel, par exemple une phrase française au sein d’une phrase arabe. Si le sens prédominant du texte est de droite à gauche, définissez le style <codeph>direction</codeph> sur <codeph>"rtl"</codeph>. La valeur par défaut du style <codeph>textAlign</codeph> est définie sur <codeph>"start"</codeph>, ce qui aligne le texte à gauche lorsque <codeph>direction</codeph> est définie sur <codeph>"ltr"</codeph> ou à droite lorsque <codeph>direction</codeph> est définie sur <codeph>"rtl"</codeph>. Pour obtenir l’alignement inverse, définissez <codeph>textAlign</codeph> sur <codeph>"end"</codeph>. </p>
 
  <p>Label utilise la classe TextBlock du moteur FTE (Flash Text Engine) pour créer un ou plusieurs objets TextLine pour afficher statiquement ses chaînes de caractères au format déterminé par ses styles CSS. Pour des performances accrues, ses objets TextLines créés ne contiennent pas d’informations sur les différents glyphes. Pour plus d’informations, consultez la section flash.text.engine.TextLineValidity.STATIC. </p>
 
  <p>Le contrôle Label possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>0 Pixels de largeur par 12 pixels de hauteur s’il ne contient aucun texte et suffisamment grande pour afficher le texte le cas échéant </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLineValidity/STATIC"><linktext>flash.text.engine.TextLineValidity.STATIC</linktext></link></related-links><apiConstructor id="spark.components:Label:Label"><apiName>Label</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
      RichEditableText est un composant UIComponent de faible niveau prenant en charge l’affichage, le défilement, la sélection et la modification du texte format. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="chromeColor"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichEditableText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
      La couleur de l’arrière-plan de l’ensemble du cadre de délimitation de ce composant. Si ce style est <codeph>undefined</codeph> aucun arrière-plan n’est dessiné. Dans le cas contraire, cette couleur RVB est dessinée avec un niveau alpha déterminé par le style <codeph>backgroundAlpha</codeph>.
     
      </description>
<default>undefined
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
      Le niveau alpha de la couleur définie par le style <codeph>backgroundColor</codeph>. Les valeurs possibles sont comprises entre 0.0 et 1.0.
     
      </description>
<default>1.0
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Largeur de colonne en pixels.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.columnWidth.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Valeur de l’espace de gouttière, en pixels, à laisser entre les colonnes.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.columnGap.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Nombre de colonnes de texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.columnCount.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Alignement vertical ou justification. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Encart supérieur en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Encart droit en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Encart gauche en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Encart inférieur en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Contrôle le retour à la ligne des mots dans le conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichEditableText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichEditableText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[      <p>The <code>&lt;s:RichEditableText&gt;</code> tag inherits all of the tag 
      attributes of its superclass and adds the following tag attributes:</p>
           <pre>
      &lt;s:RichEditableText
        <strong>Properties</strong>
        clipAndEnableScrolling="false|true"
        contentHeight="<i>Calculated default</i>"
        contentWidth="<i>Calculated default</i>"
        displayAsPassword="false"
        editable="true"
        heightInLines="NaN"
        horizontalScrollPosition="0"
        imeMode="null"
        maxChars="0"
        multiline="true"
        restrict="null"
        selectable="true"
        selectionActivePosition="-1"
        selectionAnchorPosition="-1"
        selectionHighlighting="TextSelectionHighlighting.WHEN_FOCUSED"
        text=""
        textFlow="<i>TextFlow</i>"
        typicalText=null
        verticalScrollPosition="0"
        widthInChars="NaN"
      
        <strong>Events</strong>
        change="<i>No default</i>"
        changing="<i>No default</i>"
        enter="<i>No default</i>"
        selectionChange="<i>No default</i>"
      /&gt;
      </pre>
      
      ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:ISystemCursorClient</apiBaseInterface><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseInterface>spark.core:IEditableText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      RichEditableText est un composant UIComponent de niveau inférieur prenant en charge l’affichage, le défilement, la sélection et la modification du texte format. 
           <p>Texte enrichi peut contenir des hyperliens cliquables et des trafics en ligne incorporés ou chargés à partir d’URL. </p>
           <p>Le contrôle RichEditableText ne possède pas de barre de défilement, mais il implémente l’interface IViewport permettant le défilement par programme afin de pouvoir être contrôlée par un objet Scroller, qui fournit des barres de défilement. Il prend également en charge le défilement vertical avec la molette de la souris. </p>
           <p>Il n’inclut pas d’interface utilisateur permettant de modifier le formatage du texte. Mais il offre des API qui peut le faire par programmation. Ces dernières vous permettent, par exemple, de créer un bouton Gras qui rend le texte sélectionné en gras. </p>
           <p>Cette classe est utilisée dans les habillages des versions Spark de TextInput et TextArea. (TextInput n’expose pas sa capacité à traiter du texte enrichi, contrairement à TextArea.) Par défaut, RichEditableText possède un arrière-plan transparent et ne prend pas en charge le traçage d’une bordure. </p>
           <p>RichEditableText utilise la bibliothèque Text Layout Framework (TLF), qui repose elle-même sur le nouveau moteur Flash Text Engine (FTE) de Flash Player 10. Associés, ces calques offrent des fonctionnalités de modification de texte, notamment de typographie et de présentation internationales de qualité supérieure. </p>
           <p>L’architecture Spark fournit trois « primitives » de texte : Label, RichText et RichEditableText. Label est la plus rapide et la plus légère, car elle utilise uniquement FTE, et pas TLF. Mais elle est limitée dans ses capacités : aucun texte enrichi, aucun défilement, aucune sélection et aucune modification. RichText ajoute la possibilité de lire du texte à la présentation complexe, mais n’est absolument pas interactive. RichEditableText est la plus lourde, mais tire le meilleur parti de la technologie TLF. Vous devez utiliser la primitive la plus rapide adaptée à vos besoins. </p>
           <p>RichEditableText est similaire à la classe UITextField utilisée dans les composants MX. Cette classe n’utilise pas FTE ou TLF mais étend plutôt l’ancienne classe TextField. </p>
           <p>Les principales différences entre UITextField et RichEditableText sont les suivantes : 
      <ul>
        <li>RichEditableText offre des fonctionnalités typographiques et de présentation de texte optimisées, ainsi qu’une meilleure prise en charge des langues internationales. </li>
        <li>RichEditableText possède un modèle orienté objet. de texte enrichi, ce qui n’est pas le cas de la classe UITextField. </li>
        <li>RichEditableText possède une meilleure prise en charge de l’affichage de grandes quantités de texte. </li>
        <li>Par rapport à la classe UITextField, l’incorporation de polices doit s’effectuer de manière différente dans RichEditableText. Consultez la documentation concernant l’utilisation de l’attribut <codeph>embedAsCFF</codeph> lors de l’incorporation d’une police. </li>
      </ul></p>
           <p>RichEditableText utilise le modèle de texte enrichi orienté objet TLF, dans lequel les éléments de présentation de texte, tels que les divisions, les paragraphes, les étendues, les hyperliens, et les images sont représentés à l’exécution par des objets ActionScript. TextFlow est l’objet central de TLF permettant de représenter le texte enrichi. Vous pouvez spécifier l’affichage du texte enrichi dans le contrôle RichEditableText en définissant sa propriété <codeph>textFlow</codeph> sur une occurrence TextFlow. Consultez la description de la propriété <codeph>textFlow</codeph> pour en savoir plus sur sa création, par exemple, dans le cadre d’une importation de marquage TLF. Si vous n’avez pas besoin d’afficher un texte possédant plusieurs formats, vous pouvez utiliser la propriété <codeph>text</codeph> pour définir un composant TextArea sur une chaîne de texte brut. Consultez les descriptions des propriétés <codeph>text</codeph> et <codeph>textFlow</codeph> pour plus d’informations sur leurs interactions ; par exemple, vous pouvez en définir une et obtenir l’autre. </p>
           <p>Lors de la compilation, vous pouvez placer des balises de marquage TLF dans la balise RichEditableText, comme l’illustre l’exemple suivant : 
      <pre>
      &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichEditableText>
      </pre>
      Dans cet exemple, le compilateur MXML définit la propriété <codeph>content</codeph>, ce qui entraîne la création d’un objet TextFlow à partir de l’élément FlowElements spécifié. </p>
           <p>Le formatage de texte par défaut est déterminé par des styles CSS, par exemple <codeph>fontFamily</codeph> et <codeph>fontSize</codeph>. Les informations de formatage de l’objet TextFlow remplacent le formatage par défaut fourni par les styles CSS. </p>
           <p>Vous pouvez contrôler l’espacement entre les lignes l’aide du style <codeph>lineHeight</codeph> et l’espacement entre les paragraphes avec les styles <codeph>paragraphSpaceBefore</codeph> et <codeph>paragraphSpaceAfter</codeph>. Vous pouvez aligner ou justifier le texte à l’aide des styles <codeph>textAlign</codeph> et <codeph>textAlignLast</codeph>. Vous pouvez mettre le texte en retrait à partir des bords du composant de l’aide des styles <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> et <codeph>paddingBottom</codeph>. </p>
           <p>Par défaut, un objet RichEditableText « se redimensionne automatiquement » : très réduit au départ en l’absence de texte, il croît en largeur jusqu’à <codeph>maxWidth</codeph> au fur et à mesure de la saisie. Sa taille augmente en hauteur lorsque vous appuyez sur la touche Entrée pour commencer une nouvelle ligne. </p>
           <p>Les propriétés <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> constituent un moyen pratique pour spécifier la largeur et la hauteur en fonction de la taille de police. Vous pouvez également utiliser la propriété <codeph>typicalText</codeph>. Notez que si vous utilisez <codeph>typicalText</codeph>, les propriétés <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> sont ignorées. Vous pouvez également spécifier une largeur ou une hauteur explicite en pixels ou utiliser un pourcentage de largeur et de hauteur ou des contraintes telles que <codeph>left</codeph> and <codeph>right</codeph> ou <codeph>top</codeph> et <codeph>bottom</codeph>. </p>
           <p>Lorsque vous spécifiez une largeur, qu’il s’agisse d’une largeur explicite ou en pourcentage, une largeur <codeph>maxWidth</codeph> ou des contraintes <codeph>left</codeph> et <codeph>right</codeph>, le texte revient à la ligne
 sur le bord droit du composant et il est possible de le faire défiler lorsqu’il dépasse les dimensions du conteneur. Si vous définissez le style <codeph>lineBreak</codeph> sur <codeph>explicit</codeph>, les nouvelles lignes commencent uniquement aux sauts de lignes explicites, si vous utilisez CR (<codeph>\r)</codeph>), LF (<codeph>\n</codeph>) ou CR+LF (<codeph>\r\n</codeph>) dans <codeph>text</codeph> ou si vous utilisez <codeph>&lt;p></codeph> et <codeph>&lt;br /></codeph> dans le marquage TLF. Dans ce cas, il est possible de faire défiler le texte horizontalement si les lignes sont plus larges que le contrôle. </p>
           <p>Vous pouvez utiliser la propriété <codeph>maxChars</codeph> pour limiter le nombre de caractères saisis par l’utilisateur et la propriété <codeph>restrict</codeph> pour limiter le type des caractères saisis par l’utilisateur. </p>
           <p>La propriété <codeph>multiline</codeph> détermine ce qui se produit lorsque vous appuyez sur la touche Entrée. Si la valeur est <codeph>true</codeph>, la touche Entrée commence un nouveau paragraphe. Si elle est <codeph>false</codeph>, cela provoque la distribution d’un événement <codeph>FlexEvent.ENTER</codeph>. </p>
           <p>Si vous ne souhaitez pas que le texte soit modifiable, définissez la propriété <codeph>editable</codeph> sur <codeph>false</codeph>. Si vous ne souhaitez pas que le texte soit sélectionné, définissez la propriété <codeph>selectable</codeph> sur <codeph>false</codeph>. </p>
           <p>Etant donné que RichEditableText utilise TLF, prend en charge l’affichage du texte rédigé de gauche à droite (LTR), par exemple, en français, de droite à gauche (RTL), comme en arabe, et du texte bidirectionnel, par exemple une phrase française au sein d’une phrase arabe. Si le sens du texte prédominant est de droite à gauche, définissez le style <codeph>direction</codeph> sur <codeph>rtl</codeph>. Par défaut, le style <codeph>textAlign</codeph> pour la valeur <codeph>"start"</codeph>, ce qui aligne le texte à gauche lorsque <codeph>direction</codeph> est définie sur <codeph>ltr</codeph> et à droite lorsque <codeph>direction</codeph> est définie sur <codeph>rtl</codeph>. Pour obtenir l’alignement inverse, définissez <codeph>textAlign</codeph> sur <codeph>end</codeph>. </p>
           <p>L’utilisation TLF permet à RichEditableText de prendre en charge un nombre illimité d’opération d’annulation/rétablissement au cours d’une session d’édition. Une session d’édition commence lorsque le composant obtient le focus clavier et se termine lorsque le contrôle perd le focus. </p>
           <p>RichEditableText utilise la classe TextContainerManager de TLF pour gérer l’affichage, le défilement, la sélection, la modification du texte et le menu contextuel.</p>
           <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
           </apiDesc><example conref="RichEditableTextExample.mxml"><swfblock conref="examples/RichEditableTextExample.swf"/></example><example conref="externalTextFlow.xml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.utils.xml#TextFlowUtil"><linktext>spark.utils.TextFlowUtil</linktext></link><link href="" invalidHref="flashx.textLayout.container.TextContainerManager.xml"><linktext>flashx.textLayout.container.TextContainerManager</linktext></link></related-links><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
      Distribué lorsque l’utilisateur appuie sur la touche Entrée, si la valeur de la propriété multiline est false. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué lorsque l’utilisateur appuie sur la touche Entrée, si la valeur de la propriété <codeph>multiline</codeph> est false.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
      Distribué au terme d’une opération de modification par un utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué au terme d’une opération utilisateur de modification.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
      Distribué avant une opération utilisateur de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué avant une opération utilisateur de modification. Vous pouvez modifier l’opération ou annuler l’événement pour empêcher le traitement de l’opération. 
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
      Distribué après modification, quelle qu’en soit la raison, des propriétés selectionAnchorPosition et/ou selectionActivePosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué après modification, quelle qu’en soit la raison, des propriétés <codeph>selectionAnchorPosition</codeph> et/ou <codeph>selectionActivePosition</codeph>.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RichEditableText:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
          Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Constructeur. 
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:RichEditableText:appendText"><apiName>appendText</apiName><shortdesc>
          Ajoute le texte spécifié à la fin de la classe RichEditableText, comme si vous aviez cliqué à la fin et l’aviez tapé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Texte à ajouter. 
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Ajoute le texte spécifié à la fin de la classe RichEditableText, comme si vous aviez cliqué à la fin et l’aviez tapé.
                   <p>Un point d’insertion est alors défini après le nouveau texte. Si nécessaire, le texte défile pour vous assurer que le point d’insertion est visible. </p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc>
          Renvoie un objet TextLayoutFormat spécifiant les formats calculés de la plage de caractères spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet TextLayoutFormat.
          
          </apiDesc><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>Vecteur de chaînes qui indique les noms des formats requis ou <codeph>null</codeph> pour demander tous les formats. 
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Position de caractère indiquant la fin fixe de la sélection. 
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Position de caractère indiquant une fin de sélection pouvant être déplacée. 
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Renvoie un objet TextLayoutFormat spécifiant les formats calculés de la plage de caractères spécifiée.
                   <p>Si un format n’est pas défini de manière cohérente à travers toute la plage, il a la valeur <codeph>undefined</codeph>.</p>
                   <p>Vous pouvez spécifier un vecteur de chaînes contenant les noms des formats qui vous intéressent ; dans le cas contraire, tous les formats sont calculés. </p>
          
          <p>Si vous ne spécifiez pas de plage, la plage sélectionnée est utilisée.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc>
          
      Renvoie la quantité à ajouter à la position horizontalScrollPosition actuelle de la fenêtre selon laquelle l’unité de défilement demandée doit faire défiler l’affichage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nombre de pixels à ajouter à <codeph>horizontalScrollPosition</codeph>.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Quantité de défilement. La valeur doit être l’une des constantes spark.core.NavigationUnit suivantes :  
      <ul>
       <li><codeph>LEFT</codeph></li>
       <li><codeph>RIGHT</codeph></li>
       <li><codeph>PAGE_LEFT</codeph></li>
       <li><codeph>PAGE_RIGHT</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      Pour faire défiler l’affichage d’une seule colonne, utilisez <codeph>LEFT</codeph> ou <codeph>RIGHT</codeph>. Pour faire défiler l’affichage jusqu’à la première ou la dernière colonne, utilisez <codeph>HOME</codeph> ou <codeph>END</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      Renvoie la quantité à ajouter à la position <codeph>horizontalScrollPosition</codeph> actuelle de la fenêtre selon laquelle l’unité de défilement demandée doit faire défiler l’affichage. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc>
          
      Renvoie la quantité à ajouter à la position verticalScrollPosition actuelle de la fenêtre selon laquelle l’unité de défilement demandée doit faire défiler l’affichage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nombre de pixels à ajouter à <codeph>verticalScrollPosition</codeph>.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Quantité de défilement. La valeur de l’unité doit être l’une des constantes spark.core.NavigationUnit suivantes :  
      <ul>
       <li><codeph>UP</codeph></li>
       <li><codeph>DOWN</codeph></li>
       <li><codeph>PAGE_UP</codeph></li>
       <li><codeph>PAGE_DOWN</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      Pour faire défiler l’affichage d’une seule ligne, utilisez <codeph>UP</codeph> ou <codeph>DOWN</codeph>. Pour faire défiler l’affichage jusqu’à la première ou la dernière ligne, utilisez <codeph>HOME</codeph> ou <codeph>END</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      Renvoie la quantité à ajouter à la position <codeph>verticalScrollPosition</codeph> actuelle de la fenêtre selon laquelle l’unité de défilement demandée doit faire défiler l’affichage. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:insertText"><apiName>insertText</apiName><shortdesc>
          Insère le texte spécifié dans le composant RichEditableText comme si vous l’aviez tapé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Texte à insérer. 
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Insère le texte spécifié dans le champ RichEditableText comme si vous l’aviez tapé.
                   <p>Si une plage a été sélectionnée, le nouveau texte remplace le texte sélectionné. S’il existe un point d’insertion, le nouveau texte est inséré. </p>
                   <p>Un point d’insertion est alors défini après le nouveau texte. Si nécessaire, le texte défile pour vous assurer que le point d’insertion est visible. </p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectAll"><apiName>selectAll</apiName><shortdesc>
          Sélectionne tout le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Sélectionne tout le texte. Cela n’inclut pas le terminateur de paragraphe final.
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectRange"><apiName>selectRange</apiName><shortdesc>
          Sélectionne une plage de caractères spécifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>Position des caractères spécifiant la fin de la sélection qui reste fixe lorsque la sélection est étendue. 
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>Position des caractères spécifiant la fin de la sélection qui se déplace lorsque la sélection est étendue. 
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Sélectionne une plage de caractères spécifiée. 
                   <p>Si l’une des deux positions est négative, la plage de texte est désélectionnée. </p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc>
          Applique les formats spécifiés à chaque élément de la plage spécifiée qui correspondent au format donné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>Format TextLayoutFormat à appliquer à la sélection. 
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>La position d’un caractère, par rapport au début de la chaîne de caractères, en indiquant la fin de la sélection qui reste fixe lorsque la sélection est étendue à l’aide des touches fléchées. 
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>La position d’un caractère, par rapport au début de la chaîne de caractères, en indiquant la fin de la sélection qui se déplace lorsque la sélection est étendue à l’aide des touches fléchées.  
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Applique les formats spécifiés à chaque élément de la plage spécifiée qui correspondent au format donné. Il applique les formats de caractère au texte dans la plage spécifiée (aucune modification n’est apportée si la plage spécifiée est un point unique). Il applique les formats de paragraphe au moins partiellement à tous les paragraphes de la plage (ou à un seul paragraphe si la plage correspond à un point unique). Il applique les formats de conteneur au conteneur.
         
          <p>Les formats pris en charge sont ceux de l’objet TextLayoutFormat. La valeur <codeph>undefined</codeph> n’est pas appliquée. Si vous ne spécifiez pas de plage, la plage sélectionnée est utilisée.</p>
                   <p>L’exemple suivant définit les propriétés <codeph>fontSize</codeph> et <codeph>color</codeph> de la sélection : 
          <pre>
          var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
          textLayoutFormat.fontSize = 12;
          textLayoutFormat.color = 0xFF0000;
          myRET.setFormatOfRange(textLayoutFormat);
          </pre>
          </p>
          
          <p>Si vous utilisez les résultats de <codeph>getFormatOfRange()</codeph> pour spécifier le <codeph>format</codeph>, notez que chaque format dans le <codeph>TextLayoutFormat</codeph> a une valeur calculée, qui sera appliquée à chaque élément qui correspond au format donné.</p>
         
          <p>Si vous souhaitez spécifier un format à appliquer à l’ensemble du texte, il serait préférable d’utiliser <codeph>setStyle(format, value)</codeph> sur le composant lui-même.</p>
         
          <p>L’exemple suivant définit les propriétés <codeph>fontSize</codeph> et <codeph>color</codeph> de l’ensemble du texte :
          <pre>
          myRET.setStyle("fontSize", 12);
          myRET.setStyle("color", 0xFF0000);
          </pre>
          </p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:styleChanged"><apiName>styleChanged</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:RichEditableText:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:RichEditableText:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
          
          </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
          hauteur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          hauteur du texte.
                   <p>En raison du fait que Text Layout Framework virtualise TextLines à des fins de performances, cette hauteur est initialement une estimation de la capacité du composant à afficher l’ensemble du texte. Si vous faites défiler le texte jusqu’à sa fin, tous les lignes TextLines créées sont composées et <codeph>contentHeight</codeph> sera exact. </p>
                   <p>Pour faire défiler le texte verticalement, faites varier la position <codeph>verticalScrollPosition</codeph> entre 0 et <codeph>contentHeight - height</codeph>.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
          Largeur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Largeur du texte.
                   <p>En raison du fait que Text Layout Framework virtualise TextLines à des fins de performances, cette hauteur est initialement une estimation de la capacité du composant à afficher l’ensemble du texte. Si vous faites défiler le texte jusqu’à sa fin, tous les lignes TextLines créées sont composées et <codeph>contentHeight</codeph> sera exact. </p>
                   <p>Pour faire défiler le texte horizontalement, modifiez la position <codeph>verticalScrollPosition</codeph> entre 0 et <codeph>contenWidth - Width</codeph>.</p>  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:content:get"><apiName>content</apiName><shortdesc>
          Cette propriété est conçue pour une utilisation dans MXML au moment de la compilation. pour obtenir ou définir du contenu de texte enrichi à l’exécution, utilisez la propriété textFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          Cette propriété est conçue pour une utilisation dans MXML au moment de la compilation. pour obtenir ou définir du contenu de texte enrichi à l’exécution, utilisez la propriété <codeph>textFlow</codeph>. 
                   <p>La propriété <codeph>content</codeph>, la propriété par défaut pour TextArea, vous permet d’écrire au format MXML
          <pre>
          &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichEditableText>
          </pre>
          et possède des éléments String et SpanElement que vous pouvez spécifier en tant que contenu à utiliser pour créer un objet TextFlow. </p>
                   <p>Cette propriété est typée sous forme d’objet car vous pouvez la définir en tant que chaîne, FlowElement ou tableau de chaînes et FlowElements. Dans l’exemple ci-dessus, le contenu spécifié est un tableau à deux éléments dont le premier est la chaîne « hello » et dont la deuxième est un élément SpanElement avec le texte « World » en gras. </p>
         
          <p>Quelle que soit la manière dont vous spécifiez le contenu, il est converti en TextFlow et lorsque vous obtenez cette propriété, vous obtenez le résultat TextFlow. </p>
         
          <p>Adobe recommande d’utiliser la propriété <codeph>textFlow</codeph> pour obtenir et définir le contenu de texte à l’exécution, car il est de type TextFlow plutôt que qu’Object. Un objet TextFlow est la représentation canonique du contenu de texte enrichi dans Text Layout Framework. </p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:editable:get"><apiName>editable</apiName><shortdesc>
          Un indicateur signale si l’utilisateur est autorisé à modifier le texte dans ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
                   </apiDefaultValue></apiValueDef><apiDesc>
          Un indicateur signale si l’utilisateur est autorisé à modifier le texte dans ce contrôle.
                   <p>Si elle est <codeph>true</codeph>, le curseur de la souris prend la forme d’un i sur les limites de ce contrôle. Si la valeur est <codeph>false</codeph>, le curseur de la souris reste une flèche. </p>
                   <p>Si cette propriété est <codeph>true</codeph>, la propriété <codeph>selectable</codeph> est ignorée. </p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:enableIME:get"><apiName>enableIME</apiName><shortdesc>
          Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><returns>true if the component is editable and it is not displaying a password.
         
          </returns></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. 
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
          Hauteur par défaut du contrôle, mesurée en lignes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          Hauteur par défaut du contrôle, en lignes. 
                   <p>Ces styles de formatage, tels que <codeph>fontSize</codeph> et <codeph>lineHeight</codeph>, sont utilisés pour calculer la hauteur de ligne en pixels. </p>
                   <p>Vous pouvez par exemple, définir cette propriété sur 5 si vous souhaitez que la hauteur du composant RichEditableText soit suffisante pour afficher cinq lignes de texte. </p>
                   <p>Si cette propriété est <codeph>NaN</codeph> (valeur par défaut), alors la valeur par défaut de la hauteur du composant est déterminée à partir du texte à afficher. </p>
          
          <p>Cette propriété sera ignorée si vous spécifiez une hauteur explicite, un pourcentage de hauteur ou les deux contraintes <codeph>top</codeph> et <codeph>bottom</codeph>. </p>
                   <p>Cette propriété sera également ignorée si la propriété <codeph>typicalText</codeph> est spécifiée.</p>
         
          <p>La méthode <codeph>measure()</codeph> de RichEditableText utilise <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> pour déterminer <codeph>measuredWidth</codeph> et <codeph>measuredHeight</codeph>. Ces propriétés sont similaires aux propriétés <codeph>cols</codeph> et <codeph>rows</codeph> d’un composant TextArea HTML. </p>
                   <p>Comme la valeur par défaut des propriétés <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> est <codeph>NaN</codeph>, RichTextEditable « s’autodimensionne » : peu volumineux en l’absence de texte, elle croît en largeur au fur et à mesure de la saisie et croît en hauteur lorsque vous appuyez sur Entrée pour commencer une nouvelle ligne. </p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          Nombre de pixels du défilement horizontal du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Nombre de pixels du défilement horizontal du texte. 
                   <p>Pour faire défiler le texte horizontalement, faites varier la position <codeph>verticalScrollPosition</codeph> entre 0 et <codeph>contenWidth - Width</codeph>.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:imeMode:get"><apiName>imeMode</apiName><shortdesc>
          Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle est mis en focus et rétablit la valeur précédente lorsque le contrôle est désactivé.
                   <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs possibles de cette propriété. Vous pouvez également spécifier <codeph>null</codeph> si vous ne souhaitez pas spécifier d’éditeur IME.</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:multiline:get"><apiName>multiline</apiName><shortdesc>
          Détermine si l’utilisateur peut ou non entrer du texte multiligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Détermine si l’utilisateur peut ou non entrer du texte multiligne. 
                   <p>Si la valeur est <codeph>true</codeph>, la touche Entrée commence un nouveau paragraphe. Si la valeur est <codeph>false</codeph>, la touche Entrée n’affecte pas le texte mais provoque la distribution d’un événement <codeph>enter</codeph> par la classe RichEditableText . Si vous collez du texte dans l’objet RichEditableText avec une valeur multiligne <codeph>false</codeph>, les nouvelles lignes sont éliminées du texte. </p>  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectable:get"><apiName>selectable</apiName><shortdesc>
          Indicateur signalant si le contenu est sélectionnable avec la souris ou avec le clavier lorsque le contrôle a le focus clavier. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Indicateur signalant si le contenu est sélectionnable avec la souris ou avec le clavier lorsque le contrôle a le focus clavier. 
                   <p>Le fait de rendre le texte sélectionnable permet de copier du texte à partir du contrôle.</p>
                   <p>Cette propriété est ignorée si la propriété <codeph>editable</codeph> est définie sur <codeph>true</codeph>.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
          La position d’un caractère, par rapport au début de la chaîne de caractères, en indiquant la fin de la sélection qui se déplace lorsque la sélection est étendue à l’aide des touches fléchées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          La position d’un caractère, par rapport au début de la chaîne <codeph>text</codeph> en indiquant la fin de la sélection qui se déplace lorsque la sélection est étendue à l’aide des touches fléchées. 
                   <p>La position active peut être le début ou la fin de la sélection. </p>
                   <p>Par exemple, si vous faites glisser la sélection de la position 12 à la position 8, <codeph>selectionAnchorPosition</codeph> devient 12 et <codeph>selectionActivePosition</codeph> devient 8. Lorsque vous appuyez sur la flèche gauche <codeph>selectionActivePosition</codeph> devient 7. </p>
                   <p>La valeur -1 indique « non défini ». </p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
          La position d’un caractère, par rapport au début de la chaîne de caractères, en indiquant la fin de la sélection qui reste fixe lorsque la sélection est étendue à l’aide des touches fléchées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          La position d’un caractère, par rapport au début de la chaîne <codeph>text</codeph>, en indiquant la fin de la sélection qui reste fixe lorsque la sélection est étendue à l’aide des touches fléchées. 
                   <p>La position d’ancrage peut être le début ou la fin de la sélection. </p>
                   <p>Par exemple, si vous faites glisser la sélection de la position 12 à la position 8, <codeph>selectionAnchorPosition</codeph> devient 12 et <codeph>selectionActivePosition</codeph> devient 8. Lorsque vous appuyez sur la flèche gauche <codeph>selectionActivePosition</codeph> devient 7. </p>
                   <p>La valeur -1 indique « non défini ». </p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
          Détermine si la sélection du texte est mis en surbrillance. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Détermine si la sélection du texte est mise en surbrillance. 
          
          <p>Les valeurs autorisées sont indiquées par la classe TextSelectionHighlighting. Les valeurs possibles sont les suivantes : <codeph>TextSelectionHighlighting.WHEN_FOCUSED</codeph>, <codeph>TextSelectionHighlighting.WHEN_ACTIVE</codeph> et <codeph>TextSelectionHighlighting.toujours</codeph>. </p>
                   <p><codeph>WHEN_FOCUSED</codeph> affiche la sélection du texte uniquement lorsque le composant a le focus du clavier. </p>
          
          <p><codeph>WHEN_ACTIVE</codeph> affiche la sélection du texte du composant chaque fois que la fenêtre est active même si le composant ne dispose pas du focus clavier. </p>
                   <p><codeph>ALWAYS</codeph> affiche la sélection du texte, même si le composant ne dispose pas du focus clavier ou si la fenêtre du composant n’est pas la fenêtre active. </p>
          
          </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#TextSelectionHighlighting"><linktext>spark.components.TextSelectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:showSystemCursor:get"><apiName>showSystemCursor</apiName><shortdesc>
          True si le curseur du système doit toujours être affiché lorsque la souris survole le composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          True si le curseur du système doit toujours être affiché lorsque la souris survole le composant. Si false, le curseur personnalisé s’affiche.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
          TextFlow représentant le texte enrichi affiché par ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
          TextFlow représentant le texte enrichi affiché par ce composant. 
         
          <p>Un objet TextFlow est la classe la plus importante de TFL (Text Layout Framework). C’est la racine d’une arborescence d’objets FlowElement représentant le contenu de texte enrichi. </p>
                   <p>Vous créez habituellement un TextFlow à partir du marquage TLF à l’aide des méthodes <codeph>TextFlowUtil.importFromString()</codeph> ou <codeph>TextFlowUtil.importFromXML()</codeph>. Vous pouvez également utiliser la classe TextConverter de TLF (qui peut importer un sous-ensemble HTML) ou construire une classe TextFlow en y appliquant des méthodes telles que <codeph>addChild()</codeph>. </p>
                   <p>La définition de cette propriété affecte la propriété <codeph>text</codeph> et vice-versa. </p>
                   <p>Si vous définissez la classe <codeph>textFlow</codeph> et obtenez la propriété <codeph>text</codeph>, le texte de chaque paragraphe est séparé par une seule LF (« \n »). </p>
                   <p>Si vous définissez la propriété <codeph>text</codeph> sur une chaîne telle que <codeph>« Hello World »</codeph> et obtenez <codeph>textFlow</codeph>, elle devient un TextFlow contenant un seul ParagraphElement avec un seul SpanElement. </p>
                   <p>Si le texte contient des sauts de ligne explicites, CR (« \r »), LF (« \n ») ou CR+LF (« \r\n »), le contenu est défini sur un composant TextFlow qui contient plusieurs paragraphes, chacun ayant une plage. </p>
                   <p>La définition de cette propriété affecte également la propriété spécifiant la position de défilement du contrôle et la sélection de texte. Il réinitialise les propriétés <codeph>horizontalScrollPosition</codeph> et <codeph>verticalScrollPosition</codeph> sur 0, et définit les propriétés <codeph>selectionAnchorPosition</codeph> et <codeph>selectionActivePosition</codeph> sur -1 pour effacer la sélection. </p>
                   <p>Pour transformer un objet TextFlow en marquage TLF, utilisez le marquage <codeph>TextFlowUtil.exportation()</codeph>. </p>
                   <p>Il est impossible de partager un seul TextFlow entre plusieurs occurrences de RichEditableText. Pour afficher le même texte dans la seconde occurrence, vous devez créer un deuxième TextFlow, soit en utilisant <codeph>TextFlowUtil.exportation()</codeph> et <codeph>TextFlowUtil.importFromXML()</codeph> ou en appliquant la méthode <codeph>deepCopy()</codeph> sur TextFlow. </p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:text:get"><apiName>text</apiName><shortdesc>
          Chaîne de caractères affichée par ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
                   </apiDefaultValue></apiValueDef><apiDesc>
          Chaîne de caractères affichée par ce composant.
                   <p>La définition de cette propriété affecte la propriété <codeph>textFlow</codeph> et vice-versa. </p>
                   <p>Si vous définissez la propriété <codeph>text</codeph> sur une chaîne telle que <codeph>« Hello World »</codeph> et obtenez <codeph>textFlow</codeph>, elle devient un TextFlow contenant un seul ParagraphElement avec un seul SpanElement. </p>
                   <p>Si vous définissez la propriété <codeph>text</codeph> sur null, elle est définie sur la valeur par défaut, une chaîne vide.</p>
         
          <p>Si le texte contient des sauts de ligne explicites, CR (« \r »), LF (« \n ») ou CR+LF (« \r\n »), le contenu est défini sur un composant TextFlow qui contient plusieurs paragraphes, chacun ayant une plage. </p>
                   <p>Si vous définissez la classe <codeph>textFlow</codeph> et obtenez la propriété <codeph>texte</codeph>, le texte de chaque paragraphe est séparé par une seule LF (« \n »). </p>
                   <p>La définition de cette propriété affecte également la propriété spécifiant la position de défilement du contrôle et la sélection de texte. Elle réinitialise les propriétés <codeph>horizontalScrollPosition</codeph> et <codeph>verticalScrollPosition</codeph> sur 0. Depuis Flex 4.6, les propriétés <codeph>selectionAnchorPosition</codeph> et <codeph>selectionActivePosition</codeph> sont conservées. Précédemment, les propriétés <codeph>selectionAnchorPosition</codeph> et <codeph>selectionActivePosition</codeph> étaient définies sur -1 pour effacer la sélection.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:typicalText:get"><apiName>typicalText</apiName><shortdesc>
          Texte qui est utilisé pour déterminer la largeur et la hauteur par défaut du contrôle, sans réellement être affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
                   </apiDefaultValue></apiValueDef><apiDesc>
          Texte qui est utilisé pour déterminer la largeur et la hauteur par défaut du contrôle, sans qu’il soit réellement affiché.
                   <p>Cette propriété sera ignorée si vous spécifiez une largeur explicite, un pourcentage de largeur ou les deux contraintes <codeph>left</codeph> et <codeph>right</codeph>. </p>
                   <p>L’utilisation de cette propriété fait que les propriétés <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> seront ignorées. </p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link><link href="" invalidHref="spark.primitives.widthInChars.xml"><linktext>spark.primitives.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          Nombre de pixels du défilement vertical du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Nombre de pixels du défilement vertical du texte. 
                   <p>Pour faire défiler le texte verticalement, modifiez la position <codeph>verticalScrollPosition</codeph> entre 0 et <codeph>contentHeight - height</codeph>.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
          Largeur par défaut du contrôle, mesurée en unités em.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          Largeur par défaut du contrôle, mesurée en unités em.
                   <p>Un em est une unité de mesure typographiques égale à la taille en points. Il ne s’agit pas nécessairement de la largeur exacte du caractère« M », mais dans la plupart des polices le « M » correspond à environ un em de large. Le style <codeph>fontSize</codeph> du contrôle est utilisé pour calculer l’unité em en pixels. </p>
                   <p>Vous pouvez par exemple, définir cette propriété sur 20 si vous souhaitez que la largeur du composant RichEditableText soit suffisante pour afficher 20 caractères. </p>
                   <p>Si cette propriété est <codeph>NaN</codeph> (valeur par défaut), alors la valeur par défaut de la largeur du composant est déterminée à partir du texte à afficher. </p>
                   <p>Cette propriété sera ignorée si vous spécifiez une largeur explicite, un pourcentage de largeur ou les deux contraintes <codeph>left</codeph> et <codeph>right</codeph>. </p>
                   <p>Cette propriété sera également ignorée si la propriété <codeph>typicalText</codeph> est spécifiée.</p>
         
          <p>La méthode <codeph>measure()</codeph> de RichEditableText utilise <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> pour déterminer <codeph>measuredWidth</codeph> et <codeph>measuredHeight</codeph>. Ces propriétés sont similaires aux propriétés <codeph>cols</codeph> et <codeph>rows</codeph> d’un composant TextArea HTML. </p>
                   <p>Comme la valeur par défaut des propriétés <codeph>widthInChars</codeph> et <codeph>heightInLines</codeph> est <codeph>NaN</codeph>, RichTextEditable « s’autodimensionne » : peu volumineux en l’absence de texte, elle croît en largeur au fur et à mesure de la saisie et croît en hauteur lorsque vous appuyez sur Entrée pour commencer une nouvelle ligne. </p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  La classe TitleWindow étend le conteneur Panel pour inclure un bouton de fermeture et une zone de déplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TitleWindow">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="inactiveWithControlBar" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  Etat d’affichage inactif avec une barre de contrôle visible. 
   </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="inactive" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  Etat d’affichage inactif utilisé pour un composant TitleWindow ou ses enfants lorsqu’ils n’ont pas le focus.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="closeButton" owner="spark.components:TitleWindow" required="false" var_type="spark.components:Button">
<description>
      Partie d’habillage qui définit l’aspect de l’icône de fermeture (un petit x dans le coin supérieur droit de la barre de titre de TitleWindow). Lorsque l’icône de fermeture est sélectionnée, elle distribue un événement <codeph>close</codeph>. 
           <p>Flex ne ferme pas la fenêtre automatiquement. Pour que l’icône de fermeture soit prise en charge, vous devez créer un gestionnaire pour l’événement <codeph>close</codeph> et fermer TitleWindow à partir de ce gestionnaire d’événement. </p>
           <p>Le focus est désactivé pour cette partie d’habillage.</p>
     </description>
	<shortdesc>
      The skin part that defines the appearance of the 
      close icon (a small x in the upper-right corner of the TitleWindow title bar).</shortdesc></SkinPart><SkinPart name="moveArea" owner="spark.components:TitleWindow" required="false" var_type="flash.display:InteractiveObject">
<description>
      Zone où l’utilisateur doit cliquer et faire glisser le pointeur pour déplacer la fenêtre. Par défaut, la zone de déplacement est la barre de titre du conteneur TitleWindow. 
           <p>Pour faire glisser le conteneur TitleWindow, cliquez dans la barre de titre de la fenêtre en maintenant enfoncé le pointeur de la souris, puis déplacez la souris. Créez une classe d’habillage personnalisée pour modifier la zone de déplacement. </p>
     </description>
	<shortdesc>
      The area where the user must click and drag to move the window.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:TitleWindow&gt;
    <strong>Events</strong>
    close="<i>No default</i>"
    windowMove="<i>No default</i>"
    windowMoveEnd="<i>No default</i>"
    windowMoveStart="<i>No default</i>"
    windowMoving="<i>No default</i>"
  &lt;/s:TitleWindow&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TitleWindow étend le conteneur Panel pour inclure un bouton de fermeture et une zone de déplacement.
 
  <p>Le composant TitleWindow est conçu comme une fenêtre contextuelle. Ne créez aucun composant TitleWindow dans MXML en tant que partie d’une application. Vous pouvez créer en revanche un composant MXML personnalisé basé sur la classe TitleWindow, puis utiliser la méthode <codeph>PopUpManager.createPopUp()</codeph> pour faire apparaître le composant et la méthode <codeph>PopUpManager.removePopUp()</codeph> pour supprimer le composant. </p>
  
  <p>Le conteneur TitleWindow présente les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur est suffisamment importante pour contenir tous les enfants dans la zone de contenu à leur hauteur par défaut ou explicite, la barre de titre et la bordure, l’espace vertical entre les enfants, ainsi que les marges supérieure et inférieure du conteneur. La largeur correspond soit à la somme de la largeur par défaut ou explicite de l’enfant le plus large et des marges gauche et droite des bordures du conteneur, soit à la largeur du texte de titre, la valeur la plus grande étant prise en compte.</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.TitleWindowSkin</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext>spark.components.Panel</linktext></link><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext>spark.skins.spark.TitleWindowCloseButtonSkin</linktext></link><link href="" invalidHref="mx.managers.PopUpManager.xml"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><shortdesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris après le glissement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris après le glissement. 
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><shortdesc>
  Distribué après que l’utilisateur a fait glisser la fenêtre. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après que l’utilisateur a fait glisser la fenêtre. 
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><shortdesc>
  Distribué lorsque l’utilisateur fait glisser la fenêtre. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur fait glisser la fenêtre. 
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><shortdesc>
  Distribué lorsque l’utilisateur appuie sur le bouton de la souris dans la zone de déplacement et, tout en le maintenant enfoncé, commence à faire glisser la fenêtre. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur appuie sur le bouton de la souris dans la zone de déplacement et, tout en le maintenant enfoncé, commence à faire glisser la fenêtre. 
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué lorsque l’utilisateur sélectionne le bouton de fermeture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur sélectionne le bouton de fermeture.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TabBar"><apiName>TabBar</apiName><shortdesc>
  La classe TabBar affiche un ensemble de tabulations identiques. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TabBar">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:TabBar" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Définit le rayon des angles supérieurs gauche et droit des boutons TabBar pour l’habillage TabBarButton par défaut. 
   </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:TabBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TabBar
    <b>Styles</b>
    cornerRadius="4"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe TabBar affiche un ensemble de tabulations identiques. Il est possible de sélectionner une tabulation à la fois et la première tabulation est sélectionnée par défaut. La classe TabBarSkin dispose les tabulations sur une seule ligne. Utilisez le style <codeph>cornerRadius</codeph> de TabBar pour configurer le rayon d’arrondi des tabulations. 
 
  <p>Le jeu de tabulations est défini par la propriété <codeph>dataProvider</codeph>. L’aspect de la barre des tâches est défini par la classe TabBarSkin. L’aspect de chaque tabulation est défini par la classe TabBarButtonSkin.</p>
   <p>Vous pouvez utiliser le contrôle TabBar pour définir l’enfant actif d’un conteneur ViewStack, comme l’illustre l’exemple suivant : </p>
   <p><b>Remarque : </b>les contrôles basés sur une liste Spark (la classe Spark ListBase et ses sous-classes, telles que ButtonBar, ComboBox, DropDownList, List et TabBar) ne prennent pas en charge la classe BasicLayout en tant que valeur de la propriété <codeph>layout</codeph>. N’utilisez pas BasicLayout avec les contrôles basés sur une liste Spark. </p>
  
  <pre>
  &lt;s:TabBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
   <p>Le conteneur TabBar présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher les tabulations </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="TabBarExample.mxml"><swfblock conref="examples/TabBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext>spark.skins.spark.TabBarSkin</linktext></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext>spark.skins.spark.TabBarButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  Le composant RadioButton permet à l’utilisateur d’effectuer un choix unique au sein d’un jeu de choix mutuellement exclusifs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:RadioButton" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:RadioButton" playerVersion="Flash10" theme="mobile" type="String">
<description>
  L’orientation de l’icône par rapport à l’étiquette. Les valides MXML valides sont <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> et <codeph>top</codeph>.
 
  <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> et <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButton
    <strong>Properties</strong>
    enabled=""
    group="<i>the automatically created default RadioButtonGroup</i>"
    groupName="radioGroup"
    value="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant RadioButton permet à l’utilisateur d’effectuer un choix unique au sein d’un jeu de choix mutuellement exclusifs. Un groupe RadioButtonGroup se compose de deux composants RadioButton ou plus dont la propriété <codeph>groupName</codeph> est identique. Alors que le regroupement d’occurrences de RadioButton dans un composant RadioButtonGroup est facultatif, un groupe vous permet d’effectuer des choses comme définir un seul gestionnaire d’événement sur un groupe de RadioButtons, plutôt que sur chacun d’entre eux.
 
  <p>Le groupe RadioButton peut faire référence à un groupe créé par la balise <codeph>&lt;s:RadioButtonGroup></codeph>. L’utilisateur sélectionne un seul membre du groupe à la fois. Sélectionner un membre du groupe non sélectionné a pour effet de désélectionner le composant RadioButton actuellement sélectionné dans ce groupe.</p>
 
  <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
 
  <p>Le composant RadioButton possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Suffisamment large pour afficher l’étiquette de texte du composant</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>18 pixels de large et 18 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.RadioButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link><link href="spark.skins.spark.xml#RadioButtonSkin"><linktext>spark.skins.spark.RadioButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RadioButton:enabled:get"><apiName>enabled</apiName><shortdesc>
      Le composant RadioButton est activé si le composant RadioButtonGroup est activé simultanément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Le composant RadioButton est activé si le composant RadioButtonGroup est activé simultanément. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      Spécifie le nom du groupe auquel ce composant RadioButton appartient ou spécifie la valeur de la propriété id d’un composant RadioButtonGroup si ce composant RadioButton fait partie d’un groupe défini par un composant RadioButtonGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"radioGroup"
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le nom du groupe auquel ce composant RadioButton appartient ou spécifie la valeur de la propriété <codeph>id</codeph> d’un composant RadioButtonGroup si ce composant RadioButton fait partie d’un groupe défini par un composant RadioButtonGroup. Tous les boutons radio ayant la même propriété <codeph>groupName</codeph> sont dans le même groupe d’onglets. 
     
      <p>Lors de la création de boutons radio dans un composant RadioButtonGroup, il est préférable d’utiliser propriété <codeph>group</codeph> ou <codeph>groupName</codeph> pour tous les boutons. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/group"><linktext>group</linktext></link><link href="" invalidHref="mx.manager.xml#IFocusManagerGroup/groupName"><linktext>mx.manager.IFocusManagerGroup.groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      Composant RadioButtonGroup auquel appartient ce contrôle RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButtonGroup</apiValueClassifier><apiDefaultValue>the automatically created default RadioButtonGroup
      </apiDefaultValue></apiValueDef><apiDesc>
      Composant RadioButtonGroup auquel appartient ce contrôle RadioButton. Lors de la création de composants RadioButton à ajouter à un RadioButtonGroup, vous devez utiliser la propriété <codeph>group</codeph> ou <codeph>groupName</codeph> pour tous les boutons. 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/groupName"><linktext>groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      Valeur facultative définie par l’utilisateur et associée à un composant RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur facultative définie par l’utilisateur et associée à un composant RadioButton.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
  La classe ButtonBarButton définit le rendu d’élément personnalisé utilisé par le contrôle ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:ToggleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ButtonBarButton définit le rendu d’élément personnalisé utilisé par le contrôle ButtonBar. Ce rendu d’élément est utilisé dans la classe ButtonBarSkin, l’habillage par défaut pour le contrôle ButtonBar. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><adobeApiEvent id="spark.components:ButtonBarButton_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:ButtonBarButton:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ButtonBarButton:allowDeselection:get"><apiName>allowDeselection</apiName><shortdesc>
      Si elle est définie sur true, l’utilisateur clique sur un bouton sélectionné pour le désélectionner. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si elle est définie sur <codeph>true</codeph>, l’utilisateur clique sur un bouton sélectionné pour le désélectionner. Si elle est définie sur <codeph>false</codeph>, l’utilisateur doit sélectionner un autre bouton pour désélectionner le bouton actuellement sélectionné. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:data:get"><apiName>data</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:ButtonBarButton:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      Index de l’élément dans le fournisseur de données du composant hôte du rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Index de l’élément dans le fournisseur de données du composant hôte du rendu d’élément.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:label:get"><apiName>label</apiName><shortdesc>
      
      Chaîne à afficher dans le rendu d'élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      La chaîne à afficher dans l'option de rendu d'élément. 
     
      <p>Le composant hôte de la fonctionnalité de rendu d’élément peut utiliser la méthode <codeph>itemToLabel()</codeph> pour convertir l’élément de données en une chaîne devant être affichée par la fonctionnalité de rendu d’élément. </p>
     
      <p>Pour les contrôles tels que List et ButtonBar, vous pouvez utiliser les propriétés <codeph>labelField</codeph> ou <codeph>labelFunction</codeph> pour spécifier le champ de l’élément de données contenant la chaîne. Dans tous les autres cas, le composant hôte utilise la méthode <codeph>toString()</codeph> pour convertir l’élément de données en chaîne. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Contient true si le rendu d’élément peut s’afficher comme focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si le rendu d’élément peut s’afficher comme focus.  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Panel"><apiName>Panel</apiName><shortdesc>
  La classe Panel définit un conteneur regroupant une barre de titre, une légende, une bordure et une zone destinée à accueillir des enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Panel">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabledWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Etat désactivé avec le composant ControlBar du contrôle Panel
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Etat normal avec le composant ControlBar du contrôle Panel
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Etat désactivé du contrôle Panel
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Etat normal du contrôle Panel
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Contrôle la visibilité de l’ombre portée pour ce composant. 
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Rayon des angles de ce composant. 
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Contrôle la visibilité de la bordure de composant. 
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la bordure de ce composant. 
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de la bordure de ce composant. 
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Partie de l’habillage qui définit l’aspect de la barre de contrôle du conteneur. Par défaut, la classe PanelSkin définit la zone de la barre de contrôle s’affichant au bas de la zone de contenu du conteneur Panel avec un arrière-plan gris.  
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Partie d’habillage définissant l’apparence du texte de titre du conteneur.
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:Panel
   <strong>Properties</strong>
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    title=""
 
   <strong>Styles</strong>
    borderAlpha="0.5"
    borderColor="0"
    borderVisible="true"
    cornerRadius="0"
    dropShadowVisible="true"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/s:Panel&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Panel définit un conteneur regroupant une barre de titre, une légende, une bordure et une zone destinée à accueillir des enfants.
   <p>Le conteneur Panel présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>131 pixels de large et 127 pixels de haut</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="PanelExample.mxml"><swfblock conref="examples/PanelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links><apiConstructor id="spark.components:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Panel:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Ensemble de composants à inclure dans la zone de la barre de contrôle du conteneur Panel. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Ensemble de composants à inclure dans la zone de la barre de contrôle du conteneur Panel. L’emplacement et l’aspect de la zone de la barre de contrôle du conteneur Panel sont déterminés par la classe spark.skins.spark.PanelSkin. Par défaut, la classe PanelSkin définit l’affichage de la zone de la barre de contrôle au bas de la zone de contenu du conteneur Panel avec un arrière-plan gris. Création d’un habillage personnalisé pour modifier l’aspect par défaut de la barre de contrôle. 
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Panel:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      Définit la présentation de la zone de la barre de contrôle du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit la présentation de la zone de la barre de contrôle du conteneur. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      Si la valeur est true, la barre de contrôle est visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la barre de contrôle est visible. L’indicateur n’a aucun effet si aucune valeur n’est définie pour la propriété <codeph>controlBarContent</codeph>. 
           <p><b>Remarque :</b> le conteneur Panel ne surveille pas la propriété <codeph>controlBarGroup</codeph>. Si d’autres éléments de code le rendent invisible, la mise à jour du conteneur Panel peut ne pas s’effectuer correctement. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:title:get"><apiName>title</apiName><shortdesc>
      Titre ou légende affiché(e) dans la barre de titre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Titre ou légende affiché dans la barre de titre. 
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HGroup"><apiName>HGroup</apiName><shortdesc>
  Le conteneur HGroup est une occurrence du conteneur Group utilisant la classe HorizontalLayout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:HGroup
    <strong>Properties</strong>
    columnWidth="no default"
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount="-1"
    requestedMaxColumnCount="-1"
    requestedMinColumnCount="-1"
    variableColumnWidth"true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur HGroup est une occurrence du conteneur Group utilisant la classe HorizontalLayout. Ne modifiez pas la propriété <codeph>layout</codeph>. Utilisez plutôt les propriétés de la classe HGroup pour modifier les caractéristiques de la classe HorizontalLayout.
 
  <p>Le conteneur HGroup présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HGroupExample.mxml"><swfblock conref="examples/HGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#HorizontalLayout"><linktext>spark.layouts.HorizontalLayout</linktext></link></related-links><apiConstructor id="spark.components:HGroup:HGroup"><apiName>HGroup</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. Initialise la propriété <codeph>layout</codeph> sur une occurrence de la classe HorizontalLayout.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="spark.layout.HorizontalLayout.xml"><linktext>spark.layout.HorizontalLayout</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:HGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.HorizontalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMaxColumnCount:get"><apiName>requestedMaxColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:variableColumnWidth:get"><apiName>variableColumnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRendererOwner"><apiName>IItemRendererOwner</apiName><shortdesc>
  L’interface IItemRendererOwner définit l’ensemble d’API de base qu’une classe doit implémenter pour prendre en charge les fonctionnalités de rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IItemRendererOwner définit l’ensemble d’API de base qu’une classe doit implémenter pour prendre en charge les fonctionnalités de rendu d’élément. Une classe qui implémente l’interface IItemRendererOwner est appelée le composant hôte de la fonctionnalité de rendu d’élément.
  
  <p>La classe définissant la fonctionnalité de rendu d’élément doit implémenter l’interface IItemRenderer.</p> 
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link></related-links><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Renvoie la chaîne permettant d’afficher une fonctionnalité de rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La chaîne à afficher dans une option de rendu d'élément.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément de données à afficher.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la chaîne permettant d’afficher une fonctionnalité de rendu d’élément. La chaîne est écrite dans la propriété <codeph>labelText</codeph> de la fonctionnalité de rendu d’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      Met à jour la fonctionnalité de rendu en vue d’une réutilisation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Fonctionnalité de rendu d’élément.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Index des données dans le fournisseur de données.
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet de données que ce rendu d’élément représente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met à jour la fonctionnalité de rendu en vue d’une réutilisation. Cette méthode prépare la fonctionnalité de rendu d’élément pour une réutilisation en effaçant les éventuelles propriétés obsolètes, puis en la mettant à jour en utilisant de nouvelles propriétés.
     
      <p>La dernière opération effectuée par cette méthode doit être de définir la propriété <codeph>data</codeph> sur le rendu d’élément.</p>    
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:FormItem"><apiName>FormItem</apiName><shortdesc>
  Le conteneur FormItem définit les éléments suivants dans un composant Spark Form : un libellé unique. Libellé de séquence. Un ou plusieurs contrôles ou conteneurs enfants. Contenu d’aide fournissant une description de l’élément de formulaire ou des instructions pour le renseigner. Indicateur requis pour indiquer si un élément de formulaire doit être renseigné. Les enfants peuvent être des contrôles ou d’autres conteneurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="errorIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  Spécifie l’image source à utiliser pour l’indicateur d’erreur. La valeur par défaut est assets/ErrorIndicator.png.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="requiredIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  Spécifie l’image source à utiliser pour l’indicateur requis. La valeur par défaut est assets/RequiredIndicator.png.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
       Une référence à l'élément visuel qui affiche cette étiquette FormItem.
     </description>
	<shortdesc>
       A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart><SkinPart name="sequenceLabelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      Une référence à l'élément visuel qui affiche l'étiquette sequenceLabel du FormItem.
     </description>
	<shortdesc>
      A reference to the visual element that displays the FormItem's sequenceLabel.</shortdesc></SkinPart><SkinPart name="helpContentGroup" owner="spark.components:FormItem" required="false" var_type="spark.components:Group">
<description>
      Une référence au groupe qui contient le helpContentGroup du FormItem.
     </description>
	<shortdesc>
      A reference to the Group that contains the FormItem's helpContentGroup.</shortdesc></SkinPart><SkinPart name="errorTextDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      Une référence à l'élément visuel qui affiche les chaînes d'erreur du FormItem.
     </description>
	<shortdesc>
      A reference to the visual element that display the FormItem's error strings.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormItem&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormItem
    <strong>Properties</strong>
    helpContent="null"
    label=""
    required="false"
    sequenceLabel=""
  
    <strong>Common Styles</strong>
    errorIndicatorSource="assets/ErrorIndicator.png"
    requiredIndicatorSource="assets/RequiredIndicator.png"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur FormItem définit les éléments suivants dans un composant Spark Form :
 
  <ul>
    <li>Libellé unique.</li>
    <li>Libellé de séquence.</li>
    <li>Un ou plusieurs contrôles ou conteneurs enfants.</li>
    <li>Contenu d'aide fournissant une description de l'élément de formulaire ou des instructions pour le renseigner.</li>
    <li>Indicateur requis pour indiquer si un élément de formulaire doit être renseigné.</li>
  </ul>
 
  Les enfants peuvent être des contrôles ou d’autres conteneurs. Un même conteneur Form peut contenir plusieurs conteneurs FormItem. Par défaut, tous les éléments FormItem sont organisés dans une présentation horizontale avec le libellé placé sur la gauche et le contenu d’aide sur la droite.
 
  </apiDesc><example conref="FormItemExample.mxml"><swfblock conref="examples/FormItemExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormItemSkin"><linktext>spark.skins.spark.FormItemSkin</linktext></link></related-links><apiConstructor id="spark.components:FormItem:FormItem"><apiName>FormItem</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:FormItem:protected:updateErrorTextDisplay"><apiName>updateErrorTextDisplay</apiName><shortdesc>
      Convertit elementErrorStrings en chaîne et affecte cette chaîne à la partie d’habillage errorTextDisplay pour l’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Convertit <codeph>elementErrorStrings</codeph> en chaîne et affecte cette chaîne à la partie d’habillage <codeph>errorTextDisplay</codeph> pour l’affichage. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:FormItem:elementErrorStrings:get"><apiName>elementErrorStrings</apiName><shortdesc>
      Chaque élément de vecteur contient la chaîne d’erreur d’un élément de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc>
      Chaque élément de vecteur contient la chaîne d'erreur d'un élément de contenu. Si aucun des éléments de contenu n’est non valide, le vecteur est vide. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:helpContent:get"><apiName>helpContent</apiName><shortdesc> 
      L'ensemble de composants à inclure dans le contenu de l'aide du FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="helpContentChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      L'ensemble de composants à inclure dans le contenu de l'aide du FormItem.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:label:get"><apiName>label</apiName><shortdesc>
      Libellé de texte du conteneur FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Libellé de texte du conteneur FormItem. Ainsi, un élément FormItem utilisé pour entrer une adresse peut avoir l’étiquette de Adresse.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:required:get"><apiName>required</apiName><shortdesc>
      Si la valeur est true, place l'habillage du FormItem à l'état requis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="requiredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, place l'habillage du FormItem à l'état <codeph>requis</codeph>. Par défaut, cet état affiche un indicateur signalant que les enfants de l’élément FormItem requièrent une entrée de l’utilisateur. Si la valeur est <codeph>false</codeph>, aucun indicateur ne s’affiche.
     
      <p>Cette propriété contrôle uniquement l'état de l'habillage. Vous devez assigner un validateur à l’enfant si vous souhaitez que la saisie soit validée.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:sequenceLabel:get"><apiName>sequenceLabel</apiName><shortdesc>
      Numéro de l'élément de formulaire dans le formulaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sequenceLabelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de l'élément de formulaire dans le formulaire. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
  La classe SkinnableContainer est la classe de base des conteneurs de contenu visuel dont l’habillage peut être configuré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Alpha des ombres du texte.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Couleur des ombres du texte.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu pour ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur d’arrière-plan d’un composant.
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Niveau alpha de l’arrière-plan de ce composant. Les valeurs possibles sont comprises entre 0.0 et 1.0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="contentGroup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Une partie d'habillage facultative définissant le Groupe dans lequel les enfants de contenu sont placés et mis en forme.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the Group where the content 
      children get pushed into and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableContainer
    <strong>Properties</strong>
    autoLayout="true"
    creationPolicy="auto"
    layout="BasicLayout"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors=""
    backgroundAlpha="1.0"
    backgroundColor="0xFFFFFF"
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="0xE8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
   
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SkinnableContainer est la classe de base des conteneurs de contenu visuel dont l’habillage peut être configuré. Le conteneur SkinnableContainer accepte comme enfants les composants qui implémentent l’interface IVisualElement. Tous les composants Spark et Halo implémentent l’interface IVisualElement, par exemple la classe GraphicElement. Par conséquent, le conteneur peut utiliser comme enfants les classes graphiques telles que Rect et Ellipse.
 
  <p>Pour améliorer les performances et limiter la taille de l’application, vous pouvez utiliser le conteneur Group. L’habillage du conteneur Group ne peut pas être configuré.</p>
 
  <p>Le container SkinnableContainer possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableContainerExample.mxml"><swfblock conref="examples/SkinnableContainerExample.swf"/></example><example conref="MyBorderSkin.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>Group</linktext></link><link href="spark.skins.spark.xml#SkinnableContainerSkin"><linktext>spark.skins.spark.SkinnableContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  Distribué lorsqu’un élément visuel est supprimé de l’espace de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un élément visuel est supprimé de l’espace de contenu. <codeph>event.element</codeph> correspond à l’élément visuel supprimé.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  Distribué lorsqu’un élément visuel est ajouté à l’espace de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un élément visuel est ajouté à l’espace de contenu. <codeph>event.element</codeph> correspond à l’élément visuel ajouté.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  Distribué une fois que le contenu du composant a été créé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué une fois que le contenu du composant a été créé. Grâce à l’instanciation différée, le contenu d’un composant peut être créé longtemps après la création du composant.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableContainer:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Crée des enfants de contenu si la valeur de la propriété creationPolicy n’est pas none.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée des enfants de contenu si la valeur de la propriété <codeph>creationPolicy</codeph> n’est pas <codeph>none</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Créer le contenu de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Créer le contenu de ce composant. Si la valeur de <codeph>creationPolicy</codeph> est <codeph>auto</codeph> ou <codeph>all</codeph>, cette fonction est appelée automatiquement par la structure Flex. Si la valeur de <codeph>creationPolicy</codeph> est <codeph>none</codeph>, vous pouvez appeler cette méthode pour initialiser le contenu.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      
      Appelée lorsqu’une partie d’habillage est ajoutée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Occurrence de la partie. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée lorsqu’une partie d’habillage est ajoutée. Vous n’appelez pas cette méthode directement. Dans le cas des parties statiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>attachSkin()</codeph>. Dans le cas des parties dynamiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>createDynamicPartInstance()</codeph>. 
     
      <p>Remplacez cette fonction pour associer un comportement à la partie. Si vous souhaitez remplacer le comportement pour une partie d’habillage héritée d’une classe de base, n’appelez pas la méthode <codeph>super.partAdded()</codeph>. Dans tous les autres cas, vous devez toujours appeler la méthode <codeph>super.partAdded()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      Appelée lorsqu’une occurrence de partie d’habillage est supprimée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Nom de la partie.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Occurrence de la partie. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée lorsqu’une occurrence de partie d’habillage est supprimée. Vous n’appelez pas cette méthode directement. Dans le cas des parties statiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>detachSkin()</codeph>. Dans le cas des parties dynamiques, Flex l’appelle automatiquement lors de l’appel de la méthode <codeph>removeDynamicPartInstance()</codeph>. 
     
      <p>Remplacez cette fonction pour supprimer le comportement de la partie.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SkinnableContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      Contient true si le contenu différé a été créé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient <codeph>true</codeph> si le contenu différé a été créé. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContentFactory:set"><apiName>mxmlContentFactory</apiName><shortdesc>
      Objet de fabrique qui crée la valeur initiale de la propriété content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IDeferredInstance"/></apiValueDef><apiDesc>
      Objet de fabrique qui crée la valeur initiale de la propriété <codeph>content</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc conref="spark.components.Group#mxmlContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc conref="spark.components.Group#mxmlContent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichText"><apiName>RichText</apiName><shortdesc>
  RichText est un composant UIComponent de faible niveau qui peut afficher une ou plusieurs lignes de texte à la mise en forme riche et des images incorporées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style inherit="no" name="columnWidth" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Largeur de colonne en pixels.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.columnWidth.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Valeur de l’espace de gouttière, en pixels, à laisser entre les colonnes.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.columnGap.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Nombre de colonnes de texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.columnCount.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichText" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Alignement vertical ou justification. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Encart supérieur en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Encart droit en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Encart gauche en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Encart inférieur en pixels.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Contrôle le retour à la ligne des mots dans le conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichText" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichText" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RichText&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RichText
    <strong>Properties</strong>
    fontContext="<i>IFlexModuleFactory</i>"
    luminosityClip="false"
    luminosityInvert="false"
    maskType="MaskType.CLIP"
    textFlow="<i>TextFlow</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichText est un composant UIComponent de niveau inférieur qui peut afficher une ou plusieurs lignes de texte à la mise en forme riche et des images incorporées. 
 
  <p>Pour des raisons de performances, il ne prend pas en charge défilement, la sélection, la modification, les hyperliens cliquables ou les images chargées à partir d’URL. Si vous avez besoin de ces fonctionnalités, consultez la classe RichEditableText. </p>
 
  <p>RichText utilise la bibliothèque Text Layout Framework (TLF), qui repose elle-même sur le nouveau moteur Flash Text Engine (FTE) de Flash Player 10. Associés, ils assurent la mise en forme de texte enrichi à l’aide d’une typographie internationale haute qualité. </p>
 
  <p>L’architecture Spark fournit trois « primitives » de texte : Label, RichText et RichEditableText. Label est la plus rapide et la plus légère, car elle utilise uniquement FTE, et pas TLF. Mais elle est limitée dans ses capacités : aucun texte enrichi, aucun défilement, aucune sélection et aucune modification. RichText ajoute la possibilité de lire du texte à la présentation complexe, mais n’est absolument pas interactive. RichEditableText est la plus lourde, mais tire le meilleur parti de la technologie TLF. Vous devez utiliser la primitive la plus légère adaptée à vos besoins. </p>
 
  <p>RichText est similaire à la classe control mx.controls.Text MX. Le contrôle Text utilise l’ancienne classe TextField, au lieu de TLF, pour afficher du texte. </p>
 
  <p>Les principales différences entre RichText et Text sont les suivantes : 
  <ul>
    <li>RichText offre des fonctionnalités typographiques et de présentation de texte optimisées, ainsi qu’une meilleure prise en charge des langues internationales. </li>
    <li>RichText a un modèle d’affichage orienté objet, ce qui n’est pas le cas de Text. </li>
    <li>Text est sélectionnable, alors que RichText ne prend pas en charge la sélection. </li>
  </ul></p>
 
  <p>RichText utilise le modèle de texte enrichi orienté objet TLF, dans lequel les éléments de présentation de texte, tels que les divisions, les paragraphes, les étendues, les hyperliens, et les images sont représentés à l’exécution par des objets ActionScript. TextFlow est l’objet central de TLF permettant de représenter le texte enrichi. Vous pouvez spécifier l’affichage du texte enrichi dans RichText en définissant sa propriété <codeph>textFlow</codeph> sur une occurrence TextFlow. (Consultez la description de la propriété <codeph>textFlow</codeph> pour plus d’informations sur sa création.) Vous pouvez également définir la propriété <codeph>text</codeph> qui est héritée de TextBase, mais si vous n’avez pas besoin de la richesse de TextFlow, envisagez l’utilisation de Label. </p>
 
  <p>Lors de la compilation, vous pouvez placer des balises de marquage TLF dans la balise RichText, comme l’illustre l’exemple suivant : 
  <pre>
  &lt;s:RichText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichText>
  </pre>
  Dans cet exemple, le compilateur MXML définit la propriété <codeph>content</codeph>, ce qui entraîne la création d’un objet TextFlow à partir de l’élément FlowElements spécifié. </p>
 
  <p>Le formatage de texte par défaut est déterminé par des styles CSS, par exemple <codeph>fontFamily</codeph> et <codeph>fontSize</codeph>. Les informations de formatage de l’objet TextFlow remplacent le formatage par défaut fourni par les styles CSS. </p>
 
  <p>Vous pouvez contrôler l’espacement entre les lignes l’aide du style <codeph>lineHeight</codeph> et l’espacement entre les paragraphes avec les styles <codeph>paragraphSpaceBefore</codeph> et <codeph>paragraphSpaceAfter</codeph>. Vous pouvez aligner ou justifier le texte à l’aide des styles <codeph>textAlign</codeph> et <codeph>textAlignLast</codeph>. Vous pouvez mettre le texte en retrait à partir des bords du composant de l’aide des styles <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> et <codeph>paddingBottom</codeph>. </p>
 
  <p>Si vous ne spécifiez aucun type de largeur pour RichText, la ligne la plus longue, tel que déterminée par ces sauts de ligne explicites, détermine la largeur de Label. </p>
 
  <p>Lorsque vous spécifiez une largeur, le texte revient à la ligne sur le bord droit du composant et le texte est écrêté s’il dépasse du conteneur. Si vous définissez le style <codeph>lineBreak</codeph> sur <codeph>explicit</codeph>, les nouvelles lignes commencent uniquement aux sauts de lignes explicites, si vous utilisez CR (<codeph>\r)</codeph>), LF (<codeph>\n</codeph>) ou CR+LF (<codeph>\r\n</codeph>) dans <codeph>text</codeph> ou si vous utilisez <codeph>&lt;p></codeph> et <codeph>&lt;br /></codeph> dans le marquage TLF. Dans ce cas, les lignes plus larges que le contrôle sont écrêtées. </p>
 
  <p>Si votre texte dépasse l’espace d’affichage, RichText permet de le tronquer. La troncature de texte signifie le remplacement du texte superflu à l’aide d’un indicateur de troncature, tel que « ... ». Consultez les propriétés héritées <codeph>maxDisplayedLines</codeph> et <codeph>isTruncated</codeph>. </p>
 
  <p>Par défaut, RichText n’a aucun arrière-plan, mais vous pouvez en tracer un en utilisant les styles <codeph>backgroundColor</codeph> et <codeph>backgroundAlpha</codeph>. Bordures non prises en charge. Si vous avez besoin d’une bordure ou d’un arrière-plan plus complexe, utilisez un autre élément graphique, tel qu’un Rect, derrière le RichText. </p>
 
  <p>Etant donné que RichText utilise TLF, il prend en charge l’affichage du texte rédigé de gauche à droite (LTR), par exemple, en français, de droite à gauche (RTL), comme en arabe, et du texte bidirectionnel, par exemple une phrase française au sein d’une phrase arabe. Si le sens du texte prédominant est de droite à gauche, définissez le style <codeph>direction</codeph> sur <codeph>rtl</codeph>. Par défaut, le style <codeph>textAlign</codeph> pour la valeur <codeph>"start"</codeph>, ce qui aligne le texte à gauche lorsque <codeph>direction</codeph> est définie sur <codeph>ltr</codeph> et à droite lorsque <codeph>direction</codeph> est définie sur <codeph>rtl</codeph>. Pour obtenir l’alignement inverse, définissez <codeph>textAlign</codeph> sur <codeph>end</codeph>. </p>
 
  <p>RichText utilise les classes TextFlowTextLineFactory et StringTextFlowFactory de TLF pour créer un ou plusieurs objets TextLine pour afficher statiquement son texte. Pour des performances accrues, ses objets TextLines créés ne contiennent pas d’informations sur les différents glyphes. Pour plus d’informations, consultez la classe TextLineValidity. </p>
 
  <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
  
  </apiDesc><example conref="RichTextExample.mxml"><swfblock conref="examples/RichTextExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="flash.text.engine.TextLineValidity.xml"><linktext>flash.text.engine.TextLineValidity</linktext></link></related-links><apiConstructor id="spark.components:RichText:RichText"><apiName>RichText</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RichText:content:get"><apiName>content</apiName><shortdesc>
      Cette propriété est conçue pour une utilisation dans MXML au moment de la compilation. pour obtenir ou définir du contenu de texte enrichi à l’exécution, utilisez la propriété textFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Cette propriété est conçue pour une utilisation dans MXML au moment de la compilation. pour obtenir ou définir du contenu de texte enrichi à l’exécution, utilisez la propriété <codeph>textFlow</codeph>. 
     
      <p>La propriété <codeph>content</codeph>, la propriété par défaut pour TextArea, vous permet d’écrire au format MXML
      <pre>
      &lt;s:RichText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichText>
      </pre>
      et possède des éléments String et SpanElement que vous pouvez spécifier en tant que contenu à utiliser pour créer un objet TextFlow. </p>
     
      <p>Cette propriété est typée sous forme d’objet car vous pouvez la définir en tant que chaîne, FlowElement ou tableau de chaînes et FlowElements. Dans l’exemple ci-dessus, le contenu spécifié est un tableau à deux éléments dont le premier est la chaîne « hello » et dont la deuxième est un élément SpanElement avec le texte « World » en gras. </p>
     
      <p>Quelle que soit la manière dont vous spécifiez le contenu, il est converti en TextFlow et lorsque vous obtenez cette propriété, vous obtenez le résultat TextFlow. </p>
     
      <p>Adobe recommande d’utiliser la propriété <codeph>textFlow</codeph> pour obtenir et définir le contenu de texte à l’exécution, car il est de type TextFlow plutôt que qu’Object. Un objet TextFlow est la représentation canonique du contenu de texte enrichi dans Text Layout Framework. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      Propriété qui contrôle si le masque de luminosité écrête le contenu masqué. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Propriété qui contrôle si le masque de luminosité écrête le contenu masqué. Cette propriété a un effet uniquement si un masque de type <codeph>MaskType.LUMINOSITY</codeph> a été appliqué à l’élément graphique.   
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      Une propriété qui contrôle le calcul de la valeur de couleur RVB d’un élément graphique masqué par un masque de luminosité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Une propriété qui contrôle le calcul de la valeur de couleur RVB d’un élément graphique masqué par un masque de luminosité. Si elle est définie sur true, la valeur de couleur RVB d’un pixel dans le contenu source est inversée et multipliée par la région correspondante dans le masque. Si elle est définie sur false, la valeur de couleur RVB d’un pixel dans le contenu source est utilisée directement.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:maskType:get"><apiName>maskType</apiName><shortdesc>
      Le maskType définit la façon dont le masque est appliqué au composant. Les valeurs possibles sont MaskType.CLIP, MaskType.ALPHA et MaskType.LUMINOSITY. Masquage d’écrêtage : lors d’un masquage en mode écrêtage, un masque d’écrêtage est réduit à 1 bit. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>Le maskType définit la façon dont le masque est appliqué au composant. </p> 
     
      <p>Les valeurs possibles sont <codeph>MaskType.CLIP</codeph>, <codeph>MaskType.ALPHA</codeph> et <codeph>MaskType.LUMINOSITY</codeph>. </p>  
     
      <p><b>Masquage d’écrêtage </b></p>
     
      <p>Lors d’un masquage en mode écrêtage, un masque d’écrêtage est réduit à 1 bit. Cela signifie qu’un masque n’affecte pas l’opacité d’un pixel dans le contenu source ; il ne modifie pas la valeur, si le pixel correspondant dans le masque possède une valeur alpha autre que zéro ou le rend complètement transparent, si la valeur alpha du pixel du masque est égale à zéro. </p>
     
      <p>Lors de l’utilisation du masquage d’écrêtage, seul le chemin actuel ainsi que les vecteurs et les remplissages de forme définis par le masque sont utilisés pour déterminer l’effet sur le contenu source. Les traits et les filtres de bitmap définis sur le masque sont ignorés. Toute zone remplie du masque est considérée comme étant remplie et applique ce rendu au contenu source. Le type et les paramètres du remplissage ne sont pas pertinents ; une couleur en aplat, de dégradé ou un remplissage bitmap dans un masque s’appliquent au contenu source sous-jacent, quelles que soient les valeurs alpha du remplissage de masque. </p>
      
      <p>Les objets BitmapGraphics sont traités comme des rectangles remplis de bitmaps lorsqu’ils sont utilisés dans un masque d’écrêtage. Par conséquent, la couche alpha du bitmap source n’est pas pertinente lorsqu’une partie d’un masque, le bitmap, affecte le masque de la même manière qu’un rectangle au remplissage uniforme de dimensions équivalentes. </p>
     
      <p><b>Masquage alpha </b></p>
     
      <p>En mode alpha, l’opacité de chaque pixel du contenu source est multipliée par l’opacité de la région correspondante du masque. Par exemple, un pixel du contenu source d’une opacité de 1 qui est masqué par une région d’opacité de .5 produira une opacité de .5. Un pixel source d’une opacité de .8 masqué par une région d’une opacité de .5 affichera une opacité de .4. </p>
     
      <p>Conceptuellement parlant, le masquage alpha équivaut à restituer le masque et le contenu source transformés en surfaces RVBA distinctes et à multiplier la couche alpha du contenu du masque avec la couche alpha du contenu source. Tout le contenu du masque est rendu dans sa surface avant la composition dans la surface du contenu source. Par conséquent, tous les fonctionnalités FXG, comme les traits, les filtres de bitmap et l’opacité de remplissage affecte la composition finale du contenu. </p>
     
      <p>Lorsque vous êtes en mode alpha, la composition de la couche alpha des données bitmap est effectuée normalement dans la couche alpha du masque et influe sur le rendu final du contenu. Cela est valable pour les chemins et les formes remplies de bitmaps BitmapGraphics. </p>
     
      <p><b>Masquage de luminosité</b></p>
     
      <p>Un masque de luminosité, parfois appelé « masque léger », fonctionne de manière analogue à un masque alpha, sauf que l’opacité et la valeur de couleur RVB d’un pixel dans le contenu source sont multipliées par l’opacité et la valeur de couleur RVB de la région correspondante dans le masque. </p>
     
      <p>Conceptuellement parlant, le masquage de luminosité équivaut à restituer le masque et le contenu source transformés en surfaces RVBA distinctes et à multiplier la couche alpha et la valeur de couleur RVB du contenu du masque avec la couche alpha et la valeur de couleur RVB du contenu source. Tout le contenu du masque est rendu dans sa surface avant la composition dans la surface du contenu source. Par conséquent, tous les fonctionnalités FXG, comme les traits, les filtres de bitmap et l’opacité de remplissage affecte la composition finale du contenu. </p>
     
      <p>Le masquage de luminosité n’est pas une fonctionnalité native de Flash, mais est disponible dans des outils Adobe Creative Suite tels qu’Adobe Illustrator et Adobe Photoshop. Pour obtenir l’effet visuel d’un masque de luminosité dans le contenu rendu par Flash, un élément graphique spécifiant un masque de luminosité instancie en fait un filtre Shader qui simule l’aspect visuel d’un masque de luminosité tel qu’il est rendu dans les outils Adobe Creative Suite. </p>
     
      <p>Les objets masqués par des masques de luminosité peuvent définir des propriétés pour contrôler la valeur de couleur RVB et l’écrêtage du masque. Voir les attributs de luminosityInvert et luminosityClip. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      TextFlow représentant le texte enrichi affiché par ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      TextFlow représentant le texte enrichi affiché par ce composant. 
     
      <p>Un objet TextFlow est la classe la plus importante de TFL (Text Layout Framework). C’est la racine d’une arborescence d’objets FlowElement représentant le contenu de texte enrichi. </p>
     
      <p>Vous créez habituellement un TextFlow à partir du marquage TLF à l’aide des méthodes <codeph>TextFlowUtil.importFromString()</codeph> ou <codeph>TextFlowUtil.importFromXML()</codeph>. Vous pouvez également utiliser la classe TextConverter de TLF (qui peut importer un sous-ensemble HTML) ou construire une classe TextFlow en y appliquant des méthodes telles que <codeph>addChild()</codeph>. </p>
     
      <p>La définition de cette propriété affecte la propriété <codeph>text</codeph> et vice-versa. </p>
     
      <p>Si vous définissez la classe <codeph>textFlow</codeph> et obtenez la propriété <codeph>text</codeph>, le texte de chaque paragraphe est séparé par une seule LF (<codeph>\n</codeph>). </p>
     
      <p>Si vous définissez la propriété <codeph>text</codeph> sur une chaîne telle que <codeph>« Hello World »</codeph> et obtenez <codeph>textFlow</codeph>, elle devient un TextFlow contenant un seul ParagraphElement avec un seul SpanElement. </p>
     
      <p>Si le texte contient des sauts de ligne explicites, CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) ou CR+LF (<codeph>\r\n</codeph>), le contenu est défini sur un composant TextFlow qui contient plusieurs paragraphes, chacun ayant une plage. </p>
     
      <p>Pour transformer un objet TextFlow en balisage TLF, utilisez le balisage renvoyé par la méthode <codeph>TextFlowUtil.exportation()</codeph>. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
  La classe SkinnableDataContainer est la classe conteneur de base des éléments de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="focusThickness" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  Epaisseur du contour du rectangle de focus, en pixels.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Couleur de l’anneau de sélection lorsque le composant a le focus.
 
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’anneau de focus de ce composant. 
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataGroup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" required="false" var_type="spark.components:DataGroup">
<description>
      Une partie d'habillage facultative définissant le DataGroup de la classe d'habillage dans laquelle les éléments de données sont placés, rendus et mis en forme.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the DataGroup in the skin class 
      where data items get pushed into, rendered, and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableDataContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableDataContainer
    <strong>Properties</strong>
    autoLayout="true"
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    layout="VerticalLayout"
    typicalItem="null"
  
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontal_stem"
    color="0"
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    focusAlpha="0.55"
    focusColor=""
    focusThickness="2"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textJustify="inter_word"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SkinnableDataContainer est la classe conteneur de base des éléments de données. La classe SkinnableDataContainer convertit des éléments de données en éléments visuels, en vue de leur affichage. Même si ce conteneur peut contenir des éléments visuels, il est en général utilisé uniquement pour stocker des éléments de données en tant qu’enfants.
 
  <p>La classe prend comme enfants des éléments de données ou des éléments visuels qui implémentent l’interface et sont des objets d’affichage. Les éléments de données peuvent être des éléments de données simples tels que des objets String ou Number, ou des éléments de données plus complexes tels que des objets Object ou XMLNode. Même si ces conteneurs peuvent contenir des éléments visuels, ils sont en général utilisés uniquement pour stocker des éléments de données en tant qu’enfants.</p>
 
  <p>Une fonctionnalité de rendu d’élément définit la représentation visuelle de l’élément de données dans le conteneur. La fonctionnalité de rendu d’élément convertit l’élément de données dans un format qui peut être affiché par le conteneur. Vous devez transmettre un rendu d’élément pour une classe SkinnableDataContainer pour procéder au rendu des données éléments correctement. </p>
 
  <p>Si vous souhaitez qu’un conteneur d’éléments de données et qu’un habillage n’est pas nécessaire, il est recommandé d’utiliser une classe DataGroup (qui ne peut pas être habillée) pour améliorer les performances et la taille de l’application. </p>
 
  <p>Le conteneur SkinnableDataContainer présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableDataContainerExample.mxml"><swfblock conref="examples/SkinnableDataContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.components.xml#DataGroup"><linktext>DataGroup</linktext></link><link href="spark.skins.spark.xml#SkinnableDataContainerSkin"><linktext>spark.skins.spark.SkinnableDataContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  Distribué lorsque le rendu est supprimé du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le rendu est supprimé du conteneur. La propriété <codeph>event.renderer</codeph> contient la fonction de rendu qui a été supprimée. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  Distribué lorsque le rendu est ajouté au conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le rendu est ajouté au conteneur. La propriété <codeph>event.renderer</codeph> contient la fonction de rendu qui a été ajoutée. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableDataContainer:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableDataContainer:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      A partir de l’élément de données spécifié, renvoyez la représentation sous forme de chaîne de l’élément de données pour un rendu d’élément à afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Représentation sous forme de chaîne de l’élément de données. 
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément de données. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      A partir de l’élément de données spécifié, renvoyez la représentation String de l’élément de données pour un rendu d’élément à afficher. Cette méthode utilise la méthode <codeph>méthode toString()</codeph> de l’élément de données pour le convertir en représentation sous forme de chaîne. Un élément de données null renvoie une chaîne vide. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableDataContainer:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      Met à jour un rendu d’élément à des fins d’utilisation ou de réutilisation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>La fonction de rendu en cours de mise à jour. 
      
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Index de l’élément de données dans le fournisseur de données. 
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet de données que ce rendu d’élément représente. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met à jour un rendu d’élément à des fins d’utilisation ou de réutilisation. Lorsqu’un rendu d’élément est créé ou recyclé en raison d’une virtualisation, cette occurrence SkinnableDataContainer peut définir les propriétés <codeph>label</codeph> et <codeph>owner</codeph> du rendu d’élément.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableDataContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnableDataContainer/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#SkinnableDataContainer/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc conref="spark.components.DataGroup#itemRendererFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRendererFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.DataGroup#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRenderer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>VerticalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.DataGroup#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.components.DataGroup#typicalItem">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Scroller"><apiName>Scroller</apiName><shortdesc>
  Le composant Scroller affiche un unique composant appelé fenêtre, qui peut faire l’objet d’un défilement, ainsi que des barres de défilement horizontale et verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="viewport"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Indique dans quelles conditions la barre de défilement verticale doit s’afficher.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> (« on ») : la barre de défilement est toujours affichée.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> (« off ») : la barre de défilement n’est jamais affichée. La fenêtre peut toujours faire l’objet d’un défilement par programmation, en définissant sa propriété verticalScrollPosition.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> (« auto ») : la barre de défilement est affichée lorsque la valeur contentHeight de la fenêtre est supérieure à sa hauteur.
  </li>
  </ul>
 
  <p>
  La stratégie de défilement influe sur la taille mesurée du composant Scroller.
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:Scroller" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveScrolling" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description>
  Proxy pour le style <codeph>liveDragging</codeph> des barres de défilement utilisé par le composant Scroller.   
 
  <p>Si ce style est défini sur <codeph>true</codeph>, alors les styles <codeph>liveDragging</codeph> sont définis sur <codeph>true</codeph> (valeur par défaut). Cela signifie que le déplacement d’un curseur de défilement met à jour immédiatement la position de défilement de la fenêtre. Si ce style est défini sur <codeph>false</codeph>, alors les styles <codeph>liveDragging</codeph> sont définis sur <codeph>false</codeph>. Cela signifie que lors du déplacement d’un curseur de défilement, la position de défilement de la fenêtre est uniquement mise à jour lorsque le bouton de la souris est relâché.</p>
 
  <p>La définition de ce style sur la valeur <codeph>false</codeph> peut s’avérer utile lorsque la mise à jour de l’affichage de la fenêtre utilise tellement de ressources que le style « liveDragging » s’exécute mal.</p> 
  
  <p>Par défaut, ce style a la valeur <codeph>undefined</codeph>, ce qui signifie que les styles <codeph>liveDragging</codeph> ne sont pas modifiés.</p>
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Indique dans quelles conditions la barre de défilement horizontale doit s’afficher.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> (« on ») : la barre de défilement est toujours affichée.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> (« off ») : la barre de défilement n’est jamais affichée. La fenêtre peut toujours faire l’objet d’un défilement par programmation, en définissant sa propriété horizontalScrollPosition.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> (« auto ») : la barre de défilement est affichée lorsque la valeur contentWidth de la fenêtre est supérieure à sa largeur. 
  </li>
  </ul>
 
  <p>
  La stratégie de défilement influe sur la taille mesurée du composant Scroller.
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu pour ce composant. 
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé mais n’a pas le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est désactivé.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte lorsque le composant est activé et a le focus.
  
  <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:Scroller" playerVersion="Flash10.5" type="Object">
<description>
  Spécifie l'espacement entre les mots à utiliser lors de la justification. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Détermine le nombre de degrés de rotation de ce texte. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur.
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textIndent et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Spécifie les taquets de tabulation associés au paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé au début du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser avant le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Quantité d’espace à laisser après le paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Valeur de retrait du bord situé à l'extrémité du paragraphe.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Contrôle l'apparence des éléments dans une liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Contrôle le placement d'un marqueur d'élément de liste par rapport à l'élément de liste.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Cela spécifie un retrait automatique pour le bord de début des listes, lorsque la valeur d’espacement de la liste de ce côté est <codeph>auto</codeph>.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Spécifie la position de la ligne de base de la première ligne du conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Contrôle la manière dont le texte enveloppe un élément flottant.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes.  
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Spécifie la progression verticale ou horizontale du positionnement de la ligne. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Scroller/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Scroller/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Scroller/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Scroller/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="horizontalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.HScrollBar" var_type="mx.core:IFactory">
<description>
      Partie d’habillage qui définit le composant de barre de défilement horizontale. La partie d’habillage <codeph>horizontalScrollBar</codeph> est prioritaire par rapport à cette partie d’habillage. Lorsque Scroller crée une instance de cette partie, il définit la partie d’habillage <codeph>horizontalScrollBar</codeph> sur cette instance. Cette propriété doit être considérée comme étant en lecture seule. Elle est uniquement définie par l’habillage du composant Scroller. <codeph/>
     </description>
	<shortdesc>
      A skin part that defines the horizontal scroll bar component.</shortdesc></SkinPart><SkinPart name="verticalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.VScrollBar" var_type="mx.core:IFactory">
<description>
      Partie d’habillage qui définit la barre de défilement verticale. La partie d’habillage <codeph>verticalScrollBar</codeph> est prioritaire par rapport à cette partie d’habillage. Lorsque Scroller crée une instance de cette partie, il définit la partie d’habillage <codeph>verticalScrollBar</codeph> sur cette instance. Cette propriété doit être considérée comme étant en lecture seule. Elle est uniquement définie par l’habillage du composant Scroller. <codeph/>
     </description>
	<shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart><SkinPart name="horizontalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:HScrollBar">
<description>
      Partie d’habillage qui définit la barre de défilement horizontale. Cette propriété doit être considérée comme étant en lecture seule. Elle est uniquement définie par l’habillage du composant Scroller. Cette propriété peut être liée.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the horizontal scroll bar.</shortdesc></SkinPart><SkinPart name="verticalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:VScrollBar">
<description>
      Partie d’habillage qui définit la barre de défilement verticale. Cette propriété doit être considérée comme étant en lecture seule. Elle est uniquement définie par l’habillage du composant Scroller. Cette propriété peut être liée.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Scroller&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Scroller
   <strong>Properties</strong>
    measuredSizeIncludesScrollBars="true"
    minViewportInset="0"
    viewport="null"
  
    <strong>Styles</strong>
    alignmentBaseline="use_dominant_baseline"
    alternatingItemColors=""
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    horizontalScrollPolicy="auto"
    inactiveTextSelection=""
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant Scroller affiche un unique composant appelé fenêtre, qui peut faire l’objet d’un défilement, ainsi que des barres de défilement horizontale et verticale. La fenêtre doit implémenter l’interface IViewport. Son habillage doit être une dérivée de la classe Group. 
   <p>Les composants Spark Group, DataGroup et RichEditableText implémentent l’interface IViewport et peuvent être utilisés comme enfants du contrôle Scroller, comme l’illustre l’exemple suivant : </p>
 
  <pre>
  &lt;s:Scroller width="100" height="100">
       &lt;s:Group> 
          &lt;mx:Image width="300" height="400" 
               source="@Embed(source='assets/logo.jpg')"/> 
       &lt;/s:Group>        
  &lt;/s:Scroller></pre>     
   <p>La taille du contrôle Image est défini comme étant supérieure à celle de son conteneur Group parent. Par défaut, l’enfant dépasse les limites du conteneur parent. Plutôt que de permettre à l’enfant de s’étendre au-delà des limites du conteneur parent, le contrôle Scroller signifie l’écrêtage de l’enfant en fonction des limites et l’affichage de barres de défilement. </p>
   <p>Tous les conteneurs Spark n’implémentent pas l’interface IViewPort. Par conséquent, ces conteneurs, tels que BorderContainer et SkinnableContainer, ne peuvent pas être utilisés comme enfant direct du composant Scroller. Toutefois, tous les conteneurs Spark peuvent avoir un composant Scroller comme composant enfant. Par exemple, pour utiliser des barres de défilement sur un enfant du conteneur BorderContainer Spark, enveloppez l’enfant dans un composant Scroller. </p>
   <p>Pour assurer le défilement de l’intégralité du conteneur BorderContainer, enveloppez-le dans un conteneur Group. Ensuite, transformez le conteneur Group en enfant du composant Scroller. Pour les conteneurs Spark habillables qui n’implémentent pas l’interface IViewport, vous pouvez également créer un habillage personnalisé pour le conteneur incluant le composant Scroller.  </p>
 
  <p>L’interface IViewport définit une fenêtre d’affichage pour les composants qui l’implémentent. Une fenêtre est un jeu partiel rectangulaire de la zone d’un conteneur que vous souhaitez afficher au lieu d’afficher le conteneur entier. Les barres de défilement contrôlent les propriétés <codeph>horizontalScrollPosition</codeph> et <codeph>verticalScrollPosition</codeph> de la fenêtre. Grâce aux barres de défilement, il est possible d’afficher la zone définie par les propriétés <codeph>contentWidth</codeph> et <codeph>contentHeight</codeph> de la fenêtre.</p>
   <p><codeph/> <codeph/><codeph/></p>
   <p><codeph/><codeph/></p>
   <p>Vous pouvez combiner des barres de défilement explicites pour la fenêtre du conteneur. Les paramètres de fenêtre déterminent la position initiale de la fenêtre. Vous pouvez ensuite utiliser les barres de défilement pour la déplacer, comme l’illustre l’exemple suivant :  </p>
  
  <pre>
  &lt;s:Scroller width="100" height="100">
      &lt;s:Group
          horizontalScrollPosition="50" verticalScrollPosition="50"> 
          &lt;mx:Image width="300" height="400" 
              source="@Embed(source='assets/logo.jpg')"/> 
      &lt;/s:Group>                 
  &lt;/s:Scroller></pre>
 
  <p>Les barres de défilement sont affichées en fonction de la stratégie des barres de défilement horizontale et verticale, dont la valeur peut être <codeph>auto</codeph>, <codeph>on</codeph> ou <codeph>off</codeph>. La stratégie <codeph>auto</codeph> signifie que la barre de défilement est visible et apparaît dans la présentation lorsque le contenu de la fenêtre est plus grand que la fenêtre elle-même.</p>
 
  <p>La présentation de l’habillage Scroller n’est pas modifiable. Elle est définie de manière inconditionnelle sur une implémentation de présentation privée qui gère les stratégies de défilement. Les habillages de composant Scroller peuvent uniquement fournir des barres de défilement de remplacement. Pour contrôler de façon plus approfondie la présentation d’une fenêtre et de ses barres de défilement, au lieu d’utiliser un composant Scroller, ajoutez ces éléments à un objet <codeph>Group</codeph> et utilisez la propriété <codeph>viewport</codeph> de la barre de défilement pour les associer.</p>
   <p>Le contrôle Scroller possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>0</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.ScrollerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ScrollerExample.mxml"><swfblock conref="examples/ScrollerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Scroller_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Distribué lorsque la position de défilement s’apprête à être modifiée en raison d’un événement mouseWheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la position de défilement s’apprête à être modifiée en raison d’un événement <codeph>mouseWheel</codeph>.
  
  <p>S’il existe une classe verticalScrollBar visible, la fenêtre fait par défaut l’objet d’un défilement vertical par « étapes » <codeph>event.delta</codeph>. La hauteur de l’étape est déterminée par la méthode <codeph>getVerticalScrollPositionDelta</codeph> de la fenêtre utilisant soit <codeph>UP</codeph>, soit <codeph>DOWN</codeph>, en fonction de la direction du défilement.</p>
   <p>Sinon, s’il existe une classe horizontalScrollBar visible, la fenêtre fait par défaut l’objet d’un défilement horizontal par « étapes » <codeph>event.delta</codeph>. La largeur de l’étape est déterminée par la méthode <codeph>getHorizontalScrollPositionDelta</codeph> de la fenêtre utilisant soit <codeph>LEFT</codeph>, soit <codeph>RIGHT</codeph>, en fonction de la direction du défilement.</p>
   <p>L’appel de la méthode <codeph>preventDefault()</codeph> sur l’événement empêche la modification de la position du défilement. Sinon, si vous modifiez la propriété <codeph>delta</codeph> de l’événement, cette valeur est utilisée comme nombre d’« étapes ».</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Scroller:Scroller"><apiName>Scroller</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Scroller:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      Cette opération n’est pas prise en charge par le contrôle Scroller. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Cette opération n’est pas prise en charge par le contrôle Scroller. Un contrôle Scroller ne possède qu’un seul enfant. Utilisez la propriété <codeph>viewport</codeph> pour le manipuler. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:addElement"><apiName>addElement</apiName><shortdesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. Un contrôle Scroller ne possède qu’un seul enfant. Utilisez la propriété <codeph>viewport</codeph> pour le manipuler. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:ensureElementIsVisible"><apiName>ensureElementIsVisible</apiName><shortdesc>
      Fait défiler la fenêtre de façon à ce que l’élément spécifié soit visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Elément enfant du conteneur, ou d’un conteneur imbriqué, incorporé par le contrôle Scroller.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fait défiler la fenêtre de façon à ce que l’élément spécifié soit visible.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      Renvoie la fenêtre si une fenêtre existe et que l’index transmis est 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si la position d’index n’existe pas dans la liste des enfants.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément présent à l’index spécifié.
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément à récupérer.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la fenêtre si une fenêtre existe et que l’index transmis est 0. Dans le cas contraire, elle renvoie une exception RangeError. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      Renvoie la valeur 0 si l’élément transmis est la fenêtre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’élément n’est pas un enfant de cet objet. 
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Position d’index de l’élément à identifier.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Elément à identifier. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la valeur 0 si l’élément transmis est dans la fenêtre. Dans le cas contraire, elle renvoie une erreur ArgumentError. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. Un contrôle Scroller ne possède qu’un seul enfant. Utilisez la propriété <codeph>viewport</codeph> pour le manipuler. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. Un contrôle Scroller ne possède qu’un seul enfant. Utilisez la propriété <codeph>viewport</codeph> pour le manipuler. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElement"><apiName>removeElement</apiName><shortdesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. Un contrôle Scroller ne possède qu’un seul enfant. Utilisez la propriété <codeph>viewport</codeph> pour le manipuler. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. Un contrôle Scroller ne possède qu’un seul enfant. Utilisez la propriété <codeph>viewport</codeph> pour le manipuler. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. Un contrôle Scroller ne possède qu’un seul enfant. Utilisez la propriété <codeph>viewport</codeph> pour le manipuler. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElements"><apiName>swapElements</apiName><shortdesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Cette opération n’est pas prise en charge par le contrôle Scroller. Un contrôle Scroller ne possède qu’un seul enfant. Utilisez la propriété <codeph>viewport</codeph> pour le manipuler. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Scroller:measuredSizeIncludesScrollBars:get"><apiName>measuredSizeIncludesScrollBars</apiName><shortdesc>
      Si la valeur est true, la taille mesurée du contrôle Scroller inclut l’espace requis pour les barres de défilement visibles, sinon la taille mesurée du contrôle dépend de sa fenêtre. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la taille mesurée du contrôle Scroller inclut l’espace requis pour les barres de défilement visibles, sinon la taille mesurée du contrôle dépend de sa fenêtre. 
     
      <p>Les composants tels que TextArea, qui « répartissent » leur contenu pour s’adapter à la largeur ou la hauteur disponible peuvent utiliser cette propriété pour stabiliser leur taille mesurée. Par défaut, un composant TextArea est défini par ses propriétés <codeph>widthInChars</codeph> et <codeph>heightInChars</codeph> et dans de nombreuses applications, il est préférable que la taille mesurée reste constante, même lorsque les barres de défilement sont affichées par le contrôle Scroller de l’habillage TextArea. </p>
     
      <p>Dans les composants dont le contenu n’est pas réparti, comme les éléments d’un objet List typique, le comportement par défaut est préférable, car il rend moins probable le masquage du contenu du composant par une barre de défilement. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:minViewportInset:get"><apiName>minViewportInset</apiName><shortdesc>
      Espace minimal entre la fenêtre et les bords du composant Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Espace minimal entre la fenêtre et les bords du composant Scroller. Si aucune des barres de défilement n’est visible, la fenêtre est encadrée par <codeph>minViewportInset</codeph> des quatre côtés. Si une barre de défilement est visible, la fenêtre est encadrée soit par <codeph>minViewportInset</codeph>, soit par la taille de la barre de défilement, la plus grande des deux étant prise en compte. Les classes ScrollBar sont alignées sur les bords du Défilement.    
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:numElements:get"><apiName>numElements</apiName><shortdesc>
      Renvoie 1 s’il existe une fenêtre, 0 dans le cas contraire. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Renvoie 1 s’il existe une fenêtre, 0 dans le cas contraire. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
        <codeph/><codeph/>
           <p><b/><codeph/><codeph/></p>
           <p> </p>
           <p>   </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
           </apiDefaultValue></apiValueDef><apiDesc>
        <codeph/><codeph/> <codeph/>
           <p><b/><codeph/><codeph/></p>
           <p><codeph/><codeph/> </p>
           <p><codeph/> Ce changement de la position du défilement n’est pas animé.</p>
           <p><codeph/><codeph/><codeph/><codeph/>  </p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Scroller:viewport:get"><apiName>viewport</apiName><shortdesc>
      Composant de fenêtre qui doit faire l’objet d’un défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Le composant de fenêtre qui doit faire l’objet d’un défilement.
     
      <p>
      La fenêtre est ajoutée à l’habillage du composant Scroller, qui met en forme la fenêtre et ses barres de défilement. Lorsque la propriété <codeph>viewport</codeph> est définie, la propriété <codeph>clipAndEnableScrolling</codeph> de la fenêtre est définie sur true pour activer le défilement. Le composant Scroller ne permet pas de faire pivoter directement la fenêtre. Le contenu de la fenêtre peut être transformé de manière arbitraire, contrairement à la fenêtre elle-même.
     </p>
     
      Cette propriété peut être liée.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VGroup"><apiName>VGroup</apiName><shortdesc>
  Le conteneur VGroup est une occurrence du conteneur Group utilisant la classe VerticalLayout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:VGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:VGroup
    <strong>Properties</strong>
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedMaxRowCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount"-1"
    rowHeight="no default"
    variableRowHeight="true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur VGroup est une occurrence du conteneur Group utilisant la classe VerticalLayout. Ne modifiez pas la propriété <codeph>layout</codeph>. Utilisez plutôt les propriétés de la classe VGroup pour modifier les caractéristiques de la classe VerticalLayout.
 
  <p>Le conteneur VGroup présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VGroupExample.mxml"><swfblock conref="examples/VGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link></related-links><apiConstructor id="spark.components:VGroup:VGroup"><apiName>VGroup</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. Initialise la propriété <codeph>layout</codeph> sur une occurrence de la classe VerticalLayout.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:VGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.VerticalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  Le contrôle ComboBox est une classe enfant du contrôle DropDownListBase. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ComboBox">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Encart supérieur, en pixels, pour le texte dans la zone d’invite du contrôle.   
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Encart de droite, en pixels, pour le texte dans la zone d’invite du contrôle.   
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Encart de gauche, en pixels, pour le texte dans la zone d’invite du contrôle.   
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Encart inférieur, en pixels, pour le texte dans la zone d’invite du contrôle.   
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="textInput" owner="spark.components:ComboBox" playerVersion="Flash10" required="false" var_type="spark.components:TextInput">
<description>
      Partie d’habillage facultative qui contient l’entrée de texte ou le texte selectedItem. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      Optional skin part that holds the input text or the selectedItem text.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ComboBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ComboBox
    <strong>Properties</strong>
    itemMatchingFunction="null"
    labelToItemFunction="null"
    maxChars="0"
    openOnInput="true"
    prompt="null"
    restrict=""
     <strong>Styles</strong>
    paddingBottom="3"
    paddingLeft="3"
    paddingRight="3"
    paddingTop="5"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ComboBox est une classe enfant du contrôle DropDownListBase. A l’instar du contrôle DropDownListBase, lorsque l’utilisateur sélectionne un élément dans la liste déroulante dans le contrôle ComboBox, l’élément de données s’affiche dans la zone d’invite du contrôle.  
   <p>Une différence entre les contrôles est que la zone d’invite du contrôle ComboBox est implémentée à l’aide du contrôle TextInput, au lieu du contrôle Label pour le contrôle DropDownList. Par conséquent, l’utilisateur peut modifier la zone d’invite du contrôle afin de saisir une valeur qui ne correspond à aucune des options prédéfinies. </p>
   <p>Par exemple, le contrôle DropDownList permet uniquement à l’utilisateur d’effectuer une sélection dans une liste d’éléments prédéfinis du contrôle. Le contrôle ComboBox permet à l’utilisateur de sélectionner un élément prédéfini ou de saisir un nouvel élément dans la zone d’invite. Votre application peut reconnaître qu’un nouvel élément a été saisi et éventuellement l’ajouter à la liste des éléments dans le contrôle. </p>
   <p>Le contrôle ComboBox effectue en outre une recherche dans la liste d’éléments au fur et à mesure que l’utilisateur saisit des caractères dans la zone d’invite. Lorsque l’utilisateur saisit des caractères, la zone déroulante du contrôle s’ouvre et met en évidence l’élément de la liste qui correspond le mieux aux caractères saisis.</p>
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
   <p><b>Remarque : </b>les contrôles basés sur une liste Spark (la classe Spark ListBase et ses sous-classes, telles que ButtonBar, ComboBox, DropDownList, List et TabBar) ne prennent pas en charge la classe BasicLayout en tant que valeur de la propriété <codeph>layout</codeph>. N’utilisez pas BasicLayout avec les contrôles basés sur une liste Spark. </p>
 
  <p>Le contrôle ComboBox possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>146 pixels de large par 23 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>20 pixels de large par 23 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.ComboBoxSkin
               <p>spark.skins.spark.ComboBoxTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ComboBoxExample.mxml"><swfblock conref="examples/ComboBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link><link href="spark.skins.spark.xml#ComboBoxTextInputSkin"><linktext>spark.skins.spark.ComboBoxTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ComboBox:CUSTOM_SELECTED_ITEM"><apiName>CUSTOM_SELECTED_ITEM</apiName><shortdesc>
      Constante statique représentant la valeur de la propriété selectedIndex lorsque l’utilisateur entre une valeur dans la zone d’invite et que la valeur est validée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Constante statique représentant la valeur de la propriété <codeph>selectedIndex</codeph> lorsque l’utilisateur entre une valeur dans la zone d’invite et que la valeur est validée.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:itemMatchingFunction"><apiName>itemMatchingFunction</apiName><shortdesc>
      Spécifie une fonction de rappel utilisée pour effectuer une recherche dans la liste d’éléments lorsque l’utilisateur saisit des caractères dans la zone d’invite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie une fonction de rappel utilisée pour effectuer une recherche dans la liste d’éléments lorsque l’utilisateur saisit des caractères dans la zone d’invite. Lorsque l’utilisateur saisit des caractères, la zone déroulante du contrôle s’ouvre et met en évidence l’élément de la liste qui correspond le mieux aux caractères saisis.
     
      <p>La fonction référencée par cette propriété accepte une chaîne d’entrée et renvoie l’index des éléments dans le fournisseur de données correspondant à l’entrée. Les éléments sont renvoyés sous forme de vecteur. &lt;int> d’index dans le fournisseur de données.  </p>
     
      <p>La fonction de rappel doit présenter la signature suivante : </p>
     
      <pre>
        function myMatchingFunction(comboBox:ComboBox, inputText:String):Vector.&lt;int></pre>
     
      <p>Si la valeur de cette propriété est null, le contrôle ComboBox trouve des correspondances en utilisant l’algorithme par défaut. Par défaut, si une chaîne saisie de longueur n équivaut au n premiers caractères d’un élément (la casse étant ignorée), elle est considérée comme étant une correspondance de cet élément. Par exemple, « aRiz » correspond à « Arizona », ce qui n’est pas le cas de « riz ». </p>
           <p>Pour désactiver la recherche, créez une fonction de rappel qui renvoie un vecteur vide. &lt;int>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:openOnInput"><apiName>openOnInput</apiName><shortdesc>
      Si la valeur est true, la liste déroulante s’ouvre lorsque l’utilisateur édite la zone d’invite. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, la liste déroulante s’ouvre lorsque l’utilisateur édite la zone d’invite. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:enableIME:get"><apiName>enableIME</apiName><shortdesc conref="spark.components.TextInput#enableIME">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.TextInput#enableIME">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="spark.components.TextInput#imeMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.TextInput#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:prompt:get"><apiName>prompt</apiName><shortdesc>
      Texte à afficher si/lorsque l'entrée de texte a la valeur null.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Texte à afficher si l'entrée de texte a la valeur null.
     
      <p>Le texte d’invite s’affiche lors de la création initiale du contrôle. Le texte d’invite disparaît lorsque le contrôle obtient le focus, lorsque l’entrée de texte n’est pas nulle ou lorsqu’un élément est sélectionné dans la liste. Le texte d’invite réapparaît lorsque le contrôle perd le focus, mais uniquement si aucun texte n’a été saisi (si la valeur du champ de texte est la chaîne vide ou de valeur null).</p>
      
      <p>Vous pouvez changer le style du texte d’invite avec les feuilles de style CSS. Si le contrôle comporte un texte d'invite et n'est pas désactivé, le style est défini par le pseudo-sélecteur <codeph>normalWithPrompt</codeph>. Si le contrôle est désactivé, les styles définis par le pseudo-sélecteur <codeph>disabledWithPrompt</codeph> sont utilisés.</p>
      
      <p>L’exemple de CSS suivant modifie la couleur du texte d’invite dans les contrôles TextInput. Le contrôle ComboBox utilise un contrôle TextInput comme sous-composant pour le texte d’invite et d’entrée, ce qui signifie que son texte d’invite change lorsque vous utilisez cette feuille de style CSS :
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|TextInput:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:labelToItemFunction:set"><apiName>labelToItemFunction</apiName><shortdesc>
      Spécifie une fonction de rappel pour convertir une nouvelle valeur entrée dans la zone d’invite vers le même type de données que les éléments de données dans le fournisseur de données. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Spécifie une fonction de rappel pour convertir une nouvelle valeur entrée dans la zone d’invite vers le même type de données que les éléments de données dans le fournisseur de données. La fonction référencée par cette propriété est appelée lorsque le texte dans la zone d’invite est validé et n’est pas détecté dans le fournisseur de données.  
     
      <p>La fonction de rappel doit présenter la signature suivante : </p>
     
      <pre>
        function myLabelToItem(value:String):Object</pre>
     
      <p>Emplacement auquel <codeph>valeur</codeph> est la chaîne saisie dans la zone d’invite. La fonction renvoie un objet qui est le même type que les éléments du fournisseur de données. </p>
     
      <p>La fonction de rappel par défaut renvoie <codeph>value</codeph>.  </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:maxChars:set"><apiName>maxChars</apiName><shortdesc>
      Nombre maximal de caractères saisis par l’utilisateur que la zone d’invite peut contenir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre maximal de caractères saisis par l’utilisateur que la zone d’invite peut contenir. La valeur 0 correspond à l’absence de limite. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:restrict:set"><apiName>restrict</apiName><shortdesc>
      Indique le jeu de caractères que l’utilisateur peut saisir dans la zone d’invite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique le jeu de caractères que l’utilisateur peut saisir dans la zone d’invite. Par défaut, l’utilisateur peut saisir des caractères, ce qui correspond à la valeur d’une chaîne vide. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Image"><apiName>Image</apiName><shortdesc>
  La commande Spark Image est un composant habillable qui fournit un état de chargement personnalisable, chrome et un état d’erreur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style enumeration="default,high" inherit="no" name="smoothingQuality" owner="spark.components:Image" playerVersion="Flash9" type="String">
<description>
  Style équivalent à la propriété <codeph>smoothingQuality</codeph> de BitmapImage. Lorsque défini sur <codeph>BitmapSmoothingQuality.BEST</codeph>, l'image est rééchantillonnée (si les données proviennent d'une source fiable) pour obtenir un résultat de qualité supérieure. Si défini sur <codeph>BitmapSmoothingQuality.DEFAULT</codeph>, la qualité d'image par défaut pour le fichier bitmap redimensionné est utilisée.
 
  </description>
<default>&lt;code>BitmapSmoothingQuality.DEFAULT&lt;/code>
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="enableLoadingState" owner="spark.components:Image" playerVersion="Flash9" type="Boolean">
<description>
  Lorsque la valeur est <codeph>true</codeph>, active l’état de l’habillage <codeph>loading</codeph>.
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  La couleur d'arrière-plan pour ce composant.
   
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Valeur alpha de l’arrière-plan de ce composant.
 
  </description>
<default>NaN
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Etat désactivé du contrôle Image.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="invalid" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Etat invalide du contrôle Image. Cela signifie que l’image n’a pas pu être correctement chargée.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:Image" playerVersion="Flash10.1">
<description>
  Etat prêt du contrôle Image.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Etat de préchargement du contrôle Image. Le style <codeph>enableLoadingState</codeph> doit être défini sur <codeph>true</codeph> pour activer cet état du composant.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Etat non initialisé du contrôle Image.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="imageDisplay" owner="spark.components:Image" playerVersion="Flash10" required="true" var_type="spark.primitives:BitmapImage">
<description>
      Une partie d'habillage requise qui définit le contenu de l'image.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines image content.</shortdesc></SkinPart><SkinPart name="progressIndicator" owner="spark.components:Image" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:Range">
<description>
      Une partie d'habillage facultative qui affiche la progression actuelle du chargement. Pour plus de facilité, la valeur de progressIndicator est automatiquement mise à jour avec le pourcentage d'achèvement pendant le chargement.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that displays the current loading progress.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Image&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Image 
    <strong>Properties</strong>
    clearOnLoad="true"
    contentLoader="null"
    contentLoaderGrouping="null"
    fillMode="scale"
    horizontalAlign="center"
    preliminaryHeight="NaN"
    preliminaryWidth="NaN"
    scaleMode="letterbox"
    smooth="false"
    source="null
    verticalAlign="middle"
 
    <strong>Styles</strong>
    backgroundAlpha="NaN"
    backgroundColor="NaN"
    enableLoadingState="false"
    smoothingQuality="default"
 
    <strong>Events</strong>
    complete="<i>No default</i>"
    httpStatus="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
    securityError="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La commande Spark Image est un composant habillable qui fournit un état de chargement personnalisable, chrome et un état d’erreur. Le contrôle Image permet d’importer des fichiers JPEG, PNG et GIF au moment de l’exécution. Vous pouvez également incorporer ces fichiers lors de la compilation à l’aide de la méthode <codeph>@Embed(source=’filename’)</codeph>.
   <p><b>Remarque : </b>Flex comprend également le contrôle SWFLoader pour charger les applications Flex. Le contrôle Image s’utilise généralement pour charger des fichiers graphiques statiques et des fichiers SWF et le contrôle SWFLoader pour charger les applications Flex. Le contrôle Image est également conçu pour être utilisé dans les rendus d’élément et les éditeurs d’élément personnalisés. </p>
 
  <p><b>Remarque : </b>Flex comporte également la classe BitmapImage. Cette classe est utilisée pour incorporer des images dans des habillages et des composants FXG.  </p>
   <p>Les images incorporées se chargent immédiatement, car elles font déjà partie du fichier SWF Flex. Toutefois, elles augmentent la taille de votre application et ralentissent l’initialisation de l’application. Les images incorporées demandent également que vous recompiliez vos applications à chaque fois que vos fichiers d’image changent.</p> 
  
  <p>Pour ne pas incorporer une ressource, vous pouvez la charger au moment de l’exécution. Vous pouvez charger une ressource à partir du système de fichiers local dans lequel s’exécute le fichier SWF ou accéder à une ressource distante, en général via une requête HTTP sur un réseau. Ces images ne dépendent pas de votre application Flex, vous pouvez donc les modifier sans provoquer de recompilation tant que les noms des images modifiées restent les mêmes. Les images référencées n’augmentent pas le temps de chargement initial d’une application. Toutefois, vous pouvez rencontrer un délai lorsque vous utilisez les images et les chargez dans Flash Player ou AIR. </p>
  
  <p>L'habillage par défaut fournit un habillage d'image sans chrome avec un programme de préchargement basé sur une barre de progression générique et une icône représentant une image brisée pour refléter le contenu.</p>
   <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
   <p>La commande Image possède par défaut les caractéristiques suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Assez large pour accueillir le contenu de la source associée</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixels de large par 0 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classe d’habillage par défaut</entry>
           <entry>spark.skins.spark.ImageSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ImageSkin"><linktext>spark.skins.spark.ImageSkin</linktext></link><link href="" invalidHref="mx.controls.SWFLoader.xml"><linktext>mx.controls.SWFLoader</linktext></link></related-links><adobeApiEvent id="spark.components:Image_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
  Distribué lorsqu’une erreur de sécurité se produit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une erreur de sécurité se produit.
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.SecurityErrorEvent.xml"><linktext>flash.events.SecurityErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_mx.events.FlexEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  Distribué lorsque le chargement du contenu est terminé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.READY</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le chargement du contenu est terminé. Contrairement à l'événement <codeph>complete</codeph>, cet événement est distribué pour tous les type de source.  
  
  <p>Notez que, pour le contenu chargé à l'aide du Loader, les événements <codeph>ready</codeph> et <codeph>complete</codeph> sont distribués.</p>  Pour d'autres types de source tels que les incrustations seul <codeph>ready</codeph> est distribué.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Distribué lors du chargement de contenu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lors du chargement de contenu d’un contenu. 
   <p><b>Remarque :</b> il n’est pas assuré que l’événement <codeph>progress</codeph> soit distribué. L’événement <codeph>complete</codeph> peut être reçu sans qu’aucun événement <codeph>progress</codeph> ne soit distribué. Ceci peut se produire si le contenu chargé est un fichier local.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  Distribué lors d’une erreur d’entrée/sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lors d’une erreur d’entrée/sortie.
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.IOErrorEvent.xml"><linktext>flash.events.IOErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
  Distribué lorsqu’une requête réseau est envoyée via le protocole HTTP et que Flash Player ou AIR peut détecter le code d’état HTTP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une requête réseau est envoyée via le protocole HTTP et que Flash Player ou AIR peut détecter le code d’état HTTP.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Distribué lorsque le chargement du contenu est terminé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le chargement du contenu est terminé. Cet événement n'est distribué que pour les sources basées sur des URL et des ByteArray (ces sources nécessitent un Loader).
 
  <p>Notez que, pour le contenu chargé à l’aide du Loader, les événements <codeph>ready</codeph> et <codeph>complete</codeph> sont distribués.</p>  Pour d'autres types de source tels que les incrustations, seul <codeph>ready</codeph> est distribué.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Image:Image"><apiName>Image</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Image:bitmapData:get"><apiName>bitmapData</apiName><shortdesc conref="spark.primitives.BitmapImage#bitmapData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:BitmapData"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bitmapData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:clearOnLoad:get"><apiName>clearOnLoad</apiName><shortdesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoaderGrouping:get"><apiName>contentLoaderGrouping</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoader:get"><apiName>contentLoader</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoader">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IContentLoader</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoader">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:fillMode:get"><apiName>fillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.CENTER&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryHeight:get"><apiName>preliminaryHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryWidth:get"><apiName>preliminaryWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapScaleMode.LETTERBOX&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:sourceHeight:get"><apiName>sourceHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:sourceWidth:get"><apiName>sourceWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:trustedSource:get"><apiName>trustedSource</apiName><shortdesc conref="spark.primitives.BitmapImage#trustedSource">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#trustedSource">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.MIDDLE&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:smooth:set"><apiName>smooth</apiName><shortdesc conref="spark.primitives.BitmapImage#smooth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#smooth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:source:set"><apiName>source</apiName><shortdesc conref="spark.primitives.BitmapImage#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#source">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextSelectionHighlighting"><apiName>TextSelectionHighlighting</apiName><shortdesc>
  Cette classe spécifie les valeurs autorisées pour la propriété selectionHighlighting du contrôle RichEditableText et des contrôles qui utilisent RichEditableText comme un sous-composant (Spark TextInput et Spark TextArea). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Cette classe spécifie les valeurs autorisées pour la propriété <codeph>selectionHighlighting</codeph> du contrôle RichEditableText et des contrôles qui utilisent RichEditableText comme un sous-composant (Spark TextInput et Spark TextArea). 
  
  </apiDesc><example conref="TraceSelectionRanges"><swfblock conref="TraceSelectionRanges"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiValue id="spark.components:TextSelectionHighlighting:ALWAYS"><apiName>ALWAYS</apiName><shortdesc>
      Toujours afficher la sélection du texte, même si le composant ne dispose pas du focus clavier ou si la fenêtre du composant n’est pas la fenêtre active. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Toujours afficher la sélection du texte, même si le composant ne dispose pas du focus clavier ou si la fenêtre du composant n’est pas la fenêtre active. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_ACTIVE"><apiName>WHEN_ACTIVE</apiName><shortdesc>
      Afficher la sélection du texte du composant chaque fois que la fenêtre est active même si le composant ne dispose pas du focus clavier. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenActive</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Afficher la sélection du texte du composant chaque fois que la fenêtre est active même si le composant ne dispose pas du focus clavier. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_FOCUSED"><apiName>WHEN_FOCUSED</apiName><shortdesc>
      Afficher la sélection du texte uniquement lorsque le composant a le focus du clavier. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenFocused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Afficher la sélection du texte uniquement lorsque le composant a le focus du clavier. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpPosition"><apiName>PopUpPosition</apiName><shortdesc>
  Type énuméré de la propriété PopUpAnchor.popUpPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Type énuméré de la propriété <codeph>PopUpAnchor.popUpPosition</codeph>. Ce type décrit la position du contrôle <codeph>popUp</codeph> ancré par PopUpAnchor. La position est relative à la position PopUpAnchor.   
    
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:PopUpPosition:ABOVE"><apiName>ABOVE</apiName><shortdesc>
      Position au-dessus de la cible.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>above</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position au-dessus de la cible.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:BELOW"><apiName>BELOW</apiName><shortdesc>
      Position au-dessous de la cible.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>below</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position au-dessous de la cible.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:CENTER"><apiName>CENTER</apiName><shortdesc>
      Position au centre de la cible.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position au centre de la cible.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:LEFT"><apiName>LEFT</apiName><shortdesc>
      Position à gauche de la cible.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position à gauche de la cible.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      Position à droite de la cible.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position à droite de la cible.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
      Position dans le coin supérieur gauche de la cible.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position dans le coin supérieur gauche de la cible.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataGroup"><apiName>DataGroup</apiName><shortdesc>
  La classe DataGroup est la classe conteneur de base des éléments de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:DataGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGroup
    <strong>Properties</strong>
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    typicalItem="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DataGroup est la classe conteneur de base des éléments de données. La classe DataGroup convertit des éléments de données en éléments visuels, en vue de leur affichage. Même si ce conteneur peut contenir des éléments visuels, il est en général utilisé uniquement pour stocker des éléments de données en tant qu’enfants.
   <p>La classe prend comme enfants des éléments de données ou des éléments visuels qui implémentent l’interface IVisualElement et sont des classes DisplayObject. Les éléments de données peuvent être des éléments de données simples tels que des objets String ou Number, ou des éléments de données plus complexes tels que des objets Object ou XMLNode. Même si ces conteneurs peuvent contenir des éléments visuels, ils sont en général utilisés uniquement pour stocker des éléments de données en tant qu’enfants.</p>
   <p>Une fonctionnalité de rendu d’élément définit la représentation visuelle de l’élément de données dans le conteneur. La fonctionnalité de rendu d’élément convertit l’élément de données dans un format qui peut être affiché par le conteneur. Vous devez transmettre un rendu d’élément à un conteneur pour effectuer le rendu des éléments de données approprié. </p>
   <p>Pour améliorer les performances et limiter la taille de l’application, l’habillage du conteneur DataGroup ne peut pas être configuré. Pour appliquer un habillage, utilisez plutôt la classe SkinnableDataContainer. </p>
  
  <p>Le conteneur DataGroup présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DataGroupExample.mxml"><swfblock conref="examples/DataGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer"><linktext>spark.skins.spark.DefaultItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultComplexItemRenderer"><linktext>spark.skins.spark.DefaultComplexItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  Distribué lorsque le rendu est supprimé de ce groupe dataGroup. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le rendu est supprimé de ce groupe dataGroup. <codeph>event.renderer</codeph> est la fonctionnalité de rendu supprimée.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  Distribué lorsque le rendu est ajouté à ce groupe dataGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le rendu est ajouté à ce groupe dataGroup. <codeph>event.renderer</codeph> est la fonctionnalité de rendu ajoutée.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGroup:DataGroup"><apiName>DataGroup</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGroup:getItemIndicesInView"><apiName>getItemIndicesInView</apiName><shortdesc>
      Renvoie les index des rendus d’élément visibles dans ce DataGroup. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Indices des rendus d’élément visibles. 
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie les indices des rendus d’élément visibles dans ce DataGroup. 
     
      <p>Si la valeur de <codeph> clipAndEnableScrolling</codeph> est <codeph>true</codeph>, renvoie les indices ItemRenderers <codeph>visible</codeph> = <codeph>true</codeph> qui chevauchent le <codeph>scrollRect</codeph> de ce DataGroup. Il s’agit des éléments ItemRenders au moins partiellement visibles par rapport à ce DataGroup. Si <codeph>clipAndEnableScrolling</codeph> est <codeph>false</codeph>, renvoie une liste d’entiers compris entre 0 et <codeph>dataProvider.length</codeph> - 1. Notez que si le propriétaire de ce DataGroup est un Scroller, cela signifie que <codeph>clipAndEnableScrolling</codeph> a été défini sur <codeph>true</codeph>.</p>
     
      <p>Le rendu d’élément correspondant à chaque index renvoyé peut être récupéré avec la méthode <codeph>getElementAt()</codeph> même si la présentation est virtuelle</p>
     
      <p>L’ordre des éléments dans le vecteur renvoyé n’est pas garanti. </p>
     
      <p>Notez que les classes VerticalLayout et HorizontalLayout proposent des propriétés <codeph>firstIndexInView</codeph> et <codeph>lastIndexInView</codeph> liables qui contiennent les mêmes informations que cette méthode.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="11"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      <codeph/>  
     
      <p>Cette méthode est appelée automatiquement si la propriété <codeph>typicalItem</codeph> est modifiée directement, c’est-à-dire si la propriété est définie sur une nouvelle valeur, qui n’est pas « == » à la valeur actuelle.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:itemToLabel"><apiName>itemToLabel</apiName><shortdesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      Etant donné un élément de données renvoyez la représentation toString() de l’élément de données pour un rendu d’élément à afficher. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>La chaîne à afficher dans une option de rendu d'élément.
      
      </apiDesc></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément de données à afficher.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      <p>Selon l’élément de données, renvoyez la représentation <codeph>toString()</codeph> de l’élément de données pour un rendu d’élément à afficher. Les éléments de données null renvoient la chaîne vide.  </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      
      Met à jour la fonctionnalité de rendu en vue d’une réutilisation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Fonctionnalité de rendu d’élément.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Index des données dans le fournisseur de données.
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet de données que ce rendu d’élément représente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Met à jour la fonctionnalité de rendu en vue d’une réutilisation. Cette méthode prépare la fonctionnalité de rendu d’élément pour une réutilisation en effaçant les éventuelles propriétés obsolètes, puis en la mettant à jour en utilisant de nouvelles propriétés.
     
      <p>La dernière opération effectuée par cette méthode doit être de définir la propriété <codeph>data</codeph> sur le rendu d’élément.</p>    
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGroup:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Fournisseur de données de cet objet DataGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Fournisseur de données de cet objet DataGroup. Il doit s’agir d’une interface IList.
     
      <p>La structure Flex contient plusieurs implémentations de l’interface IList, dont ArrayCollection, ArrayList et XMLListCollection.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGroup/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#DataGroup/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGroup:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc>
      Fonction renvoyant une interface IFactory de fonctionnalité de rendu d’élément pour un élément spécifique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction renvoyant une interface IFactory de fonctionnalité de rendu d’élément pour un élément spécifique. Il est recommandé de définir une fonction de rendu d’élément semblable à cet exemple de fonction : 
      
      <pre>
        function myItemRendererFunction(item:Object):IFactory</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      Fonctionnalité de rendu d’élément à utiliser pour les éléments de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonctionnalité de rendu d’élément à utiliser pour les éléments de données. La classe doit implémenter l’interface IDataRenderer. Si elle est définie, la propriété <codeph>itemRendererFunction</codeph> est prioritaire par rapport à cette propriété.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      Les présentations utilisent la taille préférée de l’élément typicalItem lorsque des tailles de ligne ou de colonne fixes sont requises, mais qu’aucune valeur rowHeight ou columnWidth spécifique n’est définie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Les présentations utilisent la taille préférée de l’élément <codeph>typicalItem</codeph> lorsque des tailles de ligne ou de colonne fixes sont requises, mais qu’aucune valeur <codeph>rowHeight</codeph> ou <codeph>columnWidth</codeph> spécifique n’est définie. De même, les présentations virtuelles utilisent cet élément pour définir la taille des éléments de présentation qui n’ont pas été déplacés de manière à devenir visibles.
           <p>Le conteneur utilise l’élément de données standard et la fonctionnalité de rendu d’élément associée pour déterminer la taille par défaut des enfants du conteneur. Si l’élément standard est défini, il n’est pas nécessaire que le conteneur définisse la taille de chaque enfant lorsqu’ils sont tracés à l’écran. </p>
           <p>Le fait de définir cette propriété définit automatiquement la propriété <codeph>typicalLayoutElement</codeph> de la présentation.</p>
     
      <p>Restriction : si <codeph>typicalItem</codeph> est une interface IVisualItem, elle ne doit pas être membre du fournisseur de données.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HSlider"><apiName>HSlider</apiName><shortdesc>
  Le contrôle HSlider (curseur horizontal) permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:HSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle HSlider (curseur horizontal) permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail. Le contrôle HSlider est horizontal. Le rail du curseur s’étend de gauche à droite. La valeur actuelle du curseur est déterminée par son emplacement relatif entre ses extrémités, ce qui correspond aux valeurs minimum et maximum du curseur.
 
  <p>Le curseur peut autoriser une plage continue de valeurs entre ses valeurs minimales et maximales, ou être limité à des valeurs à intervalles spécifiques entre la valeur minimale et maximale. Le curseur peut contenir des astuce sur les données pour afficher sa valeur actuelle. </p>
 
  <p>Le contrôle HSlider possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>100 pixels de large par 11 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>100 pixels de large et 100 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classes d’habillage par défaut </entry>
           <entry>spark.skins.spark.HSliderSkin
              <p>spark.skins.spark.HSliderThumbSkin</p>
              <p>spark.skins.spark.HSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HSliderExample.mxml"><swfblock conref="examples/HSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HSliderSkin"><linktext>spark.skins.spark.HSliderSkin</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DataGrid"><apiName>DataGrid</apiName><shortdesc>
  Le composant DataGrid affiche une ligne d’en-têtes de colonnes au-dessus d’une grille pouvant défiler.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DataGrid">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Indique dans quelles conditions la barre de défilement verticale doit s’afficher.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> (« on ») : la barre de défilement est toujours affichée.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> (« off ») : la barre de défilement n’est jamais affichée. La fenêtre peut toujours faire l’objet d’un défilement par programmation, en définissant sa propriété <codeph>verticalScrollPosition</codeph>.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> (« auto ») : la barre de défilement est affichée lorsque la valeur <codeph>contentHeight</codeph> de la fenêtre est supérieure à sa hauteur.
  </li>
  </ul>
 
  <p>
  La stratégie de défilement affecte la taille mesurée de la partie d'habillage du composant Scroller. Ce style est une référence au style <codeph>verticalScrollPolicy</codeph> de la partie d’habillage du composant Scroller. Ce n’est pas un style d’héritage et, par exemple, il n’aura pas d’incidence sur les rendus d’éléments. </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Indique les conditions pour lesquelles la barre de défilement horizontale s’affiche.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> (« on ») : la barre de défilement est toujours affichée.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> (« off ») : la barre de défilement n’est jamais affichée. La fenêtre peut toujours faire l’objet d’un défilement par programmation, en définissant sa propriété <codeph>horizontalScrollPosition</codeph>.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> (« auto ») : la barre de défilement est affichée lorsque la valeur <codeph>contentWidth</codeph> de la fenêtre est supérieure à sa largeur. 
  </li>
  </ul>
 
  <p>
  La stratégie de défilement affecte la taille mesurée de la partie d'habillage du composant Scroller. Ce style est une référence au style <codeph>horizontalScrollPolicy</codeph> de la partie d’habillage du composant Scroller. Ce n’est pas un style d’héritage et, par exemple, il n’aura pas d’incidence sur les rendus d’éléments. </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="defaultDataGridItemEditor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  La classe à utiliser en tant qu’éditeur d’élément, si aucun n’est spécifié par une colonne. Cette propriété de style vous permet de définir un éditeur d’élément pour un groupe de contrôles DataGrid au lieu d’avoir à définir chaque élément individuellement. La propriété <codeph>DataGridColumn.itemEditor</codeph> remplace cette valeur.
  
  </description>
<default>null
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Type de casse typographique utilisée pour ce texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à droite de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Valeur de l'approche (crénage manuel) à appliquer à gauche de chaque caractère.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Spécifie des options de justification de texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être souligné.
   <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textDecoration et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  Valeur alpha (transparence) du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Alignement de la dernière ligne du paragraphe par rapport au conteneur dans un texte justifié. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Alignement du texte au sein d’un conteneur. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style textAlign et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Mode de rendu utilisé pour ce texte, qui s'applique uniquement aux polices incorporées.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Variable locale du texte. Contrôle les transformations de casse et de forme. Utilisez les identifiants de langue standard tels que décrits dans la norme technique Unicode #35. Par exemple « en », « en_US » et « en-US » pour l’anglais, « ja » pour le japonais. 
  
  <p>La valeur par défaut est undefined. Cette propriété hérite de sa valeur d’un ancêtre ; si elle n’est pas encore définie, elle hérite du style de <codeph>langue</codeph> global. Lors de l’initialisation de l’application, si le style de <codeph>langue</codeph> global n’est pas défini, la valeur par défaut est définie sur  « en ».</p>
 
  <p>Lors de l’utilisation des classes de formatage et globalisation Spark, vous pouvez définir ce style pour l’application racine sur la valeur de la constante <codeph>LocaleID.DEFAULT</codeph>. Ces classes utiliseront ensuite les préférences internationales du système d’exploitation du client.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:DataGrid" playerVersion="Flash10" type="Boolean">
<description> 
  Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte.   
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Contrôles d’interligne du texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>Interligne</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#DataGrid/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Définit laquelle des ligatures définies dans la police à utiliser dans le texte.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Nombre de pixels supplémentaires qui apparaissent entre chaque caractère.
 
  <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous aux sections <codeph>trackingLeft</codeph> et <codeph>trackingRight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField.letterSpacing et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#DataGrid/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#DataGrid/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
   <p><b>Pour le thème Spark, ceci n’est pas pris en charge.</b> Reportez-vous à la section <codeph>lineHeight</codeph>.</p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableStageText Style fontWeight et si vous utilisez StyleableStageText, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#DataGrid/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p>Le crénage est activé par défaut pour les composants Spark, mais il est désactivé par défaut pour les composants MX. Certains composants Spark interprètent <codeph>default</codeph> comme <codeph>auto</codeph>, alors que les composants MX interprètent <codeph>default</codeph> comme <codeph>false</codeph>.</p>
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Style utilisé pour la justification du paragraphe.  
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Règle utilisée pour justifier le texte dans un paragraphe. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en gras. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontWeight et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Détermine si le texte doit être en italique. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontStyle et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  Hauteur du texte, en pixels. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontSize et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>12</codeph>. La valeur par défaut du thème Mobile est <codeph>24</codeph></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Recherche de police à utiliser. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. 
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style fontFamily et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>La valeur par défaut du thème Spark est <codeph>Arial</codeph>. La valeur par défaut du thème Mobile est <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Spécifie le niveau par défaut d'incorporation bidirectionnelle du texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Type de largeur de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Type de casse de chiffres utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:DataGrid" playerVersion="Flash10" type="uint">
<description>
  Couleur du texte.
 
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Pour le thème Mobile, si vous utilisez StyleableTextField, voir spark.components.supportClasses.StyleableTextField Style color et si vous utilisez StyleableStageText, voir spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Type de repère CFF utilisé pour ce texte.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Valeur du décalage de la ligne de base.
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. 
  
  <p><b>Pour le thème Spark, voir flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Pour le thème Mobile, ceci n’est pas pris en charge.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="stretchCursor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  Classe à utiliser comme habillage pour le curseur qui indique qu’une colonne peut être redimensionnée. La valeur par défaut est le symbole <codeph>cursorStretch</codeph> dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de l’arrière-plan du contenu à ce composant. Les valeurs possibles sont comprises entre 0.0 et 1.0. 
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="caretColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur du signe d’insertion en cas de navigation sur la grille.
   </description>
<default>0x0167FF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Contrôle la visibilité de la bordure de composant. 
   </description>
<default>true
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la bordure de ce composant. 
   </description>
<default>#696969
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Valeur alpha de la bordure de ce composant. Les valeurs possibles sont comprises entre 0.0 et 1.0. 
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="alternatingRowColors" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Array">
<description>
  Permet d’initialiser la partie d’habillage <codeph>rowBackground</codeph> du contrôle DataGrid. Si le style <codeph>alternatingRowColors</codeph> est spécifié, utilisez la partie d’habillage <codeph>alternatingRowColorsBackground</codeph> comme valeur de la partie d’habillage <codeph>rowBackground</codeph>. Les couleurs en alternance pour les lignes de la grille sont définies par les entrées successives dans la valeur Array de ce style.
   <p>Pour modifier la façon dont ce style est rendu, remplacez la partie d’habillage <codeph>alternatingRowColorsBackground</codeph> dans la classe DataGridSkin. Pour spécifier l’arrière-plan de chaque ligne, initialisez directement la partie d’habillage <codeph>rowBackground</codeph>.</p>
 
  </description>
<default>undefined
   
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="alternatingRowColorsBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Classe IVisualElement utilisée pour effectuer le rendu du style <codeph>alternatingRowColors</codeph>.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the alternatingRowColors style.</shortdesc></SkinPart><SkinPart name="caretIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      La classe IVisualElement utilisée pour effectuer le rendu du caret de la grille.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the grid's caret indicator.</shortdesc></SkinPart><SkinPart name="columnHeaderGroup" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:GridColumnHeaderGroup">
<description>
      Référence à l’objet GridColumnHeaderGroup qui affiche les en-têtes de colonne.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the GridColumnHeaderGroup object that displays the column headers.</shortdesc></SkinPart><SkinPart name="columnSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      La classe IVisualElement utilisée pour effectuer le rendu du séparateur vertical entre les colonnes. 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the vertical separator between columns.</shortdesc></SkinPart><SkinPart name="editorIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      La classe IVisualElement utilisée pour effectuer le rendu d’un arrière-plan derrière les rendus d’élément en cours de modification. Les rendus d’élément peuvent être modifiés uniquement lorsque la grille de données et la colonne sont toutes les deux modifiables et la colonne définit <codeph>rendererIsEditable</codeph><codeph> sur la valeur true</codeph>.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render a background behind
      item renderers that are being edited.</shortdesc></SkinPart><SkinPart name="grid" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Grid">
<description>
      Une référence à l'option Grille qui affiche ligne et de colonnes.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Grid control that displays row and columns.</shortdesc></SkinPart><SkinPart name="hoverIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      La classe IVisualElement utilisée pour fournir des commentaires de survol.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to provide hover feedback.</shortdesc></SkinPart><SkinPart name="rowBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      La classe IVisualElement utilisée pour effectuer le rendu de l’arrière-plan de chaque rangée.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the background of each row.</shortdesc></SkinPart><SkinPart name="rowSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      La classe IVisualElement utilisée pour effectuer le rendu du séparateur horizontal entre les rangées d’en-têtes. 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the horizontal separator between header rows.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Une référence au contrôle Scroller dans la classe d'habillage qui ajoute des barres de défilement au contrôle DataGrid.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Scroller control in the skin class 
      that adds scroll bars to the DataGrid control.</shortdesc></SkinPart><SkinPart name="selectionIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      La classe IVisualElement utilisée pour effectuer le rendu des rangées ou cellules sélectionnées.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render selected rows or cells.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataGrid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGrid 
    <strong>Properties</strong>
    columns="null"
    dataProvider="null"  
    dataTipField="null"  
    dataTipFunction="null"
    editable="false"
    editorColumnIndex="-1"
    editorRowIndex="-1"
    imeMode="null"
    itemEditor="null"
    itemRenderer="<i>DefaultGridItemRenderer</i>" 
    preserveSelection="true"
    requestedColumnCount="-1"
    requestedMaxRowCount="-1"
    requestedMinColumnCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount="-1"
    requireSelection="false"
    resizeableColumns="true"
    rowHeight="<i>Calculated default</i>"
    selectedCell="null"
    selectedCells="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedIndex="null"
    selectedIndices="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedItem="null"
    selectedItems="<i>empty Vector.&lt;Object&gt</i>"
    selectionMode="singleRow"
    showDataTips="false"
    sortableColumns="true"
    typicalItem="null"
    variableRowHeight="false" 
 
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontalStem"
    color="0"
    defaultGridItemEditor="null"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="cff"
    stretchCursor="<i>cursorStretch symbol from Assets.swf</i>"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    verticalScrollPolicy="auto"
     <strong>Styles for the Spark Theme</strong>
    alternatingRowColors="undefined"
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    caretColor="0x0167FF"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
 
    <strong>Styles for the Mobile Theme</strong>
    leading="0"
    letterSpacing="0"
    selectionColor="0xE0E0E0"
    symbolColor="0x000000"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridItemEditorSessionCancel="<i>No default</i>"
    gridItemEditorSessionSave="<i>No default</i>"
    gridItemEditorSessionStart="<i>No default</i>"
    gridItemEditorSessionStarting="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    selectionChange="<i>No default</i>"
    selectionChanging="<i>No default</i>"
    sortChange="<i>No default</i>"
    sortChanging="<i>No default</i>" 
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant DataGrid affiche une ligne d’en-têtes de colonnes au-dessus d’une grille pouvant défiler. La grille est structurée sous forme d’un ensemble de cellules individuelles, organisées en rangées et colonnes. Le contrôle DataGrid est conçu pour prendre en charge un défilement fluide à travers un grand nombre de lignes et de colonnes.
   <p>Le contrôle Spark DataGrid est implémenté comme une enveloppe habillable autour du contrôle Spark Grid. Le contrôle Grid définit les colonnes de la grille de données, et la plupart des fonctionnalités du contrôle DataGrid.</p>
   <p>L’habillage DataGrid est responsable de la disposition de la grille, de l’en-tête de colonne et du composant Scroller. L’habillage configure également les éléments graphiques utilisés pour rendre les éléments visuels servant d’indicateurs, de séparateurs et d’arrière-plans. L’habillage DataGrid définit par ailleurs un rendu d’élément par défaut, qui permet d’afficher le contenu de chaque cellule. Veuillez consulter la documentation de la fonctionnalité de rendu classe pour la liste des styles pris en charge.</p>
   <p>Les transitions dans les rendus d’éléments DataGrid ne sont pas prises en charge. La classe GridItemRenderer ayant désactivé sa propriété <codeph>transitions</codeph>, le fait de la définir n’aura aucun effet.</p>
   </apiDesc><example conref="DataGridSimpleExample.mxml"><swfblock conref="examples/DataGridSimpleExample.swf"/></example><example conref="DataGridMasterDetailExample.mxml"><swfblock conref="examples/DataGridMasterDetailExample.swf"/></example><example conref="DataGridTypicalItemExample.mxml"><swfblock conref="examples/DataGridTypicalItemExample.swf"/></example><example conref="DataGridRowHeightExample.mxml"><swfblock conref="examples/DataGridRowHeightExample.swf"/></example><example conref="DataGridSelectionExample.mxml"><swfblock conref="examples/DataGridSelectionExample.swf"/></example><example conref="DataGridInvalidateCellExample.mxml"><swfblock conref="examples/DataGridInvalidateCellExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>spark.components.Grid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link><link href="spark.skins.spark.xml#DataGridSkin"><linktext>spark.skins.spark.DataGridSkin</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL_gridItemEditorSessionCancel"><apiName>gridItemEditorSessionCancel</apiName><shortdesc>
  Distribué après que l’éditeur d’élément a été fermé sans que ses données soient enregistrées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après que l’éditeur d’élément a été fermé sans que ses données soient enregistrées.  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE_gridItemEditorSessionSave"><apiName>gridItemEditorSessionSave</apiName><shortdesc>
  Distribué après que les données dans l’éditeur d’élément ont été enregistrées dans le fournisseur de données et que l’éditeur a été fermé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après que les données dans l’éditeur d’élément ont été enregistrées dans le fournisseur de données et que l’éditeur a été fermé.  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START_gridItemEditorSessionStart"><apiName>gridItemEditorSessionStart</apiName><shortdesc>
  Distribué immédiatement après qu’un éditeur d’élément a été ouvert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué immédiatement après qu’un éditeur d’élément a été ouvert. 
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING_gridItemEditorSessionStarting"><apiName>gridItemEditorSessionStarting</apiName><shortdesc>
  Distribué lorsqu’une nouvelle session d’éditeur d’élément a été demandée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une nouvelle session d’éditeur d’élément a été demandée. Un écouteur peut déterminer de façon dynamique si une cellule est modifiable et annuler la modification (en appelant la méthode <codeph>preventDefault()</codeph>) si elle ne l’est pas. Un écouteur peut également modifier dynamiquement l’éditeur utilisé en affectant un autre éditeur d’élément à une colonne.
 
  <p>Si cet événement est annulé, l’éditeur d’élément ne sera pas créé.</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link><link href="" invalidHref="flash.events.Event.xml"><linktext>flash.events.Event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGE_sortChange"><apiName>sortChange</apiName><shortdesc>
  Distribué après l’application du tri à la collection du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après l'application du tri à la collection du fournisseur de données. En général, il s’agit de l’instant après que l’utilisateur ait relâché le bouton de la souris sur un en-tête de colonne et que le tri ait été appliqué à la collection du fournisseur de données. 
  
  <p>Cet événement est distribué lorsque l’utilisateur interagit avec le contrôle. Lorsque vous triez la collection du fournisseur de données par programmation, le composant ne distribue pas la <codeph>sortChanging</codeph> événement.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGING_sortChanging"><apiName>sortChanging</apiName><shortdesc>
  Distribué avant l’application du tri à la collection du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué avant l'application du tri à la collection du fournisseur de données. En général, il s’agit de l’instant lorsque l’utilisateur relâche le bouton de la souris sur un en-tête de colonne pour demander que le contrôle trie le contenu de la grille en fonction du contenu de la colonne. Distribué uniquement si la colonne peut être triée et si le fournisseur de données prend le tri en charge. 
  
  <p>Le contrôle DataGrid a un gestionnaire par défaut pour cet événement, qui implémente le tri d'une seule colonne et met à jour les <codeph>visibleSortIndices</codeph> dans la grille du <codeph>columnHeaderGroup</codeph> avec la <codeph>columnIndices</codeph>.</p>
 
  <p>tri de plusieurs colonnes peut être implémentée par l'appel de la <codeph>méthode preventDefault()</codeph> méthode pour empêcher le tri d'une seule colonne et en définissant la <codeph>columnIndices</codeph> et <codeph>newSortFields</codeph> paramètres de l'événement pour modifier le comportement par défaut. La propriété <codeph>newSortFields</codeph> doit être définie sur les champs de tri souhaités. <codeph>columnIndices</codeph> doit être défini sur les indices des colonnes devant présenter un indicateur de tri visible dans la barre d’en-tête de colonne.</p>
   
  <p>Cet événement est distribué lorsque l’utilisateur interagit avec le contrôle. Lorsque vous triez la collection du fournisseur de données par programmation, le composant ne distribue pas la <codeph>sortChanging</codeph> événement. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  Distribué lorsque la sélection a changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la sélection a changé. 
  
  <p>Cet événement est distribué lorsque l’utilisateur interagit avec le contrôle. Lorsque vous modifiez la sélection par programmation, le composant ne distribue pas l'événement <codeph>selectionChange</codeph>. Dans les deux cas, il distribue les <codeph>valueCommit</codeph> événement ainsi.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGING_selectionChanging"><apiName>selectionChanging</apiName><shortdesc>
  Distribué lorsque la sélection va être modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la sélection s’apprête à être modifiée. L’appel de la méthode <codeph>preventDefault()</codeph> sur l’événement empêche la modification de la sélection.
  
  <p>Cet événement est distribué lorsque l’utilisateur interagit avec le contrôle. Lorsque vous modifiez la sélection par programmation, le composant ne distribue pas l'événement <codeph>selectionChanging</codeph>. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Distribué par la partie d'habillage de grille en cas de double-clic sur la souris au-dessus d'une cellule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la partie d’habillage de <codeph>grille</codeph> lorsque l’utilisateur double-clique avec la souris au-dessus d’une cellule.
   <p>Pour gérer cet événement, affectez un gestionnaire d’événement à la partie d’habillage <codeph>grid</codeph> du contrôle DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Distribué par la partie d’habillage de grille lorsque l’utilisateur clique avec la souris sur une cellule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la partie d’habillage de <codeph>grille</codeph> lorsque l’utilisateur clique avec la souris sur une cellule.
   <p>Pour gérer cet événement, affectez un gestionnaire d’événement à la partie d’habillage <codeph>grid</codeph> du contrôle DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Distribué par la partie d'habillage de grille lorsque la souris quitte une cellule de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la partie d’habillage de <codeph>grille</codeph> lorsque la souris quitte une cellule de la grille.
   <p>Pour gérer cet événement, affectez un gestionnaire d’événement à la partie d’habillage <codeph>grid</codeph> du contrôle DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Distribué par la partie d'habillage de grille lorsque la souris pénètre dans une cellule de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la partie d’habillage de <codeph>grille</codeph> lorsque la souris pénètre dans une cellule de la grille.
   <p>Pour gérer cet événement, affectez un gestionnaire d’événement à la partie d’habillage <codeph>grid</codeph> du contrôle DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Distribué par la partie d’habillage de grille après un événement gridMouseDown lorsque l’utilisateur relâche le bouton de la souris, même si celle-ci n’est plus dans la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la partie d’habillage de <codeph>grille</codeph> après un événement <codeph>gridMouseDown</codeph> lorsque l’utilisateur relâche le bouton de la souris, même si celle-ci n’est plus dans la grille.
   <p>Pour gérer cet événement, affectez un gestionnaire d’événement à la partie d’habillage <codeph>grid</codeph> du contrôle DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Distribué par la partie d’habillage de grille après un événement gridMouseDown si la souris se déplace avant que l’utilisateur ne relâche le bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la partie d’habillage de <codeph>grille</codeph> après un événement <codeph>gridMouseDown</codeph> si la souris se déplace avant que l’utilisateur ne relâche le bouton.
   <p>Pour gérer cet événement, affectez un gestionnaire d’événement à la partie d’habillage <codeph>grid</codeph> du contrôle DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Distribué par la partie d’habillage de grille lorsque l’utilisateur appuie sur le bouton de la souris au-dessus d’une cellule de la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la partie d’habillage de <codeph>grille</codeph> lorsque l’utilisateur appuie sur le bouton de la souris au-dessus d’une cellule de la grille.
   <p>Pour gérer cet événement, affectez un gestionnaire d’événement à la partie d’habillage <codeph>grid</codeph> du contrôle DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Distribué par la partie d’habillage de la grille, lorsque la position du caret, la taille ou la visibilité a changé en raison de l’interaction de l’utilisateur ou d’un paramétrage par programmation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la partie d’habillage de <codeph>grille</codeph>, lorsque la position du signe d’insertion, la taille ou la visibilité a changé en raison de l’interaction de l’utilisateur ou d’un paramétrage par programmation.
   <p>Pour gérer cet événement, affectez un gestionnaire d’événement à la partie d’habillage de <codeph>grille</codeph> du contrôle DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGrid:DataGrid"><apiName>DataGrid</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGrid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc conref="spark.components.Grid#addSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>rowIndex</codeph> ou <codeph>columnIndex</codeph> n’est pas valide, ou si <codeph>selectionMode</codeph> n’est pas valide.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc conref="spark.components.Grid#addSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>index</codeph> n’est pas valide ou si <codeph>selectionMode</codeph> n’est pas valide. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:clearSelection"><apiName>clearSelection</apiName><shortdesc conref="spark.components.Grid#clearSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si la sélection a été modifiée ou <codeph>false</codeph> s’il n’y avait aucune sélection au préalable.
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#clearSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitCaretPosition"><apiName>commitCaretPosition</apiName><shortdesc>
      Mises à jour de la position du caret dans la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newCaretRowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne en base 0 de la nouvelle position du caret.
     
      </apiDesc></apiParam><apiParam><apiItemName>newCaretColumnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne en base 0 de la nouvelle position du caret. Si le selectionMode est basé sur les lignes, il s'agit de -1.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Mises à jour de la position du caret dans la grille. Si la position du signe d’insertion change, la partie d’habillage de <codeph>grille</codeph> distribue un événement <codeph>caretChange</codeph>.
           </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridCaretEvent/CARET_CHANGE"><linktext>spark.events.GridCaretEvent.CARET_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitInteractiveSelection"><apiName>commitInteractiveSelection</apiName><shortdesc>
      En réponse à une entrée de l’utilisateur (la souris ou le clavier) qui modifie la sélection, cette méthode distribue l’événement selectionChanging.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>true</codeph> si la sélection a été validée ou n’a pas changé, <codeph>false</codeph> si la sélection a été annulée ou n’a pas pu être validée en raison d’une erreur, par exemple si l’index est hors plage ou si l’événement <codeph>selectionEventKind</codeph> n’est pas compatible avec <codeph>selectionMode</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>selectionEventKind</apiItemName><apiType value="String"/><apiDesc>Une constante définie par la classe GridSelectionEventKind qui spécifie la sélection en cours de validation. Si non null, cette propriété est utilisée pour générer l’événement <codeph>selectionChanging</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Si <codeph>selectionEventKind</codeph> est destiné à une ligne ou une cellule, l’élément <codeph>rowIndex</codeph> en base 0 de la sélection dans le fournisseur de données. Si <codeph>selectionEventKind</codeph> est destiné à plusieurs cellules, l’élément <codeph>rowIndex</codeph> en base 0 de l’origine de la région de cellules. La valeur par défaut est -1 pour indiquer que ce paramètre n'est pas utilisé.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Si <codeph>selectionEventKind</codeph> est destiné à une seule ligne ou une seule cellule, l’élément <codeph>columnIndex</codeph> en base 0 de la sélection. Si <codeph>selectionEventKind</codeph> est destiné à plusieurs cellules, l’élément <codeph>columnIndex</codeph> en base 0 de l’origine de la région de cellules. La valeur par défaut est -1 pour indiquer que ce paramètre n'est pas utilisé.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc>Si <codeph>selectionEventKind</codeph> est destiné à une région de cellules, le nombre de lignes de la région de cellules. La valeur par défaut est -1 pour indiquer que ce paramètre n'est pas utilisé.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc>Si <codeph>selectionEventKind</codeph> est destiné à une région de cellules, le nombre de colonnes dans la région de cellules. La valeur par défaut est -1 pour indiquer que ce paramètre n'est pas utilisé.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      En réponse à une entrée de l’utilisateur (la souris ou le clavier) qui modifie la sélection, cette méthode distribue l’événement <codeph>selectionChanging</codeph>. Si l’événement ne peut pas être annulé, il valide le changement de sélection, puis distribue l’événement <codeph>selectionChange</codeph>. L’emplacement du signe d’insertion n’est pas mis à jour. Pour savoir si le signe d’insertion a été modifié, utilisez l’événement <codeph>caretChanged</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGE"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGE</linktext></link><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGING"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGING</linktext></link><link href="spark.events.xml#GridSelectionEventKind"><linktext>spark.events.GridSelectionEventKind</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:endItemEditorSession"><apiName>endItemEditorSession</apiName><shortdesc>
      Ferme l’éditeur actif et enregistre éventuellement la valeur de l’éditeur en appelant la méthode save() de l’éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la session de l’éditeur a été enregistrée, <codeph>false</codeph> si l’enregistrement a été annulé.  
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cancel</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>false</codeph>, les données dans l’éditeur sont enregistrées. Dans le cas contraire, les données dans l’éditeur sont supprimées.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ferme l’éditeur actif et enregistre éventuellement la valeur de l’éditeur en appelant la méthode <codeph>save()</codeph> de l’éditeur d’élément. Si le paramètre <codeph>cancel</codeph> a la valeur <codeph>true</codeph>, la méthode <codeph>cancel()</codeph> de l’éditeur est appelée à la place.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc conref="spark.components.Grid#ensureCellIsVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L’index de rangée de base 0 de la cellule du rendu d’élément ou -1 pour spécifier une colonne.
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>L'index à base 0 de la cellule de l'option de rendu d'élément ou -1 pour spécifier une ligne.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#ensureCellIsVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc conref="spark.components.Grid#invalidateCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L’index de rangée de base 0 de la cellule qui a changé ou -1.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Index de colonne de base 0 de la cellule qui a changé ou -1.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateTypicalItem"><apiName>invalidateTypicalItem</apiName><shortdesc conref="spark.components.Grid#invalidateTypicalItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateTypicalItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc conref="spark.components.Grid#removeSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>rowIndex</codeph> ou <codeph>columnIndex</codeph> n’est pas valide, ou si <codeph>selectionMode</codeph> n’est pas valide.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc conref="spark.components.Grid#removeSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>index</codeph> n’est pas valide ou si <codeph>selectionMode</codeph> n’est pas valide. 
           
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.components.Grid#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si la sélection a été modifiée.
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#selectAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc conref="spark.components.Grid#selectCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si la région de cellules n’est pas valide ou si <codeph>selectionMode</codeph> n’est pas valide.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de l'origine de la région de cellules.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de l'origine de la région de cellules.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc>Nombre de lignes, en commençant par <codeph>rowIndex</codeph> à inclure dans la région de cellules.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc>Nombre de colonnes, en commençant par <codeph>columnIndex</codeph> à inclure dans la région de cellules.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectIndices"><apiName>selectIndices</apiName><shortdesc conref="spark.components.Grid#selectIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si des index ne sont pas valides, si <codeph>startRowIndex</codeph> n’est pas inférieur ou égal à <codeph>endRowIndex</codeph> ou si la propriété <codeph>selectionMode</codeph> n’est pas valide. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Index de ligne en base 0 pour la première ligne de la sélection.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Nombre de lignes de la sélection.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si la sélection actuelle contient toutes les cellules de la région de cellules.
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Nombre de lignes, en commençant par <codeph>rowIndex</codeph> à inclure dans la région de cellules.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc>Nombre de colonnes, en commençant par <codeph>columnIndex</codeph> à inclure dans la région de cellules.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc conref="spark.components.Grid#selectionContainsCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si la sélection actuelle contient la cellule.
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si la sélection contient la ligne.
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L’index de ligne en base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si la sélection actuelle contient ces lignes.
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Vecteur d’index de ligne en base 0 à inclure dans la sélection. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc conref="spark.components.Grid#setSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>rowIndex</codeph> ou <codeph>columnIndex</codeph> n’est pas valide, ou si <codeph>selectionMode</codeph> n’est pas valide.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L'index de colonne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc conref="spark.components.Grid#setSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> en l’absence d’erreur. <codeph>false</codeph> si <codeph>index</codeph> n’est pas valide ou si <codeph>selectionMode</codeph> n’est pas valide. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L'index de ligne à base 0 de la cellule.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:sortByColumns"><apiName>sortByColumns</apiName><shortdesc>
      Triez le contrôle DataGrid selon une ou plusieurs colonnes et actualisez l’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si l’objet <codeph>dataProvider</codeph> a été trié avec les indices de colonnes fournis.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Les index des colonnes selon lesquelles il convient de trier l’objet <codeph>dataProvider</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>isInteractive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est true, les événements <codeph>GridSortEvent.SORT_CHANGING</codeph> et <codeph>GridSortEvent.SORT_CHANGE</codeph> sont distribués et le groupe d’en-tête de colonne <codeph>visibleSortIndicatorIndices</codeph> est mis à jour avec <codeph>columnIndices</codeph> si l’événement <codeph>GridSortEvent.SORT_CHANGING</codeph> n’est pas annulé.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Triez le contrôle DataGrid selon une ou plusieurs colonnes et actualisez l’affichage.
     
      <p>Si l’objet <codeph>dataProvider</codeph> est une interface ICollectionView, sa propriété <codeph>sort</codeph> est définie sur une valeur basée sur les indicateurs <codeph>dataField</codeph>, <codeph>sortCompareFunction</codeph> et <codeph>sortDescending</codeph> de chaque colonne. Ensuite, la méthode <codeph>refresh()</codeph> du fournisseur de données est appelée. </p>
      
      <p>Si l’objet <codeph>dataProvider</codeph> n’est pas une interface ICollectionView, cette méthode n’a aucun effet.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortCompareFunction"><linktext>spark.components.gridClasses.GridColumn.sortCompareFunction</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortDescending"><linktext>spark.components.gridClasses.GridColumn.Sortdescending</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortField"><linktext>spark.components.gridClasses.GridColumn.Sortfield</linktext></link><link href="" invalidHref="spark.components.gridClasses.xml#GridColumnHeaderGroup/visibleSortIndicatorIndices"><linktext>spark.components.gridClasses.GridColumnHeaderGroup.Visiblesortindicatorindices</linktext></link><link href="spark.events.xml#GridSortEvent"><linktext>spark.events.GridSortEvent</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:startItemEditorSession"><apiName>startItemEditorSession</apiName><shortdesc>
      Démarre une session d’éditeur sur une cellule sélectionnée dans la grille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true si la session d’éditeur a été démarrée. </codeph> Renvoie <codeph>false</codeph> si la session de l’éditeur a été annulée ou si elle n’a pas pu être démarrée. Notez qu’une session d’éditeur ne peut pas être démarrée dans une colonne qui n’est pas visible.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>L’index de rangée de base zéro de la cellule à modifier.
           </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>L’index de colonne de base zéro de la cellule à modifier.  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Démarre une session d’éditeur sur une cellule sélectionnée dans la grille. Cette méthode contourne les contrôles de la propriété editable sur DataGrid et GridColumn qui empêchent l’interface utilisateur de démarrer une session d’éditeur. Un événement <codeph>startItemEditorSession</codeph> est distribué avant qu’un éditeur d’élément soit créé. Cela permet à un écouteur de modifier dynamiquement l’éditeur d’élément pour une cellule spécifiée. L’événement peut également être annulé en appelant la méthode <codeph>preventDefault()</codeph> pour empêcher la création de la session d’éditeur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGrid:columnsLength:get"><apiName>columnsLength</apiName><shortdesc>
      Renvoie la valeur de columns.length si l’élément IList des colonnes a été spécifié, sinon 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Renvoie la valeur de <codeph>columns.length</codeph> si l’élément IList des colonnes a été spécifié, sinon 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:columns:get"><apiName>columns</apiName><shortdesc conref="spark.components.Grid#columns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#columns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProviderLength:get"><apiName>dataProviderLength</apiName><shortdesc>
      Renvoie la valeur de dataProvider.length si l’élément dataProvider IList a été spécifié, sinon 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Renvoie la valeur de <codeph>dataProvider.length</codeph> si l’élément dataProvider IList a été spécifié, sinon 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.Grid#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataProvider">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.Grid#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.Grid#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editable:get"><apiName>editable</apiName><shortdesc>
      La valeur par défaut de la propriété editable de l’objet GridColumn, qui indique si l’élément du fournisseur de données d’une cellule correspondante peut être modifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La valeur par défaut de la propriété <codeph>editable</codeph> de l’objet GridColumn, qui indique si l’élément du fournisseur de données d’une cellule correspondante peut être modifié. Si la valeur est <codeph>true</codeph>, le fait de cliquer sur une cellule sélectionnée ouvre un éditeur d’élément. Vous pouvez activer ou désactiver la modification par cellule (plutôt que par colonne) en gérant l’événement <codeph>startItemEditorSession</codeph>. Dans le gestionnaire d’événement, ajoutez la logique nécessaire pour déterminer si la cellule doit être modifiable. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorColumnIndex:get"><apiName>editorColumnIndex</apiName><shortdesc>
      L’index de colonne de base zéro de la cellule en cours de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      L’index de colonne de base zéro de la cellule en cours de modification. La valeur est -1 si aucune cellule n’est en cours de modification.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorRowIndex:get"><apiName>editorRowIndex</apiName><shortdesc>
      L’index de rangée de base zéro de la cellule en cours de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      L’index de rangée de base zéro de la cellule en cours de modification. La valeur est -1 si aucune cellule n’est en cours de modification.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. Si l’éditeur d’élément est ouvert, il définit cette propriété en conséquence.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      La valeur par défaut de la propriété imeMode de GridColumn, qui spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La valeur par défaut de la propriété <codeph>imeMode</codeph> de GridColumn, qui spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle obtient le focus et rétablit la valeur précédente lorsque le contrôle perd le focus.
          <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs possibles de cette propriété. Vous pouvez également spécifier <codeph>null</codeph> si vous ne souhaitez pas spécifier d’éditeur IME.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemEditorInstance:get"><apiName>itemEditorInstance</apiName><shortdesc>
      Référence à l’occurrence actuellement active de l’éditeur d’élément, s’il existe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.gridClasses:IGridItemEditor</apiValueClassifier></apiValueDef><apiDesc>
      Référence à l’occurrence actuellement active de l’éditeur d’élément, s’il existe.
           <p>Pour accéder à l’occurrence de l’éditeur d’élément et à la nouvelle valeur de l’élément lorsqu’un élément est modifié, utilisez la propriété <codeph>itemEditorInstance</codeph>. La propriété <codeph>itemEditorInstance</codeph> n’est pas valide tant que l’événement <codeph>itemEditorSessionStart</codeph> n’est pas distribué.</p>
           <p>La propriété <codeph>DataGridColumn.itemEditor</codeph> définit la classe de l’éditeur d’élément et, de ce fait, le type de données de l’occurrence de l’éditeur d’élément.</p>
           <p>Ne définissez pas cette propriété dans MXML.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:itemEditor:get"><apiName>itemEditor</apiName><shortdesc>
      La valeur par défaut de la propriété itemEditor de GridColumn, qui spécifie la classe IGridItemEditor, utilisée pour créer des occurrences de l’éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemEditorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null.
           </apiDefaultValue></apiValueDef><apiDesc>
      La valeur par défaut de la propriété <codeph>itemEditor</codeph> de GridColumn, qui spécifie la classe IGridItemEditor, utilisée pour créer des occurrences de l’éditeur d’élément.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataField"><linktext>dataField</linktext></link><link href="spark.components.gridClasses.xml#IGridItemEditor"><linktext>spark.components.gridClasses.IGridItemEditor</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.Grid#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>DefaultGridItemRenderer
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#itemRenderer">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc conref="spark.components.Grid#preserveSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#preserveSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.components.Grid#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc conref="spark.components.Grid#requireSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requireSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc conref="spark.components.Grid#resizableColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#resizableColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.components.Grid#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.Grid#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc conref="spark.components.Grid#selectedCell">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedCell">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc conref="spark.components.Grid#selectedCells">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedCells">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc conref="spark.components.Grid#selectedIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc conref="spark.components.Grid#selectedIndices">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndices">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc conref="spark.components.Grid#selectedItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc conref="spark.components.Grid#selectedItems">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedItems">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc conref="spark.components.Grid#selectionLength">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectionLength">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc conref="spark.components.Grid#selectionMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectionMode">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc conref="spark.components.Grid#showDataTips">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#showDataTips">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:sortableColumns:get"><apiName>sortableColumns</apiName><shortdesc>
      Indique si l’utilisateur peut trier les colonnes de façon interactive.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si l’utilisateur peut trier les colonnes de façon interactive. Si la valeur est <codeph>true</codeph>, l’utilisateur peut trier le fournisseur de données en fonction du champ de données d’une colonne en cliquant sur l’en-tête de la colonne. Si la valeur est <codeph>true</codeph>, une colonne individuelle peut définir sa propriété <codeph>sortable</codeph> sur <codeph>false</codeph> pour empêcher l’utilisateur de trier en fonction de cette colonne.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.Grid#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#typicalItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.components.Grid#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  Le composant RadioButtonGroup définit un groupe de composants RadioButton agissant comme un composant unique mutuellement exclusif. De ce fait, l’utilisateur ne peut sélectionner qu’un seul composant RadioButton à la fois.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true"
    selectedValue="null"
    selection="null"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
    valueCommit="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant RadioButtonGroup définit un groupe de composants RadioButton agissant comme un composant unique mutuellement exclusif. De ce fait, l’utilisateur ne peut sélectionner qu’un seul composant RadioButton à la fois. La propriété <codeph>id</codeph> est requise lorsque vous utilisez la balise <codeph>&lt;s:RadioButtonGroup></codeph> pour définir le nom du groupe. Tout composant <codeph>&lt;s:RadioButton></codeph> ajouté à ce groupe portera ce nom de groupe. 
 
  <p>Notez que le contrôle RadioButtonGroup est une sous-classe du composant EventDispatcher, pas du contrôle UIComponent, et qu’il implémente l’interface IMXMLObject. Toutes les autres composants visuels Flex implémentent l’interface IVisualElement. La déclaration du composant RadioButtonGroup doit être contenue dans la balise <codeph>&lt;déclarations></codeph> puisqu’elle n’est pas attribuable à IVisualElement. </p> 
 
  <p>Pour utiliser ce composant d'un composant à base de listes (par exemple List ou DataGrid) créez une option de rendu d'élément. Pour plus d'informations sur la création d'une option de rendu d'élément, consultez la section <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Options personnalisées de rendu d'élément Spark</xref>. </p>
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Distribué lorsque les valeurs sont modifiées soit par programmation, soit par interaction de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque les valeurs sont modifiées soit par programmation, soit par interaction de l’utilisateur.
 
  <p>Puisqu’une modification de programmation déclenche cet événement, assurez-vous que les gestionnaires d’événements <codeph>valueCommit</codeph> ne modifient pas une valeur qui entraîne un autre événement <codeph>valueCommit</codeph>. Par exemple, ne modifiez pas la propriété <codeph>selectedValue</codeph> ou <codeph>sélection</codeph> d’un gestionnaire d’événements <codeph>valueCommit</codeph>.  </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un utilisateur sélectionne un composant RadioButton dans le groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur sélectionne un composant RadioButton dans le groupe. Vous pouvez également définir un gestionnaire pour chaque composant RadioButton. Cet événement est distribué uniquement lorsque l’utilisateur actionne les boutons radio à l’aide de la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la valeur du composant RadioButton sélectionné dans ce groupe change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la valeur du composant RadioButton sélectionné dans ce groupe change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>Dans les cas simples où une classe étend la classe EventDispatcher, le paramètre <codeph>document</codeph> ne doit pas être utilisé.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="spark.components:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      Renvoie le composant RadioButton à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Composant RadioButton spécifié si l’index est compris entre 0 et <codeph>numRadioButtons</codeph> - 1. Renvoie <codeph>null</codeph> si l’index n’est pas valide. 
     
      </apiDesc><apiOperationClassifier>spark.components:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index en base 0 du composant RadioButton dans le composant RadioButtonGroup. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie le composant RadioButton à l’index spécifié.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="spark.components.numRadioButtons.xml"><linktext>numRadioButtons</linktext></link></related-links></apiOperation><apiOperation id="spark.components:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      Implémentation de la méthode IMXMLObject.initialized() pour prendre en charge l’instanciation différée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Document MXML ayant créé cet objet.
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Identificateur utilisé par le document pour faire référence à cet objet. Si l’objet est une propriété profonde dans le document, la valeur <codeph>id</codeph> est null.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Implémentation de la méthode <codeph>IMXMLObject.initialized()</codeph> permettant de prendre en charge l’instanciation différée.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IMXMLObject.xml"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="spark.components:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      Détermine si la sélection est autorisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si la sélection est autorisée. La valeur renvoyée reflète uniquement la valeur explicitement définie sur le composant <codeph>RadioButtonGroup</codeph> et ne reflète pas les valeurs explicitement définies sur les différents composants RadioButton. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      Nombre de contrôles RadioButton appartenant à ce contrôle RadioButtonGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="numRadioButtonsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"0"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de contrôles RadioButton appartenant à ce contrôle RadioButtonGroup.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      Propriété value du composant RadioButton sélectionné dans le groupe, s’il a été défini, dans le cas contraire, propriété label du composant RadioButton sélectionnée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Propriété <codeph>valeur</codeph> du composant RadioButton sélectionné dans le groupe, s’il a été défini, dans le cas contraire, propriété <codeph>label</codeph> du composant RadioButton sélectionné. Si aucun contrôle RadioButton n’est sélectionné, cette propriété a la valeur <codeph>null</codeph>.
     
      <p>Si vous définissez <codeph>selectedValue</codeph>, Flex sélectionne le premier composant RadioButton dont la propriété <codeph>value</codeph> ou <codeph>label</codeph> correspond à cette valeur.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      Contient une référence au composant RadioButton actuellement sélectionné dans le groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Contient une référence au composant RadioButton actuellement sélectionné dans le groupe. Vous pouvez accéder à cette propriété uniquement en langage ActionScript. Elle ne peut pas être définie en langage MXML. Le fait de définir cette propriété sur <codeph>null</codeph> désélectionne le composant RadioButton actuellement sélectionné. Un événement change n’est pas distribué.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  Le contrôle VScrollBar (barre de défilement verticale) permet de contrôler la partie des données affichées lorsque le volume de données à afficher verticalement dans une zone d’affichage est trop important.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:VScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VScrollBar
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
   
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle VScrollBar (barre de défilement verticale) permet de contrôler la partie des données affichées lorsque le volume de données à afficher verticalement dans une zone d’affichage est trop important.
 
  <p>Bien que vous puissiez utiliser le contrôle VScrollBar de façon autonome, il convient généralement de l'ajouter à un autre groupe de composants pour bénéficier de la fonctionnalité de défilement.</p>
   <p>Le contrôle VScrollBar possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>15 pixels de large par 85 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>15 pixels de large et 15 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row><row>
           <entry>Classes d’habillage par défaut </entry>
           <entry>spark.skins.spark.VScrollBarSkin
              <p>spark.skins.spark.VScrollBarThumbSkin</p>
              <p>spark.skins.spark.VScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VScrollBarSkin"><linktext>spark.skins.spark.VScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Distribué lorsque la propriété verticalScrollPosition s’apprête à être modifiée en raison d’un événement mouseWheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>verticalScrollPosition</codeph> s’apprête à être modifiée en raison d’un événement <codeph>mouseWheel</codeph>.
 
  <p>Le comportement par défaut consiste à faire défiler verticalement par le nombre d’« étapes » de la propriété <codeph>delta</codeph> de l’événement. La méthode <codeph>getVerticalScrollPositionDelta</codeph> de la fenêtre utilisant soit <codeph>UP</codeph>, soit <codeph>DOWN</codeph>, en fonction de la direction du défilement, détermine la hauteur de l’étape.</p>
 
  <p>L’appel de la méthode <codeph>preventDefault()</codeph> sur l’événement empêche la modification de la position du défilement vertical. Sinon, si vous modifiez la propriété <codeph>delta</codeph> de l’événement, cette valeur est utilisée comme nombre d’« étapes » verticales.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Incrémentez value d’une page si increase est true ou valeur de décrémentation d’une page si increase est false. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Incrémenter (<codeph>true</codeph>) ou décrémenter (<codeph>false</codeph>) <codeph>value</codeph>.  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Incrémentez <codeph>value</codeph> d’une page si <codeph>increase</codeph> est <codeph>true</codeph> ou décrémentez <codeph>value</codeph> d’une page si <codeph>increase</codeph> est <codeph>false</codeph>. L’augmentation de la valeur <codeph>value</codeph> de la barre de défilement fait défiler la fenêtre la vers le haut. La diminution de la valeur <codeph>value</codeph> fait défiler la fenêtre vers le bas. 
      
      <p>Si la propriété <codeph>viewport</codeph> est définie, sa méthode <codeph>getVerticalScrollPositionDelta()</codeph> est utilisée pour calculer la taille de l’incrémentation par page. Si <codeph>viewport</codeph> est null, la propriété <codeph>pageSize</codeph> de la barre de défilement est utilisée. </p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Si la valeur de la fenêtre d’affichage n’est pas null, modifie la position de défilement vertical (page précédente ou page suivante) en faisant défiler la fenêtre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Définit si le défilement de ligne est réalisé vers le haut (<codeph>true</codeph>) ou vers le bas (<codeph>false</codeph>). 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Si la valeur de <codeph>viewport</codeph> n’est pas null, modifie la position de défilement vertical (ligne précédente ou ligne suivante) en faisant défiler la fenêtre. Cette méthode calcule la longueur de défilement en appelant la méthode <codeph>IViewport.getVerticalScrollPositionDelta()</codeph> et en utilisant <codeph>flash.ui.Keyboard.RIGHT</codeph> ou <codeph>flash.ui.Keyboard.LEFT</codeph>. Elle appelle ensuite la méthode <codeph>setValue()</codeph> pour définir une valeur appropriée pour la propriété <codeph>IViewport.verticalScrollPosition</codeph>.
           <p>Si la valeur de <codeph>viewport</codeph> est null, l’appel de cette méthode modifie la position de défilement vertical (ligne précédente ou ligne suivante) en appelant la méthode <codeph>changeValueByStep()</codeph>.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Met à jour la propriété value et, si la valeur de viewport n’est pas null, définit le paramètre verticalScrollPosition sur la valeur value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Nouvelle valeur de la propriété <codeph>value</codeph>. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met à jour la propriété value et, si la valeur de <codeph>viewport</codeph> n’est pas null, définit sa <codeph>verticalScrollPosition</codeph> sur la valeur <codeph>value</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VScrollBar/viewport"><linktext>viewport</linktext></link></related-links></apiOperation><apiValue id="spark.components:VScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      Fenêtre contrôlée par cette barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Fenêtre contrôlée par cette barre de défilement.
      
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  La classe VideoDisplay est un lecteur vidéo sans chrome qui prend en charge le téléchargement progressif, le taux multibits et la vidéo en diffusion à flux continu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoDisplay">
<description>
 Etant donné que ce composant ne définit pas d’habillage pour le thème mobile, Adobe recommande de ne pas l’utiliser dans une application mobile. Alternativement, vous pouvez définir votre propre habillage mobile pour le composant. Pour plus d’informations, voir <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Notions de base sur l’habillage mobile</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoDisplay&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoDisplay 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe VideoDisplay est un lecteur vidéo sans chrome qui prend en charge le téléchargement progressif, le taux multibits et la vidéo en diffusion à flux continu. 
 
  <p><codeph>VideoDisplay</codeph> est la version chromeless que ne prend pas en charge l’habillage. Elle est utile lorsque vous ne souhaitez pas que l’utilisateur interagisse avec le contrôle. </p>
 
  <p><codeph>VideoPlayer</codeph> est la version habillable.</p>
   <p>Le contrôle VideoDisplay possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>0 Pixels de largeur par 0 pixels de hauteur sans contenu et la largeur et la hauteur de la vidéo avec le contenu </entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 pixels de large et 10000 pixels de haut</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoDisplayExample.mxml"><swfblock conref="examples/VideoDisplayExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link></related-links><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  Distribué lorsque l’état de MediaPlayer change. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’état de MediaPlayer change. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  Distribué lorsque la propriété duration du support a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>duration</codeph> du support a été modifiée.
 
  <p>L’événement risque de ne pas être distribué si la source est définie sur null ou qu’une erreur de lecture se produit. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  Distribué lorsque la propriété currentTime de l’objet MediaPlayer a été modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>currentTime</codeph> de l’objet MediaPlayer a été modifiée.
 
  <p>L’événement risque de ne pas être distribué si la source est définie sur null ou qu’une erreur de lecture se produit. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Distribué lorsque la tête de lecture atteint la durée de lisibilité du support. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la tête de lecture atteint la durée de lisibilité du support. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  Distribué à la réception des données au fur et à mesure d’un téléchargement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à la réception des données au fur et à mesure d’un téléchargement. Cet événement est distribué uniquement lors de la lecture d’une vidéo par téléchargement direct depuis un serveur, en général, en émettant une demande HTTP. Il n’est pas distribué lors de la lecture d’une vidéo à partir d’un serveur de supports spécial, tel que Flash Media Server. 
 
  <p>L’événement risque de ne pas être distribué si la source est définie sur null ou qu’une erreur de lecture se produit. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      Interrompt la lecture sans déplacer la tête de lecture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Interrompt la lecture sans déplacer la tête de lecture. Si la lecture est déjà interrompue ou arrêtée, cette méthode n’a aucun effet.  
           <p>Pour relancer la lecture, appelez la méthode <codeph>play()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      Entraîne la lecture de la vidéo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Entraîne la lecture de la vidéo. Peut être appelé lorsque la vidéo est interrompue, arrêtée ou déjà en cours de lecture.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:seek"><apiName>seek</apiName><shortdesc>
      Effectue une recherche vers une heure donnée dans la vidéo. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>Temps de recherche, en secondes.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Effectue une recherche vers une heure donnée dans la vidéo. Si la vidéo est en cours de lecture, continue la lecture à partir de ce point. Si la vidéo est interrompue, recherche ce point et reste en pause. Si la vidéo est arrêtée, recherche ce point et passe à l’état de pause. Cette propriété n’a aucun effet sur les diffusions en continu live.
           <p>Si la durée est inférieure à 0 ou NaN, renvoie une exception. Si la durée dépasse la fin du flux ou le volume de fichier téléchargé jusque là, tente une recherche et, lors de l’échec, lance une reprise. </p>
     
      <p>La propriété <codeph>currentTime</codeph> peut ne pas avoir la valeur prévue immédiatement après avoir appelé <codeph>seek()</codeph>. S’il s’agit d’un téléchargement progressif, vous pouvez rechercher uniquement une image-clé. Ainsi une recherche vous amène à l’heure de la première image-clé après l’heure spécifiée.</p>
      
      <p><b>Remarque </b>: en cas de diffusion en flux continu, une recherche vous conduit toujours à l’heure exacte spécifiée même si le fichier FLV source n’y possède pas d’image-clé.</p>
           <p>La recherche est asynchrone, par conséquent, si vous appelez la méthode <codeph>seek()</codeph>, <codeph>currentTime</codeph> ne se met pas à niveau immédiatement. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      Arrête la lecture de la vidéo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Arrête la lecture de la vidéo. Si <codeph>autoRewind</codeph> est défini sur <codeph>true</codeph>, revient à la première image. Si la vidéo est déjà arrêtée, n’a aucun effet. Pour relancer la lecture, appelez <codeph>play()</codeph>. 
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="spark.components:VideoDisplay:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc>
      Si autoPlay = false, autoDisplayFirstFrame contrôle si la vidéo est chargée lorsque la propriété source est définie. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Si <codeph>autoPlay = false</codeph>, <codeph>autoDisplayFirstFrame</codeph> contrôle si la vidéo est chargée lorsque la propriété <codeph>source</codeph> est définie. Si <codeph>autoDisplayFirstFrame</codeph> est défini sur <codeph>true</codeph>, la première image de la vidéo est chargée si la vidéo est correctement dimensionnée. Si <codeph>autoDisplayFirstFrame</codeph> est défini sur <codeph>false</codeph>, aucune connexion à la source n’est établie, la première image n’est pas visible et la taille de la vidéo n’est pas déterminée jusqu’à ce qu’une personne tente de lire la vidéo. 
     
      <p>Si <codeph>autoPlay = true</codeph>, cet indicateur est ignoré. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      Indique si la vidéo doit se mettre en lecture immédiatement après la définition de la propriété source.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si la vidéo doit se mettre en lecture immédiatement après la définition de la propriété <codeph>source</codeph>. Si la valeur est <codeph>true</codeph>, le fichier vidéo est immédiatement placé en mémoire tampon et est lu.
           <p>Même si la propriété <codeph>autoPlay</codeph> est définie sur <codeph>false</codeph>, Flex commence à charger la vidéo après l’appel de la méthode <codeph>initialize()</codeph>. Pour Flash Media Server, cela signifie créer le flux et charger la première image à afficher. Dans le cas d’un téléchargement avec le protocole HTTP, Flex commence à télécharger le flux et affiche la première image.</p>
     
      <p>Si la propriété <codeph>playWhenHidden</codeph> est définie sur <codeph>false</codeph>, <codeph>autoPlay</codeph> a également une incidence sur ce qui se produit lorsque la vidéo revient sur la scène et est activée et visible. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      Indique si le fichier FLV doit être rembobiné jusqu’à la première image lorsque la lecture s’arrête, soit en appelant la méthode stop(), soit en atteignant la fin du flux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le fichier FLV doit être rembobiné jusqu’à la première image lorsque la lecture s’arrête, soit en appelant la méthode <codeph>stop()</codeph>, soit en atteignant la fin du flux.
           <p>Cette propriété n’a aucun effet pour la diffusion en continu live des vidéos.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      Nombre d’octets de données ayant été téléchargés dans l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre d’octets de données ayant été téléchargés dans l’application.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      Taille totale, en octets, des données téléchargées dans l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Taille totale, en octets, des données téléchargées dans l’application.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:currentTime:get"><apiName>currentTime</apiName><shortdesc>
      Heure actuelle de la tête de lecture, mesurée en secondes, depuis le début de la lecture de la vidéo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Heure actuelle de la tête de lecture, mesurée en secondes, depuis le début de la lecture de la vidéo. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:duration:get"><apiName>duration</apiName><shortdesc>
      Durée de lecture de la vidéo, en secondes.
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Durée de lecture de la vidéo, en secondes.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:loop:get"><apiName>loop</apiName><shortdesc>
      Indique si les médias doivent recommencer la lecture une fois cette dernière terminée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si les médias doivent recommencer la lecture une fois cette dernière terminée. La propriété <codeph>loop</codeph> est prioritaire par rapport la propriété <codeph>autoRewind</codeph>. Par conséquent, si boucle est définie sur <codeph>true</codeph>, la propriété <codeph>autoRewind</codeph> est ignorée.  
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc>
      Etat actuel de la vidéo. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Etat actuel de la vidéo. Voir la section org.osmf.media.MediaPlayerState pour les valeurs disponibles. 
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:muted:get"><apiName>muted</apiName><shortdesc>
      Définissez cette valeur sur true pour désactiver le son de la vidéo et sur false pour le réactiver. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Définissez cette valeur sur <codeph>true</codeph> pour désactiver le son de la vidéo et sur <codeph>false</codeph> pour le réactiver.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc>
      Contrôle si la lecture de la vidéo continue lorsqu’elle est « masquée ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Contrôle si la lecture de la vidéo continue lorsqu’elle est « masquée ». La vidéo est « masquée » lorsque sa propriété <codeph>visible</codeph> ou celle de l’un de ses ancêtres est définie sur <codeph>false</codeph> ou lorsque la vidéo est supprimée de la liste d’affichage. Si elle est définie sur <codeph>true</codeph>, la vidéo interrompt la lecture jusqu’à ce que la vidéo soit à nouveau visible. Si elle est définie sur <codeph>false</codeph>, la lecture de la vidéo continue lorsqu’elle est masquée.
     
      <p>Si la vidéo est désactivée (ou l’un de ses parents est désactivé), la vidéo s’interrompt également. Lorsque la vidéo est réactivée toutefois, la lecture n’est pas reprise. Ce comportement n’est pas contrôlé par <codeph>pauseWhenHidden</codeph>. Il est défini dans le composant VideoDisplay. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      Contient true si la vidéo est en cours de lecture ou qu’une tentative de lecture de la vidéo a lieu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient <codeph>true</codeph> si la vidéo est en cours de lecture ou qu’une tentative de lecture de la vidéo a lieu. 
      
      <p>La vidéo peut ne pas être en cours de lecture, car il se peut qu’elle effectue une recherche ou une mise en mémoire tampon, mais une tentative de lecture de la vidéo a lieu. </p> 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link><link href="spark.components.xml#VideoDisplay/pause()"><linktext>pause()</linktext></link><link href="spark.components.xml#VideoDisplay/stop()"><linktext>stop()</linktext></link><link href="spark.components.xml#VideoDisplay/autoPlay"><linktext>autoPlay</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
      La propriété scaleMode décrit différentes manières de dimensionner le contenu vidéo. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc>
      La propriété <codeph>scaleMode</codeph> décrit différentes manières de dimensionner le contenu vidéo. Vous pouvez définir <codeph>scaleMode</codeph> sur <codeph>"none"</codeph>, <codeph>"stretch"</codeph>, <codeph>"letterbox"</codeph>ou <codeph>"zoom"</codeph>. 
     
      <p>Si aucune valeur de largeur, de hauteur ou de contrainte n’est spécifiée sur le composant, cette propriété est sans effet. </p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      Source vidéo. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Source vidéo. 
     
      <p>Pour un téléchargement progressif, la source est simplement un chemin ou une URL pointant vers le fichier vidéo à lire. </p>
     
      <p>Pour une diffusion à flux continu (diffusion à flux continu enregistrée, diffusion à flux continu en direct ou diffusion à flux continu à taux multibits), la propriété source est un objet DynamicStreamingVideoSource. Si vous souhaitez simplement lire un flux vidéo en direct ou enregistré sans prise en charge de débits multiples, vous pouvez transmettre une chaîne URL pointant vers le flux vidéo. Toutefois, si vous procédez ainsi, le streamType est supposé être de type « all ». Vous ne disposez pas d’autant de contrôle sur la diffusion en continu qu’avec l’objet DynamicStreamingVideoSource. </p>
     
      <p>Remarque : Il n'est pas recommandé de configurer la source sur un MediaPlayerStateChangeEvent.LOADING ou un MediaPlayerStateChangeEvent.READY si la source a été définie précédemment. Il pourrait en résulter une boucle infinie ou un RTE. Si vous devez effectuer une telle opération, attendez un cadre supplémentaire pour définir la source.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.mediaClasses.xml#DynamicStreamingVideoSource"><linktext>spark.components.mediaClasses.DynamicStreamingVideoSource</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:videoObject:get"><apiName>videoObject</apiName><shortdesc>
      Objet Flash Player flash.media.Video sous-jacent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet Flash Player <codeph>flash.media.Video</codeph> sous-jacent.
     
      <p>Si la source est <codeph>null</codeph>, il peut ne pas y avoir encore d’objet <codeph>flash.media.Video</codeph> sous-jacent. Dans ce cas, l’objet <codeph>videoObject</codeph> renvoie <codeph>null</codeph>. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      Niveau du volume, indiqué comme valeur comprise entre 0 et 1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Niveau du volume, indiqué comme valeur comprise entre 0 et 1.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TileGroup"><apiName>TileGroup</apiName><shortdesc>
  Le conteneur TileGroup est une occurrence du conteneur Group utilisant la classe TileLayout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TileGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TileGroup
    <strong>Properties</strong>
    columnAlign="left"
    columnCount="-1"
    columnWidth="0"
    horizontalAlign="justify"
    horizontalGap="6"
    orientation="rows"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount"-1"
    requestedRowCount="-1"
    rowAlign="top"
    rowCount="-1"
    rowHeight="0"
    verticalAlign="justify"
    verticalGap="6"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur TileGroup est une occurrence du conteneur Group utilisant la classe TileLayout. Ne modifiez pas la propriété <codeph>layout</codeph>. Utilisez plutôt les propriétés de la classe TileGroup pour modifier les caractéristiques de la classe TileLayout.
 
  <p>Le conteneur TileGroup présente les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Suffisamment grand pour afficher ses enfants </entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>10000 pixels de large et 10000 pixels de haut</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileGroupExample.mxml"><swfblock conref="examples/TileGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link></related-links><apiConstructor id="spark.components:TileGroup:TileGroup"><apiName>TileGroup</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur. Initialise la propriété <codeph>layout</codeph> sur une occurrence de la classe TileLayout.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:TileGroup:columnAlign:get"><apiName>columnAlign</apiName><shortdesc conref="spark.layouts.TileLayout#columnAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.TileLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.TileLayout#columnWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalGap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:orientation:get"><apiName>orientation</apiName><shortdesc conref="spark.layouts.TileLayout#orientation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"rows"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#orientation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.TileLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.TileLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.TileLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.TileLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowAlign:get"><apiName>rowAlign</apiName><shortdesc conref="spark.layouts.TileLayout#rowAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.TileLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.TileLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalGap:get"><apiName>verticalGap</apiName><shortdesc conref="spark.layouts.TileLayout#verticalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalGap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>