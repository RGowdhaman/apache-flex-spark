<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.events"><apiName>spark.events</apiName><apiDetail/><apiClassifier id="spark.events:PopUpEvent"><apiName>PopUpEvent</apiName><shortdesc>
  Класс PopUpEvent представляет событие, отправленное SkinnablePopUpContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс PopUpEvent представляет событие, отправленное SkinnablePopUpContainer.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.events:PopUpEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:PopUpEvent:CLOSE</apiEventType><adobeApiEventClassifier>spark.events:PopUpEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:PopUpEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:PopUpEvent:OPEN</apiEventType><adobeApiEventClassifier>spark.events:PopUpEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:PopUpEvent:PopUpEvent"><apiName>PopUpEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, следует ли прослушивателю сохранять данные, полученные из SkinnablePopUpContainer. Только использованный с <codeph>PopUpEvent. CLOSE</codeph> событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> Данные для сохранения. Используется только с событием <codeph>PopUpEvent. CLOSE</codeph>.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:PopUpEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
      Константа PopUpEvent.CLOSE определяет значение свойства type объекта PopUpEvent для события close.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа PopUpEvent.CLOSE определяет значение свойства <codeph>type</codeph> объекта PopUpEvent для события <codeph>close</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>commit</codeph></entry><entry>Указывает, необходимо ли прослушивателю сохранять данные.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>Данные</codeph></entry><entry>Любые данные возвратились к программе из SkinnablePopUpContainer.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>Тип</codeph></entry><entry>PopUpEvent. OPEN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:PopUpEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
      Константа PopUpEvent.OPEN определяет значение свойства type объекта PopUpEvent события open.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа PopUpEvent.OPEN определяет значение свойства <codeph>type</codeph> объекта PopUpEvent события <codeph>open</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>commit</codeph></entry><entry>Не используется</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>Данные</codeph></entry><entry>Не используется</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>Тип</codeph></entry><entry>PopUpEvent. OPEN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:PopUpEvent:commit"><apiName>commit</apiName><shortdesc>
      Указывает, должен ли приемник событий передать данные, возвращенные в свойствах данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Указывает, должен ли приемник событий передать данные, возвращенные в <codeph>данные</codeph> свойства. Используется только с событием <codeph>PopUpEvent.CLOSE</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:PopUpEvent:data"><apiName>data</apiName><shortdesc>
       Данные для сохранения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
       Данные для сохранения. Используется только с событием <codeph>PopUpEvent.CLOSE</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:GridCaretEvent"><apiName>GridCaretEvent</apiName><shortdesc>
  Класс GridCaretEvent представляет события, отправляемые при изменении символа вставки в элементе управления Spark DataGrid в результате действий пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс GridCaretEvent представляет события, отправляемые при изменении символа вставки в элементе управления Spark DataGrid в результате действий пользователя.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.xml#Grid"><linktext>spark.components.Grid</linktext></link><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links><adobeApiEvent id="spark.events:GridCaretEvent:CARET_CHANGE_caretChange"><apiName>caretChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridCaretEvent:CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events:GridCaretEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:GridCaretEvent:GridCaretEvent"><apiName>GridCaretEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata><asCustoms><spark.events.GridSelectionEventKind>
     
      </spark.events.GridSelectionEventKind></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldRowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от нуля индекс столбца позиции символа вставки перед изменением. Если для <codeph>selectionMode</codeph> указано <codeph>SelectionMode.SINGLE_ROW</codeph> или <codeph>SelectionMode.MULTIPLE_ROWS</codeph>, используется значение -1.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldColumnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от нуля индекс строки позиции символа вставки перед изменением.
     
      </apiDesc></apiParam><apiParam><apiItemName>newRowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от нуля индекс столбца позиции символа вставки после изменения. Если для <codeph>selectionMode</codeph> указано <codeph>SelectionMode.SINGLE_ROW</codeph> или <codeph>SelectionMode.MULTIPLE_ROWS</codeph>, используется значение -1.
     
      </apiDesc></apiParam><apiParam><apiItemName>newColumnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от нуля индекс строки позиции символа вставки после изменения.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.components.xml#DataGrid/columns"><linktext>spark.components.DataGrid.columns</linktext></link><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link></related-links></apiConstructor><apiValue id="spark.events:GridCaretEvent:CARET_CHANGE"><apiName>CARET_CHANGE</apiName><shortdesc>
      Константа GridSelectionEvent.CARET_CHANGE определяет значение свойства type объекта события caretChange, указывающего на изменение текущего положения символа вставки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caretChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>GridSelectionEvent.CARET_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>caretChange</codeph>, указывающего на изменение текущего положения символа вставки.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>newColumnIndex</codeph></entry><entry>Отсчитываемый от нуля индекс столбца позиции символа вставки после его изменения. Используется значение -1, если<codeph>selectionMode</codeph> основан на строке.</entry></row><row><entry><codeph>newRowIndex</codeph></entry><entry>Отсчитываемый от нуля индекс строки позиции символа вставки после его изменения.</entry></row><row><entry><codeph>oldColumnIndex</codeph></entry><entry>Отсчитываемый от нуля индекс столбца позиции символа вставки перед его изменением. Используется значение -1, если<codeph>selectionMode</codeph> основан на строке.</entry></row><row><entry><codeph>oldRowIndex</codeph></entry><entry>Отсчитываемый от нуля индекс строки позиции символа вставки перед его изменением.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdCaretEvent.CARET_CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridCaretEvent:newColumnIndex"><apiName>newColumnIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс столбца в позиции символа вставки после его изменения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс столбца в позиции символа вставки после его изменения.  
     
      <p>Если для <codeph>selectionMode</codeph> указано <codeph>SelectionMode.SINGLE_ROW</codeph> или <codeph>SelectionMode.MULTIPLE_ROWS</codeph>, то используется значение -1 для указания того, что он не используется.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/columns"><linktext>spark.components.DataGrid.columns</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link></related-links></apiValue><apiValue id="spark.events:GridCaretEvent:newRowIndex"><apiName>newRowIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс строки в позиции символа вставки после его изменения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс строки в позиции символа вставки после его изменения.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.events:GridCaretEvent:oldColumnIndex"><apiName>oldColumnIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс столбца в позиции символа вставки перед его изменением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс столбца в позиции символа вставки перед его изменением.      
     
      <p>Если для <codeph>selectionMode</codeph> указано <codeph>SelectionMode.SINGLE_ROW</codeph> или <codeph>SelectionMode.MULTIPLE_ROWS</codeph>, то используется значение -1 для указания того, что он не используется.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/columns"><linktext>spark.components.DataGrid.columns</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link></related-links></apiValue><apiValue id="spark.events:GridCaretEvent:oldRowIndex"><apiName>oldRowIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс строки в позиции символа вставки перед его изменением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс строки в позиции символа вставки перед его изменением.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.events:DropDownEvent"><apiName>DropDownEvent</apiName><shortdesc>
  Класс DropDownEvent представляет объект события, передаваемый прослушивателю событий open и close.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс DropDownEvent представляет объект события, передаваемый прослушивателю событий <codeph>open</codeph> и <codeph>close</codeph>.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.events:DropDownEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:DropDownEvent:CLOSE</apiEventType><adobeApiEventClassifier>spark.events:DropDownEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:DropDownEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:DropDownEvent:OPEN</apiEventType><adobeApiEventClassifier>spark.events:DropDownEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:DropDownEvent:DropDownEvent"><apiName>DropDownEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>Значение, указывающее тип входного действия, запустившего это событие
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:DropDownEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
      Константа DropDownEvent.CLOSE определяет значение свойства type объекта события close.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>DropDownEvent.CLOSE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>close</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>Значение, указывающее тип входного действия, запустившего это событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:DropDownEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
      Константа DropDownEvent.OPEN определяет значение свойства type объекта события open.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>DropDownEvent.OPEN</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>open</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>Значение, указывающее тип входного действия, запустившего это событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:DropDownEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
      Если открытие иди закрытие элемента управления произошло в ответ на действие пользователя, это свойство содержит значение, указывающее тип входного действия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      Если открытие иди закрытие элемента управления произошло в ответ на действие пользователя, это свойство содержит значение, указывающее тип входного действия. Допустимы следующие значения: <codeph>InteractionInputType.MOUSE</codeph> или <codeph>InteractionInputType.KEYBOARD</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:IndexChangeEvent"><apiName>IndexChangeEvent</apiName><shortdesc>
  Класс IndexChangeEvent представляет события, передаваемые при изменениях индекса в компоненте Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс IndexChangeEvent представляет события, передаваемые при изменениях индекса в компоненте Spark.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ListBase"><linktext>spark.components.supportClasses.ListBase</linktext></link><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link></related-links><adobeApiEvent id="spark.events:IndexChangeEvent:CARET_CHANGE_caretChange"><apiName>caretChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:IndexChangeEvent:CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events:IndexChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:IndexChangeEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:IndexChangeEvent:CHANGE</apiEventType><adobeApiEventClassifier>spark.events:IndexChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:IndexChangeEvent:CHANGING_changing"><apiName>changing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:IndexChangeEvent:CHANGING</apiEventType><adobeApiEventClassifier>spark.events:IndexChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:IndexChangeEvent:IndexChangeEvent"><apiName>IndexChangeEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от нуля индекс перед изменением.
     
      </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от нуля индекс после изменения.
     
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:IndexChangeEvent:CARET_CHANGE"><apiName>CARET_CHANGE</apiName><shortdesc>
      Константа IndexChangeEvent.CARET_CHANGE определяет значение свойства type объекта события для события caretChange, которое указывает на то, что выделенный в настоящее время элемент будет изменяться.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caretChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>IndexChangeEvent.CARET_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события для события <codeph>caretChange</codeph> которое указывает на то, что выделенный в настоящее время элемент будет изменяться. 
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>newIndex</codeph></entry><entry>Отсчитываемый от нуля индекс выбранного элемента после изменения.</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>Отсчитываемый от нуля индекс выбранного элемента перед изменением.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>Тип</codeph></entry><entry>IndexChangeEvent.CARET_CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:IndexChangeEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
      Константа IndexChangeEvent.CHANGE определяет значение свойства type объекта события для события change, которое указывает на изменение индекса, например когда элемент управления на основе List изменяет свое выделение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>IndexChangeEvent.CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события для события <codeph>change</codeph>, которое указывает на изменение индекса, например когда элемент управления на основе List изменяет свое выделение. 
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>newIndex</codeph></entry><entry>Отсчитываемый от нуля индекс после изменения.</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>Отсчитываемый от нуля индекс перед изменением.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>Тип</codeph></entry><entry>IndexChangeEvent.CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:IndexChangeEvent:CHANGING"><apiName>CHANGING</apiName><shortdesc>
      Константа IndexChangeEvent.CHANGING определяет значение свойства type объекта события для события changing, которое указывает на то, что текущее выделение скоро изменится.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>changing</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>IndexChangeEvent.CHANGING</codeph> определяет значение свойства <codeph>type</codeph> объекта события для события <codeph>changing</codeph>, которое указывает на то, что текущее выделение скоро изменится. 
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>newIndex</codeph></entry><entry>Отсчитываемый от нуля индекс выбранного элемента после изменения.</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>Отсчитываемый от нуля индекс выбранного элемента перед изменением.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>Тип</codeph></entry><entry>IndexChangeEvent.CHANGING</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:IndexChangeEvent:newIndex"><apiName>newIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс после изменения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс после изменения. Для событий <codeph>change</codeph> это индекс текущего нижестоящего элемента.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:IndexChangeEvent:oldIndex"><apiName>oldIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс перед изменением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс перед изменением. Для событий <codeph>change</codeph> это индекс предыдущего нижестоящего элемента. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:GridItemEditorEvent"><apiName>GridItemEditorEvent</apiName><shortdesc>
  Класс GridItemEditorEvent представляет события, отправляемые в течение жизненного цикла редактора элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс GridItemEditorEvent представляет события, отправляемые в течение жизненного цикла редактора элементов.
 
  <p>Жизненный цикл начинается с отправки события <codeph> GRID_ITEM_EDITOR_SESSION_STARTING</codeph>. Для остановки сеанса редактирования отмените событие с помощью вызова метода <codeph>preventDefault()</codeph> в прослушивателе событий.</p>
 
  <p>После открытия редактора элементов отправляется <codeph>GRID_ITEM_EDITOR_SESSION_START</codeph> для уведомления прослушивателей об открытии редактора.</p>
 
  <p>Сеанс редактирования можно сохранить или отменить. В случае сохранения сеанса отправляется событие <codeph>GRID_ITEM_EDITOR_SESSION_SAVE</codeph>. В случае отмены сеанса редактирования отправляется событие <codeph>GRID_ITEM_EDITOR_SESSION_CANCEL</codeph>. </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.gridClasses.xml#IGridItemEditor"><linktext>spark.components.gridClasses.IGridItemEditor</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/itemEditor"><linktext>spark.components.gridClasses.GridColumn.itemEditor</linktext></link></related-links><adobeApiEvent id="spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_CANCEL_gridItemEditorSessionCancel"><apiName>gridItemEditorSessionCancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_CANCEL</apiEventType><adobeApiEventClassifier>spark.events:GridItemEditorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_SAVE_gridItemEditorSessionSave"><apiName>gridItemEditorSessionSave</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_SAVE</apiEventType><adobeApiEventClassifier>spark.events:GridItemEditorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_STARTING_gridItemEditorSessionStarting"><apiName>gridItemEditorSessionStarting</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_STARTING</apiEventType><adobeApiEventClassifier>spark.events:GridItemEditorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_START_gridItemEditorSessionStart"><apiName>gridItemEditorSessionStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_START</apiEventType><adobeApiEventClassifier>spark.events:GridItemEditorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></adobeApiEvent><apiConstructor id="spark.events:GridItemEditorEvent:GridItemEditorEvent"><apiName>GridItemEditorEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="uint"/><apiData>-1</apiData><apiDesc>Отсчитываемый от нуля индекс редактируемого столбца.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="uint"/><apiData>-1</apiData><apiDesc>Отсчитываемый от нуля индекс редактируемого столбца.
     
      </apiDesc></apiParam><apiParam><apiItemName>column</apiItemName><apiOperationClassifier>spark.components.gridClasses:GridColumn</apiOperationClassifier><apiData>null</apiData><apiDesc>Редактируемый столбец.
       
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiConstructor><apiValue id="spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_CANCEL"><apiName>GRID_ITEM_EDITOR_SESSION_CANCEL</apiName><shortdesc>
      Константа GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL определяет значение свойства type объекта события cancelridItemEditor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridItemEditorSessionCancel</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>cancelridItemEditor</codeph>. Отправляется после закрытия редактора элементов без сохранения данных.  
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Отсчитываемый от нуля индекс столбца объекта, который редактировался, но не был изменен.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Отсчитываемый от нуля индекс строки объекта, который редактировался, но не был изменен.</entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец ячейки, которая редактировалась.
         </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>
         GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_SAVE"><apiName>GRID_ITEM_EDITOR_SESSION_SAVE</apiName><shortdesc>
      Константа GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE определяет значение свойства type объекта события saveGridItemEditor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridItemEditorSessionSave</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>saveGridItemEditor</codeph>. Отправляется после сохранения данных редактора элементов в поставщике данных и закрытия редактора.  
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Отсчитываемый от нуля индекс столбца объекта, который был изменен.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Отсчитываемый от нуля индекс строки объекта, который был изменен.</entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец ячейки, которая редактировалась.
         </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>
         GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_STARTING"><apiName>GRID_ITEM_EDITOR_SESSION_STARTING</apiName><shortdesc>
      Константа GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING определяет значение свойства type объекта события startGridItemEditorSession.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridItemEditorSessionStarting</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>startGridItemEditorSession</codeph>. Отправляется при запросе на создание нового сеанса редактора элементов. Прослушиватель может динамически определять, является ли ячейка редактируемой, и отменять редактирование, вызывая метод <codeph>preventDefault()</codeph>, если ячейка не является редактируемой. Прослушиватель также может динамически менять используемый редактор, присваивая другой редактор элементов столбцу сетки.
     
      <p>В случае отмены этого события редактор элементов не будет создан.</p>
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Отсчитываемый от нуля индекс столбца запрашиваемого редактора элементов.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Отсчитываемый от нуля индекс строки запрашиваемого редактора элементов.</entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец ячейки, связанной с запросом редактирования.
         </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>
         GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.events:GridItemEditorEvent:GRID_ITEM_EDITOR_SESSION_START"><apiName>GRID_ITEM_EDITOR_SESSION_START</apiName><shortdesc>
      Константа GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START определяет значение свойства type объекта события openGridItemEditor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridItemEditorSessionStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>openGridItemEditor</codeph>. Отправляется непосредственно после открытия редактора элементов. 
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Отсчитываемый от нуля индекс столбца редактора элементов.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Отсчитываемый от нуля индекс строки редактора элементов.</entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец редактируемой ячейки.
         </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>
         GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.events:GridItemEditorEvent:columnIndex"><apiName>columnIndex</apiName><shortdesc> 
      Отсчитываемый от нуля индекс редактируемого столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc> 
      Отсчитываемый от нуля индекс редактируемого столбца.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridItemEditorEvent:column"><apiName>column</apiName><shortdesc>
      Столбец редактируемой ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.gridClasses:GridColumn</apiValueClassifier></apiValueDef><apiDesc>
      Столбец редактируемой ячейки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridItemEditorEvent:rowIndex"><apiName>rowIndex</apiName><shortdesc>
      Индекс редактируемой строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс редактируемой строки.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:TextOperationEvent"><apiName>TextOperationEvent</apiName><shortdesc>
  Класс TextOperationEvent представляет события, передаваемые в случае изменения текстового содержимого вследствие выполнения пользователем каких-либо операций, таких как вставка символов, возврат на одну позицию, вставка, изменение атрибутов текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс TextOperationEvent представляет события, передаваемые в случае изменения текстового содержимого вследствие выполнения пользователем каких-либо операций, таких как вставка символов, возврат на одну позицию, вставка, изменение атрибутов текста.
  
  <p>Это событие отправляется подклассами класса SkinnableTextBase. Это включает RichEditableText и классы, которые используют RichEditableText, например ComboBox, TextInput и TextArea. Элементы управления Text, у которых отсутствует взаимодействие с пользователем, например RichText и Label, не отправляют события этого типа.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase"><linktext>spark.components.supportClasses.SkinnableTextBase</linktext></link></related-links><adobeApiEvent id="spark.events:TextOperationEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TextOperationEvent:CHANGE</apiEventType><adobeApiEventClassifier>spark.events:TextOperationEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TextOperationEvent:CHANGING_changing"><apiName>changing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TextOperationEvent:CHANGING</apiEventType><adobeApiEventClassifier>spark.events:TextOperationEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:TextOperationEvent:TextOperationEvent"><apiName>TextOperationEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>operation</apiItemName><apiType value="flashx.textLayout.operations:FlowOperation"/><apiData>null</apiData><apiDesc>Объект FlowOperation, представляющий операцию редактирования текста, выполняемую пользователем.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:TextOperationEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
      Константа TextOperationEvent.CHANGE определяет значение свойства type объекта события change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TextOperationEvent.CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>change</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>Операция</codeph></entry><entry>Объект FlowOperation, описывающий операцию редактирования текста, выполняемую пользователем.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TextOperationEvent:CHANGING"><apiName>CHANGING</apiName><shortdesc>
      Константа TextOperationEvent.CHANGING определяет значение свойства type объекта события changing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>changing</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TextOperationEvent.CHANGING</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>changing</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>Операция</codeph></entry><entry>Объект FlowOperation, описывающий операцию редактирования текста, выполняемую пользователем.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TextOperationEvent:operation"><apiName>operation</apiName><shortdesc>
      Объект FlowOperation, представляющий операцию редактирования текста, выполняемую пользователем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flashx.textLayout.operations:FlowOperation"/></apiValueDef><apiDesc>
      Объект FlowOperation, представляющий операцию редактирования текста, выполняемую пользователем.
     
      <p>Это может быть InsertTextOperation, DeleteTextOperation, SplitParagraphOperation, CutOperation, PasteOperation, UndoOperation или другой подкласс FlowOperation.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.operations.InsertTextOperation.xml"><linktext>flashx.textLayout.operations.InsertTextOperation</linktext></link><link href="" invalidHref="flashx.textLayout.operations.DeleteTextOperation.xml"><linktext>flashx.textLayout.operations.DeleteTextOperation</linktext></link><link href="" invalidHref="flashx.textLayout.operations.SplitParagraphOperation.xml"><linktext>flashx.textLayout.operations.SplitParagraphOperation</linktext></link><link href="" invalidHref="flashx.textLayout.operations.PasteOperation.xml"><linktext>flashx.textLayout.operations.PasteOperation</linktext></link><link href="" invalidHref="flashx.textLayout.operations.CutOperation.xml"><linktext>flashx.textLayout.operations.CutOperation</linktext></link><link href="" invalidHref="flashx.textLayout.operations.UndoOperation.xml"><linktext>flashx.textLayout.operations.UndoOperation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.events:RendererExistenceEvent"><apiName>RendererExistenceEvent</apiName><shortdesc>
  Класс RendererExistenceEvent представляет события, передаваемые при добавлении или удалении средства визуализации DataGroup Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс RendererExistenceEvent представляет события, передаваемые при добавлении или удалении средства визуализации DataGroup Spark.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link></related-links><adobeApiEvent id="spark.events:RendererExistenceEvent:RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:RendererExistenceEvent:RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events:RendererExistenceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:RendererExistenceEvent:RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:RendererExistenceEvent:RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events:RendererExistenceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:RendererExistenceEvent:RendererExistenceEvent"><apiName>RendererExistenceEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiData>null</apiData><apiDesc>Ссылка на добавленное или удаленное средство визуализации элемента.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Индекс в поставщике данных, связанном с добавленным или удаленным средством визуализации.
     
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Элемент данных, отображаемый при помощи этого средства визуализации.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:RendererExistenceEvent:RENDERER_ADD"><apiName>RENDERER_ADD</apiName><shortdesc>
      Константа RendererExistenceEvent.RENDERER_ADD определяет значение свойства type объекта события rendererAdd.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rendererAdd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>RendererExistenceEvent.RENDERER_ADD</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>rendererAdd</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>data</codeph></entry><entry>Элемент данных, отображаемый при помощи этого средства визуализации.</entry></row><row><entry><codeph>index</codeph></entry><entry>Индекс поставщика данных для добавленного средства визуализации.</entry></row><row><entry><codeph>renderer</codeph></entry><entry>Содержит ссылку на добавленное средство визуализации</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:RendererExistenceEvent:RENDERER_REMOVE"><apiName>RENDERER_REMOVE</apiName><shortdesc>
      Константа RendererExistenceEvent. RENDERER_REMOVE определяет значение свойства type объекта события rendererRemove.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rendererRemove</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>RendererExistenceEvent. RENDERER_REMOVE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>rendererRemove</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>data</codeph></entry><entry>Элемент данных, отображаемый при помощи этого средства визуализации.</entry></row><row><entry><codeph>index</codeph></entry><entry>Индекс поставщика данных для удаляемого средства визуализации.</entry></row><row><entry><codeph>renderer</codeph></entry><entry>Содержит ссылку на средство визуализации, подлежащее удалению.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:RendererExistenceEvent:data"><apiName>data</apiName><shortdesc>
      Элемент данных средства визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Элемент данных средства визуализации.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:RendererExistenceEvent:index"><apiName>index</apiName><shortdesc>
      Позиция индекса, в которую добавлено или из которой удалено средство визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Позиция индекса, в которую добавлено или из которой удалено средство визуализации.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:RendererExistenceEvent:renderer"><apiName>renderer</apiName><shortdesc>
      Ссылка на добавленное или удаленное средство визуализации элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      Ссылка на добавленное или удаленное средство визуализации элемента.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:ListEvent"><apiName>ListEvent</apiName><shortdesc>
  События ListEvent, отправляемые компонентами ListBase, например ButtonBar и List, в ответ на события MouseEvent, создаются со свойствами входящих событий мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  События ListEvent, отправляемые компонентами ListBase, например ButtonBar и List, в ответ на события MouseEvent, создаются со свойствами входящих событий мыши. Положение координат x и y события списка, т. е. значение свойств localX и localY, определяется относительно всего компонента, а не только той его части, которая была прокручена в область видимости. Аналогично, индексы строки и столбца события могут соответствовать ячейке, которая не прокручена в область видимости.
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.events:ListEvent:ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:ListEvent:ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:ListEvent:ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:ListEvent:ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:ListEvent:ListEvent"><apiName>ListEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Определяет действие мыши, в результате которого было отправлено это событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiType value="flash.display:InteractiveObject"/><apiData>null</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Координата X события относительно List.
     
      </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Координата y события относительно List.
     
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Свойство <codeph>relatedObject</codeph> события MouseEvent, которое вызвало этот ListEvent.
     
      </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, нажата ли клавиша Control.
     
      </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Указывает, нажата ли клавиша Alt.
     
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Указывает, нажата ли клавиша Shift.
     
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Указывает, нажата ли клавиша Control.
     
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>spark.components:IItemRenderer</apiOperationClassifier><apiData>null</apiData><apiDesc>Не используется.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор. Как правило, вызывается управляющим элементом Flex и не используется в коде приложения.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:ListEvent:ITEM_ROLL_OUT"><apiName>ITEM_ROLL_OUT</apiName><shortdesc>
      Константа ListEvent.ITEM_ROLL_OUT определяет значение свойства type объекта ListEvent для события itemRollOut, указывающего, что пользователь переместил указатель мыши за пределы области видимого элемента в элементе управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemRollOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа ListEvent.ITEM_ROLL_OUT определяет значение свойства <codeph>type</codeph> объекта ListEvent для события <codeph>itemRollOut</codeph>, указывающего, что пользователь переместил указатель мыши за пределы области видимого элемента в элементе управления.
     
      <p>Свойства объекта события имеют следующие значения:</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>itemIndex</codeph></entry><entry>Индекс поставщика данных элемента, отображаемого средством визуализации элементов, в котором произошло событие.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для средства визуализации элементов.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Средство визуализации элементов, которое отображало этот элемент.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>Тип</codeph></entry><entry>ListEvent.ITEM_ROLL_OUT</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ListEvent:ITEM_ROLL_OVER"><apiName>ITEM_ROLL_OVER</apiName><shortdesc>
      Константа ListEvent.ITEM_ROLL_OVER определяет значение свойства type объекта ListEvent для события itemRollOver, указывающего, что пользователь провел указатель мыши над видимым элементом в элементе управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemRollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа ListEvent.ITEM_ROLL_OVER определяет значение свойства <codeph>type </codeph> объекта ListEvent для события <codeph>itemRollOver</codeph>, указывающего, что пользователь провел указатель мыши над видимым элементом в элементе управления.
     
      <p>Свойства объекта события имеют следующие значения:</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>itemIndex</codeph></entry><entry>Индекс поставщика данных элемента, отображаемого средством визуализации элементов, в котором произошло событие.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для средства визуализации элементов.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Средство визуализации элементов, которое отображало этот элемент.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>Тип</codeph></entry><entry>ListEvent.ITEM_ROLL_OVER</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ListEvent:itemIndex"><apiName>itemIndex</apiName><shortdesc>
      Индекс элемента данных, которое отображается в средстве визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс элемента данных, которое отображается в средстве визуализации элементов. Это свойств позволяет получать доступ к элементу поставщика данных. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ListEvent:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      Средство визуализации элементов, которое отображает элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:IItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      Средство визуализации элементов, которое отображает элемент.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ListEvent:item"><apiName>item</apiName><shortdesc>
      Элемент поставщика данных, который отображается в средстве визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Элемент поставщика данных, который отображается в средстве визуализации элементов.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:ElementExistenceEvent"><apiName>ElementExistenceEvent</apiName><shortdesc>
  Класс ElementExistenceEvent представляет события, передаваемые при создании или удалении элемента группы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ElementExistenceEvent представляет события, передаваемые при создании или удалении элемента группы. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link></related-links><adobeApiEvent id="spark.events:ElementExistenceEvent:ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:ElementExistenceEvent:ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events:ElementExistenceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:ElementExistenceEvent:ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:ElementExistenceEvent:ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events:ElementExistenceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:ElementExistenceEvent:ElementExistenceEvent"><apiName>ElementExistenceEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiData>null</apiData><apiDesc>Ссылка на добавленный или удаленный элемент.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция индекса, в которую добавлен или из которой удален элемент
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:ElementExistenceEvent:ELEMENT_ADD"><apiName>ELEMENT_ADD</apiName><shortdesc>
      Константа ElementExistenceEvent.ELEMENT_ADD определяет значение свойства type объекта события elementAdd.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>elementAdd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>ElementExistenceEvent.ELEMENT_ADD</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>elementAdd</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>element</codeph></entry><entry>Содержит ссылку на добавленный визуальный элемент.</entry></row><row><entry><codeph>index</codeph></entry><entry>Позиция индекса, в которую добавлен визуальный элемент</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ElementExistenceEvent:ELEMENT_REMOVE"><apiName>ELEMENT_REMOVE</apiName><shortdesc>
      Константа ElementExistenceEvent.ELEMENT_REMOVE определяет значение свойства type объекта события elementRemove.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>elementRemove</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>ElementExistenceEvent.ELEMENT_REMOVE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>elementRemove</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>element</codeph></entry><entry>Ссылка на визуальный элемент, подлежащий удалению.</entry></row><row><entry><codeph>index</codeph></entry><entry>Индекс удаляемого визуального элемента.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ElementExistenceEvent:element"><apiName>element</apiName><shortdesc>
      Ссылка на добавленный или удаленный визуальный элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      Ссылка на добавленный или удаленный визуальный элемент.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:ElementExistenceEvent:index"><apiName>index</apiName><shortdesc>
      Позиция индекса, в которую добавлен или из которой удален визуальный элемент..</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Позиция индекса, в которую добавлен или из которой удален элемент
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:GridSortEvent"><apiName>GridSortEvent</apiName><shortdesc>
  Класс GridSortEvent представляет события, которые отправлены, когда поставщик данных элемента управления DataGrid Искры сортирован как результат пользователя, нажимающего на заголовок столбца в DataGrid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс GridSortEvent представляет события, которые отправлены, когда поставщик данных элемента управления DataGrid Искры сортирован как результат пользователя, нажимающего на заголовок столбца в DataGrid.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link><link href="spark.components.xml#GridColumnHeaderGroup"><linktext>spark.components.GridColumnHeaderGroup</linktext></link></related-links><adobeApiEvent id="spark.events:GridSortEvent:SORT_CHANGE_sortChange"><apiName>sortChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridSortEvent:SORT_CHANGE</apiEventType><adobeApiEventClassifier>spark.events:GridSortEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.xml#DataGrid/sortByColumns"><linktext>spark.components. DataGrid.sortByColumns</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridSortEvent:SORT_CHANGING_sortChanging"><apiName>sortChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridSortEvent:SORT_CHANGING</apiEventType><adobeApiEventClassifier>spark.events:GridSortEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.xml#DataGrid/sortByColumns"><linktext>spark.components. DataGrid.sortByColumns</linktext></link></related-links></adobeApiEvent><apiConstructor id="spark.events:GridSortEvent:GridSortEvent"><apiName>GridSortEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Вектор индексов столбца сортированных столбцов.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldSortFields</apiItemName><apiType value="Array"/><apiDesc>Массив ISortFields для последнего вида.
     
      </apiDesc></apiParam><apiParam><apiItemName>newSortFields</apiItemName><apiType value="Array"/><apiDesc>Массив ISortFields для этого вида.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:GridSortEvent:SORT_CHANGE"><apiName>SORT_CHANGE</apiName><shortdesc>
      GridSortEvent. Константа SORT_CHANGE определяет значение свойства текста объекта event для sortChange события, которое обозначает, что к фильтру вида только что применялись к dataProvider коллекции сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sortChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
       <codeph>GridSortEvent. SORT_CHANGE</codeph> константа определяет значение <codeph>тип</codeph> свойства объекта event для a <codeph>sortChange</codeph> событие, которое обозначает, что к фильтру вида только что применялись к сетке <codeph>dataProvider</codeph> коллекция.
     
      <p>Как правило, если мышь заголовка столбца нажимает, вызвал вид, то последний индекс <codeph>columnIndices</codeph> индекс столбца. Обратите внимание, что интерактивные виды не обязательно вызваны мышью, нажимают.</p>
     
      <p>Это событие отправляется при взаимодействии пользователя с элементом управления. Когда вы сортируете коллекцию поставщика данных с точки зрения программы, компонент не отправляется <codeph>sortChange</codeph> событие. </p>
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndices</codeph></entry><entry>Вектор индексов столбца сортированных столбцов.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если для регистрации прослушивателя событий используется <codeph>myDataGrid.addEventListener()</codeph>, то значением <codeph>currentTarget</codeph> является myDataGrid. </entry></row><row><entry><codeph>newSortFields</codeph></entry><entry>Массив ISortFields для этого вида.</entry></row><row><entry><codeph>oldSortFields</codeph></entry><entry>Массив ISortFields для последнего вида.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GridSelectionEvent.SORT_CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.xml#DataGrid/sortByColumns"><linktext>spark.components. DataGrid.sortByColumns</linktext></link></related-links></apiValue><apiValue id="spark.events:GridSortEvent:SORT_CHANGING"><apiName>SORT_CHANGING</apiName><shortdesc>
      Константа GridSortEvent.SORT_CHANGING определяет значение свойства type объекта события sortChanging, которое указывает, что фильтр сортировки будет применен к коллекции dataProvider сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sortChanging</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>GridSortEvent.SORT_CHANGING</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>sortChanging</codeph>, которое указывает, что фильтр сортировки будет применен к коллекции <codeph>dataProvider</codeph> сетки. Вызовите preventDefault() для этого события, чтобы не выполнять сортировку, или измените <codeph>columnIndices</codeph> и <codeph>newSortFields</codeph>, если необходимо изменить стандартное поведение сортировки.
     
      <p>Как правило, если мышь заголовка столбца нажимает, вызвал вид, то последний индекс <codeph>columnIndices</codeph> индекс столбца. Обратите внимание, что интерактивные виды не обязательно вызваны мышью, нажимают.</p>
     
      <p>Это событие отправляется при взаимодействии пользователя с элементом управления. Когда вы сортируете коллекцию поставщика данных с точки зрения программы, компонент не отправляется <codeph>sortChanging</codeph> событие. </p>
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndices</codeph></entry><entry>Вектор индексов столбца столбцов, которые будут сортированы.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если для регистрации прослушивателя событий используется <codeph>myDataGrid.addEventListener()</codeph>, то значением <codeph>currentTarget</codeph> является myDataGrid. </entry></row><row><entry><codeph>newSortFields</codeph></entry><entry>Массив ISortFields для этого вида.</entry></row><row><entry><codeph>oldSortFields</codeph></entry><entry>Массив ISortFields для последнего вида.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GridSelectionEvent. SORT_CHANGING</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.xml#DataGrid/sortByColumns"><linktext>spark.components. DataGrid.sortByColumns</linktext></link></related-links></apiValue><apiValue id="spark.events:GridSortEvent:columnIndices"><apiName>columnIndices</apiName><shortdesc>
      Вектор индексов столбца сортированных столбцов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Vector$int"/></apiValueDef><apiDesc>
      Вектор индексов столбца сортированных столбцов. Если <codeph>тип</codeph> <codeph>GridSelectionEvent. SORT_CHANGING</codeph> это значение может быть изменено, и оно используется, чтобы обновить сетку <codeph>columnHeaderGroup</codeph><codeph>visibleSortIndicatorIndices</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/columnHeaderGroup"><linktext>spark.components. DataGrid.columnHeaderGroup</linktext></link><link href="spark.components.xml#GridColumnHeaderGroup/visibleSortIndicatorIndices"><linktext>spark.components.GridColumnHeaderGroup.visibleSortIndicatorIndices</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/columnIndex"><linktext>spark.components.gridClasses. GridColumn.columnIndex</linktext></link></related-links></apiValue><apiValue id="spark.events:GridSortEvent:newSortFields"><apiName>newSortFields</apiName><shortdesc>
      Массив ISortFields для этого вида.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив ISortFields для этого вида. Если <codeph>тип</codeph> <codeph>GridSelectionEvent. SORT_CHANGING</codeph> это значение может быть изменено, и оно используется, чтобы сортировать <codeph>dataProvider</codeph> из сетки.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortCompareFunction"><linktext>spark.components.gridClasses. GridColumn.sortCompareFunction</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortDescending"><linktext>spark.components.gridClasses. GridColumn.sortDescending</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortField"><linktext>spark.components.gridClasses. GridColumn.sortField</linktext></link></related-links></apiValue><apiValue id="spark.events:GridSortEvent:oldSortFields:get"><apiName>oldSortFields</apiName><shortdesc>
      Массив ISortFields для последнего вида.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив ISortFields для последнего вида. Значением может быть <codeph>null</codeph>. Элементы в этом Массиве не должны быть изменены.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortCompareFunction"><linktext>spark.components.gridClasses. GridColumn.sortCompareFunction</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortDescending"><linktext>spark.components.gridClasses. GridColumn.sortDescending</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortField"><linktext>spark.components.gridClasses. GridColumn.sortField</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.events:LoaderInvalidationEvent"><apiName>LoaderInvalidationEvent</apiName><shortdesc>
  Класс LoaderInvalidationEvent представляет события, отправляемые для того, чтобы уведомить экземпляры ContentRequest об аннулировании их исходного запроса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс LoaderInvalidationEvent представляет события, отправляемые для того, чтобы уведомить экземпляры ContentRequest об аннулировании их исходного запроса.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.events:LoaderInvalidationEvent:INVALIDATE_LOADER_invalidateLoader"><apiName>invalidateLoader</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:LoaderInvalidationEvent:INVALIDATE_LOADER</apiEventType><adobeApiEventClassifier>spark.events:LoaderInvalidationEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:LoaderInvalidationEvent:LoaderInvalidationEvent"><apiName>LoaderInvalidationEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>content</apiItemName><apiType value="any"/><apiDesc>содержимое, для которого аннулируются данные.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:LoaderInvalidationEvent:INVALIDATE_LOADER"><apiName>INVALIDATE_LOADER</apiName><shortdesc>
      Константа LoaderInvalidationEvent.INVALIDATE_LOADER определяет значение свойства type объекта события invalidateLoader.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalidateLoader</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>LoaderInvalidationEvent.INVALIDATE_LOADER</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>invalidateLoader</codeph>. 
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>content</codeph></entry><entry>Содержимое, для которого аннулируется запрос содержимого.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если для регистрации прослушивателя событий используется <codeph>myDataGrid.addEventListener()</codeph>, то значением <codeph>currentTarget</codeph> является myDataGrid. </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>LoaderInvalidationEvent.INVALIDATE_LOADER</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:LoaderInvalidationEvent:content"><apiName>content</apiName><shortdesc>
      Содержимое, для которого аннулируется запрос содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
      Содержимое, для которого аннулируется запрос содержимого.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:GridSelectionEvent"><apiName>GridSelectionEvent</apiName><shortdesc>
  Класс GridSelectionEvent представляет события, отправляемые при изменении выбора в элементе управления Spark DataGrid в результате действий пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс GridSelectionEvent представляет события, отправляемые при изменении выбора в элементе управления Spark DataGrid в результате действий пользователя.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.events.xml#GridSelectionEventKind"><linktext>spark.events.GridSelectionEventKind</linktext></link><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.xml#Grid"><linktext>spark.components.Grid</linktext></link></related-links><adobeApiEvent id="spark.events:GridSelectionEvent:SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridSelectionEvent:SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>spark.events:GridSelectionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="spark.components.xml#DataGrid/selectedCells"><linktext>spark.components.DataGrid.selectedCells</linktext></link><link href="spark.components.xml#DataGrid/selectedIndices"><linktext>spark.components.DataGrid.selectedIndices</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridSelectionEvent:SELECTION_CHANGING_selectionChanging"><apiName>selectionChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridSelectionEvent:SELECTION_CHANGING</apiEventType><adobeApiEventClassifier>spark.events:GridSelectionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="spark.components.xml#DataGrid/selectedCells"><linktext>spark.components.DataGrid.selectedCells</linktext></link><link href="spark.components.xml#DataGrid/selectedIndices"><linktext>spark.components.DataGrid.selectedIndices</linktext></link></related-links></adobeApiEvent><apiConstructor id="spark.events:GridSelectionEvent:GridSelectionEvent"><apiName>GridSelectionEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><spark.events.GridSelectionEventKind>
     
      </spark.events.GridSelectionEventKind></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>kind</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Вид изменяемого события. Допустимые значения определены в классе <codeph>GridSelectionEventKind</codeph> как константы. Это значение определяет используемые в событии свойства.
     
      </apiDesc></apiParam><apiParam><apiItemName>selectionChange</apiItemName><apiOperationClassifier>spark.components.gridClasses:CellRegion</apiOperationClassifier><apiData>null</apiData><apiDesc>Предложенное или принятое изменение текущего выбора. Используйте методы выбора Spark DataGrid для определения текущего выбора.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.components.xml#DataGrid/selectedCells"><linktext>spark.components.DataGrid.selectedCells</linktext></link><link href="spark.components.xml#DataGrid/selectedIndices"><linktext>spark.components.DataGrid.selectedIndices</linktext></link></related-links></apiConstructor><apiValue id="spark.events:GridSelectionEvent:SELECTION_CHANGE"><apiName>SELECTION_CHANGE</apiName><shortdesc>
      Константа GridSelectionEvent.SELECTION_CHANGE определяет значение свойства type объекта события selectionChange, указывающего на изменение текущего выбора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectionChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>GridSelectionEvent.SELECTION_CHANGE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>selectionChange</codeph>, указывающего на изменение текущего выбора.
     
      <p>Это событие отправляется при взаимодействии пользователя с элементом управления. При сортировке коллекции поставщика данных программным способом компонент не отправляет событие <codeph>selectionChange</codeph>. </p>
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry>kind<codeph/></entry><entry>Вид изменяемого события. Допустимые значения определены в классе GridSelectionEventKind как константы. Это значение определяет используемые в событии свойства.</entry></row><row><entry><codeph>selectionChange</codeph></entry><entry>Только что завершенное изменение выбора, вызванное жестом пользователя. Используйте методы выбора DataGrid для определения текущего выбора.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GridSelectionEvent.SELECTION_CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/selectedCells"><linktext>spark.components.DataGrid.selectedCells</linktext></link><link href="spark.components.xml#DataGrid/selectedIndices"><linktext>spark.components.DataGrid.selectedIndices</linktext></link></related-links></apiValue><apiValue id="spark.events:GridSelectionEvent:SELECTION_CHANGING"><apiName>SELECTION_CHANGING</apiName><shortdesc>
      Константа GridSelectionEvent.SELECTION_CHANGING определяет значение свойства type объекта события для события selectionChanging, указывающего на изменение текущего варианта выбора, которое должно произойти.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectionChanging</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>GridSelectionEvent.SELECTION_CHANGING</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>selectionChanging</codeph>, указывающего на предстоящее изменение текущего выбора. Вызов preventDefault() в этом событии для предотвращения изменения выбора.
     
      <p>Это событие отправляется при взаимодействии пользователя с элементом управления. При сортировке коллекции поставщика данных программным способом компонент не отправляет событие <codeph>selectionChanging</codeph>. </p>
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry>kind<codeph/></entry><entry>Вид изменяемого события. Допустимые значения определены в классе GridSelectionEventKind как константы. Это значение определяет используемые в событии свойства.</entry></row><row><entry><codeph>selectionChange</codeph></entry><entry>Предстоящее изменение выбора, вызванное жестом пользователя.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GridSelectionEvent.SELECTION_CHANGING</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/selectedCells"><linktext>spark.components.DataGrid.selectedCells</linktext></link><link href="spark.components.xml#DataGrid/selectedIndices"><linktext>spark.components.DataGrid.selectedIndices</linktext></link></related-links></apiValue><apiValue id="spark.events:GridSelectionEvent:kind"><apiName>kind</apiName><shortdesc>
      Указывает вид произошедшего события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      Указывает вид произошедшего события. Значение свойства может быть равно одному из значений класса GridSelectionEventKind или <codeph>null</codeph>, если вид неизвестен.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.events.xml#GridSelectionEventKind"><linktext>spark.events.GridSelectionEventKind</linktext></link></related-links></apiValue><apiValue id="spark.events:GridSelectionEvent:selectionChange"><apiName>selectionChange</apiName><shortdesc>
      Предстоящие или только что завершенные изменения выбора, вызванные выполнением некоторых жестов пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.gridClasses:CellRegion</apiValueClassifier></apiValueDef><apiDesc>
      Предстоящие или только что завершенные изменения выбора, вызванные выполнением некоторых жестов пользователя. Если это изменение добавляется к текущему выбору, то оно не будет представлять весь выбранный фрагмент. Используйте методы выбора DataGrid для определения текущего выбора.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.events:TrackBaseEvent"><apiName>TrackBaseEvent</apiName><shortdesc>
  Представляет события, передаваемые из компонента TrackBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Представляет события, передаваемые из компонента TrackBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#TrackBase"><linktext>spark.components.supportClasses.TrackBase</linktext></link></related-links><adobeApiEvent id="spark.events:TrackBaseEvent:THUMB_DRAG_thumbDrag"><apiName>thumbDrag</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TrackBaseEvent:THUMB_DRAG</apiEventType><adobeApiEventClassifier>spark.events:TrackBaseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TrackBaseEvent:THUMB_PRESS_thumbPress"><apiName>thumbPress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TrackBaseEvent:THUMB_PRESS</apiEventType><adobeApiEventClassifier>spark.events:TrackBaseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TrackBaseEvent:THUMB_RELEASE_thumbRelease"><apiName>thumbRelease</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TrackBaseEvent:THUMB_RELEASE</apiEventType><adobeApiEventClassifier>spark.events:TrackBaseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:TrackBaseEvent:TrackBaseEvent"><apiName>TrackBaseEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:TrackBaseEvent:THUMB_DRAG"><apiName>THUMB_DRAG</apiName><shortdesc>
      Константа TrackBaseEvent.THUMB_DRAG определяет значение свойства type объекта события thumbDrag.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbDrag</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TrackBaseEvent.THUMB_DRAG</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>thumbDrag</codeph>. 
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TrackBaseEvent:THUMB_PRESS"><apiName>THUMB_PRESS</apiName><shortdesc>
      Константа TrackBaseEvent.THUMB_PRESS определяет значение свойства type объекта события thumbPress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbPress</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TrackBaseEvent.THUMB_PRESS</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>thumbPress</codeph>. 
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TrackBaseEvent:THUMB_RELEASE"><apiName>THUMB_RELEASE</apiName><shortdesc>
      Константа TrackBaseEvent.THUMB_RELEASE определяет значение свойства type объекта события thumbRelease.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbRelease</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TrackBaseEvent.THUMB_RELEASE</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>thumbRelease</codeph>. 
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:GridEvent"><apiName>GridEvent</apiName><shortdesc>
  Класс GridEvent расширяет класс MouseEvent и добавляет информацию о сетке на основе местоположения события по отношению к ячейке сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс GridEvent расширяет класс MouseEvent и добавляет информацию о сетке на основе местоположения события по отношению к ячейке сетки. Эта информация включает следующие данные:
 
  <ul>
    <li>Индексы строки и столбца ячейки.</li>
    <li>Объект GridColumn ячейки.</li>
    <li>Элемент поставщика данных, который соответствует строке ячейки.</li>
    <li>Средство визуализации элементов.</li>  
  </ul>
 
  <p>События сетки точно соответствуют событиям мыши. Они отправляются в ответ на события мыши, которые представляют собой восходящую цепочку от нижестоящего элемента сетки непосредственно к сетке. Существенная разница состоит в том, что прослушиватели событий сетки обязательно распознают полное действие мыши "вниз-перетаскивание-вверх", даже если перетаскивание и перемещение вверх выполнялись вне пределов сетки. Событие <codeph>gridMouseDrag</codeph> соответствует событию перемещения мыши с удерживаемой кнопкой.</p> 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.xml#Grid"><linktext>spark.components.Grid</linktext></link><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links><adobeApiEvent id="spark.events:GridEvent:GRID_CLICK_gridClick"><apiName>gridClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:SEPARATOR_CLICK_separatorClick"><apiName>separatorClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:SEPARATOR_CLICK</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:SEPARATOR_DOUBLE_CLICK_separatorDoubleClick"><apiName>separatorDoubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:SEPARATOR_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:SEPARATOR_MOUSE_DOWN_separatorMouseDown"><apiName>separatorMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:SEPARATOR_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:SEPARATOR_MOUSE_DRAG_separatorMouseDrag"><apiName>separatorMouseDrag</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:SEPARATOR_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:SEPARATOR_MOUSE_UP_separatorMouseUp"><apiName>separatorMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:SEPARATOR_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:SEPARATOR_ROLL_OUT_separatorRollOut"><apiName>separatorRollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:SEPARATOR_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:GridEvent:SEPARATOR_ROLL_OVER_separatorRollOver"><apiName>separatorRollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:GridEvent:SEPARATOR_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events:GridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:GridEvent:GridEvent"><apiName>GridEvent</apiName><shortdesc>
      События GridEvent, отправленные классом Grid в ответ на события мыши, создаются со свойствами входящих событий мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Определяет действие мыши, в результате которого было отправлено это событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Координата X события относительно сетки.
     
      </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Координата Y события относительно сетки.
     
      </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiType value="flash.display:InteractiveObject"/><apiData>null</apiData><apiDesc>Индекс строки, где произошло событие, или-1.
     
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Индекс столбца, где произошло событие, или-1.
     
      </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Столбец, где произошло событие, или null.
     
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Элемент поставщика данных в <codeph>rowIndex</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Свойство <codeph>relatedObject</codeph> события MouseEvent, которое вызвало этот GridEvent.
     
      </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Видимое средство визуализации элементов, где произошло событие, или null.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Указывает, нажата ли клавиша Control.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Указывает, нажата ли клавиша Alt.
     
      </apiDesc></apiParam><apiParam><apiItemName>column</apiItemName><apiOperationClassifier>spark.components.gridClasses:GridColumn</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает, нажата ли клавиша Shift.
     
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Указывает, нажата ли клавиша Control.
     
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier><apiData>null</apiData><apiDesc>Не используется.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      События GridEvent, отправленные классом Grid в ответ на события мыши, создаются со свойствами входящих событий мыши. Положение координат x и y события сетки, т. е. значение свойств <codeph>localX</codeph> и <codeph>localY</codeph>, определяется относительно всей сетки, а не только части сетки, которая была прокручена в область видимости. Аналогично, индексы строки и столбца события могут соответствовать ячейке, которая не была прокручена в область видимости.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:GridEvent:GRID_CLICK"><apiName>GRID_CLICK</apiName><shortdesc>
      Значение свойства type для gridClick в GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridClick</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>gridClick</codeph> в GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.GRID_CLICK</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></apiValue><apiValue id="spark.events:GridEvent:GRID_DOUBLE_CLICK"><apiName>GRID_DOUBLE_CLICK</apiName><shortdesc>
      Значение свойства type для gridDoubleClick в GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridDoubleClick</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>gridDoubleClick</codeph> в GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.GRID_DOUBLE_CLICK</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></apiValue><apiValue id="spark.events:GridEvent:GRID_MOUSE_DOWN"><apiName>GRID_MOUSE_DOWN</apiName><shortdesc>
      Значение свойства type для gridMouseDown в GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridMouseDown</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>gridMouseDown</codeph> в GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.GRID_MOUSE_DOWN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></apiValue><apiValue id="spark.events:GridEvent:GRID_MOUSE_DRAG"><apiName>GRID_MOUSE_DRAG</apiName><shortdesc>
      Значение свойства type для gridMouseDrag в GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridMouseDrag</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>gridMouseDrag</codeph> в GridEvent. Это событие отправляется только после того, как прослушиватель обработал событие <codeph>mouseDown</codeph>, и затем только при перемещении мыши с удерживаемой кнопкой.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.GRID_MOUSE_DRAG</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:GRID_MOUSE_UP"><apiName>GRID_MOUSE_UP</apiName><shortdesc>
      Значение свойства type для gridMouseUp в GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridMouseUp</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>gridMouseUp</codeph> в GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.GRID_MOUSE_UP</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></apiValue><apiValue id="spark.events:GridEvent:GRID_ROLL_OUT"><apiName>GRID_ROLL_OUT</apiName><shortdesc>
      Значение свойства type для gridRollOut в GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridRollOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>gridRollOut</codeph> в GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.GRID_ROLL_OUT</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="spark.events:GridEvent:GRID_ROLL_OVER"><apiName>GRID_ROLL_OVER</apiName><shortdesc>
      Значение свойства type для gridRollOver в GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gridRollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>gridRollOver</codeph> в GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.GRID_ROLL_OVER</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></apiValue><apiValue id="spark.events:GridEvent:SEPARATOR_CLICK"><apiName>SEPARATOR_CLICK</apiName><shortdesc>
      Значение свойства type для separatorClick GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>separatorClick</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>separatorClick</codeph> GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.SEPARATOR_CLICK</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:SEPARATOR_DOUBLE_CLICK"><apiName>SEPARATOR_DOUBLE_CLICK</apiName><shortdesc>
      Значение свойства type для separatorDoubleClick GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>separatorDoubleClick</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>separatorDoubleClick</codeph> GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.SEPARATOR_DOUBLE_CLICK</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:SEPARATOR_MOUSE_DOWN"><apiName>SEPARATOR_MOUSE_DOWN</apiName><shortdesc>
      Значение свойства type для separatorMouseDown GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>separatorMouseDown</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>separatorMouseDown</codeph> GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.SEPARATOR_MOUSE_DOWN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="spark.events:GridEvent:SEPARATOR_MOUSE_DRAG"><apiName>SEPARATOR_MOUSE_DRAG</apiName><shortdesc>
      Значение свойства type для separatorMouseDrag GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>separatorMouseDrag</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>separatorMouseDrag</codeph> GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.SEPARATOR_MOUSE_DRAG</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:SEPARATOR_MOUSE_UP"><apiName>SEPARATOR_MOUSE_UP</apiName><shortdesc>
      Значение свойства type для separatorMouseUp GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>separatorMouseUp</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>separatorMouseUp</codeph> GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.SEPARATOR_MOUSE_UP</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="spark.events:GridEvent:SEPARATOR_ROLL_OUT"><apiName>SEPARATOR_ROLL_OUT</apiName><shortdesc>
      Значение свойства type для separatorRollOut GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>separatorRollOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>separatorRollOut</codeph> GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.SEPARATOR_ROLL_OUT</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:SEPARATOR_ROLL_OVER"><apiName>SEPARATOR_ROLL_OVER</apiName><shortdesc>
      Значение свойства type для separatorRollOver GridEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>separatorRollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение свойства <codeph>type</codeph> для <codeph>separatorRollOver</codeph> GridEvent.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>column</codeph></entry><entry>Столбец, где произошло событие, или null, если в столбце не происходили события.</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry>Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</entry></row><row><entry><codeph>grid</codeph></entry><entry>Сетка, связанная с событием.</entry></row><row><entry><codeph>item</codeph></entry><entry>Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row><row><entry><codeph>type</codeph></entry><entry>GirdEvent.SEPARATOR_ROLL_OVER</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:columnIndex"><apiName>columnIndex</apiName><shortdesc>
      Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс столбца, где произошло событие, или -1, если событие не произошло в столбце сетки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:column"><apiName>column</apiName><shortdesc>
      Столбец, где произошло событие, или null, если в столбце не происходили события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.gridClasses:GridColumn</apiValueClassifier></apiValueDef><apiDesc>
      Столбец, где произошло событие, или null, если в столбце не происходили события.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.gridClasses:IGridItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      Поставщик данных, который отображал эту ячейку, или null, если событие не происходило в видимой ячейке. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:item"><apiName>item</apiName><shortdesc>
      Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Элемент поставщика данных для этой строки или null, если событие не происходило в строке сетки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:rowIndex"><apiName>rowIndex</apiName><shortdesc>
      Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс строки, где произошло событие, или -1, если событие не произошло в строке сетки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridEvent:grid:get"><apiName>grid</apiName><shortdesc>
      Сетка, связанная с событием.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Grid</apiValueClassifier></apiValueDef><apiDesc>
      Сетка, связанная с событием.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:GridSelectionEventKind"><apiName>GridSelectionEventKind</apiName><shortdesc>
  Класс GridSelectionEventKind определяет константы для допустимых значений свойства kind класса spark.events.GridSelectionEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс GridSelectionEventKind определяет константы для допустимых значений свойства <codeph>kind</codeph> класса spark.events.GridSelectionEvent. Эти константы указывают тип внесенного в выбор изменения.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.events.xml#GridSelectionEvent/kind"><linktext>spark.events.GridSelectionEvent.kind</linktext></link><link href="spark.events.xml#GridSelectionEvent"><linktext>spark.events.GridSelectionEvent</linktext></link></related-links><apiValue id="spark.events:GridSelectionEventKind:ADD_CELL"><apiName>ADD_CELL</apiName><shortdesc> 
      Обозначает, что эту ячейку необходимо добавить к текущему выбору.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addCell</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что эту ячейку необходимо добавить к текущему выбору.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:ADD_ROW"><apiName>ADD_ROW</apiName><shortdesc> 
      Обозначает, что эту строку необходимо добавить к текущему выбору.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addRow</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что эту строку необходимо добавить к текущему выбору.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:CLEAR_SELECTION"><apiName>CLEAR_SELECTION</apiName><shortdesc> 
      Обозначает, что текущий выбор необходимо удалить.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>clearSelection</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что текущий выбор необходимо удалить.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:REMOVE_CELL"><apiName>REMOVE_CELL</apiName><shortdesc> 
      Обозначает, что эту ячейку необходимо удалить из текущего выбора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removeCell</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что эту ячейку необходимо удалить из текущего выбора.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:REMOVE_ROW"><apiName>REMOVE_ROW</apiName><shortdesc> 
      Обозначает, что эту строку необходимо удалить из текущего выбора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removeRow</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что эту строку необходимо удалить из текущего выбора.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:SELECT_ALL"><apiName>SELECT_ALL</apiName><shortdesc> 
      Обозначает, что необходимо выбрать всю сетку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectAll</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что необходимо выбрать всю сетку.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:SET_CELL_REGION"><apiName>SET_CELL_REGION</apiName><shortdesc> 
      Обозначает, что в текущий выбор необходимо включить только эту область ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>setCellRegion</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что в текущий выбор необходимо включить только эту область ячейки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:SET_CELL"><apiName>SET_CELL</apiName><shortdesc> 
      Обозначает, что в текущий выбор необходимо включить только эту ячейку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>setCell</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что в текущий выбор необходимо включить только эту ячейку.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:SET_ROWS"><apiName>SET_ROWS</apiName><shortdesc> 
      Обозначает, что в текущий выбор необходимо включить только эти строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>setRows</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что в текущий выбор необходимо включить только эти строки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:GridSelectionEventKind:SET_ROW"><apiName>SET_ROW</apiName><shortdesc> 
      Обозначает, что в текущий выбор необходимо включить только эту строку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>setRow</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      Обозначает, что в текущий выбор необходимо включить только эту строку.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.events:TitleWindowBoundsEvent"><apiName>TitleWindowBoundsEvent</apiName><shortdesc>
  Класс TitleWindowBoundsEvent представляет объекты события, которые передаются при изменении границ Spark TitleWindow из-за перемещения или изменения размера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс TitleWindowBoundsEvent представляет объекты события, которые передаются при изменении границ Spark TitleWindow из-за перемещения или изменения размера.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TitleWindow"><linktext>spark.components.TitleWindow</linktext></link></related-links><adobeApiEvent id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events:TitleWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events:TitleWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TitleWindowBoundsEvent:WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events:TitleWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events:TitleWindowBoundsEvent:WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events:TitleWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.events:TitleWindowBoundsEvent:TitleWindowBoundsEvent"><apiName>TitleWindowBoundsEvent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события; указывает действие, вызвавшее событие.
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, может ли событие передаваться вверх по иерархии списка отображения.
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, существует ли возможность предотвращения поведения, связанного с событием.
     
      </apiDesc></apiParam><apiParam><apiItemName>beforeBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Границы окна до выполнения операции. Если данное событие можно отменить, <codeph>beforeBounds</codeph> представляет текущие границы окна. В ином случае это границы до выполнения изменения.
     
      </apiDesc></apiParam><apiParam><apiItemName>afterBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Границы окна после выполнения операции. Если данное событие можно отменить, <codeph>afterBounds</codeph>представляет будущие границы окна. В ином случае это текущие границы.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_END"><apiName>WINDOW_MOVE_END</apiName><shortdesc>
      Константа TitleWindowBoundsEvent.WINDOW_MOVE_END определяет значение свойства type объекта события для события windowMoveEnd.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>windowMoveEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TitleWindowBoundsEvent.WINDOW_MOVE_END</codeph> определяет значение свойства <codeph>type</codeph> объекта события для события <codeph>windowMoveEnd</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Начальные границы объекта.</entry></row><row><entry><codeph>afterBounds</codeph></entry><entry>Конечные границы объекта.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE_START"><apiName>WINDOW_MOVE_START</apiName><shortdesc>
      Константа TitleWindowBoundsEvent.WINDOW_MOVE_START определяет значение свойства type объекта события для события windowMoveStart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>windowMoveStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TitleWindowBoundsEvent.WINDOW_MOVE_START</codeph> определяет свойство <codeph>type</codeph> объекта события для события <codeph>windowMoveStart</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Начальные границы объекта.</entry></row><row><entry><codeph>afterBounds</codeph></entry><entry>null</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVE"><apiName>WINDOW_MOVE</apiName><shortdesc>
      Константа TitleWindowBoundsEvent.WINDOW_MOVE определяет значение свойства type объекта события для события windowMove.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>windowMove</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TitleWindowBoundsEvent.WINDOW_MOVE</codeph> определяет значение свойства <codeph>type</codeph> объекта события для события <codeph>windowMove</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Предыдущие границы объекта.</entry></row><row><entry><codeph>afterBounds</codeph></entry><entry>Текущие границы объекта.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:WINDOW_MOVING"><apiName>WINDOW_MOVING</apiName><shortdesc>
      Константа TitleWindowBoundsEvent.WINDOW_MOVING определяет значение свойства type объекта события для события windowMoving.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>windowMoving</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Константа <codeph>TitleWindowBoundsEvent.WINDOW_MOVING</codeph> определяет значение события <codeph>type</codeph> объекта события для события <codeph>windowMoving</codeph>.
     
      <p>Свойства объекта события имеют следующие значения:</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Объект, определяющий прослушиватель события, который выполняет обработку события. Например, если используется <codeph>myButton.addEventListener()</codeph> для регистрации прослушивателя события, значением <codeph>currentTarget</codeph> является myButton. </entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Текущие границы объекта.</entry></row><row><entry><codeph>afterBounds</codeph></entry><entry>Будущие границы объекта, если объект перемещается в текущую позицию курсора.</entry></row><row><entry><codeph>target</codeph></entry><entry>Объект, отправивший событие. Это не всегда тот объект, который прослушивает событие. Свойство <codeph>currentTarget</codeph> всегда используется для получения доступа к объекту, прослушивающему событие.</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:afterBounds"><apiName>afterBounds</apiName><shortdesc>
      Границы объекта после операции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Границы объекта после операции. Если данное событие можно отменить, <codeph>afterBounds</codeph>представляет будущие границы окна. В ином случае это текущие границы.
     
      <p>Следующий список показывает, как это свойство назначается для различных типов событий:</p>
     
      <ul>
        <li><codeph>WINDOW_MOVE</codeph> - Текущие границы окна. </li>
        <li><codeph>WINDOW_MOVE_END</codeph> - Конечные границы окна перед перетаскиванием.</li>
        <li><codeph>WINDOW_MOVE_START </codeph> - null.</li>
        <li><codeph>WINDOW_MOVING</codeph> - Будущие границы окна, если окно перемещается в текущую позицию курсора.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.events:TitleWindowBoundsEvent:beforeBounds"><apiName>beforeBounds</apiName><shortdesc>
      Границы объекта до операции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Границы объекта до операции. Если данное событие можно отменить, <codeph>beforeBounds</codeph> представляет текущие границы окна. В ином случае это границы до выполнения изменения.
     
      <p>Следующий список показывает, как это свойство назначается для различных типов событий:</p>
     
      <ul>
        <li><codeph>WINDOW_MOVE</codeph> - Предыдущие границы окна.</li>
        <li><codeph>WINDOW_MOVE_END</codeph> - Начальные границы окна перед перетаскиванием.</li>
        <li><codeph>WINDOW_MOVE_START </codeph> - Начальные границы окна.</li>
        <li><codeph>WINDOW_MOVING</codeph> - Текущие границы окна.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>