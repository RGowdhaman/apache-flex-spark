<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
  Класс DataRenderer является базовым классом для компонентов данных в Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:DataRenderer
    <strong>Properties</strong>
    data=""
  
    <strong>Events</strong>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс DataRenderer является базовым классом для компонентов данных в Spark. 
 
  <p><b>Примечание.</b> Этот класс может быть удален в последующих версиях.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:DataRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Передается при изменении свойства data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении свойства<codeph>data</codeph>.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataRenderer:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DataRenderer:data:get"><apiName>data</apiName><shortdesc>
      Реализация свойства data, как определено интерфейсом IDataRenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Реализация свойства <codeph>data</codeph>, как определено интерфейсом IDataRenderer.
      
      <p>Это свойство –  Bindable, оно отправляет события dataChange</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TextArea"><apiName>TextArea</apiName><shortdesc>
  TextArea – это элемент управления текстовым вводом, позволяющий пользователю вводить и редактировать многострочный форматированный текст.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:verticalScrollPolicy">
  Указывает, при каких условиях отображается вертикальная полоса прокрутки.
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:horizontalScrollPolicy">
  Указывает, при каких условиях отображается горизонтальная полоса прокрутки.
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:TextArea" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="scroller" owner="spark.components:TextArea" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Дополнительный Scroller в теме оформления, используемый для прокрутки RichEditableText.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller in the skin,
      used to scroll the RichEditableText.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextArea&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextArea
    <strong>Properties</strong>
    heightInLines="<i>Calculated default</i>"  <b>[Spark theme only]</b>
    textFlow="<i>TextFlow</i>"  <b>[Spark theme only]</b>
    typicalText=null  <b>[Spark theme only]</b>
    widthInChars="<i>Calculated default</i>"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    horizontalScrollPolicy="auto"  <b>[Spark theme only]</b>
    symbolColor=""
    verticalScrollPolicy="auto"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextArea – это элемент управления текстовым вводом, позволяющий пользователю вводить и редактировать многострочный форматированный текст.
   <p><b>Тема оформления для темы Spark использует класс RichEditableText. Это значит, что элемент управления Spark TextArea поддерживает библиотеку Text Layout Framework (TLF), созданную на основе Flash Text Engine (FTE).</b> Сочетание этих слоев обеспечивает высококачественную международную типографику и макет редактируемого текста. Тема оформления содержит средство прокрутки, отображающее горизонтальные и вертикальные полосы прокрутки для прокручивания текста, а также поддерживает вертикальную прокрутку с помощью колесика мыши. К RichEditableText можно получить доступ с помощью <codeph>textDisplay</codeph>, а к Scroller – с помощью <codeph>scroller</codeph>.</p>
  
  <p><b>В теме оформления для мобильной темы используется класс StyleableStageText.</b> Так как в StyleableStageText используются собственные текстовые поля, это позволяет более эффективно управлять вводом и обработкой текста на мобильных устройствах, однако следует учесть существующие <xref href="supportClasses/StyleableStageText.html">ограничения и различия</xref>. Поскольку StageText не может использоваться для измерения текста, в TextArea необходимо указать явные, процентные или ограничительные значения <codeph>width</codeph> и <codeph>height</codeph>. К StyleableStageText можно получить доступ как к <codeph>textDisplay</codeph>. Если необходимо использовать тему оформления на основе TextField вместо темы оформления на основе StageText, установите для свойства <codeph>skinClass</codeph> значение <codeph>spark.skins.mobile.TextAreaSkin</codeph>.</p>
   <p>Установить текст для отображения или получить текст, введенный пользователем, можно посредством свойства <codeph>text</codeph>. </p>
   <p>Текст отформатирован с использованием стилей CSS, например <codeph>fontFamily</codeph> и <codeph>fontSize</codeph>.</p>
   <p>В теме Spark можно указать значения ширины и высоты TextArea с помощью свойств <codeph>widthInChars</codeph> и <codeph>heightInLines</codeph>, предоставляющих удобный способ изменения размера шрифта, или использовать свойство <codeph>typicalText</codeph>. Учтите, что если используется <codeph>typicalText</codeph>, то свойства <codeph>widthInChars</codeph> и <codeph>heightInLines</codeph> игнорируются. Для всех тем значения высоты и ширины можно определить явно, в пикселах, процентах или с помощью ограничений, например <codeph>left</codeph> и <codeph>right</codeph> или <codeph>top</codeph> и <codeph>bottom</codeph>.</p>
   <p>Для ограничения числа вводимых пользователем символов можно использовать свойство <codeph>maxChars</codeph>, а для указания допустимых для ввода символов – свойство <codeph>restrict</codeph>. Для использования данного элемента управления для ввода пароля установите свойство <codeph>displayAsPassword</codeph> на значение <codeph>true</codeph>.</p>
   <p>В мобильной теме свойства экранной клавиатуры, такие как <codeph>autoCapitalize</codeph>, <codeph>autoCorrect</codeph>, <codeph>returnKeyLabel</codeph> и <codeph>softKeyboardType</codeph>, определяют подсказки клавиатуры. Если имеющаяся экранная клавиатура не поддерживает любую из функций подсказки, то подсказка игнорируется. Мобильные среды, в которых используются только аппаратные клавиатуры, игнорируют эти подсказки. 
  </p>
  
  <p><b>TextArea для темы Spark</b></p>
 
  <p>Наиболее важными отличиями элементов управления Spark TextArea от MX TextArea являются следующие:
  <ul>
    <li>Spark TextArea предлагает пользователям лучшую типографику, лучшую языковую поддержку и лучшее макетирование текста.</li>
    <li>Spark TextArea имеет объектно-ориентированную модель текстового формата RTF, в то время как версия MX таковой не имеет.</li>
    <li>Spark TextArea имеет лучшую поддержку отображения больших массивов текста.</li>
    <li>В Spark TextArea шрифты должны встраиваться отличным от версии MX образом. Для получения информации об использовании атрибута <codeph>embedAsCFF</codeph> при встраивании шрифтов см. документацию по шрифтам.</li>
  </ul></p>
   <p>Элемент управления Spark TextArea использует объектно-ориентрованную модель RTF-текста TLF, в которой элементы макета, такие как разделы, абзацы, интервалы, гиперссылки и иллюстрации, представлены в среде выполнения объектами ActionScript. Доступ к этим объектам и манипуляции ими возможны с помощью программных средств. Главным объектом в TLF, представляющим текст в формате RTF, является TextFlow. Определите текст RTF для элемента управления TextArea, установив его свойство <codeph>textFlow</codeph> для экземпляра TextFlow.</p>
 
  <p>Если отображать текст в нескольких форматах не требуется, назначьте для свойства TextArea <codeph>text</codeph> параметр обычного текста. Более подробные сведения о взаимодействии свойств <codeph>text</codeph> и <codeph>textFlow</codeph> см. в описаниях этих свойств; например, можно установить одно свойство и получить другое.</p>
   <p>Во время компиляции можно поместить теги разметки TLF в тег TextArea, как показано в следующем примере:
  <pre>
  &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:TextArea>
  </pre>
  В этом примере компилятор MXML устанавливает свойство TextArea <codeph>content</codeph>, инициируя создание объекта TextFlow из определенного вами элемента FlowElements.</p>
   <p>Элемент управления TextArea не содержит пользовательский интерфейс для форматирования текста вручную, однако имеет API, которые могут использоваться для программного форматирования. Например, можно создать кнопку, при нажатии которой выбранный текст отображается полужирным шрифтом.</p>
   <p>Форматирование текста по умолчанию определено стилями CSS, например <xref href="supportClasses/SkinnableTextBase.html#style:fontFamily">fontFamily</xref> и <xref href="supportClasses/SkinnableTextBase.html#style:fontSize">fontSize</xref>. Любая информация по форматированию в объекте TextFlow переопределяет заданное по умолчанию форматирование, определенное в таблице стилей CSS.</p>
   <p>С помощью стилей можно управлять различными характеристиками содержимого TextArea. Вот несколько наиболее часто используемых:</p>
   <ul><li>Управление межстрочным интервалом с помощью стиля <codeph>lineHeight</codeph>.</li>
  <li>Управление отступами между абзацами с помощью стилей <codeph>paragraphSpaceBefore</codeph> и <codeph>paragraphSpaceAfter</codeph>.</li>
  <li>Выровняйте текст, используя стили <codeph>textAlign</codeph> и <codeph>textAlignLast</codeph>.</li>
  <li>Устанавливает отступ текста от границы элемента управления, используя стили <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> и <codeph>paddingBottom</codeph>.</li>
  </ul>
   <p>По умолчанию текст обтекает элемент управления по правому краю. Вертикальная полоса прокрутки появляется автоматически, когда текста больше, чем помещается в TextArea. Если значение стиля <codeph>lineBreak</codeph> установлено на <codeph>explicit</codeph>, новые строки начинаются только при наличии явного переноса строки. Это аналогично использованию CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) или CR+LF (<codeph>\r\n</codeph>) в <codeph>text</codeph> или <codeph>&lt;p></codeph> и <codeph>&lt;br/></codeph> в разметке TLF. В этом случае горизонтальная полоса прокрутки появляется автоматически, если хотя бы одна строка текста оказывается шире элемента управления.</p>
    <p>В области Spark TextArea может отображаться текст, написанный слева направо (LTR) (например, по-французски), справа налево (RTL) (например, по-арабски), а также в двух направлениях одновременно (например, предложения на французском языке в тексте на арабском). Если основным является направление текста справа налево, установите для стиля <codeph>direction</codeph> значение <codeph>rtl</codeph>. По умолчанию стиль <codeph>textAlign</codeph> имеет значение <codeph>start</codeph>, благодаря чему текст выравнивается по левому краю, если значение <codeph>direction</codeph> равно <codeph>ltr</codeph>, и по правому краю, если <codeph>direction</codeph> равно <codeph>rtl</codeph>. Чтобы выровнять текст по противоположному краю, установите для <codeph>textAlign</codeph> значение <codeph>end</codeph>.</p>
   <p>Область Spark TextArea также поддерживает неограниченное число операций отмены/повтора в рамках одного сеанса. Началом сеанса редактирования считается получение элементом управления фокуса клавиатуры, а окончанием – его потеря.</p>
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
   <p>В теме Spark элемент управления TextArea имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>188 пикселей в ширину на 149 пикселей в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>36 пикселей в ширину и 36 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.TextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>В мобильной теме элемент управления TextArea имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.mobile.StageTextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea/text"><linktext>text</linktext></link><link href="spark.components.xml#TextArea/textFlow"><linktext>textFlow</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextAreaSkin.xml"><linktext>spark.skins.mobile.StageTextAreaSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextAreaSkin.xml"><linktext>spark.skins.mobile.TextAreaSkin</linktext></link><link href="spark.skins.spark.xml#TextAreaSkin"><linktext>spark.skins.spark.TextAreaSkin</linktext></link></related-links><apiConstructor id="spark.components:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TextArea:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>Объект TextLayoutFormat.
          
          </apiDesc></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>Вектор строк определяет имена требуемых форматов и <codeph>null</codeph> запрашивает все форматы.
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция символа, определяющая фиксированный конец выделения.
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция символа, определяющая передвигаемый конец выделения.
                   </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="spark.components.RichEditableText#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>TextLayoutFormat для применения к выбору.
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция символа относительно начала text String, определяющая конец выделения, остающийся фиксированным при расширении выделения клавишами со стрелками.
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция символа относительно начала text String, определяющая конец выделения, перемещающийся при расширении выделения клавишами со стрелками. 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TextArea:content:get"><apiName>content</apiName><shortdesc>
      Данное свойство предназначено для использования в MXML во время компиляции; для получения или установки содержимого в формате RTF во время выполнения используйте вместо него свойство textFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Данное свойство предназначено для использования в MXML во время компиляции; для получения или установки содержимого в формате RTF во время выполнения используйте вместо него свойство <codeph>textFlow</codeph>. Adobe рекомендует использовать свойство <codeph>textFlow</codeph> для получения и установки содержимого в формате RTF во время выполнения, поскольку это свойство явно назначает тип TextFlow, а не Object. TextFlow является традиционным представлением для содержимого в формате RTF в Text Layout Framework.
           <p>Свойство <codeph>content</codeph> является свойством по умолчанию для TextArea, поэтому можно писать код MXML, например:
      <pre>
      &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World&lt;/s:span>&lt;/s:TextArea>
      </pre>
      В этом примере String и SpanElement, определяемые в качестве содержимого, используются при создании TextFlow.</p>
           <p>Это свойство отмечено как Object, поскольку оно может быть установлено как String, FlowElement или как массив String и FlowElement. В вышеприведенном примере содержимое является двухэлементным массивом. Первым элементом массива является строка Hello. Вторым элементом массива является объект SpanElement, содержащий текст World в полужирном начертании.</p>
     
      <p>Независимо от определения содержимого оно преобразуется в объект TextFlow. При получении значения этого свойства вы получаете результирующий объект TextFlow.</p>
     
      <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
      Высота элемента управления по умолчанию, в строках.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Высота элемента управления по умолчанию, в строках.
           <p>Для получения информации о теме Spark см. <b>spark.components.RichEditableText.heightInLines</b>.</p>
           <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/heightInLines"><linktext>spark.components.RichEditableText.heightInLines</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      TextFlow представляет текст RTF, отображаемый данным компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      TextFlow представляет текст RTF, отображаемый данным компонентом.
           <p>Для получения информации о теме Spark см. <b>spark.components.RichEditableText.textFlow</b>.</p>
           <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      Ширина по умолчанию для элемента управления, измеренная в единицах em.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ширина по умолчанию для элемента управления, измеренная в единицах em.
           <p>Для получения информации о теме Spark см. <b>spark.components.RichEditableText.widthInChars</b>.</p>
           <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Grid"><apiName>Grid</apiName><shortdesc>
  Элемент управления Grid отображает список элементов данных, который называется поставщиком данных, в прокручиваемой таблице (сетке), где каждый элемент занимает одну строку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Grid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Grid 
    <strong>Properties</strong>
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления Grid отображает список элементов данных, который называется <i>поставщиком данных</i>, в прокручиваемой таблице (сетке), где каждый элемент занимает одну строку. Все столбцы сетки, определенные объектом GridColumn, отображают значение, основанное на элементе для соответствующей строки. Поставщик данных сетки может изменяться, т. е. его элементы можно добавить, удалить или изменить. Аналогично, список столбцов может изменяться.
 
  <p>Компонент сетки предназначен для использования в качестве компонента темы оформления DataGrid или как элемент других составных пользовательских компонентов. При этом он не поддерживает темы оформления, не включает средство или полосы прокрутки и не обеспечивает стандартную обработку событий мыши или клавиатуры.</p>
 
  <p>Каждая видимая <i>ячейка</i> сетки отображается с помощью экземпляра GridItemRenderer, созданного посредством свойства <codeph>itemRenderer</codeph>. Указывает средство визуализации элементов для каждого столбца. Перед его отображением каждый экземпляр средства визуализации элементов настраивается с учетом значения элемента поставщика данных для этой строки. Средства визуализации элементов создаются при необходимости и затем помещаются в пул и перерабатываются, чтобы минимизировать количество создаваемых элементов.</p>
 
  <p>Элемент управления Grid поддерживает выбор в соответствии со свойством <codeph>selectionMode</codeph>. Набор выделенных индексов строк или ячеек может быть изменен или запрошен программным способом с помощью таких методов выбора, как <codeph>setSelectedIndex</codeph> или <codeph>selectionContainsIndex()</codeph>.</p>
 
  <p>Элемент управления Grid отображает индикаторы наведения, символа вставки и выбора на основе свойства <codeph>selectionMode</codeph> и соответствующих свойств индексов строк и столбцов, например <codeph>hoverRowIndex</codeph> и <codeph>columnRowIndex</codeph>. Индикатор может быть любым визуальным элементом. Индикаторы, реализующие IGridVisualElement, могут выполнять собственную настройку в соответствии со строкой или столбцом, в которых они используются.</p>
 
  <p>Элемент управления Grid поддерживает плавную прокрутку. Их вертикальные и горизонтальные позиции прокрутки определяют начало координат пикселов видимой части сетки и макет сетки только отображает только те средства визуализации элементов ячейки, которые необходимы для заполнения доступного пространства.   </p>
 
  <p>Элемент управления Grid поддерживает строки с различной высотой, которая автоматически вычисляется на основе содержимого средств визуализации элементов. Эта поддержка называется <i> виртуализацией</i> сетки, поскольку сопоставление (в пикселах) позиций прокрутки и индексов строк и столбцов обычно основано на неполной информации о предпочтительных размерах ячеек сетки. Сетка принимает вычисленную высоту строк, которые прокручены в область видимости, и рассчитывает остальные данные на основе одного <codeph>typicalItem</codeph>.</p>
 
  <p>Переходы в средствах визуализации элементов DataGrid не поддерживаются. В классе GridItemRenderer выключено свойство <codeph>transitions</codeph>, поэтому установка этого свойства не будет иметь эффект.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links><adobeApiEvent id="spark.components:Grid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Передается после изменения символа вставки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается после изменения символа вставки.  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Отправляется при двойном щелчке кнопкой мыши в области ячейки.
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при двойном щелчке кнопкой мыши в области ячейки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Отправляется при щелчке кнопкой мыши в области ячейки.
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при щелчке кнопкой мыши в области ячейки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Отправляется при выводе курсора мыши из ячейки сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при выводе курсора мыши из ячейки сетки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Отправляется при вводе курсора мыши в область ячейки сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при вводе курсора мыши в область ячейки сетки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Отправляется при отпускании кнопки мыши в области ячейки Grid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при отпускании кнопки мыши в области ячейки Grid. Во время операции перетаскивания оно также отправляется после события <codeph>gridMouseDown</codeph> при отпускании кнопки мыши, даже если курсор мыши больше не находится в пределах Grid.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Отправляется после события gridMouseDown, если выполняется движение мыши перед отпусканием кнопки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после события <codeph>gridMouseDown</codeph>, если выполняется движение мыши перед отпусканием кнопки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Отправляется при нажатии кнопки мыши в области ячейки Grid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при нажатии кнопки мыши в области ячейки Grid.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Grid:Grid"><apiName>Grid</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Grid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_CELL или GridSelectionMode.MULTIPLE_CELLS, то эта ячейка добавляется к выбору и символ вставки помещается в этой ячейке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>rowIndex</codeph>, <codeph>columnIndex</codeph> или <codeph>selectionMode</codeph>.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то эта ячейка добавляется к выбору и символ вставки помещается в этой ячейке. Для всех других режимов выделения этот метод не действует.
     
      <p><codeph>rowIndex</codeph> - это индекс в поставщике данных элемента, где содержится выбранная ячейка. <codeph>columnIndex</codeph> - это индекс в значении <codeph>columns</codeph> столбца, где содержится выбранная ячейка.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.MULTIPLE_ROWS, то эта строка добавляется к выбору и символ вставки помещается на этой строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>index</codeph> или <codeph>selectionMode</codeph>. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то эта строка добавляется к выбору и символ вставки помещается на этой строке. Для всех других режимов выделения этот метод не действует.
     
      <p><codeph>rowIndex</codeph> - это индекс в поставщике данных элемента, где содержится выбранная ячейка. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:clearSelection"><apiName>clearSelection</apiName><shortdesc>
      Удаляет все выделенные строки и ячейки, если selectionMode не является GridSelectionMode.NONE.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если выделенный фрагмент изменился, или <codeph>false</codeph>, если выбор не выполнялся.
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет все выделенные строки и ячейки, если <codeph>selectionMode</codeph> не является <codeph>GridSelectionMode.NONE</codeph>. Удаляет символ вставки и устанавливает опорную точку на начальный элемент.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc>
      При необходимости установите свойства verticalScrollPosition и horizontalScrollPosition так, чтобы указанная ячейка была полностью видима.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от 0 индекс строки ячейки средства визуализации элементов или -1 для указания столбца.
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от 0 индекс столбца ячейки средства визуализации элементов или -1 для указания строки.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      При необходимости установите свойства <codeph>verticalScrollPosition</codeph> и <codeph>horizontalScrollPosition</codeph> так, чтобы указанная ячейка была полностью видима. Если <codeph>rowIndex</codeph> равен -1 и указан <codeph>columnIndex</codeph>, то для отображения указанного столбца достаточно настроить только <codeph>horizontalScrollPosition</codeph>. Если <codeph>columnIndex</codeph> равен -1 и указан <codeph>rowIndex</codeph>, то для отображения указанной строки достаточно настроить только <codeph>verticalScrollPosition</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellAt"><apiName>getCellAt</apiName><shortdesc>
      Возвращает индексы строк и столбцов ячейки, которая перекрывает пиксел в указанной координате сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Позиция ячейки или null. 
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:CellPosition</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата X пиксела относительно сетки.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата Y пиксела относительно сетки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает индексы строк и столбцов ячейки, которая перекрывает пиксел в указанной координате сетки. Если ячейка не существует, возвращается null.
     
      <p>Функция в примере ниже использует этот метод для вычисления значения <codeph>dataField</codeph> для ячейки сетки.</p> 
      <pre>
      function getCellData(x:Number, y:Number):Object
      {
          var cell:CellPosition = getCellAt(x, y);
          if (!cell)
              return null;
          var GridColumn:column = grid.columns.getItemAt(cell.columnIndex);
          return grid.dataProvider.getItemAt(cell.rowIndex)[column.dataField];
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellBounds"><apiName>getCellBounds</apiName><shortdesc>
      Возвращает текущие границы пиксела указанной ячейки или null, если ячейка не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>Rectangle</codeph>, представляющий границы пиксела ячейки или пустое значение.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает текущие границы пиксела указанной ячейки или null, если ячейка не существует. Информация о границах ячейки содержится в координатах сетки.
     
      <p>Если все столбцы для указанной строки и все предшествующие ей строки еще не прокручены в область видимости, возвращаемые границы представлены лишь приблизительно на основе <codeph>typicalItem</codeph> всех столбцов.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellX"><apiName>getCellX</apiName><shortdesc>
      Возвращает координату X начала координат указанной ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Координата X начала координат указанной ячейки.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки.
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает координату X начала координат указанной ячейки. Если все границы ячейки не требуются, этот метод более эффективен, чем <codeph>getCellBounds().x</codeph>.
     
      <p>Если все столбцы для указанной строки и всех предшествующих ей строк еще не прокручены в область видимости, возвращаемое значение представлено лишь приблизительно на основе <codeph>typicalItem</codeph> всех столбцов.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellY"><apiName>getCellY</apiName><shortdesc>
      Возвращает координату Y начала координат указанной ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Координата Y начала координат указанной ячейки.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки.
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает координату Y начала координат указанной ячейки. Если все границы ячейки не требуются, этот метод более эффективен, чем <codeph>getCellBounds().y</codeph>.
     
      <p>Если все столбцы для указанной строки и всех предшествующих ей строк еще не прокручены в область видимости, возвращаемое значение представлено лишь приблизительно на основе <codeph>typicalItem</codeph> всех столбцов.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellsAt"><apiName>getCellsAt</apiName><shortdesc>
      Возвращает вектор объектов CellPosition со свойствами rowIndex и columnIndex, определяющими индексы строк и столбцов ячеек, которые перекрывают указанную область сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Вектор объектов, аналогичных <codeph>Vector.&lt;Object>([{rowIndex:0, columnIndex:0}, ...])</codeph>. 
      
      </apiDesc><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата X пиксела в начале координат области относительно сетки.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата X пиксела в начале координат области относительно сетки. 
     
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Ширина области в пикселах. 
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Высота области в пикселах. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает вектор объектов CellPosition со свойствами <codeph>rowIndex</codeph> и <codeph>columnIndex</codeph>, определяющими индексы строк и столбцов ячеек, которые перекрывают указанную область сетки. Если ячейки не существуют, возвращается пустой вектор.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnBounds"><apiName>getColumnBounds</apiName><shortdesc>
      Возвращает текущие границы пиксела указанного столбца или null, если столбец не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>Rectangle</codeph>, представляющий границы пиксела столбца или пустое значение.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает текущие границы пиксела указанного столбца или null, если столбец не существует. Информация о границах столбца содержится в координатах сетки.
     
      <p>Если все ячейки для указанного столбца еще не прокручены в область видимости, возвращаемые границы представлены лишь приблизительно на основе <codeph>typicalItem</codeph> столбца.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnIndexAt"><apiName>getColumnIndexAt</apiName><shortdesc>
      Возвращает индекс столбца в соответствии с указанными координатами или -1, если координаты находятся за пределами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс столбца или -1, если координаты находятся за пределами. 
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата X пиксела относительно сетки.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата Y пиксела относительно сетки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает индекс столбца в соответствии с указанными координатами или -1, если координаты находятся за пределами. Координаты обрабатываются относительно сетки.
     
      <p>Если все столбцы или строки для сетки еще не прокручены в область видимости, возвращаемая позиция индекса представлена лишь приблизительно на основе <codeph>typicalItem</codeph> всех столбцов.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnWidth"><apiName>getColumnWidth</apiName><shortdesc>
      Возвращает ширину указанного столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ширина указанного столбца.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает ширину указанного столбца. Если все границы ячейки не требуются, этот метод более эффективен, чем <codeph>getColumnBounds().width</codeph>.
     
      <p>Если свойство ширины указанного столбца не определено, то возвращенное значение может быть только приблизительным. Фактическая ширина столбца вычисляется только после прокрутки столбца в область отображения.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getItemRendererAt"><apiName>getItemRendererAt</apiName><shortdesc>
      Если указанное средство визуализации элементов является видимым, возвращает ссылку на средство визуализации элементов, которое в настоящий момент отображается в указанной ячейке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Средство визуализации элементов или null, если местоположение ячейки недействительно.
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки средства визуализации элементов.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки средства визуализации элементов.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если указанное средство визуализации элементов является видимым, возвращает ссылку на средство визуализации элементов, которое в настоящий момент отображается в указанной ячейке. Обратите внимание, что если возвращенное средство визуализации элементов больше не является видимым, оно может быть переработано и его свойства сброшены.  
     
      <p>Если запрошенное средство визуализации элементов не является видимым, то при каждом вызове этого метода создается новое средство визуализации элементов. Новое средство визуализации элементов невидимо</p>
     
      <p>Если ширина указанного столбца не определена явно, то ширина этой ячейки будет основана на <codeph>typicalItem</codeph>. Если для <codeph>typicalItem</codeph> отсутствуют указания или измерения, то для ширины средства визуализации элементов по умолчанию принимается значение <codeph>150</codeph>.</p>
     
      <p>Если для свойства <codeph>variableRowHeight</codeph> сетки указано значение <codeph>true</codeph> (по умолчанию) и общая высота строки не кэширована для указанной строки, то высота средства визуализации элементов основана на <codeph>typicalItem</codeph>. Если для <codeph>typicalItem</codeph> отсутствуют указания или измерения, то для высоты средства визуализации элементов по умолчанию принимается значение предпочтительной высоты.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowBounds"><apiName>getRowBounds</apiName><shortdesc>
      Возвращает текущие границы пиксела указанной строки или null, если строка не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>Rectangle</codeph>, представляющий границы пиксела строки или пустое значение.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает текущие границы пиксела указанной строки или null, если строка не существует. Информация о границах строки содержится в координатах сетки.
     
      <p>Если все столбцы для указанной строки и все предшествующие ей строки еще не прокручены в область видимости, возвращаемые границы представлены лишь приблизительно на основе <codeph>typicalItem</codeph> всех столбцов.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowIndexAt"><apiName>getRowIndexAt</apiName><shortdesc>
      Возвращает индекс строки в соответствии с указанными координатами или -1, если координаты находятся за пределами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс строки в соответствии с указанными координатами.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата x.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата y.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает индекс строки в соответствии с указанными координатами или -1, если координаты находятся за пределами. Координаты обрабатываются относительно сетки.
     
      <p>Если все столбцы или строки для сетки еще не прокручены в область видимости, возвращаемая позиция индекса представлена лишь приблизительно на основе <codeph>typicalItem</codeph> всех столбцов.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleColumnIndices"><apiName>getVisibleColumnIndices</apiName><shortdesc>
      Возврат индексов dataProvider видимых в настоящий момент столбцов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Вектор индексов видимых столбцов.
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Возврат индексов dataProvider видимых в настоящий момент столбцов. Обратите внимание, что средства визуализации элементов для первых и последних столбцов могут быть лишь частично видимыми. Содержимое возвращенного вектора указывается в порядке отображения.
     
      <p>Функция в примере ниже использует этот метод для вычисления вектора видимых объектов GridColumn.</p>
      <pre>
      function getVisibleColumns():Vector.&lt;GridColumn>
      {
          var visibleColumns = new Vector.&lt;GridColumn>;
          for each (var columnIndex:int in grid.getVisibleColumnIndices())
              visibleColumns.push(grid.columns.getItemAt(columnIndex));
          return visibleColumns;
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleRowIndices"><apiName>getVisibleRowIndices</apiName><shortdesc>
      Возвращает индексы поставщика данных и индексы заполнения для строк, видимых в настоящее время.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Вектор индексов видимых строк.
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает индексы поставщика данных и индексы заполнения для строк, видимых в настоящее время. Индексы, которые больше или равны длине <codeph>dataProvider</codeph> представляют строки заполнения. Обратите внимание, что средства визуализации элементов для первых и последних строк могут быть лишь частично видимыми. Содержимое возвращенного вектора указывается в порядке отображения.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc>
      Если указанная ячейка видима, то ее отображение будет обновлено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки измененной ячейки или -1.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца измененной ячейки или -1.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если указанная ячейка видима, то ее отображение будет обновлено. Если <codeph>variableRowHeight=true</codeph>, то этот способ может вызвать изменение высоты соответствующей строки.
     
      <p>Если columnIndex равен -1, то вся строка становится недействительной. Также если <codeph>rowIndex равен -1</codeph>, то весь столбец становится недействительным.</p>
     
      <p>Этот метод должен вызываться при изменении любого аспекта элемента поставщика данных в <codeph>rowIndex</codeph>, что может влиять на отображение указанной ячейки. Вызов этого метода аналогичен вызову метода <codeph>dataProvider.itemUpdated()</codeph>, который сообщает Grid о том, что необходимо повторить отображение всех строк, содержащих указанный элемент. Этот метод относительно эффективен, так как он сужает область изменения отдельной ячейки.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc>
      Удаляет основанные на свойстве typicalItem данные о ширине столбца из кэша и создает запрос на проверку макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет основанные на свойстве <codeph>typicalItem</codeph> данные о ширине столбца из кэша и создает запрос на проверку макета. Этот метод необходимо вызывать при изменении аспектов <codeph>typicalItem</codeph>, что должно отражаться в макете Grid.  
     
      <p>Этот метод вызывается автоматически при непосредственном изменении <codeph>typicalItem</codeph>. Это означает, что для свойства установлено новое значение, которое не совпадает с текущим значением.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:isCellVisible"><apiName>isCellVisible</apiName><shortdesc>
      Возвращает true, если указанная ячейка хотя бы частично видима.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>True, если указанная ячейка (или строка при columnIndex = -1) хотя бы частично видима
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от 0 индекс строки ячейки средства визуализации элементов.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от 0 индекс столбца ячейки средства визуализации элементов.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает <codeph>true</codeph>, если указанная ячейка хотя бы частично видима. Если <codeph>columnIndex = -1</codeph>, то возвращается <codeph>true</codeph> при условии, что указанная строка хотя бы частично видима. Если <codeph>rowIndex = -1</codeph>, то возвращается <codeph>true</codeph> при условии, что указанный столбец хотя бы частично видим. Если для <codeph>columnIndex</codeph> и <codeph>rowIndex</codeph> указано -1, то возвращается <codeph>false</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_CELL или GridSelectionMode.MULTIPLE_CELLS, то эта ячейка удаляется из выбора и символ вставки помещается в этой ячейке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>rowIndex</codeph>, <codeph>columnIndex</codeph> или <codeph>selectionMode</codeph>.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то эта ячейка удаляется из выбора и символ вставки помещается в этой ячейке. Для всех других режимов выделения этот метод не действует.
     
      <p><codeph>rowIndex</codeph> - это индекс в поставщике данных элемента, где содержится выбранная ячейка. <codeph>columnIndex</codeph> - это индекс в значении <codeph>columns</codeph> столбца, где содержится выбранная ячейка.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, то эта строка удаляется из выбора и символ вставки помещается в этой строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>index</codeph> или <codeph>selectionMode</codeph>. 
           
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то эта строка удаляется из выбора и символ вставки помещается в этой строке. Для всех других режимов выделения этот метод не действует.
     
      <p><codeph>rowIndex</codeph> - это индекс в поставщике данных элемента, где содержится выбранная ячейка. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectAll"><apiName>selectAll</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.MULTIPLE_ROWS, выбираются все строки и удаляется символ вставки; если для selectionMode указано GridSelectionMode.MULTIPLE_CELLS, выбираются все ячейки и удаляется символ вставки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>True</codeph> при изменении выбора.
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано значение <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, выбираются все строки и удаляется символ вставки; если для <codeph>selectionMode</codeph> указано значение <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, выбираются все ячейки и удаляется символ вставки. Для всех других режимов выделения этот метод не действует.
     
      <p>При добавлении элементов в <codeph>dataProvider</codeph> или добавлении <codeph>columns</codeph> после вызова этого метода новые строки или ячейки в новом столбце будут выделены.</p>
     
      <p>Этот неявный режим selectAll завершается при возникновении одного из следующих условий:
      <ul>
        <li>выбор отменен с помощью <codeph>clearSelection</codeph>;</li>
        <li>выбор сброшен посредством <codeph>setSelectedCell</codeph>, <codeph>setSelectedCells</codeph>, <codeph>setSelectedIndex</codeph> или <codeph>selectIndices</codeph>;</li>
        <li><codeph>dataProvider</codeph> обновлен и для <codeph>preserveSelection</codeph> установлено значение false;</li>
        <li>сброшено значение <codeph>dataProvider</codeph>;</li>
        <li>значение <codeph>columns</codeph> обновлено, для <codeph>preserveSelection</codeph> указано значение <codeph>false</codeph>, а для <codeph>selectionMode</codeph> указано значение <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>;</li>
        <li>значение <codeph>columns</codeph> сброшено, а для <codeph>selectionMode</codeph> установлено значение <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>.</li> 
      </ul></p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/clearSelection"><linktext>spark.components.Grid.clearSelection</linktext></link><link href="spark.components.xml#Grid/selectIndices"><linktext>spark.components.Grid.selectIndices</linktext></link><link href="spark.components.xml#Grid/setSelectedCell"><linktext>spark.components.Grid.setSelectedCell</linktext></link><link href="spark.components.xml#Grid/setSelectedCells"><linktext>spark.components.Grid.setSelectedCells</linktext></link><link href="spark.components.xml#Grid/setSelectedIndex"><linktext>spark.components.Grid.setSelectedIndex</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc> 
      Если для selectionMode указано GridSelectionMode.MULTIPLE_CELLS, то выбираются все ячейки в области ячеек и символ вставки помещается в последнюю ячейку в данной области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях области ячейки или <codeph>selectionMode</codeph>.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки начала координат области ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца начала координат области ячейки.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc>Количество строк начиная с <codeph>rowIndex</codeph> для включения в область ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc>Количество столбцов начиная с <codeph>columnIndex</codeph> для включения в область ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то выбираются все ячейки в области ячеек и символ вставки помещается в последнюю ячейку в данной области. Для всех других режимов выделения этот метод не действует.
     
      <p><codeph>rowIndex</codeph> - это индекс в поставщике данных элемента, где содержится начало координат области ячейки. <codeph>columnIndex</codeph> - это индекс в значении <codeph>columns</codeph> столбца, где содержится начало координат области ячейки.</p>
     
      <p>Этот метод не будет иметь эффект, если область ячейки не полностью помещается в пределах сетки.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectIndices"><apiName>selectIndices</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.MULTIPLE_ROWS, то выделяет указанные строки и определяет позицию символа вставки в endRowIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph>, если любые индексы недействительны, <codeph>startRowIndex</codeph> меньше или равен <codeph>endRowIndex</codeph> или если <codeph>selectionMode</codeph> недействителен. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Индекс строки на основе 0 первой строки в выделенном фрагменте.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Количество строк в выделенном фрагменте.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то выделяет указанные строки и определяет позицию символа вставки в <codeph>endRowIndex</codeph>. Для всех других режимов выделения этот метод не действует.
     
      <p>Каждый индекс представляет элемент в поставщике данных для включения в выбор.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.MULTIPLE_CELLS, возвращается true при условии, что ячейки в области ячеек выбраны в настоящий момент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если текущий выбор содержит все ячейки в области ячейки.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Количество строк начиная с <codeph>rowIndex</codeph> для включения в область ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc>Количество столбцов начиная с <codeph>columnIndex</codeph> для включения в область ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, возвращается <codeph>true</codeph> при условии, что ячейки в области ячеек выбраны в настоящий момент.
     
      <p>Значение <codeph>rowIndex</codeph> должно находиться между 0 и показателем длины поставщика данных. Значение <codeph>columnIndex</codeph> должно находиться между 0 и показателем длины <codeph>columns</codeph>. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_CELL или GridSelectionMode.MULTIPLE_CELLS, возвращается значение true при условии, что ячейка выбрана в настоящий момент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если текущий выбор содержит эту ячейку.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, возвращается значение <codeph>true</codeph> при условии, что ячейка выбрана в настоящий момент.
     
      <p>Значение <codeph>rowIndex</codeph> должно находиться между 0 и показателем длины поставщика данных. Значение <codeph>columnIndex</codeph> должно находиться между 0 и показателем длины <codeph>columns</codeph>. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, возвращает true при условии, что строка в index включена в текущий выбранный фрагмент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если текущий выбор содержит эту строку.
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки для строки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, возвращает <codeph>true</codeph> при условии, что строка в <codeph>index</codeph> включена в текущий выбранный фрагмент.
     
      <p><codeph>rowIndex</codeph> - это индекс в поставщике данных элемента, где содержится выбранная ячейка. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.MULTIPLE_ROWS, возвращается true при условии, что строки в indices выбраны в настоящий момент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если текущий выбор содержит эти строки.
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Вектор индексов строк на основе 0 для включения в выбор. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> возвращается <codeph>true</codeph> при условии, что строки в <codeph>indices</codeph> выбраны в настоящий момент.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_CELL или GridSelectionMode.MULTIPLE_CELLS, устанавливает выбор и положение символа вставки в этой ячейке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true </codeph>при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>rowIndex</codeph>, <codeph>columnIndex</codeph> или <codeph>selectionMode</codeph>.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, устанавливает выбор и положение символа вставки в этой ячейке. Для всех других режимов выделения этот метод не действует.
     
      <p><codeph>rowIndex</codeph> - это индекс в поставщике данных элемента, где содержится выбранная ячейка. <codeph>columnIndex</codeph> - это индекс в значении <codeph>columns</codeph> столбца, где содержится выбранная ячейка.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, устанавливает выделенный фрагмент и позицию символа вставки в этой строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true </codeph>при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>index</codeph> или <codeph>selectionMode</codeph>. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, устанавливает выделенный фрагмент и позицию символа вставки в этой строке. Для всех других режимов выделения этот метод не действует.
     
      <p><codeph>rowIndex</codeph> - это индекс в поставщике данных элемента, где содержится выбранная ячейка. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiValue id="spark.components:Grid:anchorColumnIndex:get"><apiName>anchorColumnIndex</apiName><shortdesc>
      Индекс столбца опорной точки для следующего выделения с помощью клавиши Shift.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Индекс столбца <i>опорной точки</i> для следующего выделения с помощью клавиши Shift. Опорная точка - это последний выбранный элемент. Он определяет элемент опорной точки при выборе нескольких элементов в сетке. При выборе нескольких элементов в сетке набор элементов расширяется от опорной точки до элемента символа вставки.
     
      <p>Обработчики событий сетки должны использовать это свойство для регистрации положения недавнего события мыши (перемещение вниз) или клавиатуры без нажатия клавиши Shift, которое определяет одну границу следующего возможного выбора с нажатой клавишей Shift. Индекс символа вставки определяет другую конечную точку.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:anchorRowIndex:get"><apiName>anchorRowIndex</apiName><shortdesc>
      Индекс строки опорной точки для следующего выделения с помощью клавиши Shift.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Индекс строки <i>опорной точки</i> для следующего выделения с помощью клавиши Shift. Опорная точка - это последний выбранный элемент. Он определяет элемент опорной точки при выборе нескольких элементов в сетке. При выборе нескольких элементов в сетке набор элементов расширяется от опорной точки до элемента символа вставки.
     
      <p>Обработчики событий сетки должны использовать это свойство для регистрации положения недавнего события мыши (перемещение вниз) или клавиатуры без нажатия клавиши Shift, которое определяет одну границу следующего возможного выбора с нажатой клавишей Shift. Индекс символа вставки определяет другую конечную точку.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:caretColumnIndex:get"><apiName>caretColumnIndex</apiName><shortdesc>
      Если showCaretIndicator имеет значение true, то указывается индекс столбца caretIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>showCaretIndicator</codeph> имеет значение <codeph>true</codeph>, то указывается индекс столбца <codeph>caretIndicator</codeph>.
     
      <p>Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то индикатор занимает всю строку и <codeph>caretColumnIndex</codeph> игнорируется. Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то <codeph>caretIndicator</codeph> занимает указанную ячейку.</p>
     
      <p>Установка для <codeph>caretColumnIndex</codeph> значения -1 означает, что индекс столбца не будет определен и символ вставки ячейки не будет показан.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretIndicator:get"><apiName>caretIndicator</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, один визуальный элемент отображается для каждой строки символа вставки; если для selectionMode указано GridSelectionMode.SINGLE_CELL или GridSelectionMode.MULTIPLE_CELLS, визуальный элемент отображается для ячейки символа вставки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, один визуальный элемент отображается для каждой строки символа вставки; если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, визуальный элемент отображается для ячейки символа вставки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretRowIndex:get"><apiName>caretRowIndex</apiName><shortdesc>
      Если showCaretIndicator имеет значение true, то указывается индекс строки caretIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>showCaretIndicator</codeph> имеет значение <codeph>true</codeph>, то указывается индекс строки <codeph>caretIndicator</codeph>. Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то индикатор занимает всю строку и свойство <codeph>caretColumnIndex</codeph> игнорируется. Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то <codeph>caretIndicator</codeph> занимает указанную ячейку.
     
      <p>Установка для <codeph>caretRowIndex</codeph> значения -1 означает, что индекс строки не будет определен и символ вставки не будет показан.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      Визуальный элемент, отображаемый между столбцами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Визуальный элемент, отображаемый между столбцами.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columns:get"><apiName>columns</apiName><shortdesc>
      Список объектов GridColumn, отображаемый этой сеткой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Список объектов GridColumn, отображаемый этой сеткой. В каждом столбце выделяются различные свойства элементов поставщика данных для отображения.
      
      <p>Объекты GridColumn могут отображаться только в <codeph>columns</codeph> для одного элемента управления Grid.</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      Элемент управления DataGrid, для которого Grid используется как компонент темы оформления сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Элемент управления DataGrid, для которого Grid используется как компонент темы оформления сетки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Список элементов данных, которые соответствуют строкам в сетке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Список элементов данных, которые соответствуют строкам в сетке. Каждый столбец сетки связан со свойством элементов данных, чтобы отобразить это свойство в сетке <i>cells</i>.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      Если showHoverIndicator имеет значение true, то указывается индекс столбца hoverIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>showHoverIndicator</codeph> имеет значение <codeph>true</codeph>, то указывается индекс столбца <codeph>hoverIndicator</codeph>. Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то индикатор занимает всю строку и <codeph>hoverColumnIndex</codeph> игнорируется. Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то <codeph>hoverIndicator</codeph> занимает указанную ячейку.
      
      <p>Установка для <codeph>hoverColumnIndex</codeph> значения -1 (по умолчанию) означает, что индекс столбца не будет определен и индикатор наведения ячейки не будет показан.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverIndicator:get"><apiName>hoverIndicator</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>. один визуальный элемент отображается при наведении указателя мыши на строку. Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, отображается визуальный элемент для ячейки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverRowIndex:get"><apiName>hoverRowIndex</apiName><shortdesc>
      Если showHoverIndicator имеет значение true, то указывается индекс столбца hoverIndicator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>showHoverIndicator</codeph> имеет значение <codeph>true</codeph>, то указывается индекс столбца <codeph>hoverIndicator</codeph>. Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то индикатор занимает всю строку и <codeph>hoverColumnIndex</codeph> игнорируется. Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то <codeph>hoverIndicator</codeph> занимает указанную ячейку.
     
      <p>Установка для <codeph>hoverRowIndex</codeph> значения -1 (по умолчанию) означает, что индекс строки не будет определен и индикатор наведения не будет показан.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      Средство визуализации элементов, используемое для столбцов, в которых средство визуализации не указано.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Средство визуализации элементов, используемое для столбцов, в которых средство визуализации не указано.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc>
      Если указано значение true, то при обновлении коллекции поставщика данных выбор сохраняется.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если указано значение <codeph>true</codeph>, то при обновлении коллекции поставщика данных выбор сохраняется. Поскольку для этого обновления требуется сохранение каждого элемента выбранного фрагмента, эту процедуру не рекомендуется использовать в случае большого размера выбранного фрагмента.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc>
      Измеренная ширина этой сетки будет достаточно большой для отображения первых столбцов requestedColumnCount.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Измеренная ширина этой сетки будет достаточно большой для отображения первых столбцов <codeph>requestedColumnCount</codeph>. Если <codeph>requestedColumnCount</codeph> имеет значение -1, то измеренная ширина будет достаточной для отображения всех столбцов.
     
      <p>Если реальный размер сетки был установлен явно, то это свойство не используется.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc>
      Измеренная высота этой сетки будет достаточно большой для отображения строк, количество которых не превышает requestedMaxRowCount.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Измеренная высота этой сетки будет достаточно большой для отображения строк, количество которых не превышает <codeph>requestedMaxRowCount</codeph>.
     
      <p>Свойство не будет иметь эффект при выполнении любого из нижеуказанных условий:
      <ul>
          <li><codeph>requestedRowCount</codeph> установлено.</li>
          <li>Фактический размер сетки, который был явно определен.</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc>
      Измеренная ширина этой сетки будет достаточно большой для отображения по меньшей мере столбцов requestedMinColumnCount.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Измеренная ширина этой сетки будет достаточно большой для отображения по меньшей мере столбцов <codeph>requestedMinColumnCount</codeph>.
     
      <p>Свойство не будет иметь эффект при выполнении любого из нижеуказанных условий:
      <ul>
          <li><codeph>requestedColumnCount</codeph> установлено.</li>
          <li>Фактический размер сетки, который был явно определен.</li>
          <li>Сетка находится в компоненте Scroller.</li>
      </ul>
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc>
      Измеренная высота этой сетки будет достаточно большой для отображения по меньшей мере строк requestedMinRowCount.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Измеренная высота этой сетки будет достаточно большой для отображения по меньшей мере строк <codeph>requestedMinRowCount</codeph>.
     
      <p>Свойство не будет иметь эффект при выполнении любого из нижеуказанных условий:
      <ul>
          <li><codeph>requestedRowCount</codeph> установлено.</li>
          <li>Фактический размер сетки, который был явно определен.</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc>
      Измеренная высота этой сетки будет достаточно большой для отображения первых строк requestedRowCount.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Измеренная высота этой сетки будет достаточно большой для отображения первых строк <codeph>requestedRowCount</codeph>. 
     
      <p>Если <codeph>requestedRowCount</codeph> имеет значение -1, то измеренный размер будет достаточным для отображения всех элементов макета. </p>
     
      <p>Если реальный размер сетки был установлен явно, то это свойство не используется.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      Если true и для свойства selectionMode не указано GridSelectionMode.NONE, то элемент всегда должен быть выбран в сетке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>true</codeph> и для свойства <codeph>selectionMode</codeph> не указано <codeph>GridSelectionMode.NONE</codeph>, то элемент всегда должен быть выбран в сетке.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc>
      Определяет, может ли пользователь изменять размеры столбцов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
        
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет, может ли пользователь изменять размеры столбцов. Если выбрано значение <codeph>true</codeph>, можно растянуть или сжать столбцы компонента DataGrid, переместив линии сетки, расположенные между ячейками заголовка. При значении <codeph>true</codeph>, отдельные столбцы также должны иметь свойства<codeph>resizable</codeph>, установленные как <codeph>false</codeph> для предотвращения изменения размеров отдельного столбца.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:rowBackground:get"><apiName>rowBackground</apiName><shortdesc>
      Визуальный элемент, который отображает фон для каждой строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowBackgroundChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Визуальный элемент, который отображает фон для каждой строки.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc>
      Если variableRowHeight имеет значение false, то это свойство указывает фактическую высоту каждой строки в пикселах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Если <codeph>variableRowHeight</codeph> имеет значение <codeph>false</codeph>, то это свойство указывает фактическую высоту каждой строки в пикселах.
     
      <p>Если для <codeph>variableRowHeight</codeph> установлено значение <codeph>true</codeph>, то в качестве оценочной высоты для строк, которые еще не прокручены в область видимости, по умолчанию используется значение этого свойства, а не предпочтительная высота средств визуализации, настроенных с помощью <codeph>typicalItem</codeph>. Когда Grid заполняет изображение пустыми строками, это свойство указывает высоту пустых строк.</p>
     
      <p>Если для <codeph>variableRowHeight</codeph> указано <codeph>false</codeph>, то значение по умолчанию этого свойства будет представлять максимальный показатель предпочтительной высоты средств визуализации каждого столбца, созданных для <codeph>typicalItem</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowSeparator:get"><apiName>rowSeparator</apiName><shortdesc>
      Визуальный элемент, отображаемый между строками.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Визуальный элемент, отображаемый между строками.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_CELL или GridSelectionMode.MULTIPLE_CELLS, то возвращает первую выбранную ячейку начиная со строки 0 и столбца 0 и перемещается по каждому столбцу в строке перед переходом на следующую строку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то возвращает первую выбранную ячейку начиная со строки 0 и столбца 0 и перемещается по каждому столбцу в строке перед переходом на следующую строку.
     
      <p>Когда пользователь изменяет выбор, взаимодействуя с элементом управления, этот элемент управления отправляет событие <codeph>selectionChange</codeph>. Когда пользователь изменяет выбор программным способом, элемент управления отправляет событие <codeph>valueCommit</codeph>.</p>
     
      <p> Свойство предназначено для инициализации или привязки выбора в разметке MXML. Метод <codeph>setSelectedCell()</codeph> должен использоваться для программного обновления выбранных фрагментов, например при создании обработчика событий мыши или клавиатуры. </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_CELL или GridSelectionMode.MULTIPLE_CELLS, то возвращается вектор объектов CellPosition, представляющих позиции выбранных ячеек в сетке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, то возвращается вектор объектов CellPosition, представляющих позиции выбранных ячеек в сетке.
     
      <p>Когда пользователь изменяет выбор, взаимодействуя с элементом управления, этот элемент управления отправляет событие <codeph>selectionChange</codeph>. Когда пользователь изменяет выбор программным способом, элемент управления отправляет событие <codeph>valueCommit</codeph>.</p>
     
      <p> Свойство предназначено для инициализации или привязки выбора в разметке MXML. Метод <codeph>setSelectedCell()</codeph> должен использоваться для программного обновления выбранных фрагментов, например при создании обработчика событий мыши или клавиатуры. </p> 
     
      <p>Значение по умолчанию — пустой <codeph>вектор.&lt;CellPosition></codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, то возвращает rowIndex первой выбранной строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то возвращает rowIndex первой выбранной строки. 
     
      <p>Когда пользователь изменяет выбор, взаимодействуя с элементом управления, этот элемент управления отправляет событие <codeph>selectionChange</codeph>. Когда пользователь изменяет выбор программным способом, элемент управления отправляет событие <codeph>valueCommit</codeph>.</p>
     
      <p> Свойство предназначено для инициализации или привязки выбора в разметке MXML. Метод <codeph>setSelectedCell()</codeph> должен использоваться для программного обновления выбранных фрагментов, например при создании обработчика событий мыши или клавиатуры. </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, то возвращается вектор выбранных индексов строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то возвращается вектор выбранных индексов строк. Для всех других режимов выделения этот метод не действует.
     
      <p>Когда пользователь изменяет выбор, взаимодействуя с элементом управления, этот элемент управления отправляет событие <codeph>selectionChange</codeph>. Когда пользователь изменяет выбор программным способом, элемент управления отправляет событие <codeph>valueCommit</codeph>.</p>
     
      <p> Свойство предназначено для инициализации или привязки выбора в разметке MXML. Метод setSelectedCell() должен использоваться для программного обновления выбранных фрагментов, например при создании обработчика событий мыши или клавиатуры. </p> > 
     
      <p>Значение по умолчанию — пустой <codeph>вектор.&lt;int></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, то возвращает текущий выбранный элемент в поставщике данных или undefined, если строки не выбраны.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то возвращает текущий выбранный элемент в поставщике данных или <codeph>undefined</codeph>, если строки не выбраны.  
     
      <p>Когда пользователь изменяет выбор, взаимодействуя с элементом управления, этот элемент управления отправляет событие <codeph>selectionChange</codeph>. Когда пользователь изменяет выбор программным способом, элемент управления отправляет событие <codeph>valueCommit</codeph>.</p>
     
      <p> Свойство предназначено для инициализации или привязки выбора в разметке MXML. Метод <codeph>setSelectedCell()</codeph> должен использоваться для программного обновления выбранных фрагментов, например при создании обработчика событий мыши или клавиатуры. </p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, то возвращается вектор элементов dataProvider, которые выбраны в настоящий момент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, то возвращается вектор элементов dataProvider, которые выбраны в настоящий момент.
     
      <p>Когда пользователь изменяет выбор, взаимодействуя с элементом управления, этот элемент управления отправляет событие <codeph>selectionChange</codeph>. Когда пользователь изменяет выбор программным способом, элемент управления отправляет событие <codeph>valueCommit</codeph>.</p>
     
      <p> Свойство предназначено для инициализации или привязки выбора в разметке MXML. Метод setSelectedCell() должен использоваться для программного обновления выбранных фрагментов, например при создании обработчика событий мыши или клавиатуры. </p> 
      
      <p>Значение по умолчанию — пустой <codeph>вектор.&lt;Object></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectionIndicator:get"><apiName>selectionIndicator</apiName><shortdesc>
      Если для selectionMode указано GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, визуальный элемент отображается для каждой строки; если для selectionMode указано GridSelectionMode.SINGLE_CELL или GridSelectionMode.MULTIPLE_CELLS, визуальный элемент отображается для каждой ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, визуальный элемент отображается для каждой строки; если для <codeph>selectionMode</codeph> указано <codeph>GridSelectionMode.SINGLE_CELL</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, визуальный элемент отображается для каждой ячейки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc>
      Если для selectionMode указано значение GridSelectionMode.SINGLE_ROW или GridSelectionMode.MULTIPLE_ROWS, возвращает количество выбранных строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если для <codeph>selectionMode</codeph> указано значение <codeph>GridSelectionMode.SINGLE_ROW</codeph> или <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, возвращает количество выбранных строк. Если для <codeph>selectionMode</codeph> указано значение <codeph>GridSelectionMode.SINGLE_CELLS</codeph> или <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, возвращает количество выбранных ячеек.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc>
      Режим выбора для элемента управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Режим выбора для элемента управления. Возможные значения: <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, <codeph>GridSelectionMode.NONE</codeph>, <codeph>GridSelectionMode.SINGLE_CELL</codeph> и <codeph>GridSelectionMode.SINGLE_ROW</codeph>.
     
      <p>При изменении selectionMode текущий выбор будет отменен и для caretRowIndex и caretColumnIndex будет установлено значение -1.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      Если true, dataTip отображается для всех видимых ячеек.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>true</codeph>, dataTip отображается для всех видимых ячеек. При значении <codeph>false</codeph> (по умолчанию) dataTip отображается, только если для свойства <codeph>showDataTips</codeph> указано <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      Макет сетки обеспечивает то, что столбцы, ширина которых не указана, будут достаточно широки, чтобы отобразить средство визуализации элементов для этого элемента поставщика данных по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Макет сетки обеспечивает то, что столбцы, ширина которых не указана, будут достаточно широки, чтобы отобразить средство визуализации элементов для этого элемента поставщика данных по умолчанию. Если типичный элемент не указан, то используется первый элемент в поставщике данных.
     
      <p>Ограничение. Если <codeph>typicalItem</codeph> является IVisualItem, то он не должен быть также элементом поставщика данных.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc>
      Если true, то высота каждой строки должна представлять максимальное значение всех предпочтительных показателей высоты ячеек, которые отображаются в настоящее время.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>true</codeph>, то высота каждой строки представляет максимальное значение всех предпочтительных показателей высоты ячеек, которые отображаются в настоящее время.
     
      <p>Если <codeph>false</codeph>, то высота каждой строки принимает значение свойства <codeph>rowHeight</codeph>. Если значение <codeph>rowHeight</codeph> не указано, то высота каждой строки определяется свойством <codeph>typicalItem</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Application"><apiName>Application</apiName><shortdesc>
  Flex определяет контейнер по умолчанию или приложение, позволяющее добавлять содержимое в приложение без явного определения другого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="direction"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Application" playerVersion="Flash10" type="uint">
<description>
  Фоновый цвет приложения. Этот цвет используется в качестве цвета рабочей области для приложения и цвета фона для HTML-тега embed.
   </description>
<default>0x464646
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Application" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Часть темы оформления, которая определяет внешний вид панели управления контейнера. По умолчанию класс ApplicationSkin определяет, что область панели управления должна появляться на сером фоне в верхней части области содержимого контейнера Application.
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Application&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Application
    <strong>Properties</strong>
    applicationDPI=<i>Device dependent</i>"
    backgroundColor="0xFFFFFF"
    colorCorrection="default"
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    frameRate="24"
    pageTitle""
    preloader="<i>No default</i>"
    preloaderChromeColor="<i>No default</i>"
    resizeForSoftKeyboard=true"
    runtimeDPIProvider="RuntimeDPIProvider"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    splashScreenImage=""
    splashScreenMinimumDisplayTime="1000"
    splashScreenScaleMode="none"
    usePreloader="true"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
     <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex определяет контейнер по умолчанию или Application, позволяющее добавлять содержимое в приложение без явного определения другого контейнера. 
   <p>Контейнер Application имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>375 пикселей в высоту и 500 пикселей в ширину в автономном Flash Player и все доступное пространство в браузере</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>0 пикселей в ширину и 0 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>Без ограничений</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.ApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ApplicationContainerExample.mxml"><swfblock conref="examples/ApplicationContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Application_flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR_uncaughtError"><apiName>uncaughtError</apiName><shortdesc>
  Отправляется, когда глобальный обработчик ошибок обнаруживает неперехваченную ошибку.
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR</apiEventType><adobeApiEventClassifier>flash.events.UncaughtErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, когда глобальный обработчик ошибок обнаруживает неперехваченную ошибку.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  Отправляется в случае сбоя вызова службы HTTPService.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется в случае сбоя вызова службы HTTPService.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Отправляется после инициализации Application, обрабатывается LayoutManager и прикрепляется к списку отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после инициализации Application, обрабатывается LayoutManager и прикрепляется к списку отображения.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Application:Application"><apiName>Application</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        Указывает частоту кадров для приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
           </apiDefaultValue></apiValueDef><apiDesc>
        Указывает частоту кадров для приложения.
             <p><b>Примечание. </b>Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        Определяет строку, появляющуюся в строке заголовка браузера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
        Определяет строку, появляющуюся в строке заголовка браузера. Это свойство обеспечивает те же функциональные возможности, что и тег HTML <codeph>&lt;title></codeph>.
             <p><b>Примечание. </b>Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML. Значение, заданное кодом MXML, предназначено для использования средством с целью обновления шаблонов HTML с SDK.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
      Определяет цвет хрома, используемый компонентом предварительного загрузчика по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
      Определяет цвет хрома, используемый компонентом предварительного загрузчика по умолчанию. Это свойство равноценно стилю <codeph>chromeColor</codeph>, используемому темами оформления Spark. Обычно это свойство должно иметь такое же значение, как свойство стиля контейнера Application <codeph>chromeColor</codeph>.
           <p>Примечание. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloader"><apiName>preloader</apiName><shortdesc>
      Контейнер application поддерживает средство предварительной загрузки приложения с индикатором выполнения загрузки, который отображает ход выполнения загрузки и инициализации файла SWF приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Контейнер application поддерживает средство предварительной загрузки приложения с индикатором выполнения загрузки, который отображает ход выполнения загрузки и инициализации файла SWF приложения. По умолчанию средство предварительной загрузки приложения активировано. Средство предварительной загрузки отслеживает количество загруженных байтов и непрерывно обновляет индикатор выполнения. 
           <p>Это свойство используется для указания пути компонента, который определяет пользовательский индикатор выполнения. Для создания пользовательского индикатора выполнения необходимо создать подкласс класса SparkDownloadProgressBar, DownloadProgressBar или flash.display.Sprite, который реализует интерфейс mx.preloaders.IPreloaderDisplay. </p>
           <p><b>Примечание. </b>Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.preloaders.SparkDownloadProgressBar.xml"><linktext>mx.preloaders.SparkDownloadProgressBar</linktext></link><link href="" invalidHref="mx.preloaders.DownloadProgressBar.xml"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="" invalidHref="flash.display.Sprite.xml"><linktext>flash.display.Sprite</linktext></link><link href="" invalidHref="mx.preloaders.IPreloaderDisplay.xml"><linktext>mx.preloaders.IPreloaderDisplay</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Определяет максимальную глубину стека вызовов Flash Player или AIR до остановки проигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
           </apiDefaultValue></apiValueDef><apiDesc>
        Определяет максимальную глубину стека вызовов Flash Player или AIR до остановки проигрывателя. Определяется граница переполнения стека.
             <p><b>Примечание. </b>Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        Определяет максимальную продолжительность (в секундах) работы обработчика событий ActionScript, превышение которой вызывает зависание Flash Player или AIR и прерывание их работы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
           </apiDefaultValue></apiValueDef><apiDesc>
        Определяет максимальную продолжительность (в секундах) работы обработчика событий ActionScript, превышение которой вызывает зависание Flash Player или AIR и прерывание их работы. Максимальное допустимое значение для определения: 60 секунд.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:splashScreenMinimumDisplayTime"><apiName>splashScreenMinimumDisplayTime</apiName><shortdesc>
      Минимальное количество времени для отображения заставки (в миллисекундах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1000
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Минимальное количество времени для отображения заставки (в миллисекундах). Изображение заставки экрана можно указать с помощью свойства <codeph>splashScreenImage</codeph>.
           <p><b>Примечание.</b> Это свойство действует, только если установлено свойство <codeph>splashScreenImage</codeph> и для свойства <codeph>preloader</codeph> установлено значение spark.preloaders.SplashScreen. Класс spark.preloaders.SplashScreen - это средство предварительной загрузки по умолчанию для приложений Mobile Flex. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
           <p><b>Примечание.</b> Для поддержки экрана заставки в настольном приложении необходимо добавить frameworks\libs\mobile\mobilecomponents.swc в путь к библиотеке приложения.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenScaleMode"><apiName>splashScreenScaleMode</apiName><shortdesc>
      Режим масштабирования изображения заставки экрана. При значении none размер изображения устанавливается в соответствии с его встроенным размером. Значение stretch устанавливает ширину и высоту изображения по ширине и высоте рабочей области с возможным изменением пропорций содержимого. Значение letterbox устанавливает ширину и высоту изображения с максимальным соответствием ширине и высоте рабочей области и выдерживанием пропорций.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"none"
      </apiDefaultValue></apiValueDef><apiDesc>
      Режим масштабирования изображения заставки экрана:
      
      <ul>
          <li>При значении <codeph>none</codeph> размер изображения устанавливается в соответствии с его встроенным размером.</li>
               <li>Значение <codeph>stretch</codeph> устанавливает ширину и высоту изображения по ширине и высоте рабочей области с возможным изменением пропорций содержимого.</li>
               <li>Значение <codeph>letterbox</codeph> устанавливает ширину и высоту изображения с максимальным соответствием ширине и высоте рабочей области и выдерживанием пропорций. Изображение растягивается до максимума границ рабочей области, при этом в случае необходимости в рабочую область добавляются интервалы для поддержания пропорций.</li>
               <li>Значения <codeph>zoom</codeph> и <codeph>letterbox</codeph> аналогичны за исключением того, что <codeph>zoom</codeph> растягивает изображение за пределы рабочей области для удаления интервалов с целью сохранения пропорций. В результате используется все пространство рабочей области, но также возможна обрезка изображения.</li>
      </ul>
           <p>Для части рабочей области, не закрытой изображением, используется <codeph>backgroundColor</codeph> контейнера Application.</p>
           <p><b>Примечание.</b> Это свойство действует, только если установлено свойство <codeph>splashScreenImage</codeph> и для свойства <codeph>preloader</codeph> установлено значение spark.preloaders.SplashScreen. Класс spark.preloaders.SplashScreen - это средство предварительной загрузки по умолчанию для приложений Mobile Flex. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
           <p><b>Примечание.</b> Для поддержки экрана заставки в настольном приложении необходимо добавить frameworks\libs\mobile\mobilecomponents.swc в путь к библиотеке приложения.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        Если значение равно true, определяется отображение предварительного загрузчика приложений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
        Если значение равно <codeph>true</codeph>, определяется отображение предварительного загрузчика приложений.
             <p><b>Примечание. </b>Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      DPI приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      DPI приложения. По умолчанию это значение представляет DPI устройства, на котором в настоящее время выполняется приложение. Если значение установлено в MXML, Flex изменит масштаб приложения, чтобы его DPI соответствовал <codeph>runtimeDPI</codeph>. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:aspectRatio:get"><apiName>aspectRatio</apiName><shortdesc>
      Возвращает пропорции рабочей области верхнего уровня на основе ее ширины и высоты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Возвращает пропорции рабочей области верхнего уровня на основе ее ширины и высоты. Если ширина рабочей области превышает ее высоту, ориентация рабочей области считается альбомной. В ином случае возвращается книжная ориентация.
      
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:colorCorrection:get"><apiName>colorCorrection</apiName><shortdesc>
     Значение свойства colorCorrection рабочей области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ColorCorrection.DEFAULT
         </apiDefaultValue></apiValueDef><apiDesc>
     Значение свойства <codeph>colorCorrection</codeph> рабочей области. Если это приложение не имеет доступа к свойству рабочей области <codeph>colorCorrection</codeph>, значением свойства <codeph>colorCorrection</codeph> является <codeph>null</codeph>.
         <p>Только главное приложение имеет право устанавливать свойство <codeph>colorCorrection</codeph>. Если для вложенного приложения потребуется определить свойство цветокоррекции, его следует указать ссылкой на экземпляр главного приложения.</p>
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.ColorCorrection.xml"><linktext>flash.display.ColorCorrection</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Набор компонентов для включения в область панели управления контейнера Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Набор компонентов для включения в область панели управления контейнера Application. Местоположение и внешний вид области панели управления контейнера Application определены классом spark.skins.spark.ApplicationSkin. По умолчанию класс ApplicationSkin определяет, что область панели управления должна появляться на сером фоне в верхней части области содержимого контейнера Application. Создает пользовательскую тему оформления для изменения внешнего вида панели управления по умолчанию.
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      Определяет макет области панели управления контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Определяет макет области панели управления контейнера.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      Если установлено значение true, то панель управления отображается.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Если установлено значение <codeph>true</codeph>, то панель управления отображается. Этот флаг не оказывает влияние, если для свойства <codeph>controlBarContent</codeph> не задано значение.
           <p><b>Примечание. </b>Контейнер Application не отслеживает свойство <codeph>controlBarGroup</codeph>. Если другой код делает его невидимым, при обновлении контейнера Application может возникнуть ошибка.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      Object, содержащий пары «значение-имя», представляющие параметры для Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Object, содержащий пары «значение-имя», представляющие параметры для Application.
           <p>Можно использовать цикл for-in для извлечения всех имен и значений из Object параметров.</p>
           <p>Существует два источника параметров: строка запроса в URL-адресе Application и значения HTML-параметра FlashVars (оно затрагивает только главное Application).</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      Некоторые устройства не поддерживают аппаратную клавиатуру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      Некоторые устройства не поддерживают аппаратную клавиатуру. Функции ввода на таких устройствах выполняет экранная клавиатура, которая отображается при необходимости. Окно экранной, или виртуальной, клавиатуры закрывается после того, как пользователь завершил ввод информации или отменил операцию. Значение <codeph>true</codeph> обозначает, что при открытом или закрытом окне виртуальной клавиатуры изменяются размеры приложения.  
           <p>Чтобы включить функцию изменения размера приложения, укажите для атрибута <codeph>&lt;softKeyboardBehavior></codeph> значение <codeph>none</codeph> в файле дескриптора xml приложения.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:runtimeDPIProvider:get"><apiName>runtimeDPIProvider</apiName><shortdesc>
      Класс, который расширяет RuntimeDPIProvider и переопределяет стандартные вычисления Flex для runtimeDPI.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>spark.components.RuntimeDPIProvider
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Класс, который расширяет RuntimeDPIProvider и переопределяет стандартные вычисления Flex для <codeph>runtimeDPI</codeph>.
     
      <p>Стандартные сопоставления Flex:
         <adobetable class="innertable">
            
            
            
         <tgroup cols="2"><tbody><row><entry>160 DPI</entry><entry>&lt; 200 DPI</entry></row><row><entry>240 DPI</entry><entry>>= 200 DPI и &lt; 280 DPI</entry></row><row><entry>320 DPI</entry><entry>>= 280 DPI</entry></row></tbody></tgroup></adobetable>
      </p>
     
      Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link><link href="" invalidHref="mx.core.RuntimeDPIProvider.xml"><linktext>mx.core.RuntimeDPIProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:runtimeDPI:get"><apiName>runtimeDPI</apiName><shortdesc>
      DPI устройства, на котором в настоящее время выполняется приложение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      DPI устройства, на котором в настоящее время выполняется приложение. Flex округляет значение до одного из вариантов <codeph>DPIClassification</codeph>. 
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenImage:get"><apiName>splashScreenImage</apiName><shortdesc>
      Класс изображения для средства предварительной загрузки SplashScreen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc>
      Класс изображения для средства предварительной загрузки SplashScreen. Как правило, значением этого свойства является вложенный ресурс или имя класса <codeph>SplashScreenImage</codeph>, определенного в отдельном файле MXML. Пример использования в качестве значения splashScreenImage вложенного изображения:
           <pre>splashScreenImage="@Embed('Default.png')"</pre>
           <p><b>Примечание.</b> Это свойство действует, только если для свойства <codeph>preloader</codeph> установлено значение spark.preloaders.SplashScreen. Класс spark.preloaders.SplashScreen - это средство предварительной загрузки по умолчанию для приложений Mobile Flex. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
           <p><b>Примечание.</b> Для поддержки экрана заставки в настольном приложении необходимо добавить frameworks\libs\mobile\mobilecomponents.swc в путь к библиотеке приложения.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.preloaders.SplashScreen.xml"><linktext>spark.preloaders.SplashScreen</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:url:get"><apiName>url</apiName><shortdesc>
      URL-адрес, с которого был загружен файл этого приложения SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      URL-адрес, с которого был загружен файл этого приложения SWF.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      URL-адрес для просмотра кода приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      URL-адрес для просмотра кода приложения. Определение этого свойства добавляет пункт меню «Отобразить код» в контекстное меню по умолчанию для приложения. При выборе этого пункта меню <codeph>viewSourceURL</codeph> открывается в новом окне.
           <p>Свойство <codeph>viewSourceURL</codeph> следует определить с использованием MXML, а не ActionScript, как показано в следующем примере:</p>
           <pre>
        &lt;Application viewSourceURL="http://path/to/source">
          ...
        &lt;/Application></pre>
                </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Button"><apiName>Button</apiName><shortdesc>
  Компонент Button является часто используемой прямоугольной кнопкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Альфа-канал теней текста.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Цвет теней текста.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:Button" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет, применяемый к кнопке при значении true для выделенного флажка. 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Button&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Button 
    <strong>Properties</strong>
    emphasized="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент Button является часто используемой прямоугольной кнопкой. Компонент Button выглядит как кнопка, которую можно нажать. Тема оформления по умолчанию имеет текстовую метку. Определите пользовательский класс темы оформления для добавления изображения к элементу управления.
 
  <p>Как правило, кнопки используют прослушиватели событий для выполнения действий при выборе пользователем соответствующего элемента управления. При щелчке мышью элемент управления Button активируется и передает события <codeph>click</codeph> и <codeph>buttonDown</codeph>. Элемент управления Button всегда передает события <codeph>mouseMove</codeph>, <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph>, <codeph>rollOut</codeph>, <codeph>mouseDown</codeph> и <codeph>mouseUp</codeph> в активированном или деактивированном состоянии.</p>
 
  <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
 
  <p>Элемент управления Button имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>Имеет достаточную ширину для отображения текстовой метки элемента управления</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>21 пиксель в ширину и 21 пиксель в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.ButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonSkin"><linktext>spark.skins.spark.ButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:Button:Button"><apiName>Button</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
     Отражает кнопку по умолчанию согласно запросу диспетчера фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="emphasizedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
     Отражает кнопку по умолчанию согласно запросу диспетчера фокуса. Как правило, это свойство устанавливается диспетчером фокуса, когда кнопка служит кнопкой по умолчанию в контейнере или форме. При значении true стиль <codeph>emphasized</codeph> добавляется к свойству <codeph>styleName</codeph> кнопки.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.managers.FocusManager.defaultButton.xml"><linktext>mx.managers.FocusManager.defaultButton</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  Компонент CheckBox состоит из необязательной метки и небольшого поля, которое может содержать или не содержать флажок.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:CheckBox" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:CheckBox" playerVersion="Flash10" theme="mobile" type="String">
<description>
  Ориентация значка по отношению к метке. Допустимыми значениями в MXML являются <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> и <codeph>top</codeph>.
 
  <p>В ActionScript для установки значения этого свойства используются следующие константы: <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> и <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:CheckBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
  <pre>
  &lt;s:CheckBox
    <strong>Properties</strong>
    symbolColor="0x000000"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент CheckBox состоит из необязательной метки и небольшого поля, которое может содержать или не содержать флажок. 
 
  <p>При щелчке пользователя на компоненте CheckBox или его связанном тексте компонент CheckBox устанавливает для своего свойства <codeph>selected</codeph> значение <codeph>true</codeph> для случая установленного флажка и значение <codeph>false</codeph> для случая удаленного флажка.</p>
 
  <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
 
  <p>Элемент управления CheckBox имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>Имеет достаточную ширину для отображения текстовой метки элемента управления</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>18 пикселей в ширину и 18 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.CheckBoxSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#CheckBoxSkin"><linktext>spark.skins.spark.CheckBoxSkin</linktext></link></related-links><apiConstructor id="spark.components:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Group"><apiName>Group</apiName><shortdesc>
  Класс Group является базовым контейнерным классом для визуальных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="mxmlContent"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Альфа-канал теней текста.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Цвет теней текста.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Group&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Group
    <strong>Properties</strong>
    blendMode="auto"
    mxmlContent="null"
    scaleGridBottom="null"
    scaleGridLeft="null"
    scaleGridRight="null"
    scaleGridTop="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Group является базовым контейнерным классом для визуальных элементов. Контейнер Group принимает в качестве нижестоящих элементов любые компоненты, реализующие интерфейс IUIComponent, и любые компоненты, реализующие интерфейс IGraphicElement. Этот контейнер следует использовать при необходимости управления визуальными нижестоящими элементами и графическими компонентами. 
 
  <p>Для повышения производительности и минимизации размера приложения контейнер Group не может иметь тем оформления. При необходимости использования тем оформления следует использовать вместо него SkinnableContainer.</p>
 
  <p><b>Примечание. </b>Сетка масштабирования может функционировать некорректно, когда внутри группы существуют нижестоящие DisplayObject, такие как компонент или другая группа. Если нижестоящие элементы представлены объектами GraphicElement и все они разделяют DisplayObject группы, то сетка масштабирования работает должным образом.</p> 
 
  <p>Установка любого из следующих свойств для нижестоящего GraphicElement будет требовать от GraphicElement создания его собственного DisplayObject, что приведет к инвертированию свойств сетки масштабирования на группе.</p>  
 
  <pre>
  alpha
  blendMode other than BlendMode.NORMAL or "auto"
  colorTransform
  filters
  mask
  matrix
  rotation
  scaling
  3D properties
  bounds outside the extent of the Group
  </pre>
 
  <p>Контейнер Group имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="GroupExample.mxml"><swfblock conref="examples/GroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  Отправляется при удалении визуального элемента из держателя содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при удалении визуального элемента из держателя содержимого. <codeph>event.element</codeph> является удаляемым визуальным элементом.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  Отправляется при добавлении визуального элемента в держатель содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при добавлении визуального элемента в держатель содержимого. <codeph>event.element</codeph> является добавленным визуальным элементом.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Group:Group"><apiName>Group</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Group:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      Уведомляет компонент хоста о том, что элемент изменился и должен быть повторно отображен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Измененный элемент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомление компонента хоста о том, что элемент изменился и должен быть повторно отображен. Group вызывает метод <codeph>validateDisplayList()</codeph> на IGraphicElement для предоставления возможности выполнить повторное отображение.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      Уведомляет компонент хоста, что элемент был изменен и должен пройти проверку правильности свойств.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Измененный элемент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомляет компонент хоста, что элемент был изменен и должен пройти проверку правильности свойств. Group вызывает метод <codeph>validateProperties()</codeph> на IGraphicElement для предоставления ему возможности передать свои свойства.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      Уведомление хоста о изменении слоя элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Элемент, размер которого был изменен.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомление хоста о изменении слоя элементов. Group выполняет повторный анализ последовательностей элементов с общедоступными DisplayObjects, и может в результате повторно отобразить DisplayObjects и изменить последовательности. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      Уведомление компонента хоста о том, что был изменен размер элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Элемент, размер которого был изменен.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Уведомление компонента хоста о том, что был изменен размер элемента. Group вызывает метод <codeph>validateSize()</codeph> на IGraphicElement для предоставления возможности проверить правильность его размера.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:Group:baselinePositionElement:get"><apiName>baselinePositionElement</apiName><shortdesc>
      Элемент, используемый для вычисления baselinePosition GroupBase. 
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      Элемент, используемый для вычисления baselinePosition GroupBase. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:blendMode:get"><apiName>blendMode</apiName><shortdesc>
      Значение класса BlendMode, задающее режим наложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение класса BlendMode, задающее режим наложения. Растровое изображение может прорисовываться внутренними средствами двумя способами. Если включен режим наложения или внешняя маска обрезки, растровое изображение рисуется путем добавления квадрата, заполненного растровым изображением, к векторной визуализации. При попытке задать свойству недопустимое значение проигрыватель Flash Player или Adobe AIR использует значение <codeph>BlendMode.NORMAL</codeph>. 
     
      <p>Значение «auto» (по умолчанию) специфично для использования группой blendMode и означает, что основной blendMode должен быть <codeph>BlendMode.NORMAL</codeph>, кроме случаев, когда <codeph>alpha</codeph> не равно 0 или 1 - в этом случае будет применено значение <codeph>BlendMode.LAYER</codeph>. При таком варианте поведения группы, являющиеся прозрачными, будут иметь правильный состав своих графических элементов.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/blendMode"><linktext>flash.display.DisplayObject.blendMode</linktext></link><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Group:scaleGridBottom:get"><apiName>scaleGridBottom</apiName><shortdesc>
      Указывает нижнюю координату сетки масштабирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Указывает нижнюю координату сетки масштабирования.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridLeft:get"><apiName>scaleGridLeft</apiName><shortdesc>
     Указывает левую координату сетки масштабирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Указывает левую координату сетки масштабирования.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridRight:get"><apiName>scaleGridRight</apiName><shortdesc>
     Указывает правую координату сетки масштабирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Указывает правую координату сетки масштабирования.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridTop:get"><apiName>scaleGridTop</apiName><shortdesc>
     Указывает верхнюю координату сетки масштабирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Указывает верхнюю координату сетки масштабирования.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc>
      Визуальные нижестоящие элементы содержимого для этого Group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Визуальные нижестоящие элементы содержимого для этого Group. Этот метод используется в Flex внутренне, и не предназначен для прямого использования разработчиками.
     
      <p>Элементы содержимого должны быть только объектами IVisualElement. Массив <codeph>mxmlContent</codeph> не должен использоваться совместно несколькими контейнерами Group, т.к. визуальные элементы могут существовать одновременно только в одном контейнере.</p>
     
      <p>Если содержимое является массивом, то не следует изменять массив непосредственно. Вместо этого используйте методы, определенные классом Group.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconPlacement"><apiName>IconPlacement</apiName><shortdesc>
      Класс IconPlacement определяет константы допустимых значений стиля iconPlacement элементов Button, CheckBox, RadioButton или ToggleButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Класс IconPlacement определяет константы допустимых значений стиля <codeph>iconPlacement</codeph> элементов Button, CheckBox, RadioButton или ToggleButton.
      
      </apiDesc></apiClassifierDetail><apiValue id="spark.components:IconPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
          Задает отображение значка под меткой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Задает отображение значка под меткой.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
          Задает отображение значка слева от метки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Задает отображение значка слева от метки.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
          Задает отображение значка справа от метки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Задает отображение значка справа от метки.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:TOP"><apiName>TOP</apiName><shortdesc>
          Задает отображение значка над меткой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Задает отображение значка над меткой.
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextInput"><apiName>TextInput</apiName><shortdesc>
  TextInput является текстовым элементом управления, который позволяет пользователям вводить и редактировать отдельные строки единообразно отформатированного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="lineBreak"/><Exclude kind="style" name="verticalAlign"/><DefaultProperty name="text"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextInput&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextInput
    <strong>Properties</strong>
    widthInChars="<i>Calculated default</i>"  <b>[applies to Spark theme]</b>
  
    <strong>Events</strong>
    enter="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextInput является текстовым элементом управления, который позволяет пользователям вводить и редактировать отдельные строки единообразно отформатированного текста.
   <p><b>Тема оформления TextInput для темы Spark использует класс RichEditableText. Это значит, что элемент управления Spark TextInput поддерживает библиотеку Text Layout Framework (TLF), созданную на основе Flash Text Engine (FTE).</b> Сочетание этих слоев обеспечивает высококачественную международную типографику и макет редактируемого текста.</p>
 
  <p><b>Тема оформления TextInput для мобильной темы использует класс StyleableStageText вместо RichEditableText.</b> Так как в StyleableStageText используются собственные текстовые поля, это позволяет более эффективно управлять вводом и обработкой текста на мобильных устройствах, однако следует учесть существующие <xref href="supportClasses/StyleableStageText.html">ограничения и различия</xref>. Собственные элементы управления текста, используемые StageText, применяют различные виды заполнения вокруг текста. Чтобы избежать вертикальной прокрутки, в теме оформления TextInput на основе StageText вычисляется заполнение и требуемая компенсация. Ввиду этого и других отличий в способах обработки текста собственными текстовыми элементами управления, стандартная высота элемента управления TextInput при использовании темы оформления на основе StageText будет отличаться от стандартной высоты при использовании темы оформления TextInput на основе TextField.
 </p>
   <p>Установить текст для отображения или получить текст, введенный пользователем, можно посредством свойства <codeph>text</codeph>. Это свойство является строковым, поэтому при вводе пользователем числового значения оно будет получено, например, как 123.45, а не как 123.45.</p>
   <p>Текст отформатирован с использованием стилей CSS, например <codeph>fontFamily</codeph> и <codeph>fontSize</codeph>.</p>
   <p>В теме Spark можно указать ширину элемента управления с помощью свойства <codeph>widthInChars</codeph>, которое предоставляет удобный способ определения ширины в соответствии с изменением размера шрифта, или использовать свойство <codeph>typicalText</codeph>. Учтите, что если используется <codeph>typicalText</codeph>, то свойство <codeph>widthInChars</codeph> игнорируется. Для всех тем явную ширину можно определить в пикселах, процентах или с помощью ограничений, например <codeph>left</codeph> и <codeph>right</codeph>. Подобные манипуляции обычно не выполняются для определения высоты; значение высоты по умолчанию для элемента управления позволяет отобразить одну строку текста.
  </p>
   <p>Для ограничения числа вводимых пользователем символов можно использовать свойство <codeph>maxChars</codeph>, а для указания допустимых для ввода символов – свойство <codeph>restrict</codeph>. Для использования данного элемента управления для ввода пароля установите свойство <codeph>displayAsPassword</codeph> на значение <codeph>true</codeph>.</p>
   <p>В мобильной теме свойства экранной клавиатуры, такие как <codeph>autoCapitalize</codeph>, <codeph>autoCorrect</codeph>, <codeph>returnKeyLabel</codeph> и <codeph>softKeyboardType</codeph>, определяют подсказки клавиатуры. Если имеющаяся экранная клавиатура не поддерживает любую из функций подсказки, то подсказка игнорируется. Мобильные среды, в которых используются только аппаратные клавиатуры, игнорируют эти подсказки. 
  </p>
  
  <p>Этот элемент управления при нажатии пользователем клавиши ENTER, вместо вставки конца строки, отправляет сообщение <codeph>FlexEvent.ENTER</codeph>, т.к. данный элемент управления не поддерживает ввод нескольких строк. По умолчанию этот элемент управления имеет явные разрывы строк.</p>
   <p>Это элемент управления с изменяемым оформлением, стандартная тема оформления которого содержит экземпляр RichEditableText для темы Spark или экземпляр StyleableStageText для мобильной темы. Этот элемент используется для обработки и редактирования текста. (Тема оформления также обрабатывает рисование границ и фон.) Экземпляр RichEditableText или StyleableStageText доступен в качестве объекта <codeph>textDisplay</codeph>. Если в мобильной теме необходимо использовать тему оформления на основе TextField вместо темы оформления на основе StageText, установите для свойства <codeph>skinClass</codeph> значение <codeph>spark.skins.mobile.TextInputSkin</codeph>.</p>
   <p>Поскольку в теме Spark RichEditableText использует TLF, то элемент управления Spark TextInput поддерживает текст для чтения слева направо (LTR) (например, на французском языке), справа налево (RTL) (например, на арабском языке), а также в двух направлениях одновременно (например, предложения на французском языке в арабском тексте). Если основным является направление текста справа налево, установите для стиля <codeph>direction</codeph> значение <codeph>rtl</codeph>. По умолчанию стиль <codeph>textAlign</codeph> имеет значение <codeph>start</codeph>, благодаря чему текст выравнивается по левому краю, если значение <codeph>direction</codeph> равно <codeph>ltr</codeph>, и по правому краю, если <codeph>direction</codeph> равно <codeph>rtl</codeph>. Чтобы выровнять текст по противоположному краю, установите для <codeph>textAlign</codeph> значение <codeph>end</codeph>.</p>
   <p>Как результат использования TLF Spark TextInput поддерживает неограниченное число операций отмены/повтора в рамках одного сеанса. Началом сеанса редактирования считается получение элементом управления фокуса клавиатуры, а окончанием – его потеря.</p>
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
   <p>В теме Spark элемент управления TextInput имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>128 пикселей в ширину на 22 пикселя в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.TextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>В мобильной теме элемент управления TextInput имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.mobile.StageTextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextInputSkin.xml"><linktext>spark.skins.mobile.StageTextInputSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextInputSkin.xml"><linktext>spark.skins.mobile.TextInputSkin</linktext></link><link href="spark.skins.spark.xml#TextInputSkin"><linktext>spark.skins.spark.TextInputSkin</linktext></link><link href="spark.components.xml#TextArea"><linktext>TextArea</linktext></link></related-links><adobeApiEvent id="spark.components:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  Передается при нажатии пользователем клавиши Enter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при нажатии пользователем клавиши Enter.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TextInput:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      Ширина по умолчанию для элемента управления, измеренная в единицах em.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
           </apiDefaultValue></apiValueDef><apiDesc>
      Ширина по умолчанию для элемента управления, измеренная в единицах em.
           <p>em – это типографская единица измерения, равная размеру одного пункта. Она не обязательно равна ширине символа M, однако во многих шрифтах символ M равен ширине одного em. Стиль элемента управления <codeph>fontSize</codeph> используется для вычисления единицы em в пикселях.</p>
           <p>Например, если вы хотите изменить ширину TextInput таким образом, чтобы ввести 20 текстовых символов, установите это свойство на значение 20.</p>
           <p>Это свойство игнорируется, если устанавливаются явные значения ширины, процентные значения ширины или ограничения <codeph>left</codeph> и <codeph>right</codeph>.</p>
           <p>Это свойство также будет проигнорировано, если указано свойство <codeph>typicalText</codeph>.</p>
     
      <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
          
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Form"><apiName>Form</apiName><shortdesc>
  Контейнер Spark Form позволяет управлять макетом формы, отмечать поля формы как обязательные или дополнительные, обрабатывать сообщения об ошибках и связывать данные формы с моделью данных Flex для проверки данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Form">
<description>
  Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Form&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:Form&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/s:Form&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер Spark Form позволяет управлять макетом формы, отмечать поля формы как обязательные или дополнительные, обрабатывать сообщения об ошибках и связывать данные формы с моделью данных Flex для проверки данных. Кроме того, для конфигурирования внешнего вида форм можно использовать таблицы стилей.
 
  <p>В таблице представлены компоненты, используемые для создания форм в Flex:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="3"><thead><row><entry>Компонент</entry><entry>Тег</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Форма</entry>
           <entry><codeph>&lt;s:Form></codeph></entry>
           <entry>Определяет контейнер для всей формы, включая общий макет формы. Элементы управления FormHeading и FormItem используются для определения содержимого. В контейнер Form можно также вставить другие типы компонентов.</entry>
        </row><row>
           <entry>FormHeading</entry>
           <entry><codeph>&lt;s:FormHeading></codeph></entry>
           <entry>Определяет заголовок в форме.  </entry>
        </row><row>
           <entry>FormItem</entry>
           <entry><codeph>&lt;s:FormItem></codeph></entry>
           <entry>Содержит один или несколько нижестоящих элементов формы, расположенных по горизонтали или вертикали. Нижестоящие элементы могут являться элементами управления или другими контейнерами. Один контейнер Form может включать несколько контейнеров FormItem.</entry>
        </row><row>
           <entry>FormLayout</entry>
           <entry><codeph>&lt;s:FormLayout></codeph></entry>
           <entry>Определяет макет по умолчанию для тем оформления Spark Form.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example><example conref="StackedFormSkinExample.mxml"><swfblock conref="examples/StackedFormSkinExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormSkin"><linktext>spark.skins.spark.FormSkin</linktext></link></related-links><apiConstructor id="spark.components:Form:Form"><apiName>Form</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Form:invalidElements:get"><apiName>invalidElements</apiName><shortdesc>
      Сортированный массив нижестоящих элементов в недействительном состоянии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Сортированный массив нижестоящих элементов в недействительном состоянии. Элементами массива являются объекты со следующими свойствами:
     
      <ul>
        <li>element:UIComponent - недействительный нижестоящий элемент</li>
     
        <li>position:Vector.&lt;int> - вектор целых чисел, представляющих позицию элемента в дереве списка отображения. Это свойство используется для сортировки массива.</li>  
      </ul>
     
      <p>При удалении нижестоящего элемента из формы обновление словаря не выполняется.</p> 
         
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  Элемент управления NumericStepper позволяет выбирать число из упорядоченного набора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:NumericStepper">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента.
   </description>
<default>1
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Управляет видимостью границы для этого компонента.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет границы для данного компонента.
   </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал границы для данного компонента.
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Цвет текста активированного компонента, когда фокус на него не наведен.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Цвет текста при выключенном компоненте.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Цвет текста, когда компонент включен и получает фокус.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.5" type="Object">
<description>
  Указывает межсловные интервалы для использования при выравнивании. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Указывает число градусов для поворота данного текста.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера.
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textIndent; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Указывает позиции табуляции, связанные с абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для левого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен перед абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен после абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для правого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Управляет внешним видом элементов списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Управляет размещением маркера элемента списка относительно элемента списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Определяет автоотступ начального края списков, если значением заполнения этой стороны списка является <codeph>auto</codeph>.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Указывает позицию базовой линии первой строки в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Определяет тип обтекания текста вокруг плавающего объекта.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Управляет местом разрыва строк при форматировании текста по размеру окна. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Определяет вертикальное или горизонтальное размещение строки.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#NumericStepper/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#NumericStepper/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components:NumericStepper" playerVersion="Flash10" required="true" var_type="spark.components:TextInput">
<description>
      Элемент темы оформления, определяющий элемент управления TextInput, который позволяет пользователю редактировать значение компонента NumericStepper. Значение округляется и подтверждается при нажатии пользователем клавиши Enter, установке фокуса за пределами NumericStepper или при переходе к NumericStepper.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a TextInput control 
      which allows a user to edit the value of
      the NumericStepper component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:NumericStepper&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:NumericStepper
     <strong>Properties</strong>
    imeMode="null"
    maxChars="0"
    maximum="10"
    valueFormatFunction=""
    valueParseFunction=""
     <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
   baselineShift="0.0"
   blockProgression="TB"
   borderAlpha="0.5"
   borderColor="0x000000"
   borderVisible="true"
   breakOpportunity="AUTO"
   cffHinting="HORIZONTAL_STEM"
   color="0"
   contentBackgroundAlpha="1.0"
   contentBackgroundColor="0xFFFFFF"
   clearFloats="none"
   digitCase="DEFAULT"
   digitWidth="DEFAULT"
   direction="LTR"
   dominantBaseline="AUTO"
   firstBaselineOffset="AUTO"
   focusedTextSelectionColor=""
   fontFamily="Arial"
   fontLookup="DEVICE"
   fontSize="12"
   fontStyle="NORMAL"
   fontWeight="NORMAL"
   inactiveTextSelection=""
   justificationRule="AUTO"
   justificationStyle="AUTO"
   kerning="AUTO"
   leadingModel="AUTO"
   ligatureLevel="COMMON"
   lineHeight="120%"
   lineThrough="false"
   listAutoPadding="40"
   listStylePosition="outside"
   listStyleType="disc"
   locale="en"
   paragraphEndIndent="0"
   paragraphSpaceAfter="0"
   paragraphSpaceBefore="0"
   paragraphStartIndent="0"
   renderingMode="CFF"
   tabStops="null"
   textAlign="START"
   textAlignLast="START"
   textAlpha="1"
   textDecoration="NONE"
   textIndent="0"
   textJustify="INTER_WORD"
   textRotation="AUTO"
   trackingLeft="0"
   trackingRight="0"
   typographicCase="DEFAULT"
   unfocusedTextSelectionColor=""
   whiteSpaceCollapse="COLLAPSE"
   wordSpacing="100%,50%,150%"
 /&gt;
 </pre>
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components:Spinner</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления NumericStepper позволяет выбирать число из упорядоченного набора. NumericStepper имеет те же функциональные возможности, что и компонент Spinner, но дополнительно содержит элемент управления TextInput для редактирования значения компонента напрямую, вместо его изменения с помощью кнопок управления со стрелками.
   <p>Элемент управления NumericStepper состоит из однострочного текстового поля ввода и пары кнопок со стрелками для последовательного перехода между возможными значениями. Для циклического перехода между значениями также используются клавиши со стрелками вверх и вниз, и колесико мыши. Вводимое значение подтверждается при нажатии пользователем клавиши Enter, снятии фокуса с компонента или при переходе к NumericStepper с помощью кнопки со стрелкой или вызова метода <codeph>changeValueByStep()</codeph>.</p>
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
   <p>Для элемента управления NumericStepper по умолчанию установлены следующие характеристики:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>53 пикселя в ширину на 23 пикселя в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>40 пикселей в ширину и 40 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Заданные по умолчанию классы темы оформления</entry>
           <entry>spark.skins.spark.NumericStepperSkin
              <p>spark.skins.spark.NumericStepperTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#NumericStepperSkin"><linktext>spark.skins.spark.NumericStepperSkin</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      Конструктор
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Указывает режим редактора методов ввода (IME).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает режим редактора методов ввода (IME). IME позволяет пользователям вводить текст на китайском, японском и корейском языках. Режим IME устанавливается при перемещении фокуса на элемент управления и возвращается к предыдущему значению при потере фокуса этим элементом управления.
          <p>Класс flash.system.IMEConversionMode определяет константы для допустимых значений этого свойства. Можно также указать значение <codeph>null</codeph> и не указывать IME.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      Максимальное количество символов, которые могут быть введены в поле.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Максимальное количество символов, которые могут быть введены в поле. Если задано значение 0, то можно ввести любое число символов.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueFormatFunction:get"><apiName>valueFormatFunction</apiName><shortdesc>
      Функция обратного вызова, форматирующая значение, отображаемое в свойстве textDisplay темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Функция обратного вызова, форматирующая значение, отображаемое в свойстве <codeph>textDisplay</codeph> темы оформления. Функция принимает одно число в качестве аргумента и возвращает отформатированную строку.
           <p>Функция имеет следующую подпись:</p>
      <pre>
      funcName(value:Number):String
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueParseFunction:get"><apiName>valueParseFunction</apiName><shortdesc>
      Функция обратного вызова, которая извлекает числовое значение из значения, отображаемого в поле textDisplay темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Функция обратного вызова, которая извлекает числовое значение из значения, отображаемого в поле <codeph>textDisplay</codeph> темы оформления. Функция принимает одну строку в качестве аргумента и возвращает число.
           <p>Функция имеет следующую подпись:</p>
      <pre>
      funcName(value:String):Number
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:maximum:set"><apiName>maximum</apiName><shortdesc>
      Число, представляющее максимальное значение для value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, представляющее максимальное значение для <codeph>value</codeph>. Если значения <codeph>minimum</codeph> или <codeph>value</codeph> будут больше, чем <codeph>maximum</codeph>, то они будут изменены для отображения нового <codeph>maximum</codeph>.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Spinner"><apiName>Spinner</apiName><shortdesc>
  Компонент Spinner выбирает значение из упорядоченного набора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Spinner">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabled" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  Отключенное состояние
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  Обычное состояние
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал кольца фокуса для данного компонента.
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Радиус углов данного компонента.
   </description>
<default>2
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="decrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Элемент темы оформления, определяющий кнопку, которая при нажатии уменьшает свойство <codeph>value</codeph> на <codeph>stepSize</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, decrements the value property
      by stepSize.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Элемент темы оформления, определяющий кнопку, которая при нажатии увеличивает свойство <codeph>value</codeph> на <codeph>stepSize</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, increments the value property
      by stepSize.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Spinner&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Spinner
    <strong>Properties</strong>
    allowValueWrap="false"
  
    <strong>Events</strong>
    change="<i>No default</i>"
     <strong>Styles</strong>
    cornerRadius="2"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
      
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент Spinner выбирает значение из упорядоченного набора. Он использует две кнопки, увеличивающие или уменьшающие текущее значение, основанное на текущем значении свойства <codeph>stepSize</codeph>.
  
  <p>Spinner состоит из двух требуемых кнопок, одна для увеличения текущего значения, а другая для уменьшения текущего значения. Пользователи могут также использовать клавиши со стрелкой вверх или вниз или колесико мыши для циклического перемещения по значениям. Вводимое значение подтверждается при нажатии пользователем клавиши Enter, снятии фокуса с компонента или при переходе к Spinner с помощью клавиши со стрелкой или вызова метода <codeph>changeValueByStep()</codeph>.</p>
   <p>Масштаб компонента Spinner является набором допустимых значений для свойства <codeph>value</codeph>. Допустимые значения являются суммой минимума с целочисленными множителями свойства <codeph>snapInterval</codeph>, которые меньше или равны значению <codeph>maximum</codeph>. Например:</p>
  
  <ul>
    <li><codeph>minimum</codeph> = -1</li>
    <li><codeph>maximum</codeph> = 10</li>
    <li><codeph>snapInterval</codeph> = 3</li>
  </ul>
  
  Тогда масштаб будет {-1,2,5,8,10}.
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
   <p>Элемент управления Spinner по умолчанию имеет характеристики, перечисленные ниже.</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>19 пикселей в ширину на 23 пикселей в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>12 пикселей в ширину и 12 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.SpinnerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="SpinnerExample.mxml"><swfblock conref="examples/SpinnerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#SpinnerSkin"><linktext>spark.skins.spark.SpinnerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Spinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Отправляется при изменении значения элемента управления Spinner в результате действия пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при изменении значения элемента управления Spinner в результате действия пользователя.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Spinner:Spinner"><apiName>Spinner</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Spinner:allowValueWrap:get"><apiName>allowValueWrap</apiName><shortdesc>
      Определяет поведение элемента управления для шага, когда текущее value является значением maximum или minimum.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет поведение элемента управления для шага, когда текущее <codeph>value</codeph> является значением <codeph>maximum</codeph> или <codeph>minimum</codeph>. Если <codeph>allowValueWrap</codeph> является <codeph>true</codeph>, то свойство <codeph>value</codeph> переносится от значения <codeph>maximum</codeph> к значению <codeph>minimum</codeph> либо от значения <codeph>minimum</codeph> к значению <codeph>maximum</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ResizeMode"><apiName>ResizeMode</apiName><shortdesc>
  Класс ResizeMode определяет перечисление режимов, используемых компонентом для изменения размеров своих нижестоящих элементов до размеров, указанных системой формата.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ResizeMode определяет перечисление режимов, используемых компонентом для изменения размеров своих нижестоящих элементов до размеров, указанных системой формата.
 
  <p>Компонент может изменять свои размеры (<codeph>width</codeph> и <codeph>height</codeph>) и соответствующим образом переформатировать свои нижестоящие элементы (это режим изменения размеров по умолчанию).</p>
 
  <p>Альтернативой использованию этого компонента является изменение масштаба, не требующее изменения нижестоящих элементов. Эта опция поддерживается <codeph>Group</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ResizeMode:NO_SCALE"><apiName>NO_SCALE</apiName><shortdesc>
      Изменяет размеры через переопределение свойств width и height.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Изменяет размеры через переопределение свойств <codeph>width</codeph> и <codeph>height</codeph>.
     
      <p>Компонент всегда самостоятельно изменяет размеры и после этого размещает свои нижестоящие элементы в натуральной величине, заданной схемой или пользователем.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ResizeMode:SCALE"><apiName>SCALE</apiName><shortdesc>
      Изменяет размеры определением свойств scaleX и scaleY.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Изменяет размеры определением свойств <codeph>scaleX</codeph> и <codeph>scaleY</codeph>.
     
      <p>Компонент всегда самостоятельно определяет размеры и после этого размещает свои нижестоящие элементы в рассчитанном размере. Масштаб регулируется и может принимать определяемый форматом или пользователем размер.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
  Класс NavigatorContent определяет контейнер Spark, который может быть использован в контейнере навигатора MX, например в контейнерах ViewStack, TabNavigator и Accordion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NavigatorContent&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NavigatorContent
    <strong>Properties</strong>
    icon="null"
    label=""
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс NavigatorContent определяет контейнер Spark, который может быть использован в контейнере навигатора MX, например в контейнерах ViewStack, TabNavigator и Accordion.
 
  <p>Не используйте контейнер NavigatorContent за пределами контейнера навигатора MX.</p>
 
  <p>Стратегия создания контейнера NavigatorContent основана на стратегии создания вышестоящего контейнера навигатора: </p>
 
  <ul>
    <li>Если стратегия создания вышестоящего узла – none, то стратегия создания NavigatorContent – none.</li>
    <li>Если стратегия создания вышестоящего узла – all, то стратегия создания NavigatorContent – all.</li>
    <li>Если стратегия создания вышестоящего узла – auto, то стратегия создания NavigatorContent – none.</li>
  </ul>
 
  <p>Контейнер NavigatorContent не поддерживает поставленную в очередь стратегию создания.</p>
 
  <p>Контейнер NavigatorContent имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NavigatorContentExample.mxml"><swfblock conref="examples/NavigatorContentExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiConstructor id="spark.components:NavigatorContent:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      Class значка, отображаемого некоторыми контейнерами навигатора для представления этого Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Class значка, отображаемого некоторыми контейнерами навигатора для представления этого Container.
     
      <p>Например, если этот Container является нижестоящим элементом TabNavigator, этот значок отобразится на соответствующей вкладке. Если этот Container является нижестоящим элементом Accordion, этот значок отобразится в соответствующей области заголовка.</p>
     
      <p>Для встраивания значка в SWF-файл используйте директиву компилятора MXML @Embed():</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>Изображение может быть файлом JPEG, GIF, PNG, SVG или SWF.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      Текст, отображаемый некоторыми контейнерами навигатора для представления этого Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текст, отображаемый некоторыми контейнерами навигатора для представления этого Container.
     
      <p>Например, если этот Container является нижестоящим элементом TabNavigator, строка отображается на соответствующей вкладке. Если этот контейнер является нижестоящим элементом Accordion, эта строка появляется в соответствующей области заголовка.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VSlider"><apiName>VSlider</apiName><shortdesc>
  Элемент управления Vslider (вертикальный ползунок) позволяет пользователям выбирать значение путем перемещения ползунка между конечными точками полосы прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VSlider">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:VSlider/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления Vslider (вертикальный ползунок) позволяет пользователям выбирать значение путем перемещения ползунка между конечными точками полосы прокрутки. Полоса прокрутки растягивается от нижнего края до верхнего. Текущее значение ползунка определяется относительным местоположением ползунка между конечными точками, соответствующими минимальному и максимальному значениям ползунка.
 
  <p>Ползунок может включать непрерывный диапазон значений перемещения между его минимальным и максимальным значениями, или же его перемещение может быть ограничено определенными интервалами между минимальным и максимальным значениями. Для отображения текущего значения ползунка можно также использовать всплывающую подсказку.</p>
   <p>Элемент управления VSlider по умолчанию имеет следующие характеристики:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>11 пикселей в ширину на 100 пикселей в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>11 пикселей в ширину и 11 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Заданные по умолчанию классы темы оформления</entry>
           <entry>spark.skins.spark.VSliderSkin
              <p>spark.skins.spark.VSliderThumbSkin</p>
              <p>spark.skins.spark.VSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VSliderExample.mxml"><swfblock conref="examples/VSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VSliderSkin"><linktext>spark.skins.spark.VSliderSkin</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
  Компонент ToggleButton определяет переключатель.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ToggleButton">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ToggleButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButton/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент ToggleButton определяет переключатель. Нажатие кнопки переключает ее между отпущенным и нажатым состоянием. При нажатии кнопки, когда она находится в отпущенном состоянии, она переключается в нажатое состояние. Следует нажать кнопку еще раз для переключения ее обратно в отпущенное состояние.
 
  <p>Это состояние можно получить или установить программным способом с помощью свойства <codeph>selected</codeph>.</p>
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
   <p>Элемент управления ToggleButton имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>Имеет достаточную ширину для отображения текстовой метки элемента управления</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>21 пиксель в ширину и 21 пиксель в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.ToggleButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ToggleButtonExample.mxml"><swfblock conref="examples/ToggleButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ToggleButtonSkin"><linktext>spark.skins.spark.ToggleButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleButton:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:FormHeading"><apiName>FormHeading</apiName><shortdesc>
  Контейнер Spark FormHeading отображает заголовок группы элементов управления, содержащихся в контейнере Spark Form.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:FormHeading">
<description>
  Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет фона для компонента.
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Уровень альфа-канала фона данного компонента. Допустимыми являются значения от 0,0 до 1,0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.5" type="Object">
<description>
  Указывает межсловные интервалы для использования при выравнивании. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Указывает число градусов для поворота данного текста.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера.
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textIndent; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Указывает позиции табуляции, связанные с абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для левого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен перед абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен после абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для правого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Управляет внешним видом элементов списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Управляет размещением маркера элемента списка относительно элемента списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Определяет автоотступ начального края списков, если значением заполнения этой стороны списка является <codeph>auto</codeph>.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Указывает позицию базовой линии первой строки в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Определяет тип обтекания текста вокруг плавающего объекта.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Управляет местом разрыва строк при форматировании текста по размеру окна. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Определяет вертикальное или горизонтальное размещение строки.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:FormHeading" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#FormHeading/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#FormHeading/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#FormHeading/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#FormHeading/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:FormHeading" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormHeading" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Ссылка на визуальный элемент, который отображает метку этого объекта FormItem.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormHeading&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormHeading
    <strong>Properties</strong>
    label=""
  
    <strong>Common Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер Spark FormHeading отображает заголовок группы элементов управления, содержащихся в контейнере Spark Form. В один контейнер Form можно включить несколько контейнеров FormHeading.
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormHeadingSkin"><linktext>spark.skins.spark.FormHeadingSkin</linktext></link></related-links><apiConstructor id="spark.components:FormHeading:FormHeading"><apiName>FormHeading</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:FormHeading:label:get"><apiName>label</apiName><shortdesc>
      Текст, отображаемый в компоненте FormHeading.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текст, отображаемый в компоненте FormHeading.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  Элемент управления HScrollBar (горизонтальная полоса прокрутки) позволяет управлять частью данных, отображаемых при наличии слишком большого объема данных, которые не помещаются по горизонтали в области отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:HScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:HScrollBar
     <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления HScrollBar (горизонтальная полоса прокрутки) позволяет управлять частью данных, отображаемых при наличии слишком большого объема данных, которые не помещаются по горизонтали в области отображения.
 
  <p>Несмотря на то что можно использовать элемент управления HScrollBar в качестве автономного элемента управления, обычно он присоединяется как часть другой группы компонентов для предоставления функциональных возможностей прокрутки.</p>
   <p>Элемент управления HScrollBar имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>85 пикселей в ширину на 15 пикселей в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>35 пикселей в ширину и 35 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Заданные по умолчанию классы темы оформления</entry>
           <entry>spark.skins.spark.HScrollBarSkin
              <p>spark.skins.spark.HScrollBarThumbSkin</p>
              <p>spark.skins.spark.HScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="HScrollBarExample.mxml"><swfblock conref="examples/HScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HScrollBarSkin"><linktext>spark.skins.spark.HScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:HScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Передается перед изменением horizontalScrollPosition вследствие события mouseWheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается перед изменением <codeph>horizontalScrollPosition</codeph> вследствие события <codeph>mouseWheel</codeph>.
 
  <p>Поведением по умолчанию является горизонтальная прокрутка в соответствии с количеством "шагов" в событии <codeph>delta</codeph>. Ширина шага определяется методом <codeph>getHorizontalScrollPositionDelta</codeph> области просмотра с использованием <codeph>LEFT</codeph> или <codeph>RIGHT</codeph> в зависимости от направления прокрутки.</p>
 
  <p>Вызов метода <codeph>preventDefault()</codeph> для события предотвращает изменение положения горизонтальной прокрутки. В противном случае при изменении свойства <codeph>delta</codeph> события это значение будет использоваться для определения количества шагов в горизонтальном направлении.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:HScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Увеличивает value постранично, если increase равно true, или уменьшает value постранично, если increase равно false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Следует ли увеличить (<codeph>true</codeph>) или уменьшить (<codeph>false</codeph>) <codeph>value</codeph>. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Увеличивает <codeph>value</codeph> постранично, если <codeph>increase</codeph> равно <codeph>true</codeph>, или уменьшает <codeph>value</codeph> постранично, если <codeph>increase</codeph> равно <codeph>false</codeph>. Увеличение значения <codeph>value</codeph> полосы прокрутки прокручивает область просмотра вправо. Уменьшение значения <codeph>value</codeph> прокручивает область просмотра влево.
      
      <p>Если установлено свойство <codeph>viewport</codeph>, то его метод <codeph>getHorizontalScrollPositionDelta()</codeph> используется для вычисления размера приращения страницы. Если <codeph>viewport</codeph> равно null, то используется свойство <codeph>pageSize</codeph> полосы прокрутки.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Если область просмотра имеет значение не равное null, измените положение горизонтальной прокрутки для перехода на строку вверх или вниз с помощью прокрутки области просмотра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Является ли прокрутка строк вверх (<codeph>true</codeph>) или вниз (<codeph>false</codeph>). 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если свойство <codeph>viewport</codeph> имеет значение не равное null, измените положение прокрутки по горизонтали на строку вверх или вниз с помощью прокрутки области просмотра. Этот метод вычисляет количество прокручиваемых строк вызовом метода <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph> со свойством <codeph>flash.ui.Keyboard.RIGHT</codeph> или <codeph>flash.ui.Keyboard.LEFT</codeph>. Затем вызывается метод <codeph>setValue()</codeph> для определения соответствующего значения свойства <codeph>IViewport.horizontalScrollPosition</codeph>.
           <p>Если <codeph>viewport</codeph> имеет значение не равное null, измените положение прокрутки для перехода на строку вверх или вниз путем вызова метода <codeph>changeValueByStep()</codeph>.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Обновите свойство value и, если область просмотра имеет значение не равное null, установите его horizontalScrollPosition как value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Новое значение свойства <codeph>value</codeph>. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обновите свойство <codeph>value</codeph> и, если область просмотра имеет значение не равное null, установите его <codeph>horizontalScrollPosition</codeph> к <codeph>value</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#HScrollBar/viewport"><linktext>область просмотра</linktext></link></related-links></apiOperation><apiValue id="spark.components:HScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      Область просмотра, управляемая этой полосой прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Область просмотра, управляемая этой полосой прокрутки.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ScrollSnappingMode"><apiName>ScrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List/scrollSnappingMode"><linktext/></link><link href="spark.components.xml#Scroller/scrollSnappingMode"><linktext/></link></related-links><apiValue id="spark.components:ScrollSnappingMode:CENTER"><apiName>CENTER</apiName><shortdesc>
          Элементы привязаны к центру области просмотра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Элементы привязаны к центру области просмотра.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:LEADING_EDGE"><apiName>LEADING_EDGE</apiName><shortdesc>
          Элементы привязаны к левому (по горизонтали) или верхнему (по вертикали) краю области просмотра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>leadingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Элементы привязаны к левому (по горизонтали) или верхнему (по вертикали) краю области просмотра.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:NONE"><apiName>NONE</apiName><shortdesc>
          Привязывание прокрутки выключено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Привязывание прокрутки выключено.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:TRAILING_EDGE"><apiName>TRAILING_EDGE</apiName><shortdesc>
          Элементы привязаны к правому (по горизонтали) или нижнему (по вертикали) краю области просмотра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>trailingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Элементы привязаны к правому (по горизонтали) или нижнему (по вертикали) краю области просмотра.
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
  Класс SkinnablePopUpContainer - это SkinnableContainer, который представляет собой всплывающий элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="closed" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash10">
<description>
  Закрытое состояние.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="no" name="softKeyboardEffectDuration" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash11" type="Number">
<description>
  
 
  </description>
<default>150
  
  </default>

<playerversion>AIR 3.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SkinnablePopUpContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnablePopUpContainer 
    <strong>Events</strong>
    close="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SkinnablePopUpContainer - это SkinnableContainer, который представляет собой всплывающий элемент. Обычно контейнер SkinnablePopUpContainer используется для открытия простого окна в приложении, например окна предупреждения, которое уведомляет пользователя о необходимости принятия соответствующих действий.
   <p>Контейнер SkinnablePopUpContainer не создается как компонент обычного макета своего вышестоящего контейнера. Вместо этого он отображается как всплывающее окно поверх своего вышестоящего узла. Поэтому этот контейнер не создается непосредственно в коде MXML приложения,</p>
   <p>а создается как MXML-компонент, часто в отдельном файле MXML. Чтобы отобразить компонент, создайте экземпляр MXML-компонента и вызовите метод <codeph>open()</codeph>. При открытии компонента можно также установить его размер и положение.</p>  
   <p>Чтобы закрыть компонент, вызовите метод <codeph>close()</codeph>. Если необходимо, чтобы данные передавались в обработчик из всплывающего окна, добавьте прослушиватель события <codeph>PopUp.CLOSE</codeph> и укажите возвращаемые данные в методе <codeph>close()</codeph>.</p>
   <p>Исходным состоянием темы оформления SkinnablePopUpContainer является <codeph>closed</codeph>. При открытии компонент добавляется в PopUpManager как всплывающее окно и переходит в состояние темы оформления <codeph>normal</codeph>. Для определения анимации при открытии и закрытии используется пользовательская тема оформления с переходами между состояниями <codeph>closed</codeph> и <codeph>normal</codeph>.</p>
 
  <p>Контейнер SkinnablePopUpContainer имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row><row><entry>Класс темы оформления по умолчанию</entry><entry>spark.skins.spark.SkinnablePopUpContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#SkinnablePopUpContainerSkin"><linktext>spark.skins.spark.SkinnablePopUpContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Отправляется контейнером при его закрытии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется контейнером при его закрытии.
 
  <p>Это событие отправляется при переключении контейнера из состояния <codeph>normal</codeph> в состояние <codeph>closed</codeph> и завершении перехода в это состояние.</p>
 
  <p>Это событие обеспечивает механизм передачи сохраняемой информации из контейнера в прослушиватель событий. Типичным использованием является создание диалогового окна с множественным выбором и кнопкой отмены. После выбора действительной функции всплывающее окно следует закрыть с помощью метода <codeph>close()</codeph>, передавая значение <codeph>true</codeph> в параметр <codeph>commit</codeph>. Также можно передать любые другие связанные данные. SkinnablePopUpContainer отправит это событие после завершения закрытия. Затем в прослушивателе событий можно проверить свойство <codeph>commit</codeph> и выполнить необходимые действия.  </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Отправляется контейнером, когда он открыт и готов к взаимодействию с пользователем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется контейнером, когда он открыт и готов к взаимодействию с пользователем.
 
  <p>Это событие отправляется при переключении контейнера из состояния <codeph>closed</codeph> в состояние <codeph>normal</codeph> и завершении перехода в это состояние.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnablePopUpContainer:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnablePopUpContainer:close"><apiName>close</apiName><shortdesc>
      Изменяет текущее состояние темы оформления на closed, ожидает завершения воспроизведения любых переходов состояний, отправляет событие PopUpEvent.CLOSE и удаляет контейнер из PopUpManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, должно ли приложение передавать возвращаемые данные. Значение этого аргумента записано в свойстве <codeph>commit</codeph> объекта события <codeph>PopUpEvent</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>Указывает любые данные, возвращенные приложением. Значение этого аргумента записано в свойстве <codeph>data</codeph> объекта события <codeph>PopUpEvent</codeph>.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Изменяет текущее состояние темы оформления на <codeph>closed</codeph>, ожидает завершения воспроизведения любых переходов состояний, отправляет событие <codeph>PopUpEvent.CLOSE</codeph> и удаляет контейнер из PopUpManager.
           <p>Метод <codeph>close()</codeph> контейнера SkinnablePopUpContainer возвращает данные из всплывающего окна в главное приложение. Типичным использованием является создание диалогового окна с кнопкой отмены. После выбора действительной функции в диалоговом окне это окно следует закрыть с помощью метода <codeph>close()</codeph>, передавая значение <codeph>true</codeph> в параметр <codeph>commit</codeph>. Также можно передать любые другие связанные данные. После закрытия SkinnablePopUpContainer оправляется событие <codeph>close</codeph>. В прослушивателе события <codeph>close</codeph> можно проверить параметр <codeph>commit</codeph> и выполнить соответствующие действия.  </p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>open</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:protected:createSoftKeyboardEffect"><apiName>createSoftKeyboardEffect</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc> 
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn><apiParam><apiItemName>yTo</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>heightTo</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
        
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:open"><apiName>open</apiName><shortdesc>
      Открывает контейнер как всплывающее окно и переключается из состояния темы оформления closed в состояние normal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Владелец контейнера. Всплывающее окно отображается поверх этого контейнера.
           </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, должен ли контейнер быть модальным. Модальный контейнер принимает все входные данные клавиатуры и мыши до своего закрытия. Немодальный контейнер разрешает другим компонентам принимать входные данные при открытом всплывающем окне.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Открывает контейнер как всплывающее окно и переключается из состояния темы оформления <codeph>closed</codeph> в состояние <codeph>normal</codeph>. По завершении воспроизведения переходов отправляет событие <codeph>FlexEvent.OPEN</codeph>.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>close</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:updatePopUpPosition"><apiName>updatePopUpPosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnablePopUpContainer:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      Содержит значение true, когда контейнер открыт и в настоящий момент отображается как всплывающее окно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Содержит значение <codeph>true</codeph>, когда контейнер открыт и в настоящий момент отображается как всплывающее окно.  
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>open</linktext></link><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>close</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:moveForSoftKeyboard:get"><apiName>moveForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownList"><apiName>DropDownList</apiName><shortdesc>
  Элемент управления DropDownList содержит раскрывающийся список, из которого можно выбрать одно значение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DropDownList">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:DropDownList" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Необязательный элемент темы оформления, хранящий строку запроса или текст выбранного элемента. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that holds the prompt or the text of the selected item.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownList&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DropDownList 
    <strong>Properties</strong>
    prompt=""
    typicalItem="null"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления DropDownList содержит раскрывающийся список, из которого можно выбрать одно значение. Его функциональные возможности очень похожи на возможности элемента формы SELECT в HTML.
   <p>Элемент управления DropDownList состоит из кнопки привязки, области запроса и раскрывающегося списка. Используйте кнопку привязки для открытия и закрытия выпадающего списка. В области запроса отображается строка запроса или выбранный элемент в раскрывающемся списке.</p>
   <p>Когда раскрывающийся список открыт:</p>
  <ul>
    <li>Нажатие кнопки привязки закрывает раскрывающийся список и передает выбранный в настоящий момент элемент данных.</li>
    <li>Нажатие вне раскрывающегося списка закрывает раскрывающийся список и передает выбранный в настоящий момент элемент данных.</li>
    <li>Нажатие элемента данных выбирает этот элемент и закрывает раскрывающийся список.</li>
    <li>Если свойство <codeph>requireSelection</codeph> имеет значение <codeph>false</codeph>, то нажатие элемента данных при нажатой клавише Ctrl отменяет выбор элемента и закрывает раскрывающийся список.</li>
  </ul>
   <p><b>Примечание. </b>Элементы управления Spark на основе списка (класс Spark ListBase и его подклассы, такие как ButtonBar, ComboBox, DropDownList, List и TabBar) не поддерживают класс BasicLayout в качестве значения свойства <codeph>layout</codeph>. Не следует использовать BasicLayout с элементами управления Spark на основе списка.</p>
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
  
  <p>Для элемента управления DropDownList по умолчанию установлены следующие характеристики:</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>112 пикселов в ширину и 21 пикселов в высоту</entry></row><row><entry>Минимальный размер</entry><entry>112 пикселов в ширину и 21 пикселов в высоту</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row><row><entry>Класс темы оформления по умолчанию</entry><entry>spark.skins.spark.DropDownListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><apiConstructor id="spark.components:DropDownList:DropDownList"><apiName>DropDownList</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DropDownList:prompt:get"><apiName>prompt</apiName><shortdesc>
      Строка запроса для элемента управления DropDownList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           
      </apiDefaultValue></apiValueDef><apiDesc>
      Строка запроса для элемента управления DropDownList. Строка запроса является строкой, отображаемой в DropDownList при <codeph>selectedIndex</codeph> = -1. Как правило, эта строка начинается с выражения «Выберите один...». Выбор элемента в раскрывающемся списке заменяет строку запроса текстом из выбранного элемента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DropDownList:typicalItem:set"><apiName>typicalItem</apiName><shortdesc>
      Макеты используют предпочтительный размер typicalItem, когда требуются фиксированные размеры строки или столбца, но конкретное значение rowHeight или columnWidth не задано.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Макеты используют предпочтительный размер <codeph>typicalItem</codeph>, когда требуются фиксированные размеры строки или столбца, но конкретное значение <codeph>rowHeight</codeph> или <codeph>columnWidth</codeph> не задано. Аналогично виртуальные макеты используют этот элемент для определения размера элементов макета, которые не были прокручены в видимую область.
           <p>Контейнер использует типичный элемент данных и связанное с ним средство визуализации элементов для определения стандартного размера нижестоящих элементов контейнера. При заданном типичном элементе контейнер не должен измерять каждый нижестоящий элемент при выводе его на экран.</p>
           <p>Установка этого свойства устанавливает свойство макета <codeph>typicalLayoutElement</codeph>.</p>
     
      <p>Ограничение. Если <codeph>typicalItem</codeph> является IVisualItem, то он не должен быть также элементом поставщика данных.</p>
     
      <p>Примечание. Установка значения <codeph>typicalItem</codeph> изменяет любой явный набор ширины или высоты для элемента темы оформления <codeph>labelDisplay</codeph>. </p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
  Класс GridColumnHeaderGroup отображает строку заголовков и разделителей столбца, выровненных в соответствии с макетом сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Отступ сверху для всех средств визуализации заголовков (в пикселах). 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Отступ справа для последнего средства визуализации заголовка (в пикселах). 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Отступ слева для первого средства визуализации заголовка (в пикселах). 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Отступ снизу для всех средств визуализации заголовков (в пикселах). 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="separatorAffordance" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Для отправки события мыши горизонтальный интервал с любой стороны разделителя столбцов считается частью разделителя.
 
  <p>Ширина разделителей обычно составляет всего один пиксел, что значительно усложняет работу с ними. <codeph>getSeparatorIndexAt()</codeph> использует это значение для предоставления дополнительного пространства разделителям, чтобы события разделителя отправлялись при приближении мыши к его горизонтальной средней точке на расстояние меньше <codeph>separatorMouseWidth</codeph>.</p> 
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
</productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:GridColumnHeaderGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:GridColumnHeaderGroup 
    <strong>Properties</strong>
    columnSeperator="null"
    dataGrid="null"  
    downColumnIndex="-1"  
    headerRenderer="null"  
    hoverColumnIndex="-1"  
    visibleSortIndicatorIndices="<i>empty Vector.&lt;int&gt<i>"
 
    <strong>Styles</strong>
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    separatorAffordance="5" 
 
    <strong>Events</strong>
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    separatorClick="<i>No default</i>"
    separatorDoubleClick="<i>No default</i>"
    separatorMouseDrag="<i>No default</i>"
    separatorMouseUp="<i>No default</i>"
    separatorMouseRollOut="<i>No default</i>"
    separatorMouseRollOver="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс GridColumnHeaderGroup отображает строку заголовков и разделителей столбца, выровненных в соответствии с макетом сетки.  
 
  <p>Для отображения заголовков используется класс, указанный в свойстве <codeph>headerRenderer</codeph>. Для отображения разделителей используется класс, указанный в свойстве <codeph>columnSeparator</codeph>. Макет, который невозможно изменить, является виртуальным, т. е. в нем повторно используются средства визуализации и разделители, которые были прокручены из поля зрения.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>Grid</linktext></link></related-links><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK_separatorDoubleClick"><apiName>separatorDoubleClick</apiName><shortdesc>
  Отправляется при двойном щелчке мыши на разделителе заголовка столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при двойном щелчке мыши на разделителе заголовка столбца.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_CLICK_separatorClick"><apiName>separatorClick</apiName><shortdesc>
  Отправляется при щелчке мыши на разделителе заголовка столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при щелчке мыши на разделителе заголовка столбца.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OUT_separatorRollOut"><apiName>separatorRollOut</apiName><shortdesc>
  Отправляется при перемещении курсора мыши за пределы области, определенной разделителем столбца и separatorMouseWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при перемещении курсора мыши за пределы области, определенной разделителем столбца и <codeph>separatorMouseWidth</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OVER_separatorRollOver"><apiName>separatorRollOver</apiName><shortdesc>
  Отправляется при перемещении курсора мыши внутрь области, определенной разделителем столбца и separatorMouseWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при перемещении курсора мыши внутрь области, определенной разделителем столбца и <codeph>separatorMouseWidth</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_UP_separatorMouseUp"><apiName>separatorMouseUp</apiName><shortdesc>
  Отправляется после события separatorMouseDown при отпускании кнопки мыши, даже если курсор мыши больше не находится в пределах действия разделителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после события <codeph>separatorMouseDown</codeph> при отпускании кнопки мыши, даже если курсор мыши больше не находится в пределах действия разделителя.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_DRAG_separatorMouseDrag"><apiName>separatorMouseDrag</apiName><shortdesc>
  Отправляется после события separatorMouseDown, если выполняется движение мыши перед отпусканием кнопки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после события <codeph>separatorMouseDown</codeph>, если выполняется движение мыши перед отпусканием кнопки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Отправляется при двойном щелчке кнопкой мыши в области заголовка столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при двойном щелчке кнопкой мыши в области заголовка столбца.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Отправляется при щелчке кнопкой мыши в области заголовка столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при щелчке кнопкой мыши в области заголовка столбца.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Отправляется при выводе курсора мыши из области заголовка столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при выводе курсора мыши из области заголовка столбца.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Отправляется при вводе курсора мыши в область заголовка столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при вводе курсора мыши в область заголовка столбца.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Отправляется после события gridMouseDown при отпускании кнопки мыши, даже если курсор мыши больше не находится в пределах GridColumnHeaderGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после события <codeph>gridMouseDown</codeph> при отпускании кнопки мыши, даже если курсор мыши больше не находится в пределах GridColumnHeaderGroup.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Отправляется после события gridMouseDown, если выполняется движение мыши перед отпусканием кнопки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после события <codeph>gridMouseDown</codeph>, если выполняется движение мыши перед отпусканием кнопки.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Отправляется при нажатии кнопки мыши в области заголовка столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при нажатии кнопки мыши в области заголовка столбца.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:GridColumnHeaderGroup:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderBounds"><apiName>getHeaderBounds</apiName><shortdesc>
      Возвращает текущие границы пиксела указанного заголовка (средства визуализации) или null, если столбец не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>Rectangle</codeph>, представляющий границы пиксела заголовка столбца или null.
     
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает текущие границы пиксела указанного заголовка (средства визуализации) или null, если столбец не существует. Информация о границах заголовка содержится в координатах GridColumnHeaderGroup.
     
      <p>Если все видимые столбцы, предшествующие указанному столбцу, еще не прокручены в область видимости, возвращаемые границы представлены лишь приблизительно на основе всех <codeph>typicalItem</codeph> сетки.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderIndexAt"><apiName>getHeaderIndexAt</apiName><shortdesc>
      Возвращает индекс столбца в соответствии с указанными координатами или -1, если координаты находятся за пределами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс столбца или -1, если координаты находятся за пределами. 
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата X пиксела относительно <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата Y пиксела относительно <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает индекс столбца в соответствии с указанными координатами или -1, если координаты находятся за пределами. Координаты обрабатываются относительно целевого объекта макета GridColumnHeaderGroup.
     
      <p>Если все столбцы или строки для сетки еще не прокручены в область видимости, возвращаемая позиция индекса представлена лишь приблизительно на основе свойства <codeph>typicalItem</codeph> всех столбцов.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderRendererAt"><apiName>getHeaderRendererAt</apiName><shortdesc>
      Если указанное средство визуализации заголовка является видимым, возвращает ссылку на средство визуализации заголовка, которое в настоящий момент отображается в указанном столбце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Средство визуализации элементов или null, если индекс столбца недействителен.
     
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс в столбце средства визуализации заголовка.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если указанное средство визуализации заголовка является видимым, возвращает ссылку на средство визуализации заголовка, которое в настоящий момент отображается в указанном столбце. Обратите внимание, что если возвращенное средство визуализации заголовка больше не является видимым, оно может быть переработано и его свойства сброшены.  
     
      <p>Если запрошенное средство визуализации заголовка не является видимым, то при каждом вызове этого метода создается новое средство визуализации заголовка. Новое средство визуализации элементов невидимо</p>
     
      <p>Ширина возвращенного средства визуализации совпадает с шириной средств визуализации элементов, возвращенных DataGrid/getItemRendererAt().</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getSeparatorIndexAt"><apiName>getSeparatorIndexAt</apiName><shortdesc>
      Возвращает индекс разделителя столбца в соответствии с указанными координатами или -1, если координаты не перекрывают разделитель.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс столбца или -1, если координаты не перекрывают разделитель.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата X пиксела относительно <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата Y пиксела относительно <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает индекс разделителя столбца в соответствии с указанными координатами или -1, если координаты не перекрывают разделитель. Координаты обрабатываются относительно целевого объекта макета GridColumnHeaderGroup.
     
      <p>Предполагается, что разделитель перекрывает указанное местоположение, если координата x находится в пределах <codeph>separatorMouseWidth</codeph> горизонтальной средней точки разделителя.</p>
      
      <p>Индекс разделителя аналогичен индексу столбца слева при условии, что для <codeph>layoutDirection</codeph> этого компонента указано <codeph>"ltr"</codeph>. Это означает, что все заголовки столбца расположены между двумя разделителями, за исключением первого видимого столбца, у которого есть только разделитель справа, и последнего видимого столбца, у которого есть только разделитель слева.</p>
     
      <p>Если все столбцы или строки для сетки еще не прокручены в область видимости, возвращаемая позиция индекса представлена лишь приблизительно на основе свойства <codeph>typicalItem</codeph> всех столбцов.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:isSortIndicatorVisible"><apiName>isSortIndicatorVisible</apiName><shortdesc>
      Возвращает true, если индикатор сортировки для указанного столбца является видимым.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если индикатор сортировки для указанного столбца является видимым.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс в столбце средства визуализации заголовка.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает <codeph>true</codeph>, если индикатор сортировки для указанного столбца является видимым. Это более эффективная версия 
      <pre>
          visibleSortIndicatorIndices.indexOf(columnIndex) != -1</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:GridColumnHeaderGroup:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      Визуальный элемент, отображаемый между столбцами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Визуальный элемент, отображаемый между столбцами.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      Элемент управления DataGrid, определяющий макет столбца и положение горизонтальной прокрутки компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Элемент управления DataGrid, определяющий макет столбца и положение горизонтальной прокрутки компонента. Это свойство назначается элементом управления DataGrid после добавления его компонента темы оформления <codeph>grid</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:downColumnIndex:get"><apiName>downColumnIndex</apiName><shortdesc>
      Определяет индекс столбца средства визуализации заголовка, на котором в настоящее время пользователь нажимает кнопку мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет индекс столбца средства визуализации заголовка, на котором в настоящее время пользователь нажимает кнопку мыши.
      
      <p>Установка для <codeph>downColumnIndex</codeph> значения -1 (по умолчанию) означает, что индекс столбца не определен и для свойства <codeph>down</codeph> средства визуализации заголовка будет установлено значение <codeph>false</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:headerRenderer:get"><apiName>headerRenderer</apiName><shortdesc>
      Класс IGridItemRenderer, используемый для визуализации заголовка каждого столбца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="headerRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Класс IGridItemRenderer, используемый для визуализации заголовка каждого столбца.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      Определяет индекс столбца средства визуализации заголовка, на которое в настоящее время наведен указатель мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет индекс столбца средства визуализации заголовка, на которое в настоящее время наведен указатель мыши.
      
      <p>Установка для <codeph>hoverColumnIndex</codeph> значения -1 (по умолчанию) означает, что индекс столбца не определен и для свойства <codeph>hovered</codeph> средства визуализации заголовка будет установлено значение <codeph>false</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:visibleSortIndicatorIndices:get"><apiName>visibleSortIndicatorIndices</apiName><shortdesc>
      Вектор индексов столбцов, соответствующих средствам визуализации заголовков, индикаторы сортировки которых в данный момент отображаются.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="visibleSortIndicatorIndicesChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>an empty Vector.&amp;lt;int&amp;gt;
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Вектор индексов столбцов, соответствующих средствам визуализации заголовков, индикаторы сортировки которых в данный момент отображаются.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
  Компонент PopUpAnchor используется для позиционирования в макете всплывающего или раскрывающегося элемента управления, например компонента DropDownList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="popUp"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:PopUpAnchor&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:PopUpAnchor
 
    <strong>Properties</strong>
    displayPopUp="false"
    popUp=""
    popUpHeightMatchesAnchorHeight="false"
    popUpPosition="topLeft"
    popUpWidthMatchesAnchorWidth="false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент PopUpAnchor используется для позиционирования в макете всплывающего или раскрывающегося элемента управления, например компонента DropDownList. Поскольку всплывающий или раскрывающийся элемент управления добавлен к списку отображения с помощью PopUpManager, он, как правило, не используется в макете. Компонент PopUpAnchor является компонентом UIComponent, добавленным к контейнеру и расположенным в нем. Поэтому он является ответственным за установление размеров и позиционирование всплывающего или раскрывающегося элемента управления относительно себя. Он не имеет визуального внешнего вида.
   <p>Элемент управления PopUpAnchor имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>0</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>0</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="PopUpAnchorExample.mxml"><swfblock conref="examples/PopUpAnchorExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.components:PopUpAnchor:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
      Конструктор
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:PopUpAnchor:protected:calculatePopUpPosition"><apiName>calculatePopUpPosition</apiName><shortdesc>
      Вызывается при позиционировании элемента управления popUp, при его отображении или при вызове updatePopUpTransform().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Абсолютная позиция <codeph>popUp</codeph> в глобальной системе координат.  
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn></apiOperationDef><apiDesc>
      Вызывается при позиционировании элемента управления <codeph>popUp</codeph>, при его отображении или при вызове <codeph>updatePopUpTransform()</codeph>. Переопределите эту функцию для изменения позиции <codeph>popUp</codeph>.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:PopUpAnchor:updatePopUpTransform"><apiName>updatePopUpTransform</apiName><shortdesc>
      Обновляет матрицу преобразования элемента управления popUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Обновляет матрицу преобразования элемента управления <codeph>popUp</codeph>. Обычно эта функция вызывается при выполнении эффекта в PopUpAnchor. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:PopUpAnchor:popUpPosition:set"><apiName>popUpPosition</apiName><shortdesc>
      Позиция элемента управления popUp, когда он открыт, относительно компонента PopUpAnchor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>PopUpPosition.TOP_LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Позиция элемента управления <codeph>popUp</codeph>, когда он открыт, относительно компонента PopUpAnchor. Возможными значениями являются <codeph>left, right, above, below, center,</codeph> и <codeph>topLeft</codeph>.
     
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#PopUpPosition"><linktext>spark.components.PopUpPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:PopUpAnchor:displayPopUp:set"><apiName>displayPopUp</apiName><shortdesc>
      При значении true добавляет элемент управления popUp к PopUpManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      При значении <codeph>true</codeph> добавляет элемент управления <codeph>popUp</codeph> к PopUpManager. Если <codeph>false</codeph>, то он удаляет элемент управления.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpHeightMatchesAnchorHeight:set"><apiName>popUpHeightMatchesAnchorHeight</apiName><shortdesc>
      Если значение равно true, высота элемента управления popUp устанавливается по значению высоты PopUpAnchor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, высота элемента управления <codeph>popUp</codeph> устанавливается по значению высоты PopUpAnchor.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpWidthMatchesAnchorWidth:set"><apiName>popUpWidthMatchesAnchorWidth</apiName><shortdesc>
      Если значение равно true, ширина элемента управления popUp устанавливается по значению ширины PopUpAnchor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, ширина элемента управления <codeph>popUp</codeph> устанавливается по значению ширины PopUpAnchor.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUp:set"><apiName>popUp</apiName><shortdesc>
      IFlexDisplayObject для добавления к PopUpManager при открытии PopUpAnchor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="popUpChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      IFlexDisplayObject для добавления к PopUpManager при открытии PopUpAnchor. Если элемент управления <codeph>popUp</codeph> реализует IFocusManagerContainer, <codeph>popUp</codeph> получает собственный FocusManager. Если пользователь использует клавишу табуляции для навигации между элементами управлениями, он получает доступ только к элементам управления в <codeph>popUp</codeph>. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:List"><apiName>List</apiName><shortdesc>
  Элемент управления Label отображает вертикальный список элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  Указывает, при каких условиях отображается вертикальная полоса прокрутки.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> ("on") – полоса прокрутки всегда отображается.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> ("off") – полоса прокрутки никогда не отображается. Область просмотра по-прежнему может быть прокручена программно путем установки ее свойства verticalScrollPosition.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> ("auto") – полоса прокрутки отображается в случае, когда contentHeight области просмотра больше его высоты.
  </li>
  </ul>
 
  <p>
  Стратегия прокрутки влияет на измеренный размер компонента темы оформления средства прокрутки. Этот стиль представляет собой обложку для verticalScrollPolicy компонента темы оформления средства прокрутки. Это не стиль наследования, поэтому он не будет воздействовать на средства визуализации элементов.
  </p>
   <p>Если в мобильном приложении используется горизонтальный элемент управления List, установите для <codeph>horizontalScrollPolicy</codeph> значение <codeph>on</codeph> и для <codeph>verticalScrollPolicy</codeph> значение <codeph>auto</codeph>, чтобы включить эффекты горизонтального скачкообразного движения и перетаскивания. В противном случае в элементе управления будут использоваться эффекты вертикального скачкообразного движения и перетаскивания.</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:List" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Фоновый цвет средства визуализации при его выборе пользователем.
   <p>Значением по умолчанию для темы Halo является <codeph>0x7FCEFF</codeph>. Значение по умолчанию для темы Spark - <codeph>0xA8C6EE</codeph>. Значение по умолчанию для мобильной темы - <codeph>0xE0E0E0</codeph>.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  Указывает, при каких условиях отображается горизонтальная полоса прокрутки.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> ("on") – полоса прокрутки всегда отображается.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> ("off") – полоса прокрутки никогда не отображается. Область просмотра по-прежнему может быть прокручена программно путем установки ее свойства horizontalScrollPosition.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> ("auto") – полоса прокрутки отображается в случае, когда contentHeight области просмотра больше его высоты.
  </li>
  </ul>
 
  <p>Стратегия прокрутки влияет на измеренный размер компонента темы оформления средства прокрутки. Этот стиль представляет собой обложку для horizontalScrollPolicy компонента темы оформления средства прокрутки. Это не стиль наследования, поэтому он не будет воздействовать на средства визуализации элементов.</p>
   <p>Если в мобильном приложении используется горизонтальный элемент управления List, установите для <codeph>horizontalScrollPolicy</codeph> значение <codeph>on</codeph> и для <codeph>verticalScrollPolicy</codeph> значение <codeph>auto</codeph>, чтобы включить эффекты горизонтального скачкообразного движения и перетаскивания. В противном случае в элементе управления будут использоваться эффекты вертикального скачкообразного движения и перетаскивания.</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="dropIndicatorSkin" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  Если элемент темы оформления <codeph>dropIndicator</codeph> не указан в теме оформления List, то создается экземпляр этого класса, который используется для индикатора перетаскивания по умолчанию во время операций перетаскивания, где List является возможной целью перетаскивания.
   </description>
<default>spark.skins.spark.ListDropIndicator
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dragIndicatorClass" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  Класс для создания экземпляра индикатора перетаскивания в процессе операций перетаскивания, инициированных List. Должен иметь тип <codeph>IFlexDisplayObject</codeph>. 
   <p>Если класс реализует интерфейс <codeph>ILayoutManagerClient</codeph>, то экземпляр проверяется с помощью DragManager. </p>
   <p>Если класс реализует интерфейс <codeph>IVisualElement</codeph>, то значение свойства <codeph>owner</codeph> экземпляра будет установлено на List, что инициирует перетаскивание. </p>
   <p>DragManager AIR получает снимок экземпляра, в то время как DragManager не-AIR использует экземпляр непосредственно.</p>
   </description>
<default>spark.components.supportClasses.ListItemDragProxy
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:List" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  Управляет видимостью границы для этого компонента.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет границы для данного компонента.
    </description>
<default>#696969
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал границы для данного компонента.
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropIndicator" owner="spark.components:List" playerVersion="Flash10" required="false" type="flash.display.DisplayObject" var_type="mx.core:IFactory">
<description>
      Элемент темы оформления, который определяет внешний вид индикатора перетаскивания. Размер индикатора перетаскивания изменен и позиционирован с помощью макета таким образом, чтобы выделить контуром место вставки при перетаскивании над списком.
           <p>По умолчанию индикатор перетаскивания для элемента управления Spark представляет собой сплошную линию по ширине элемента управления. Создайте пользовательский индикатор перетаскивания, создав пользовательский класс темы оформления для объекта перетаскивания. В классе темы оформления создайте элемент темы оформления с именем <codeph>dropIndicator</codeph> в области &lt;fx:Declarations> класса темы оформления..</p>
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the appearance of the drop indicator.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:List" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Дополнительный Scroller, используемый для прокрутки List.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:List&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:List
    <strong>Properties</strong>
    allowMultipleSelection="false"
    dragEnabled="false"
    dragMoveEnabled="false"
    dropEnabled="false"
    selectedIndices="null"
    selectedItems="null"
    useVirtualLayout="true"
 
    <strong>Styles</strong>
    alternatingItemColors="undefined"
    borderAlpha="1.0"
    borderColor="0#CCCCCC"
    borderVisible="true"
    contentBackgroundColor="0xFFFFFF"
    downColor="0xA8C6EE"
    dragIndicator="ListItemDragProxy"
    dropIndicatorSkin="ListDropIndicator"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления Label отображает вертикальный список элементов. Ее функциональные возможности аналогичны возможностям элемента формы SELECT в HTML. При наличии большего числа одновременно отображаемых элементов он может отобразить полосу вертикальной прокрутки. Таким образом, пользователь имеет доступ ко всем элементам в списке. Дополнительная полоса горизонтальной прокрутки позволяет пользователю просматривать элементы, если ширины элементов списка недостаточно для их расположения. Пользователь может выбрать один или более элементов из списка в зависимости от значения свойства <codeph>allowMultipleSelection</codeph>.
   <p><b>Примечание. </b>Элементы управления Spark на основе списка (класс Spark ListBase и его подклассы, такие как ButtonBar, ComboBox, DropDownList, List и TabBar) не поддерживают класс BasicLayout в качестве значения свойства <codeph>layout</codeph>. Не следует использовать BasicLayout с элементами управления Spark на основе списка. При определении макета не следует устанавливать свойство typicalLayoutElement макета, поскольку оно автоматически устанавливается в средстве визуализации элементов, созданном посредством <codeph>typicalItem</codeph> списка.</p>
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
   <p>Для элемента управления List по умолчанию установлены следующие характеристики:</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>112 пикселов в ширину на 112 пикселов в высоту</entry></row><row><entry>Минимальный размер</entry><entry>112 пикселов в ширину на 112 пикселов в высоту</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row><row><entry>Класс темы оформления по умолчанию</entry><entry>spark.skins.spark.ListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ListExample.mxml"><swfblock conref="examples/ListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ListSkin"><linktext>spark.skins.spark.ListSkin</linktext></link></related-links><apiConstructor id="spark.components:List:List"><apiName>List</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:List:addDragData"><apiName>addDragData</apiName><shortdesc>
      Добавляет выбранные элементы в объект DragSource при помощи операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragSource</apiItemName><apiType value="mx.core:DragSource"/><apiDesc>Объект DragSource, к которому добавляются данные.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет выбранные элементы в объект DragSource при помощи операции перетаскивания. Переопределите этот метод для добавления других данных в источник перетаскивания.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelectionAndCaretUponNavigation"><apiName>adjustSelectionAndCaretUponNavigation</apiName><shortdesc>
      Корректирует выделенный фрагмент с учетом нажатой клавиши или комбинации клавиш.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Обнаружено событие клавиатуры
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Корректирует выделенный фрагмент с учетом нажатой клавиши или комбинации клавиш. Нажатие клавиши отправляется в макет и в метод макета getNavigationDestinationIndex() для определения индекса для навигации, который основан на элементе, находящемся в данный момент в фокусе. После определения индекса выделение одного объекта, текстовый курсор и, при необходимости, выделение нескольких объектов обновляются для отражения нового выделенного элемента.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      Корректирует выбранные индексы с учетом элементов, добавленных или удаленных из этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Новый индекс.
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Значение <codeph>true</codeph>, если элемент был добавлен к компоненту, и <codeph>false</codeph> если элемент был удален.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Корректирует выбранные индексы с учетом элементов, добавленных или удаленных из этого компонента. 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:calculateSelectedIndices"><apiName>calculateSelectedIndices</apiName><shortdesc>
      Вспомогательный метод для вычисления изменения текущего выбора при щелчке мыши по элементу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Обновленные индексы элемента, в которые будет передан выбор.
     
      </apiDesc><apiType value="Vector$int"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс элемента, который был нажат.
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiDesc>True, когда клавиша Shift нажата.
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiDesc>True, когда клавиша Ctrl нажата.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вспомогательный метод для вычисления изменения текущего выбора при щелчке мыши по элементу.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/selectedIndices"><linktext>selectedIndices</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:protected:copyItemWithUID"><apiName>copyItemWithUID</apiName><shortdesc>
      Выполняет полное копирование объекта с помощью вызова метода ObjectUtil.copy() и замену свойства uid копии (если существует) на новое значение с помощью вызова метода UIDUtil.createUID().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Копия объекта.
           </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Копируемый элемент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет полное копирование объекта с помощью вызова метода <codeph>ObjectUtil.copy()</codeph> и замену свойства <codeph>uid</codeph> копии (если существует) на новое значение с помощью вызова метода <codeph>UIDUtil.createUID()</codeph>.
     
      <p>Этот метод используется для перетаскивания копии.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.utils.ObjectUtil.xml"><linktext>mx.utils.ObjectUtil</linktext></link><link href="" invalidHref="mx.utils.UIDUtil.xml"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:createDragIndicator"><apiName>createDragIndicator</apiName><shortdesc>
      Создает экземпляр класса для отображения визуальных элементов перетаскиваемых элементов во время операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>IFlexDisplayObject, представляющий индикатор перетаскивания.
      
      </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Создает экземпляр класса для отображения визуальных элементов перетаскиваемых элементов во время операции перетаскивания. Обработчик по умолчанию <codeph>DragEvent.DRAG_START</codeph> передает экземпляр методу <codeph>DragManager.doDrag()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:createDropIndicator"><apiName>createDropIndicator</apiName><shortdesc>
      Создает экземпляр класса dropIndicator для отображения визуальных элементов области перетаскивания во время операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает dropIndicator, который был установлен в макете.
           </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Создает экземпляр класса dropIndicator для отображения визуальных элементов области перетаскивания во время операции перетаскивания. Экземпляр установлен в свойстве макета <codeph>dropIndicator</codeph>.
           <p>При изменении обработчика событий <codeph>dragEnter</codeph> и вызове <codeph>preventDefault()</codeph>, чтобы предотвратить выполнение обработчика по умолчанию, вызовите <codeph>createDropIndicator()</codeph> для создания индикатора перетаскивания.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/destroyDropIndicator"><linktext>destroyDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:destroyDropIndicator"><apiName>destroyDropIndicator</apiName><shortdesc>
      Отпускает экземпляр dropIndicator, установленный в макете в настоящий момент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает удаленный dropIndicator. 
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Отпускает экземпляр <codeph>dropIndicator</codeph>, установленный в макете в настоящий момент.
           <p>При изменении обработчика событий <codeph>dragExit</codeph> и вызове <codeph>preventDefault()</codeph>, чтобы предотвратить выполнение обработчика по умолчанию, вызовите <codeph>destroyDropIndicator()</codeph> для удаления индикатора перетаскивания.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/createDropIndicator"><linktext>createDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:ensureIndexIsVisible"><apiName>ensureIndexIsVisible</apiName><shortdesc>
      Стандартный метод, обрабатывающий прокрутку элемента данных в представлении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс элемента данных.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Стандартный метод, обрабатывающий прокрутку элемента данных в представлении. Если элемент данных в указанном индексе видим не полностью, список будет прокручиваться до тех пор, пока он не станет видимым. Если элемент данных является видимым, дополнительная прокрутка не выполняется. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:List:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      Если значение равно true, то включен выбор нескольких элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, то включен выбор нескольких элементов. При переключении во время выполнения текущий выбор очищается. Он не должен быть включен, если для <codeph>interactionMode</codeph> указано <codeph>touch</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      Флаг, который указывает возможность перетаскивания элементов из этого элемента управления в другие элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, который указывает возможность перетаскивания элементов из этого элемента управления в другие элементы. Если значение равно <codeph>true</codeph>, то перетаскивание для данного элемента управления разрешено. Если свойство <codeph>dropEnabled</codeph> также имеет значение <codeph>true</codeph>, то пользователь может реорганизовывать элементы путем их перетаскивания из этого элемента управления и в него.
     
      <p>Перетаскивание не поддерживается на мобильных устройствах, если для <codeph>interactionMode</codeph> установлено <codeph>touch</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      Флаг, указывающий, можно ли переместить элементы на место элементов, только что скопированных из элемента управления в качестве элемента операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, указывающий, можно ли переместить элементы на место элементов, только что скопированных из элемента управления в качестве элемента операции перетаскивания. Если <codeph>true</codeph>, и свойство <codeph>dragEnabled</codeph> является <codeph>true</codeph>, элементы могут быть перемещены. Зачастую удаление элементов из поставщика данных невозможно или запрещено. Таким образом, не следует разрешать перемещение при выполнении операции перетаскивания.
     
      <p>Перетаскивание не поддерживается на мобильных устройствах, если для <codeph>interactionMode</codeph> установлено <codeph>touch</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      Флаг, указывающий, могут ли перетаскиваемые элементы быть перенесены в элемент управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, указывающий, могут ли перетаскиваемые элементы быть перенесены в элемент управления.
           <p>При установке значения этого свойства <codeph>true</codeph> элемент управления принимает все форматы данных и признает, что формат перетаскиваемых данных соответствует формату данных в поставщике данных. Если требуется явным образом проверить формат перетаскиваемых данных, следует обработать одно или несколько событий перетаскивания, например <codeph>dragEnter</codeph> и <codeph>dragOver</codeph>, и выполнить вызов метода <codeph>preventDefault()</codeph> DragEvent для настройки способа принятия перетаскиваемых данных классом списка.</p>
     
      <p>Перетаскивание не поддерживается на мобильных устройствах, если для <codeph>interactionMode</codeph> установлено <codeph>touch</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      Если в настоящее время активирована прокрутка страницы для Scroller
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      Если в настоящее время активирована прокрутка страницы для Scroller
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      В настоящее время для Scroller действует режим привязки прокрутки. Указание для этого свойства любого значения, кроме off, может привести к мгновенному изменению положения прокрутки, обеспечивающему правильную привязку перемещаемого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"off"
           </apiDefaultValue></apiValueDef><apiDesc>
      В настоящее время для Scroller действует режим привязки прокрутки.
           <p>Указание для этого свойства любого значения, кроме off, может привести к мгновенному изменению положения прокрутки, обеспечивающему правильную привязку перемещаемого элемента. Для этого изменения положения прокрутки отсутствует анимация.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:List:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      Вектор целых чисел, представляющий индексы выбранного в настоящее время элемента или элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Вектор целых чисел, представляющий индексы выбранного в настоящее время элемента или элементов. Если выбор нескольких элементов отключен путем установки значения <codeph>false</codeph> для <codeph>allowMultipleSelection</codeph> и это свойство установлено, то выбран элемент данных, соответствующий первому индексу в векторе.  
           <p>Если многократный выбор активирован посредством установки значения <codeph>allowMultipleSelection</codeph> на <codeph>true</codeph>, это свойство содержит список выбранных индексов в обратном их выбору порядке. Это означает, что первый элемент в Vector соответствует последнему выбранному элементу.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      Вектор объектов, представляющих выбранные в настоящее время элементы данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Вектор объектов, представляющих выбранные в настоящее время элементы данных. Если выбор нескольких элементов отключен путем установки значения <codeph>false</codeph> для <codeph>allowMultipleSelection</codeph> и это свойство установлено, то выбран элемент данных, соответствующий первому элементу в векторе.  
           <p>Если многократный выбор активирован посредством установки значения <codeph>allowMultipleSelection</codeph> на <codeph>true</codeph>, это свойство содержит список выбранных элементов в обратном их выбору порядке. Это означает, что первый элемент в Vector соответствует последнему выбранному элементу.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      
      Устанавливает значение свойства useVirtualLayout макета, связанного с этим элементом управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Устанавливает значение свойства <codeph>useVirtualLayout</codeph> макета, связанного с этим элементом управления. Если макет впоследствии заменен, а значение этого свойства является <codeph>true</codeph>, то для свойства <codeph>useVirtualLayout</codeph> нового макета устанавливается значение <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:hasFocusableChildren:set"><apiName>hasFocusableChildren</apiName><shortdesc>
      Флаг, указывающий, могут ли фокусируемые средства визуализации элементов этого списка принимать фокус клавиатуры. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, указывающий, могут ли фокусируемые средства визуализации элементов этого списка принимать фокус клавиатуры.  
           <p><b>Примечание. </b>Это аналогично свойству  <codeph>tabChildren</codeph>, используемому в Flash Player. Свойство <codeph>hasFocusableChildren</codeph> используется с приложениями Flex. Не следует использовать свойство <codeph>tabChildren</codeph>.</p>
           <p>Обычно это свойство – <codeph>false</codeph>, потому что большинство компонентов получает фокус непосредственно на себя или делегирует фокус на отдельный внутренний подчиненный компонент и отображается так, как будто фокус наведен на этот компонент. Это значение для списка можно установить на true, чтобы содержимое списка могло получать фокус.</p>
     
      <p>Если значение установлено и тема оформления списка содержит элемент темы оформления Scroller, то для значения создается прокси в Scroller.</p> 
     
      <p>Если значением является <codeph>true</codeph>, то создание прокси означает, что содержимое Scroller, например средства визуализации элементов, теперь может получать фокус. Например, это означает, что первое нажатие клавиши Tab поместит фокус на элемент управления List, а второе нажатие клавиши Tab поместит фокус на первый нижестоящий элемент Scroller, который может иметь фокус.</p> 
      
      <p>Если значением является <codeph>false</codeph>, то первое нажатие клавиши Tab поместит фокус на элемент управления List, а второе нажатие клавиши Tab переместит фокус на следующий после списка элемент управления, который может иметь фокус.</p> 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
  Класс BorderContainer определяет набор стилей таблицы CSS, которые управляют внешним видом границы и заливкой фона контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:BorderContainer">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  Если значение равно <codeph>true</codeph>, контейнер имеет видимую тень.
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Радиус скривленных углов границы.
   </description>
<default>0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderWeight" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Толщина линии границы. 
   </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  Определяет видимость границы. Если значение равно <codeph>false</codeph>, то граница не отображается, кроме тех случаев, когда она определена в свойстве <codeph>borderStroke</codeph>. 
   
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="inset,solid" inherit="no" name="borderStyle" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  Стиль ограничительной рамки. Возможными значениями являются <codeph>solid</codeph> и <codeph>inset</codeph>.
 
  </description>
<default>solid
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:BorderContainer" playerVersion="Flash10" type="uint">
<description>
  Цвет границы.
  
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Уровень альфа-канала цвета, определенного стилем<codeph>borderColor</codeph>. Допустимыми являются значения от 0,0 до 1,0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="scale,clip,repeat" inherit="no" name="backgroundImageFillMode" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  Определяет тип заполнения фоновым изображением пространства. При установке значения этого свойства в MXML необходимо использовать строку (например, repeat). Если установлено значение этого свойства в ActionScript, то необходимо использовать константу (например, <codeph>BitmapFillMode.CLIP</codeph>).
 
  <p>Если установлено значение <codeph>BitmapFillMode.CLIP</codeph> ("clip"), то изображение ограничивается пределами области.</p>
 
  <p>Если установлено значение <codeph>BitmapFillMode.REPEAT</codeph> ("repeat"), то изображение копируется для заполнения области.</p>
   <p>Если установлено значение <codeph>BitmapFillMode.SCALE</codeph> ("scale"), изображение растягивается для заполнения области.</p>
 
  </description>
<default>&lt;code>BitmapFillMode.SCALE&lt;/code>
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Object">
<description>
  Фоновое изображение контейнера. Если одновременно заданы <codeph>backgroundColor</codeph> и <codeph>backgroundImage</codeph>, то <codeph>backgroundColor</codeph> игнорируется. Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что значение не установлено. Если этот стиль и стиль <codeph>backgroundColor</codeph> не определены, для компонента устанавливается прозрачный фон.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:BorderContainer&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
   <pre>
  &lt;s:BorderContainer
    <b>Properties</b>
    backgroundFill="null"
    borderStroke="null"
 
    <b>Styles</b>
    backgroundImage="undefined"
    backgroundImageFillMode="scale"
    borderAlpha="1.0"
    borderColor="0xB7BABC"
    borderStyle="solid"
    borderVisible="true"
    borderWeight="1"
    cornerRadius="0"
    dropShadowVisible="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс BorderContainer определяет набор стилей таблицы CSS, которые управляют внешним видом границы и заливкой фона контейнера. 
   <p><b>Примечание. </b>Поскольку для управления внешним видом BorderContainer используются свойства класса и стили таблицы CSS, для него невозможно создать пользовательскую тему оформления. Если требуется создать пользовательскую тему оформления, класс темы оформления должен применять любые стили для управления внешним видом контейнера.</p>
   <p>По умолчанию обводка рамки закруглена. Если не требуется создавать закругленные углы, задайте для свойства <codeph>joints</codeph> обводки значение <codeph>JointStyle.MITER</codeph>. </p>
  
  <p>Контейнер BorderContainer имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>112 пикселов в ширину на 112 пикселов в высоту</entry></row><row><entry>Минимальный размер</entry><entry>112 пикселов в ширину на 112 пикселов в высоту</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row><row><entry>Класс темы оформления по умолчанию</entry><entry>spark.skins.spark.BorderContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="BorderContainerExample.mxml"><swfblock conref="examples/BorderContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#BorderContainerSkin"><linktext>spark.skins.spark.BorderContainerSkin</linktext></link></related-links><apiConstructor id="spark.components:BorderContainer:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:BorderContainer:backgroundFill:get"><apiName>backgroundFill</apiName><shortdesc>
      Определяет фон BorderContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IFill"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет фон BorderContainer. Установка этого свойства переопределяет стили <codeph>backgroundAlpha</codeph>, <codeph>backgroundColor</codeph>, <codeph>backgroundImage</codeph> и <codeph>backgroundImageFillMode</codeph>.
     
      <p>В следующем примере свойство <codeph>backgroundFill</codeph> используется для назначения красного цвета цветом фона:</p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:backgroundFill> 
             &lt;s:SolidColor 
                 color="red" 
                 alpha="1"/> 
         &lt;/s:backgroundFill> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:BorderContainer:borderStroke:get"><apiName>borderStroke</apiName><shortdesc>
      Определяет обводку для контейнера BorderContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IStroke"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет обводку для контейнера BorderContainer. Установка этого свойства переопределяет стили <codeph>borderAlpha</codeph>, <codeph>borderColor</codeph>, <codeph>borderStyle</codeph>, <codeph>borderVisible</codeph> и <codeph>borderWeight</codeph>.  
     
      <p>В следующем примере показана установка свойства <codeph>borderStroke</codeph>:</p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:borderStroke> 
             &lt;mx:SolidColorStroke 
                 color="black" 
                 weight="3"/> 
         &lt;/s:borderStroke> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRenderer"><apiName>IItemRenderer</apiName><shortdesc>
  Интерфейс IItemRenderer определяет основной набор API-интерфейсов, который должен быть реализован классом для создания средства визуализации элементов, которое может взаимодействовать с компонентом хоста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IItemRenderer определяет основной набор API-интерфейсов, который должен быть реализован классом для создания средства визуализации элементов, которое может взаимодействовать с компонентом хоста. Компонент хоста, например элемент управления List или ButtonBar, должен реализовывать интерфейс IItemRendererOwner. 
   
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRendererOwner"><linktext>spark.components.IItemRendererOwner</linktext></link></related-links><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      Содержит true при перемещении визуализатора элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Содержит <codeph>true</codeph> при перемещении визуализатора элементов.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      Индекс элемента в поставщике данных основного компонента визуализатора элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс элемента в поставщике данных основного компонента визуализатора элемента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      String для отображения в средстве визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      String для отображения в средстве визуализации. 
     
      <p>Компонент хоста средства визуализации элемента может использовать метод <codeph>itemToLabel()</codeph> для преобразования элемента данных в строку дисплея с помощью средства визуализации элемента. </p>
     
      <p>Для элементов управления, таких как List и ButtonBar, можно использовать свойства <codeph>labelField</codeph> или <codeph>labelFunction</codeph> для указания поля элемента данных, содержащего строку. В других случаях компонент хоста использует метод <codeph>toString()</codeph> для преобразования элемента данных в строку. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      Содержит true, если средство визуализации элемента может отображаться как выбранное.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Содержит <codeph>true</codeph>, если средство визуализации элемента может отображаться как выбранное.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      Имеет значение true, если средство визуализации элементов может отображаться как находящееся в фокусе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Имеет значение <codeph>true</codeph>, если средство визуализации элементов может отображаться как находящееся в фокусе. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
  Элемент управления VideoPlayer является видеопроигрывателем, поддерживающим темы оформления, последовательную загрузку, множественную скорость передачи и потоковое видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoPlayer">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/><skinStates><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Отключенное состояние VideoPlayer в полноэкранном режиме.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackErrorAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние ошибки воспроизведения VideoPlayer в полноэкранном режиме. Возникла ошибка при попытке воспроизведения видеоролика.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="bufferingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние буферизации VideoPlayer в полноэкранном режиме.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="pausedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние паузы VideoPlayer в полноэкранном режиме.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Воспроизводящее состояние VideoPlayer в полноэкранном режиме.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="readyAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние готовности VideoPlayer в полноэкранном режиме. Видеоролик готов к воспроизведению.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loadingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние загрузки VideoPlayer в полноэкранном режиме. VideoPlayer выполняет загрузку или подключение к источнику. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitializedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние отсутствия инициализации VideoPlayer в полноэкранном режиме. На данный момент VideoPlayer уже создан, но источник не установлен и попытки подключения не выполняются.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Отключенное состояние VideoPlayer
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackError" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние ошибки воспроизведения VideoPlayer. Возникла ошибка при попытке воспроизведения видеоролика.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="buffering" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние буферизации VideoPlayer
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="paused" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние паузы VideoPlayer
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Воспроизводящее состояние VideoPlayer
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние готовности VideoPlayer Видеоролик готов к воспроизведению.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние загрузки VideoPlayer. VideoPlayer выполняет загрузку или подключение к источнику. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Состояние отсутствия инициализации VideoPlayer. На данный момент VideoPlayer уже создан, но источник не установлен и попытки подключения не выполняются.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Время ожидания действий пользователя в миллисекундах, в течение которого сохраняется полноэкранный режим, прежде чем будут скрыты элементы управления воспроизведением видео.  
 
  <p>Если значением является <codeph>Infinity</codeph>, то элементы управления воспроизведением не будут скрыты в полноэкранном режиме. Изменение этого значения при нахождении в полноэкранном режиме не оказывает никакого эффекта.</p>
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Управляет видимостью тени для этого компонента.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#VideoPlayer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#VideoPlayer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="videoDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="true" var_type="spark.components:VideoDisplay">
<description>
      Необходимый элемент темы оформления, определяющий VideoDisplay.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines the VideoDisplay.</shortdesc></SkinPart><SkinPart name="currentTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Необязательный элемент темы оформления для отображения текущего значения <codeph>codecurrentTime</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the current value of codecurrentTime.</shortdesc></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Необязательный элемент темы оформления для кнопки переключения в полноэкранный режим.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a button to toggle fullscreen mode.</shortdesc></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      Необязательный элемент темы оформления для кнопки «Выключить звук». Кнопка «Выключить звук» имеет свойство <codeph>muted</codeph> и свойство <codeph>volume</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the mute button.</shortdesc></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Необязательный элемент темы оформления для кнопки паузы.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the pause button.</shortdesc></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Необязательный элемент темы оформления для кнопки воспроизведения.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the play button.</shortdesc></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      Необязательный элемент темы оформления для всех элементов управления проигрывателя. Эта тема оформления используется для определения того, что должно быть скрыто, когда проигрыватель находится в полноэкранном режиме, а пользователь не выполняет никаких действий.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for all of the player controls.</shortdesc></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      Необязательный элемент темы оформления для кнопки воспроизведения/паузы. Во время воспроизведения видео для свойства <codeph>selected</codeph> будет установлено значение <codeph>true</codeph>. Когда видео приостановлено или остановлено, для свойства <codeph>selected</codeph> будет установлено значение <codeph>false</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a play/pause button.</shortdesc></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      Необязательный элемент темы оформления для линейки управления (временная шкала).
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the scrub bar (the 
      timeline).</shortdesc></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Необязательный элемент темы оформления для кнопки остановки.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the stop button.</shortdesc></SkinPart><SkinPart name="durationDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Дополнительный элемент темы оформления для отображения duration.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the duration.</shortdesc></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      Необязательный элемент темы оформления для регулировки уровня громкости.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the volume control.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    dropShadowVisible="true"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления VideoPlayer является видеопроигрывателем, поддерживающим темы оформления, последовательную загрузку, множественную скорость передачи и потоковое видео. Он поддерживает воспроизведение файлов FLV и F4v. Элемент управления VideoPlayer содержит полнофункциональный UI для управления воспроизведением видеофайлов.
 
  <p><codeph>VideoDisplay</codeph> является версией без хрома, которая не поддерживает создание тем оформления. Он используется в случаях, когда требуется, чтобы пользователь не мог взаимодействовать с элементами управления.</p>
   <p>Элемент управления VideoPlayer имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>263 пикселя в ширину на 184 пикселя в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>0</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoPlayerExample.mxml"><swfblock conref="examples/VideoPlayerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoDisplay"><linktext>spark.components.VideoDisplay</linktext></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  Отправляется после изменения состояния MediaPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения состояния MediaPlayer.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  Отправляется после изменения свойства содержимого duration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения свойства содержимого <codeph>duration</codeph>.
 
  <p>Это событие невозможно отправить при значении источника, установленном на null, или при возникновении ошибки воспроизведения.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  Отправляется после изменения свойства currentTime MediaPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения свойства <codeph>currentTime</codeph> MediaPlayer.
 
  <p>Это событие невозможно отправить при значении источника, установленном на null, или при возникновении ошибки воспроизведения.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Отправляется при достижении точкой воспроизведения продолжительности воспроизводимого мультимедийного содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при достижении точкой воспроизведения продолжительности воспроизводимого мультимедийного содержимого.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  Отправляется после получения данных во время операции загрузки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после получения данных во время операции загрузки. Это событие отправляется только при воспроизведении видеоролика путем его непосредственной загрузки с сервера, как правило, путем выдачи запроса HTTP. Оно не отправляется при воспроизведении видеофрагмента из специального мультимедийного сервера, такого как Flash Media Server.
 
  <p>Это событие невозможно отправить при значении источника, установленном на null, или при возникновении ошибки воспроизведения.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      Форматирует значение времени, заданное в секундах, в строку, используемую для currentTime и duration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Отформатированное значение времени.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Значение времени в секундах для форматирования.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Форматирует значение времени, заданное в секундах, в строку, используемую для <codeph>currentTime</codeph> и <codeph>duration</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:pause"><apiName>pause</apiName><shortdesc conref="spark.components.VideoDisplay#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если тема оформления не была загружена и отсутствует videoDisplay.    
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:play"><apiName>play</apiName><shortdesc conref="spark.components.VideoDisplay#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если тема оформления еще не была загружена и отсутствует videoDisplay.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:seek"><apiName>seek</apiName><shortdesc conref="spark.components.VideoDisplay#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если тема оформления еще не была загружена и отсутствует videoDisplay.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>Время поиска в секундах.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:stop"><apiName>stop</apiName><shortdesc conref="spark.components.VideoDisplay#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если тема оформления еще не была загружена и отсутствует videoDisplay.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.components.VideoDisplay#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.components.VideoDisplay#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.components.VideoDisplay#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.components.VideoDisplay#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:currentTime:get"><apiName>currentTime</apiName><shortdesc conref="spark.components.VideoDisplay#currentTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#currentTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:duration:get"><apiName>duration</apiName><shortdesc conref="spark.components.VideoDisplay#duration">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#duration">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:loop:get"><apiName>loop</apiName><shortdesc conref="spark.components.VideoDisplay#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:muted:get"><apiName>muted</apiName><shortdesc conref="spark.components.VideoDisplay#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playing:get"><apiName>playing</apiName><shortdesc conref="spark.components.VideoDisplay#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.VideoDisplay#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.components.VideoDisplay#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:source:get"><apiName>source</apiName><shortdesc conref="spark.components.VideoDisplay#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:videoObject:get"><apiName>videoObject</apiName><shortdesc conref="spark.components.VideoDisplay#videoObject">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#videoObject">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc conref="spark.components.VideoDisplay#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#volume">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  Элемент управления ButtonBar определяет горизонтальную группу логически связанных кнопок, которые имеют единообразный внешний вид и навигацию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="firstButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Элемент темы оформления, определяющий первую кнопку.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the first button.</shortdesc></SkinPart><SkinPart name="lastButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Элемент темы оформления, определяющий последнюю кнопку.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the last button.</shortdesc></SkinPart><SkinPart name="middleButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="true" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Элемент темы оформления, определяющий среднюю кнопку (кнопки).
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the middle button(s).</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ButtonBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBar
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления ButtonBar определяет горизонтальную группу логически связанных кнопок, которые имеют единообразный внешний вид и навигацию.
 
  <p>Как правило, панель кнопок используется для группировки ряда связанных кнопок. Это придает им единообразный вид и единое управление и позволяет обрабатывать логику события <codeph>change</codeph> в рамках одной панели. </p>
 
  <p>Элемент управления ButtonBar Button создает элементы управления Button в зависимости от значения свойства <codeph>dataProvider</codeph>. Используйте такие методы как <codeph>addItem()</codeph> и <codeph>removeItem()</codeph> для управления свойством<codeph>dataProvider</codeph> для добавления и удаления элементов данных. Элемент управления ButtonBar автоматически добавляет или удаляет требуемые нижестоящие элементы в зависимости от изменений свойства <codeph>dataProvider</codeph>.</p>
 
  <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
 
  <p>В проектах, которые не предназначены для мобильных устройств, с помощью элемента управления ButtonBar можно установить активный нижестоящий элемент контейнера ViewStack, как показано в следующем примере:</p>
 
  <p><b>Примечание. </b>Элементы управления Spark на основе списка (класс Spark ListBase и его подклассы, такие как ButtonBar, ComboBox, DropDownList, List и TabBar) не поддерживают класс BasicLayout в качестве значения свойства <codeph>layout</codeph>. Не следует использовать BasicLayout с элементами управления Spark на основе списка.</p>
 
  <pre>
  &lt;s:ButtonBar dataProvider="{myViewStack}" requireSelection="true" /> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  <p>Для элемента управления ButtonBar по умолчанию установлены следующие характеристики:</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить все кнопки</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>Без ограничений</entry></row><row><entry>Класс темы оформления по умолчанию</entry><entry>spark.skins.spark.ButtonBarSkin</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Label"><apiName>Label</apiName><shortdesc>
  Label является компонентом UIComponent нижнего уровня, который может выполнить визуализацию одной или нескольких единообразно отформатированных строк текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="text"/><styles><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Выравнивание по вертикали или ширине.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Отступ сверху в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Отступ справа в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Отступ слева в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Отступ снизу в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Определяет перенос слов в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Label" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Label/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Label/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Label/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Label/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Label" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Label&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Label 
    <strong>Properties</strong>
    fontContext=""
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Label является компонентом UIComponent нижнего уровня, который может выполнить визуализацию одной или нескольких единообразно отформатированных строк текста. Отображаемый текст определяется свойством <codeph>text</codeph>, наследованным от TextBase. Форматирование текста определяется стилями CSS элемента, например <codeph>fontFamily</codeph> и <codeph>fontSize</codeph>.
 
  <p>Label использует Flash Text Engine (FTE) в Flash Player для предоставления высококачественной типографики международного уровня. Поскольку Label является «быстрой» и «легкой», она особенно хорошо подходит для тех случаев, которые требуют визуализации очень маленьких объектов неинтерактивного текста, например средств визуализации элементов и меток в темах оформления Button и т. п.</p>
 
  <p>Архитектура Spark, в рамках концепции «плати только за то, что тебе нужно предоставляет» в распоряжение пользователя три текстовых «примитива»: Label, RichText и RichEditableText. Label является наиболее «быстрой» и «легкой», однако ее возможности ограничены отсутствием сложного форматирования, прокрутки, выделения, редактирования и гиперссылок. RichText и RichEditableText основаны на библиотеке Text Layout Framework (TLF), а не на FTE. RichText добавляет возможность визуализации текста HTML со сложным форматированием, однако является полностью неинтерактивным. RichEditableText является самым медленным и самым «тяжелым», но предлагает весь спектр возможностей: поддержку прокрутки с виртуализованными TextLines, выделение, редактирование, гиперссылки и загрузку изображений с URL-адресов и т. п. Мы рекомендуем использовать наиболее быстрый из тех, которые удовлетворяет вашим потребностям.</p>
 
  <p>Элемент управления Spark Label аналогичен элементу управления MX Label mx.controls.Label. Наиболее важные различия:
  <ul>
    <li>Spark Label использует FTE, новый текстовый движок проигрывателя, в то время как MX Label использует класс TextField.</li>
    <li>Spark Label предлагает лучшую типографику и поддержку языков, нежели MX Label.</li>
    <li>Spark Label может отображать несколько строк, в отличие от MX Label.</li>
    <li>MX Label может отображать некоторое количество подгрупп HTML, в то время как Spark Label отображает текст только в единообразном оформлении.</li>
    <li>В MX Label существует возможность выделения текста, в Spark Label – нет.</li>
  </ul></p>
 
  <p>В Spark Label три последовательности символов распознаются как явные переносы строк: CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) и CR+LF (<codeph>\r\n</codeph>).</p>
 
  <p>Если вы не определили тип ширины для Label, то ширина Label определяется самой длинной строкой посредством явного переноса строк.</p>
 
  <p>Если ширина определена, указанный текст обтекает компонент по правому краю, поскольку значение по умолчанию стиля <codeph>lineBreak</codeph> равно <codeph>toFit</codeph>. Если текст выходит за рамки нижней границы компонента, он будет отсечен.</p>
 
  <p>Для отключения автоматического обтекания текстом установите значение стиля <codeph>lineBreak</codeph> на <codeph>explicit</codeph>. После этого строки будут переноситься только в тех местах, где <codeph>text</codeph> содержит явные разрывы строк, а концы строк, выходящие за пределы правой границы, будут отсекаться.</p>
 
  <p>Если у вас текста больше, чем пространства для его отображения, Label усечет текст. Усечение текста означает замену избыточного текста индикатором усечения, например «...». См. наследованные свойства <codeph>maxDisplayedLines</codeph> и <codeph>isTruncated</codeph>.</p>
 
  <p>Вы можете изменять интерлиньяж с помощью стиля <codeph>lineHeight</codeph>. Текст можно выравнивать по вертикали и горизонтали в пределах границ элемента с помощью стилей <codeph>textAlign</codeph>, <codeph>textAlignLast</codeph> и <codeph>verticalAlign</codeph>. Можно создать отступ от краев элемента с помощью стилей <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> и <codeph>paddingBottom</codeph>.</p>
 
  <p>По умолчанию у Label нет фона, однако его можно создать с помощью стилей <codeph>backgroundColor</codeph> и <codeph>backgroundAlpha</codeph>. Границы не поддерживаются. При необходимости создания границы или более сложного фона используйте отдельные графические элементы, например Rect, позади Label.</p>
 
  <p>Label поддерживает текст, написанный слева направо (LTR) (например, по-французски), справа налево (RTL) (например, по-арабски), а также в двух направлениях одновременно (например, предложения на французском языке в тексте на арабском). Если основным является направление текста справа налево, установите для стиля <codeph>direction</codeph> значение <codeph>rtl</codeph>. По умолчанию стиль <codeph>textAlign</codeph> имеет значение <codeph>start</codeph>, благодаря чему текст выравнивается по левому краю, если значение <codeph>direction</codeph> равно <codeph>ltr</codeph> и по правому краю, если <codeph>direction</codeph> равно <codeph>rtl</codeph>. Чтобы выровнять текст по противоположному краю, установите для <codeph>textAlign</codeph> значение <codeph>end</codeph>.</p>
 
  <p>Label использует класс TextBlock в Flash Text Engine для создания одного или нескольких объектов TextLine для статического отображения их текстовых строк в формате, определенном стилями CSS. В целях производительности TextLine не содержит информации об отдельных глифах; более подробно описано в flash.text.engine.TextLineValidity.STATIC.</p>
 
  <p>Для элемента управления Label по умолчанию установлены следующие характеристики:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>0 пикселей в ширину и 12 пикселей в высоту при отсутствии текста и достаточно большом размере для отображения текста, если применимо</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLineValidity/STATIC"><linktext>flash.text.engine.TextLineValidity.STATIC</linktext></link></related-links><apiConstructor id="spark.components:Label:Label"><apiName>Label</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
      RichEditableText является компонентом UIComponent нижнего уровня для отображения, прокрутки, выделения и редактирования текста RTF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="chromeColor"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichEditableText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
      Фоновый цвет ограничительного прямоугольника для этого компонента. В случае установки для стиля значения <codeph>undefined</codeph> фоновый цвет отсутствует. В противном случае этот цвет RGB отображается с альфа-уровнем, определяемым стилем <codeph>backgroundAlpha</codeph>.
     
      </description>
<default>undefined
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
      Альфа-уровень цвета, определенного стилем <codeph>backgroundColor</codeph>. Допустимыми являются значения от 0,0 до 1,0.
     
      </description>
<default>1.0
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Цвет текста активированного компонента, когда фокус на него не наведен.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Цвет текста при выключенном компоненте.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Цвет текста, когда компонент включен и получает фокус.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Ширина столбца в пикселях. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.columnWidth.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Величина промежутка между столбцами в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.columnGap.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Число столбцов текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.columnCount.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.5" type="Object">
<description>
  Указывает межсловные интервалы для использования при выравнивании. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Указывает число градусов для поворота данного текста.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера.
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textIndent; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Указывает позиции табуляции, связанные с абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для левого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен перед абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен после абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для правого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Управляет внешним видом элементов списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Управляет размещением маркера элемента списка относительно элемента списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Определяет автоотступ начального края списков, если значением заполнения этой стороны списка является <codeph>auto</codeph>.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Указывает позицию базовой линии первой строки в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Определяет тип обтекания текста вокруг плавающего объекта.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Управляет местом разрыва строк при форматировании текста по размеру окна. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Определяет вертикальное или горизонтальное размещение строки.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Выравнивание по вертикали или ширине.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Отступ сверху в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Отступ справа в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Отступ слева в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Отступ снизу в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Определяет перенос слов в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichEditableText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichEditableText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[      <p>The <code>&lt;s:RichEditableText&gt;</code> tag inherits all of the tag 
      attributes of its superclass and adds the following tag attributes:</p>
           <pre>
      &lt;s:RichEditableText
        <strong>Properties</strong>
        clipAndEnableScrolling="false|true"
        contentHeight="<i>Calculated default</i>"
        contentWidth="<i>Calculated default</i>"
        displayAsPassword="false"
        editable="true"
        heightInLines="NaN"
        horizontalScrollPosition="0"
        imeMode="null"
        maxChars="0"
        multiline="true"
        restrict="null"
        selectable="true"
        selectionActivePosition="-1"
        selectionAnchorPosition="-1"
        selectionHighlighting="TextSelectionHighlighting.WHEN_FOCUSED"
        text=""
        textFlow="<i>TextFlow</i>"
        typicalText=null
        verticalScrollPosition="0"
        widthInChars="NaN"
      
        <strong>Events</strong>
        change="<i>No default</i>"
        changing="<i>No default</i>"
        enter="<i>No default</i>"
        selectionChange="<i>No default</i>"
      /&gt;
      </pre>
      
      ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:ISystemCursorClient</apiBaseInterface><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseInterface>spark.core:IEditableText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      RichEditableText является компонентом UIComponent нижнего уровня для отображения, прокрутки, выделения и редактирования текста RTF.
           <p>Текст RTF может содержать рабочие гиперссылки и графику, которая либо встраивается, либо загружается с указанного URL-адреса.</p>
           <p>RichEditableText не имеет полос прокрутки, но реализует интерфейс IViewport для программируемой прокрутки таким образом, чтобы он мог управляться посредством Scroller, который, в свою очередь, имеет полосы прокрутки. Он также поддерживает вертикальную прокрутку с помощью колесика мыши.</p>
           <p>В нем отсутствует пользовательский интерфейс для изменения форматирования текста. Однако в нем имеется API, с помощью которых форматирование может выполняться программным способом; они позволяют, например, создать кнопку Bold, нажатие на которую изменяет начертание выделенного текста на полужирное.</p>
           <p>Этот класс используется в темах оформления Spark TextInput и TextArea. (TextInput не предоставляет возможностей по обработке текста RTF, в то время как TextArea – предоставляет.) По умолчанию RichEditableText имеет прозрачный фон и не поддерживает рисование границы.</p>
           <p>RichEditableText использует библиотеку Text Layout Framework (TLF), построенную, в свою очередь, на новом движке Flash Text Engine (FTE) в Flash Player 10. Вместе эти слои обеспечивают редактируемому тексту высококачественную международную типографику и макет. </p>
           <p>Архитектура Spark обеспечивает три текстовых примитива -- Label, RichText и RichEditableText. Label является наиболее быстрым и облегченным из «примитивов», поскольку использует только FTE, а не TLF, однако при этом он ограничен: нет возможности использования текста RTF, прокрутки, выделения и редактирования. RichText добавляет возможность отображения текста RTF со сложным макетом, однако является полностью неинтерактивным. RichEditableText является самым «тяжелым», но предлагает большую часть возможностей, доступных в TLF. Используйте наиболее быстрый примитив из тех, которые удовлетворяет вашим потребностям.</p>
           <p>RichEditableText похож на класс UITextField, использованный в компонентах MX. Этот класс не использует FTE или TLF, а расширяет использовавшийся ранее класс TextField.</p>
           <p>Наиболее важные различия между UITextField и RichEditableText:
      <ul>
        <li>RichEditableText предлагает пользователям лучшую типографику, лучшую языковую поддержку и лучшее макетирование текста.</li>
        <li>RichEditableText имеет объектно-ориентированную модель текстового формата RTF, в то время как UITextField таковой не имеет.</li>
        <li>RichEditableText имеет лучшую поддержку отображения больших массивов текста.</li>
        <li>RichEditableText требует встраивания шрифтом отличным от UITextField образом. Обратитесь к документации, чтобы узнать, как использовать атрибут <codeph>embedAsCFF</codeph> при встраивании шрифта.</li>
      </ul></p>
           <p>RichEditableText использует объектно-ориентированную модель TLF текста RTF, в которой элементы текстового макета, такие как разделы, абзацы, интервалы, гиперссылки и изображения представлены в среде выполнения объектами ActionScript, к которым можно получить доступ и манипулировать программными средствами. Центральным объектом в TLF для представления текста RTF является TextFlow, таким образом вы определяете текст RTF для элемента управления RichEditableText, устанавливая его свойство <codeph>textFlow</codeph> для экземпляра TextFlow. Более подробные сведения о создании свойства <codeph>textFlow</codeph>, например при импорте разметки TLF, можно получить в описании данного свойства. Если отображать текст в нескольких форматах не требуется, используйте свойство <codeph>text</codeph> для назначения строки простого текста. Более подробные сведения о взаимодействии свойств <codeph>text</codeph> и <codeph>textFlow</codeph> см. в описании этих свойств; например, можно установить одно свойство и получить другое.</p>
           <p>Во время компиляции можно поместить теги разметки TLF в тег RichEditableText, как показано в следующем примере:
      <pre>
      &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichEditableText>
      </pre>
      В этом случае компилятор MXML устанавливает свойство <codeph>content</codeph>, инициируя автоматическое создание объекта TextFlow из определенного вами элемента FlowElements.</p>
           <p>Форматирование текста по умолчанию определено стилями CSS, например <codeph>fontFamily</codeph> и <codeph>fontSize</codeph>. Любая информация по форматированию в TextFlow переопределяет заданное по умолчанию форматирование, определенное в таблице стилей CSS.</p>
           <p>Управление межстрочными интервалами выполняется с помощью стиля <codeph>lineHeight</codeph>, а интервалами между абзацами – с помощью стилей <codeph>paragraphSpaceBefore</codeph> и <codeph>paragraphSpaceAfter</codeph>. Выровнять текст можно с помощью стилей <codeph>textAlign</codeph> и <codeph>textAlignLast</codeph>. Создать отступ от краев компонента можно с помощью стилей <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> и <codeph>paddingBottom</codeph>.</p>
           <p>По умолчанию размер RichEditableText подстраивается автоматически: при отсутствии текста отображается поле небольшого размера, которое увеличивается в ширину до значения <codeph>maxWidth</codeph> при вводе текста. Поле увеличивается в высоту при нажатии клавиши Enter при переходе на новую строку.</p>
           <p>Свойства <codeph>widthInChars</codeph> и <codeph>heightInLines</codeph> предоставляют удобный способ определения ширины и высоты относительно размера шрифта. Также можно использовать свойство <codeph>typicalText</codeph>. Учтите, что если используется <codeph>typicalText</codeph>, то <codeph>widthInChars</codeph> и <codeph>heightInLines</codeph> игнорируются. Можно задать явную ширину и высоту в пикселях, использовать процентное соотношение по ширине и высоте или ограничить их значениями <codeph>left</codeph> и <codeph>right</codeph> или <codeph>top</codeph> и <codeph>bottom</codeph>.</p>
           <p>При определении ширины – независимо от того, является эта ширина явной или процентной, ограничением <codeph>maxWidth</codeph>, <codeph>left</codeph> или <codeph>right</codeph> – текст обтекает компонент по правому краю, а в случае превышения текстом размеров по вертикали автоматически появляется возможность вертикальной прокрутки. Если значение стиля <codeph>lineBreak</codeph> установлено на <codeph>explicit</codeph>, новые строки будут начинаться только с позиций явного переноса строк, например CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) или CR+LF (<codeph>\r\n</codeph>) в <codeph>text</codeph> или <codeph>&lt;p></codeph> и <codeph>&lt;br/></codeph> в разметке TLF. В этом случае текст сможет прокручиваться по горизонтали, если некоторые строки будут шире элемента управления.</p>
           <p>Для ограничения числа вводимых пользователем символов можно использовать свойство <codeph>maxChars</codeph>, а для указания допустимых для ввода символов – свойство <codeph>restrict</codeph>.</p>
           <p>Свойство <codeph>multiline</codeph> определяет действия, происходящие при нажатии клавиши Enter. Если значение равно <codeph>true</codeph>, то нажатие клавиши Enter создает новый абзац. Если значение равно <codeph>false</codeph>, оно инициирует событие <codeph>FlexEvent.ENTER</codeph> для отправления.</p>
           <p>Если возможность редактирования текста должна отсутствовать, установите значение свойства <codeph>editable</codeph> на <codeph>false</codeph>. Если должна отсутствовать даже возможность выделения текста, установите значение свойства <codeph>selectable</codeph> на <codeph>false</codeph>.</p>
           <p>Поскольку RichEditableText использует TLF, он поддерживает текст, написанный слева направо (LTR) (например, по-французски), справа налево (RTL) (например, по-арабски), а также в двух направлениях одновременно (например, предложения на французском языке в тексте на арабском). Если основным является направление текста справа налево, установите для стиля <codeph>direction</codeph> значение <codeph>rtl</codeph>. По умолчанию стиль <codeph>textAlign</codeph> имеет значение <codeph>"start"</codeph>, благодаря чему текст выравнивается по левому краю, если значение <codeph>direction</codeph> равно <codeph>ltr</codeph>, и по правому краю, если <codeph>direction</codeph> равно <codeph>rtl</codeph>. Чтобы выровнять текст по противоположному краю, установите для <codeph>textAlign</codeph> значение <codeph>end</codeph>.</p>
           <p>Как результат использования TLF RichEditableText поддерживает неограниченное число операций отмены/повтора в рамках одного сеанса. Началом сеанса редактирования считается получение компонентом фокуса клавиатуры, а окончанием – его потеря.</p>
           <p>RichEditableText использует класс TLF TextContainerManager для обработки текстового отображения, прокрутки, выделения, редактирования и контекстного меню.</p>
           <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
           </apiDesc><example conref="RichEditableTextExample.mxml"><swfblock conref="examples/RichEditableTextExample.swf"/></example><example conref="externalTextFlow.xml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.utils.xml#TextFlowUtil"><linktext>spark.utils.TextFlowUtil</linktext></link><link href="" invalidHref="flashx.textLayout.container.TextContainerManager.xml"><linktext>flashx.textLayout.container.TextContainerManager</linktext></link></related-links><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
      Отправляется при нажатии пользователем клавиши ENTER, если значение свойства multiline равно false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Отправляется при нажатии пользователем клавиши ENTER, если значение свойства <codeph>multiline</codeph> равно false.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
      Передается после завершения пользователем операции редактирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Передается после завершения пользователем операции редактирования.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
      Передается до начала пользовательской операции редактирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Передается до начала пользовательской операции редактирования. Для предотвращения обработки этой операции можно изменить ее или отменить событие.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
      Передается после изменения свойств selectionAnchorPosition и/или selectionActivePosition по любой причине.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Передается после изменения свойств <codeph>selectionAnchorPosition</codeph> и/или <codeph>selectionActivePosition</codeph> по любой причине.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RichEditableText:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
          Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Конструктор. 
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:RichEditableText:appendText"><apiName>appendText</apiName><shortdesc>
          Присоединяет указанный текст в конце RichEditableText, как если бы пользователь щелкнул в конце текста и добавил новый текст.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Текст, который будет добавлен.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Присоединяет указанный текст в конце RichEditableText, как если бы пользователь щелкнул в конце текста и добавил новый текст.
                   <p>После нового текста устанавливается точка вставки. В случае необходимости текст будет прокручен для обеспечения видимости точки вставки.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc>
          Возвращает объект TextLayoutFormat, определяющий вычисленные форматы для указанного диапазона символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект TextLayoutFormat.
          
          </apiDesc><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>Вектор строк определяет имена требуемых форматов и <codeph>null</codeph> запрашивает все форматы.
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция символа, определяющая фиксированный конец выделения.
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция символа, определяющая передвигаемый конец выделения.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Возвращает объект TextLayoutFormat, определяющий вычисленные форматы для указанного диапазона символов.
                   <p>Если формат не задан на протяжении всего диапазона, то его значение будет равно <codeph>undefined</codeph>.</p>
                   <p>Можно определить вектор строк, содержащий имена требуемых форматов; в противном случае все форматы будут вычислены автоматически.</p>
          
          <p>Если диапазон не указан, то используется выбранный диапазон. </p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc>
          
      Возвращает величину, добавляемую к horizontalScrollPosition текущей области просмотра в целях прокрутки с использованием требуемого блока прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Количество пикселов, добавляемых к <codeph>horizontalScrollPosition</codeph>.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Количество пикселов для прокрутки. Значением должна быть одна из нижеследующих констант spark.core.NavigationUnit: 
      <ul>
       <li><codeph>LEFT</codeph></li>
       <li><codeph>RIGHT</codeph></li>
       <li><codeph>PAGE_LEFT</codeph></li>
       <li><codeph>PAGE_RIGHT</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      Для прокрутки вертикальной строки используется значение <codeph>LEFT</codeph> или <codeph>RIGHT</codeph>. Для прокрутки к первому или последнему столбцу используется значение <codeph>HOME</codeph> или <codeph>END</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      Возвращает величину, добавляемую к <codeph>horizontalScrollPosition</codeph> текущей области просмотра в целях прокрутки с использованием требуемого блока прокрутки.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc>
          
      Возвращает величину, добавляемую к verticalScrollPosition в целях прокрутки с использованием требуемого блока прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Количество пикселов, добавляемых к <codeph>verticalScrollPosition</codeph>.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Количество пикселов для прокрутки. Значением элемента должна быть одна из нижеследующих констант spark.core.NavigationUnit: 
      <ul>
       <li><codeph>UP</codeph></li>
       <li><codeph>DOWN</codeph></li>
       <li><codeph>PAGE_UP</codeph></li>
       <li><codeph>PAGE_DOWN</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      Для прокрутки горизонтальной строки используется значение <codeph>UP</codeph> или <codeph>DOWN</codeph>. Для прокрутки к первой или последней строке используется значение <codeph>HOME</codeph> или <codeph>END</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      Возвращает величину, добавляемую к <codeph>verticalScrollPosition</codeph> в целях прокрутки с использованием требуемого блока прокрутки.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:insertText"><apiName>insertText</apiName><shortdesc>
          Вставляет указанный текст в RichEditableText, как если бы он был введен с клавиатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Текст, который будет вставлен.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Вставляет указанный текст в RichEditableText, как если бы он был введен с клавиатуры.
                   <p>При выборе диапазона новый текст заменяет выбранный текст. При наличии точки вставки новый текст вставляется в этом месте.</p>
                   <p>После нового текста устанавливается точка вставки. В случае необходимости текст будет прокручен для обеспечения видимости точки вставки.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectAll"><apiName>selectAll</apiName><shortdesc>
          Выделяет весь текст.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Выделяет весь текст. Не включает конечный разрыв абзаца.
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectRange"><apiName>selectRange</apiName><shortdesc>
          Выбирает указанный диапазон символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>Позиция символа, определяющая конец выделенного фрагмента, который остается фиксированным при расширении выделения.
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>Позиция символа, определяющая конец выделенного фрагмента, который перемещается при расширении выделения.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Выбирает указанный диапазон символов.
                   <p>Если любая из позиций является отрицательной, выбор текстового диапазона отменяется.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc>
          Присоединяет указанные форматы к каждому элементу в определенном диапазоне, которые соответствуют данному формату.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>TextLayoutFormat для применения к выбору.
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция символа относительно начала text String, определяющая конец выделения, остающийся фиксированным при расширении выделения клавишами со стрелками.
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Позиция символа, относительно начала text String, определяющая конец выделения, перемещающийся при расширении выделения клавишами со стрелками. 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Присоединяет указанные форматы к каждому элементу в определенном диапазоне, которые соответствуют данному формату. Обеспечивает применение форматов символов к тексту в указанном диапазоне (если указанным диапазоном является отдельная точка, изменения не вносятся). Обеспечивает применение форматов абзаца к любым абзацам, находящимся, по крайней мере, частично в рамках диапазона (или к одиночному абзацу, если диапазоном является отдельная точка). Обеспечивает применение форматов контейнера к контейнеру.
         
          <p>Поддерживаются форматы TextLayoutFormat. Значение <codeph>undefined</codeph> неприменимо. Если диапазон не указан, то используется выбранный диапазон. </p>
                   <p>В следующем примере устанавливается <codeph>fontSize</codeph> и <codeph>color</codeph> выбора:
          <pre>
          var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
          textLayoutFormat.fontSize = 12;
          textLayoutFormat.color = 0xFF0000;
          myRET.setFormatOfRange(textLayoutFormat);
          </pre>
          </p>
          
          <p>Если результаты <codeph>getFormatOfRange()</codeph> используются для указания <codeph>format</codeph>, имейте в виду, что каждый формат в <codeph>TextLayoutFormat</codeph> имеет вычисленное значение, которое будет применено к каждому элементу, который соответствует заданному формату.</p>
         
          <p>Для указания формата, который будет применен ко всему тексту, рекомендуется использовать <codeph>setStyle(format, value)</codeph> для самого компонента.</p>
         
          <p>В следующем примере устанавливается <codeph>fontSize</codeph> и <codeph>color</codeph> всего текста:
          <pre>
          myRET.setStyle("fontSize", 12);
          myRET.setStyle("color", 0xFF0000);
          </pre>
          </p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:styleChanged"><apiName>styleChanged</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:RichEditableText:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:RichEditableText:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
          
          </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
          Высота текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Высота текста.
                   <p>Поскольку Text Layout Framework в целях производительности виртуализует TextLines, эта высота первоначально будет оценена приблизительно, если компонент не сможет отобразить весь текст. При прокрутке текста до конца все строки TextLine будут скомпонованы, а значение <codeph>contentHeight</codeph> станет точным.</p>
                   <p>Для прокрутки текста по вертикали следует изменять <codeph>verticalScrollPosition</codeph> от 0 до <codeph>contentHeight – height</codeph>.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
          Ширина текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Ширина текста.
                   <p>Поскольку Text Layout Framework в целях производительности виртуализует TextLines, эта ширина первоначально будет оценена приблизительно, если компонент не сможет отобразить весь текст. При прокрутке текста до конца все строки TextLine будут скомпонованы, а значение <codeph>contentWidth</codeph> станет точным.</p>
                   <p>Для прокрутки текста по горизонтали следует изменять <codeph>horizontalScrollPosition</codeph> от 0 до <codeph>contentWidth – width</codeph>.</p>  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:content:get"><apiName>content</apiName><shortdesc>
          Данное свойство предназначено для использования в MXML во время компиляции; для получения или установки содержимого в формате RTF во время выполнения используйте вместо него свойство textFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          Данное свойство предназначено для использования в MXML во время компиляции; для получения или установки содержимого в формате RTF во время выполнения используйте вместо него свойство <codeph>textFlow</codeph>.
                   <p>Свойство <codeph>content</codeph> является свойством по умолчанию для RichEditableText, поэтому можно писать код MXML, например 
          <pre>
          &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichEditableText>
          </pre>
          имея String и SpanElement, определяемые в качестве содержимого, которое используется при создании TextFlow.</p>
                   <p>Это свойство отмечено как Object, поскольку оно может быть установлено как String, FlowElement или как массив String и FlowElement. В вышеприведенном примере содержимое является двухэлементным массивом, первым элементом которого является строка Hello, а вторым элементом – объект SpanElement, содержащий текст World в полужирном начертании.</p>
         
          <p>Независимо от определения содержимого оно преобразуется в объект TextFlow, поэтому при получении данного свойства вы получаете и результирующий TextFlow.</p>
         
          <p>Adobe рекомендует использовать свойство <codeph>textFlow</codeph> для получения и установки содержимого в формате RTF во время выполнения, поскольку это свойство явно назначает тип TextFlow, а не Object. TextFlow является традиционным представлением для содержимого в формате RTF в Text Layout Framework.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:editable:get"><apiName>editable</apiName><shortdesc>
          Флаг, указывающий, разрешено ли пользователю редактировать текст в данном элементе управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
                   </apiDefaultValue></apiValueDef><apiDesc>
          Флаг, указывающий, разрешено ли пользователю редактировать текст в данном элементе управления.
                   <p>Если значение равно <codeph>true</codeph>, то, находясь над границами данного элемента управления, курсор мыши примет I-образную форму. Если значение равно <codeph>false</codeph>, курсор мыши примет форму стрелки.</p>
                   <p>Если значение данного свойства равно <codeph>true</codeph>, свойство <codeph>selectable</codeph> игнорируется.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:enableIME:get"><apiName>enableIME</apiName><shortdesc>
          Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><returns>true if the component is editable and it is not displaying a password.
         
          </returns></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
          Высота элемента управления по умолчанию, в строках.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          Высота элемента управления по умолчанию, в строках.
                   <p>Стили форматирования элементов управления, например <codeph>fontSize</codeph> и <codeph>lineHeight</codeph>, используемые для вычисления высоты строк в пикселях.</p>
                   <p>Например, если вы хотите изменить высоту RichEditableText таким образом, чтобы отобразить 5 строк текста, установите это свойство на значение 5.</p>
                   <p>Если это свойство равно <codeph>NaN</codeph> (по умолчанию), то заданная по умолчанию высота компонента будет определена в соответствии с отображаемым текстом.</p>
          
          <p>Это свойство игнорируется, если устанавливаются явные значения высоты, процентные значения высоты или ограничения <codeph>top</codeph> и <codeph>bottom</codeph>.</p>
                   <p>Это свойство также будет проигнорировано, если указано свойство <codeph>typicalText</codeph>.</p>
         
          <p>Метод RichEditableText <codeph>measure()</codeph> использует <codeph>widthInChars</codeph> и <codeph>heightInLines</codeph> для определения <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph>. Эти свойства аналогичны <codeph>cols</codeph> и <codeph>rows</codeph> HTML TextArea.</p>
                   <p>Поскольку значение по умолчанию для <codeph>widthInChars</codeph> и <codeph>heightInLines</codeph> равно <codeph>NaN</codeph>, RichTextEditable по умолчанию автоматически изменяет размер: при отсутствии текста он имеет минимальное значение, которое увеличивается по ширине в процессе набора текста и по высоте при нажатии клавиши Enter для начала новой строки.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          Число пикселей, при котором текст прокручивается по горизонтали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Число пикселей, при котором текст прокручивается по горизонтали.
                   <p>Для прокрутки текста по горизонтали следует изменять <codeph>horizontalScrollPosition</codeph> от 0 до <codeph>contentWidth – width</codeph>.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:imeMode:get"><apiName>imeMode</apiName><shortdesc>
          Указывает режим IME (редактор методов ввода).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Указывает режим IME (редактор методов ввода). IME позволяет пользователям вводить текст на китайском, японском и корейском языках. Режим IME устанавливается при перемещении фокуса на элемент управления и возвращается к предыдущему значению при потере фокуса этим элементом управления.
                   <p>Класс flash.system.IMEConversionMode определяет константы для допустимых значений этого свойства. Можно также указать значение <codeph>null</codeph> и не указывать IME.</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:multiline:get"><apiName>multiline</apiName><shortdesc>
          Определяет, может ли пользователь вводить многострочный текст.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Определяет, может ли пользователь вводить многострочный текст.
                   <p>Если <codeph>true</codeph>, то при нажатии клавиши Enter начинается новый абзац. В случае значения <codeph>false</codeph> нажатие клавиши Enter не влияет на текст, однако при этом RichEditableText отправляет событие <codeph>enter</codeph>. Если вставить текст в RichEditableText с многострочным значением <codeph>false</codeph>, новые строки опускаются. </p>  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectable:get"><apiName>selectable</apiName><shortdesc>
          Флаг, показывающий, может ли содержимое выделяться мышью или с клавиатуры, если элемент управления имеет фокус клавиатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Флаг, показывающий, может ли содержимое выделяться мышью или с клавиатуры, если элемент управления имеет фокус клавиатуры.
                   <p>Разрешение на выделение текста позволяет скопировать его из элемента управления.</p>
                   <p>Данное свойство игнорируется, если значение свойства <codeph>labelFunction</codeph> равно <codeph>true</codeph>.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
          Позиция символа, относительно начала text String, определяющая конец выделения, перемещающийся при расширении выделения клавишами со стрелками.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          Позиция символа, относительно начала <codeph>text</codeph> String, определяющая конец выделения, перемещающийся при расширении выделения клавишами со стрелками.
                   <p>Активная позиция может служить как началом, так и концом выбора.</p>
                   <p>Например, если вы выделили текст мышью с позиции 12 до позиции 8, то <codeph>selectionAnchorPosition</codeph> будет равно 12, а <codeph>selectionActivePosition</codeph> будет равно 8, при этом нажатие клавиши со стрелкой влево приведет к изменению значения <codeph>selectionActivePosition</codeph> на 7.</p>
                   <p>Значение -1 означает not set.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
          Позиция символа, относительно начала text String, определяющая конец выделения, остающийся фиксированным при расширении выделения клавишами со стрелками.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          Позиция символа, относительно начала <codeph>text</codeph> String, определяющая конец выделения, остающийся фиксированным при расширении выделения клавишами со стрелками.
                   <p>Позиция привязки может быть как началом, так и концом выбора.</p>
                   <p>Например, если вы выделили текст мышью с позиции 12 до позиции 8, то <codeph>selectionAnchorPosition</codeph> будет равно 12, а <codeph>selectionActivePosition</codeph> будет равно 8, при этом нажатие клавиши со стрелкой влево приведет к изменению значения <codeph>selectionActivePosition</codeph> на 7.</p>
                   <p>Значение -1 означает not set.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
          Определяет момент подсветки текстового выделения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Определяет момент подсветки текстового выделения.
          
          <p>Допустимые значения определены в классе spark.components.TextSelectionHighlighting. Возможными значениями являются: <codeph>TextSelectionHighlighting.WHEN_FOCUSED</codeph>, <codeph>TextSelectionHighlighting.WHEN_ACTIVE</codeph> и <codeph>TextSelectionHighlighting.ALWAYS</codeph>.</p>
                   <p>Значение <codeph>WHEN_FOCUSED</codeph> показывает, что текстовое выделение отображается только в том случае, когда компонент имеет фокус клавиатуры.</p>
          
          <p>Значение <codeph>WHEN_ACTIVE</codeph> показывает отображение текстового выделения всякий раз, когда окно компонента является активным, даже если компонент не имеет фокуса клавиатуры.</p>
                   <p>Значение <codeph>ALWAYS</codeph> показывает отображение текстового выделения даже в тех случаях, когда компонент не имеет фокуса клавиатуры, а окно компонента не является активным.</p>
          
          </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#TextSelectionHighlighting"><linktext>spark.components.TextSelectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:showSystemCursor:get"><apiName>showSystemCursor</apiName><shortdesc>
          True, если системный указатель должен всегда отображаться при наведении курсора мыши на компонент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          True, если системный указатель должен всегда отображаться при наведении курсора мыши на компонент. Если false, будет отображен пользовательский курсор.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
          TextFlow представляет текст RTF, отображаемый данным компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
          TextFlow представляет текст RTF, отображаемый данным компонентом.
         
          <p>TextFlow является наиболее важным классом в Text Layout Framework (TLF). Этот класс является корнем дерева FlowElements, представляющего содержимое в формате RTF.</p>
                   <p>Обычно TextFlow создается из разметки TLF с использованием методов <codeph>TextFlowUtil.importFromString()</codeph> или <codeph>TextFlowUtil.importFromXML()</codeph>. В качестве альтернативы можно использовать класс TLF TextConverter (который может импортировать подгруппу HTML) или встроить TextFlow с помощью методов, например <codeph>addChild()</codeph>, в TextFlow.</p>
                   <p>Установка этого свойства влияет на свойство <codeph>text</codeph> и наоборот.</p>
                   <p>При установке <codeph>textFlow</codeph> и получении <codeph>text</codeph>, текст в каждом абзаце отделяется одной LF (\n).</p>
                   <p>При установке в качестве значения <codeph>text</codeph> String, например <codeph>Hello World</codeph>, и получения <codeph>textFlow</codeph>, TextFlow будет содержать отдельный ParagraphElement с отдельным SpanElement.</p>
                   <p>Если текст содержит явные переносы строк – CR (\r), LF (\n) или CR+LF (\r\n), то содержимое устанавливается на TextFlow, который содержит несколько абзацев, каждый с одним интервалом.</p>
                   <p>Установка этого свойства также влияет на свойства, определяющие позицию прокрутки элемента управления и текстовых выделений. Она сбрасывает <codeph>horizontalScrollPosition</codeph> и <codeph>verticalScrollPosition</codeph> на 0 и устанавливает <codeph>selectionAnchorPosition</codeph> и <codeph>selectionActivePosition</codeph> на -1 для очистки данного выделения.</p>
                   <p>Чтобы превратить объект TextFlow в разметку TLF, используйте разметку <codeph>TextFlowUtil.export()</codeph>.</p>
                   <p>К одному TextFlow невозможно выполнить доступ нескольких экземпляров RichEditableText. Для отображения того же текста во втором экземпляре необходимо создать второй TextFlow, либо с помощью <codeph>TextFlowUtil.export()</codeph> и <codeph>TextFlowUtil.importFromXML()</codeph>, либо используя метод <codeph>deepCopy()</codeph> в TextFlow.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:text:get"><apiName>text</apiName><shortdesc>
          Текстовая строка, отображаемая этим компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
                   </apiDefaultValue></apiValueDef><apiDesc>
          Текстовая строка, отображаемая этим компонентом.
                   <p>Установка этого свойства влияет на свойство <codeph>textFlow</codeph> и наоборот.</p>
                   <p>При установке в качестве значения <codeph>text</codeph> String, например <codeph>Hello World</codeph>, и получения <codeph>textFlow</codeph>, TextFlow будет содержать отдельный ParagraphElement с отдельным SpanElement.</p>
                   <p>Если для <codeph>text</codeph> установлено значение null, используется значение по умолчанию, которым является пустая строка.</p>
         
          <p>Если текст содержит явные переносы строк – CR (\r), LF (\n) или CR+LF (\r\n), то содержимое устанавливается на TextFlow, который содержит несколько абзацев, каждый с одним интервалом.</p>
                   <p>При установке <codeph>textFlow</codeph> и получении <codeph>text</codeph>, текст в каждом абзаце отделяется одной LF (\n).</p>
                   <p>Установка этого свойства также влияет на свойства, определяющие позицию прокрутки элемента управления и текстовых выделений. Оно обнуляет значения свойств <codeph>horizontalScrollPosition</codeph> и <codeph>verticalScrollPosition</codeph>. Начиная с Flex 4.6 сохраняются свойства <codeph>selectionAnchorPosition</codeph> и <codeph>selectionActivePosition</codeph>. Чтобы очистить выделенный фрагмент, в предыдущих версиях для свойств <codeph>selectionAnchorPosition</codeph> и <codeph>selectionActivePosition</codeph> устанавливалось значение -1.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:typicalText:get"><apiName>typicalText</apiName><shortdesc>
          Текст, который используется для определения стандартной ширины и высоты элемента управления без его фактического отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
                   </apiDefaultValue></apiValueDef><apiDesc>
          Текст, который используется для определения стандартной ширины и высоты элемента управления без его фактического отображения.
                   <p>Это свойство игнорируется, если устанавливаются явные значения ширины, процентные значения ширины или ограничения <codeph>left</codeph> и <codeph>right</codeph>.</p>
                   <p>Использование этого свойства приводит к тому, что свойства<codeph>widthInChars</codeph> и <codeph>heightInLines</codeph> игнорируются. </p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link><link href="" invalidHref="spark.primitives.widthInChars.xml"><linktext>spark.primitives.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          Число пикселей, при котором текст прокручивается по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Число пикселей, при котором текст прокручивается по вертикали.
                   <p>Для прокрутки текста по вертикали следует изменять <codeph>verticalScrollPosition</codeph> от 0 до <codeph>contentHeight – height</codeph>.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
          Ширина по умолчанию для элемента управления, измеренная в единицах em.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          Ширина по умолчанию для элемента управления, измеренная в единицах em.
                   <p>em – это типографская единица измерения, равная размеру одного пункта. Она не обязательно равна ширине символа M, однако во многих шрифтах символ M равен ширине одного em. Стиль элемента управления <codeph>fontSize</codeph> используется для вычисления единицы em в пикселях.</p>
                   <p>Например, если вы хотите изменить ширину RichEditableText таким образом, чтобы отобразить 20 текстовых символов, установите это свойство на значение 20.</p>
                   <p>Если это свойство равно <codeph>NaN</codeph> (по умолчанию), то заданная по умолчанию ширина компонента будет определена в соответствии с отображаемым текстом.</p>
                   <p>Это свойство игнорируется, если устанавливаются явные значения ширины, процентные значения ширины или ограничения <codeph>left</codeph> и <codeph>right</codeph>.</p>
                   <p>Это свойство также будет проигнорировано, если указано свойство <codeph>typicalText</codeph>.</p>
         
          <p>Метод RichEditableText <codeph>measure()</codeph> использует <codeph>widthInChars</codeph> и <codeph>heightInLines</codeph> для определения <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph>. Эти свойства аналогичны <codeph>cols</codeph> и <codeph>rows</codeph> HTML TextArea.</p>
                   <p>Поскольку значение по умолчанию для <codeph>widthInChars</codeph> и <codeph>heightInLines</codeph> равно <codeph>NaN</codeph>, RichTextEditable по умолчанию автоматически изменяет размер: при отсутствии текста он имеет минимальное значение, которое увеличивается по ширине в процессе набора текста и по высоте при нажатии клавиши Enter для начала новой строки.</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  Класс TitleWindow расширяет панель, включая кнопку закрытия и область перемещения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TitleWindow">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="inactiveWithControlBar" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  Неактивное состояние представлений с видимой панелью управления.
   </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="inactive" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  Неактивное состояние представлений используется для TitleWindow, когда этот элемент или все его нижестоящие элементы не находятся в фокусе.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="closeButton" owner="spark.components:TitleWindow" required="false" var_type="spark.components:Button">
<description>
      Элемент темы оформления, который определяет внешний вид значка закрытия (маленький x в верхнем правом углу строки заголовка TitleWindow). При нажатии значок закрытия отправляет событие <codeph>close</codeph>.
           <p>Flex не закрывает окно автоматически. Flex не закрывает окно автоматически. Для поддержки значка закрытия необходимо создать обработчик события <codeph>close</codeph> и закрыть TitleWindow из этого обработчика событий.</p>
           <p>Фокус отключен для этого элемента темы оформления.</p>
     </description>
	<shortdesc>
      The skin part that defines the appearance of the 
      close icon (a small x in the upper-right corner of the TitleWindow title bar).</shortdesc></SkinPart><SkinPart name="moveArea" owner="spark.components:TitleWindow" required="false" var_type="flash.display:InteractiveObject">
<description>
      Область, в которой пользователь должен щелкнуть и перетаскивать окно для перемещения. По умолчанию областью перемещения является строка заголовка контейнера TitleWindow.
           <p>Чтобы перетащить контейнер TitleWindow, нажмите и удерживайте курсор мыши в области строки заголовка окна, а затем переместите мышь. Создайте пользовательский класс темы оформления для изменения области перемещения.</p>
     </description>
	<shortdesc>
      The area where the user must click and drag to move the window.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:TitleWindow&gt;
    <strong>Events</strong>
    close="<i>No default</i>"
    windowMove="<i>No default</i>"
    windowMoveEnd="<i>No default</i>"
    windowMoveStart="<i>No default</i>"
    windowMoving="<i>No default</i>"
  &lt;/s:TitleWindow&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс TitleWindow расширяет панель, включая кнопку закрытия и область перемещения.
 
  <p>TitleWindow проектирован как всплывающее окно. Не создавайте TitleWindow в MXML как часть приложения. Как правило, создается пользовательский компонент MXML, основанный на классе TitleWindow, и затем используется метод <codeph>PopUpManager.createPopUp()</codeph> для отображения всплывающего компонента и метод <codeph>PopUpManager.removePopUp()</codeph> для удаления компонента.</p>
  
  <p>Контейнер TitleWindow имеет следующие характеристики размеров по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>Высота является достаточной для включения всех нижестоящих элементов в область содержимого с высотой по умолчанию или явной высотой, строки заголовка и границы, любого вертикального промежутка между нижестоящими элементами, а также для заполнения контейнера сверху и снизу. Ширина соответствует сумме наибольшего значения ширины по умолчанию или явного значения наиболее широкого нижестоящего элемента и заполнения правой и левой границ контейнера или ширины текста заголовка.</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.TitleWindowSkin</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext>spark.components.Panel</linktext></link><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext>spark.skins.spark.TitleWindowCloseButtonSkin</linktext></link><link href="" invalidHref="mx.managers.PopUpManager.xml"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><shortdesc>
  Отправляется, когда пользователь отпускает кнопку мыши после перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, когда пользователь отпускает кнопку мыши после перетаскивания.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><shortdesc>
  Отправляется после успешного перетаскивания окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после успешного перетаскивания окна.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><shortdesc>
  Отправляется при перетаскивании окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при перетаскивании окна.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><shortdesc>
  Отправляется, когда пользователь нажимает и удерживает кнопку мыши в области перемещения и начинает перетаскивание окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, когда пользователь нажимает и удерживает кнопку мыши в области перемещения и начинает перетаскивание окна.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Передается при нажатии пользователем кнопки закрытия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при нажатии пользователем кнопки закрытия.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TabBar"><apiName>TabBar</apiName><shortdesc>
  Класс TabBar отображает набор идентичных табуляторов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TabBar">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:TabBar" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Определяет радиус верхнего левого и верхнего правого углов кнопок TabBar для заданной по умолчанию темы оформления TabBarButton.
   </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:TabBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TabBar
    <b>Styles</b>
    cornerRadius="4"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс TabBar отображает набор идентичных табуляторов. Единовременно можно выбрать только одну вкладку, и первая вкладка выбрана по умолчанию. Класс TabBarSkin размещает табуляторы в горизонтальной строке. Стиль TabBar <codeph>cornerRadius</codeph> используется для конфигурации радиуса скругления табуляторов.
 
  <p>Набор табуляторов определяется свойством <codeph>dataProvider</codeph>. Внешний вид TabBar определяется классом TabBarSkin. Внешний вид каждой вкладки определяется классом TabBarButtonSkin.</p>
   <p>Можно использовать элемент управления TabBar, чтобы установить активный нижестоящий элемент контейнера ViewStack, как показано в следующем примере:</p>
   <p><b>Примечание. </b>Элементы управления Spark на основе списка (класс Spark ListBase и его подклассы, такие как ButtonBar, ComboBox, DropDownList, List и TabBar) не поддерживают класс BasicLayout в качестве значения свойства <codeph>layout</codeph>. Не следует использовать BasicLayout с элементами управления Spark на основе списка.</p>
  
  <pre>
  &lt;s:TabBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
   <p>Контейнер TabBar имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить табуляторы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="TabBarExample.mxml"><swfblock conref="examples/TabBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext>spark.skins.spark.TabBarSkin</linktext></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext>spark.skins.spark.TabBarButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  Компонент RadioButton позволяет пользователю осуществить единичный выбор в наборе взаимоисключающих выборов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:RadioButton" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:RadioButton" playerVersion="Flash10" theme="mobile" type="String">
<description>
  Ориентация значка по отношению к метке. Допустимыми значениями в MXML являются <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> и <codeph>top</codeph>.
 
  <p>В ActionScript для установки значения этого свойства используются следующие константы: <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> и <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButton
    <strong>Properties</strong>
    enabled=""
    group="<i>the automatically created default RadioButtonGroup</i>"
    groupName="radioGroup"
    value="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент RadioButton позволяет пользователю осуществить единичный выбор в наборе взаимоисключающих выборов. Группа RadioButtonGroup состоит из двух или более компонентов RadioButton с одним и тем же свойством <codeph>groupName</codeph>. Хотя группировка экземпляров RadioButton в RadioButtonGroup является необязательной, группа позволяет выполнять такие действия, как установка отдельного обработчика событий сразу на группу RadioButton, а не на каждую RadioButton в отдельности.
 
  <p>Группа RadioButton может ссылаться на группу, созданную тегом <codeph>&lt;s:RadioButtonGroup></codeph>. В конкретный момент времени пользователь выбирает только один элемент группы. Выделение невыбранного элемента группы отменяет выделение текущего выбранного компонента RadioButton в этой группе.</p>
 
  <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
 
  <p>Компонент RadioButton по умолчанию имеет характеристики, перечисленные ниже.</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>Имеет достаточную ширину для отображения текстовой метки компонента</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>18 пикселей в ширину и 18 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.RadioButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link><link href="spark.skins.spark.xml#RadioButtonSkin"><linktext>spark.skins.spark.RadioButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RadioButton:enabled:get"><apiName>enabled</apiName><shortdesc>
      Компонент RadioButton активирован в том случае, если активирована группа RadioButtonGroup и элемент RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Компонент RadioButton активирован в том случае, если активирована группа RadioButtonGroup и элемент RadioButton.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      Указывает имя группы, к которой принадлежит этот компонент RadioButton, или указывает значение свойства id компонента RadioButtonGroup, если этот RadioButton является компонентом группы, определенной компонентом RadioButtonGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"radioGroup"
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает имя группы, к которой принадлежит этот компонент RadioButton, или указывает значение свойства <codeph>id</codeph> компонента RadioButtonGroup, если этот RadioButton является компонентом группы, определенной компонентом RadioButtonGroup. Все переключатели с одинаковым свойством <codeph>groupName</codeph> находятся в одной группе вкладок.
     
      <p>При создании переключателей для добавления в RadioButtonGroup мы рекомендуем использовать для всех кнопок свойства <codeph>group</codeph> или <codeph>groupName</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/group"><linktext>группа</linktext></link><link href="" invalidHref="mx.manager.xml#IFocusManagerGroup/groupName"><linktext>mx.manager.IFocusManagerGroup.groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      Компонент RadioButtonGroup, к которому принадлежит элемент управления RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButtonGroup</apiValueClassifier><apiDefaultValue>the automatically created default RadioButtonGroup
      </apiDefaultValue></apiValueDef><apiDesc>
      Компонент RadioButtonGroup, к которому принадлежит элемент управления RadioButton. При создании RadioButton для добавления в RadioButtonGroup необходимо использовать для всех кнопок свойства <codeph>group</codeph> или <codeph>groupName</codeph>.
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/groupName"><linktext>groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      Дополнительное определяемое пользователем значение, связанное с компонентом RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Дополнительное определяемое пользователем значение, связанное с компонентом RadioButton.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
  Класс ButtonBarButton определяет пользовательское средство визуализации элементов, используемое элементом управления ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:ToggleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ButtonBarButton определяет пользовательское средство визуализации элементов, используемое элементом управления ButtonBar. Это средство визуализации элементов используется в классе ButtonBarSkin, тема оформления используется по умолчанию для ButtonBar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><adobeApiEvent id="spark.components:ButtonBarButton_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Передается при изменении свойства data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении свойства<codeph>data</codeph>.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:ButtonBarButton:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ButtonBarButton:allowDeselection:get"><apiName>allowDeselection</apiName><shortdesc>
      Если true, выделение снимается щелчком мыши по выбранной в настоящий момент кнопке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>true</codeph>, выделение снимается щелчком мыши по выбранной в настоящий момент кнопке. Если <codeph>false</codeph>, пользователь должен выбрать другую кнопку, чтобы снять выделение с выбранной в настоящий момент кнопки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:data:get"><apiName>data</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:ButtonBarButton:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      Индекс элемента в поставщике данных основного компонента визуализатора элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Индекс элемента в поставщике данных основного компонента визуализатора элемента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:label:get"><apiName>label</apiName><shortdesc>
      
      String для отображения в средстве визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      String для отображения в средстве визуализации. 
     
      <p>Компонент хоста средства визуализации элемента может использовать метод <codeph>itemToLabel()</codeph> для преобразования элемента данных в строку дисплея с помощью средства визуализации элемента. </p>
     
      <p>Для элементов управления, таких как List и ButtonBar, можно использовать свойства <codeph>labelField</codeph> или <codeph>labelFunction</codeph> для указания поля элемента данных, содержащего строку. В других случаях компонент хоста использует метод <codeph>toString()</codeph> для преобразования элемента данных в строку. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Имеет значение true, если средство визуализации элементов может отображаться как находящееся в фокусе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Имеет значение <codeph>true</codeph>, если средство визуализации элементов может отображаться как находящееся в фокусе. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Panel"><apiName>Panel</apiName><shortdesc>
  Класс Panel определяет контейнер, включающий строку заголовка, подпись, границу и область содержимого для его нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Panel">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabledWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Отключенное состояние с ControlBar панели
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Нормальное состояние с ControlBar панели
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Отключенное состояние панели
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Нормальное состояние панели
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Управляет видимостью тени для этого компонента.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Радиус углов данного компонента.
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Управляет видимостью границы для этого компонента.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет границы для данного компонента.
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал границы для данного компонента.
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Часть темы оформления, которая определяет внешний вид панели управления контейнера. По умолчанию класс PanelSkin определяет, что область панели управления должна появляться на сером фоне в нижней части области содержимого контейнера Panel. 
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Элемент темы оформления, определяющий внешний вид текста заголовка в контейнере.
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:Panel
   <strong>Properties</strong>
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    title=""
 
   <strong>Styles</strong>
    borderAlpha="0.5"
    borderColor="0"
    borderVisible="true"
    cornerRadius="0"
    dropShadowVisible="true"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/s:Panel&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Panel определяет контейнер, включающий строку заголовка, подпись, границу и область содержимого для его нижестоящих элементов.
   <p>Контейнер Panel имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>131 пикселей в ширину и 127 пикселей в высоту</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="PanelExample.mxml"><swfblock conref="examples/PanelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links><apiConstructor id="spark.components:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Panel:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Набор компонентов для включения в область панели управления контейнера Panel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Набор компонентов для включения в область панели управления контейнера Panel. Местоположение и внешний вид области панели управления контейнера Panel определены классом spark.skins.spark.PanelSkin. По умолчанию класс PanelSkin определяет, что область панели управления должна появляться на сером фоне в нижней части области содержимого контейнера Panel. Создает пользовательскую тему оформления для изменения внешнего вида панели управления по умолчанию.
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Panel:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      Определяет макет области панели управления контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет макет области панели управления контейнера.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      Если установлено значение true, то панель управления отображается.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если установлено значение <codeph>true</codeph>, то панель управления отображается. Этот флаг не оказывает влияние, если для свойства <codeph>controlBarContent</codeph> не задано значение.
           <p><b>Примечание. </b>Контейнер Panel не отслеживает свойство <codeph>controlBarGroup</codeph>. Если другой код делает его невидимым, при обновлении контейнера Panel может возникнуть ошибка.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:title:get"><apiName>title</apiName><shortdesc>
      Заголовок или подпись в строке заголовка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Заголовок или подпись в строке заголовка. 
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HGroup"><apiName>HGroup</apiName><shortdesc>
  Контейнер HGroup является экземпляром контейнера Group, использующего класс HorizontalLayout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:HGroup
    <strong>Properties</strong>
    columnWidth="no default"
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount="-1"
    requestedMaxColumnCount="-1"
    requestedMinColumnCount="-1"
    variableColumnWidth"true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер HGroup является экземпляром контейнера Group, использующего класс HorizontalLayout. Не следует изменять свойство <codeph>layout</codeph>. вместо этого следует использовать свойства класса HGroup для изменения характеристик класса HorizontalLayout.
 
  <p>Контейнер HGroup имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HGroupExample.mxml"><swfblock conref="examples/HGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#HorizontalLayout"><linktext>spark.layouts.HorizontalLayout</linktext></link></related-links><apiConstructor id="spark.components:HGroup:HGroup"><apiName>HGroup</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. Инициализирует свойство <codeph>layout</codeph> к экземпляру класса HorizontalLayout.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="spark.layout.HorizontalLayout.xml"><linktext>spark.layout.HorizontalLayout</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:HGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.HorizontalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMaxColumnCount:get"><apiName>requestedMaxColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:variableColumnWidth:get"><apiName>variableColumnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRendererOwner"><apiName>IItemRendererOwner</apiName><shortdesc>
  Интерфейс IItemRendererOwner определяет основной набор API-интерфейсов, который должен быть реализован классом для поддержки средств визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IItemRendererOwner определяет основной набор API-интерфейсов, который должен быть реализован классом для поддержки средств визуализации. Класс, реализующий интерфейс IItemRendererOwner, называется компонентом хоста для средства визуализации.
  
  <p>Класс, определяющий средство визуализации должен обеспечивать реализацию интерфейса IItemRenderer.</p> 
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link></related-links><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Возвращает строку для отображения в средстве визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Строка для отображения в средстве визуализации.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент данных для отображения.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает строку для отображения в средстве визуализации. Строка записывается в свойство <codeph>labelText</codeph> средства визуализации.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      Обновляет средство визуализации для повторного использования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Средство визуализации элементов.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Индекс данных в поставщике данных.
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Объект данных, который представляет это средство визуализации элемента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обновляет средство визуализации для повторного использования. При этом методе средство визуализации сначала подготавливается для повторного использования через удаление любых устаревших свойств, а также их замену на новые свойства.
     
      <p>И, наконец, данный метод определяет свойство <codeph>data</codeph> для средства визуализации элемента.</p>    
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:FormItem"><apiName>FormItem</apiName><shortdesc>
  Контейнер FormItem определяет следующие элементы Spark Form: одну метку. Метка последовательности. Один или несколько нижестоящих элементов управления или контейнеров. Содержимое справки, предоставляющее описание элемента формы или инструкции по его заполнению. Индикатор, указывающий на необходимость заполнения элемента формы. Нижестоящие элементы могут быть элементами управления или другими контейнерами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="errorIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  Указывает источник изображения для использования с индикатором ошибки. Значение по умолчанию - "assets/ErrorIndicator.png".
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="requiredIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  Указывает источник изображения для использования с требуемым индикатором. Значение по умолчанию - "assets/RequiredIndicator.png".
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
       Ссылка на визуальный элемент, который отображает метку этого объекта FormItem.
     </description>
	<shortdesc>
       A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart><SkinPart name="sequenceLabelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      Ссылка на визуальный элемент, который отображает sequenceLabel объекта FormItem.
     </description>
	<shortdesc>
      A reference to the visual element that displays the FormItem's sequenceLabel.</shortdesc></SkinPart><SkinPart name="helpContentGroup" owner="spark.components:FormItem" required="false" var_type="spark.components:Group">
<description>
      Ссылка на группу, в которой содержится helpContentGroup объекта FormItem.
     </description>
	<shortdesc>
      A reference to the Group that contains the FormItem's helpContentGroup.</shortdesc></SkinPart><SkinPart name="errorTextDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      Ссылка на визуальный элемент, который отображает строки ошибки FormItem.
     </description>
	<shortdesc>
      A reference to the visual element that display the FormItem's error strings.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormItem&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormItem
    <strong>Properties</strong>
    helpContent="null"
    label=""
    required="false"
    sequenceLabel=""
  
    <strong>Common Styles</strong>
    errorIndicatorSource="assets/ErrorIndicator.png"
    requiredIndicatorSource="assets/RequiredIndicator.png"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер FormItem определяет следующие элементы Spark Form: 
 
  <ul>
    <li>Отдельная метка.</li>
    <li>Метка последовательности.</li>
    <li>Один или несколько нижестоящих элементов управления или контейнеров. </li>
    <li>Содержимое справки, предоставляющее описание элемента формы или инструкции по его заполнению. </li>
    <li>Индикатор, указывающий на необходимость заполнения элемента формы.</li>
  </ul>
 
  Нижестоящие элементы могут являться элементами управления или другими контейнерами. Один контейнер Form может включать несколько контейнеров FormItem. По умолчанию все элементы FormItem расположены горизонтально, при этом метка расположена слева, а содержимое справки - справа.
 
  </apiDesc><example conref="FormItemExample.mxml"><swfblock conref="examples/FormItemExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormItemSkin"><linktext>spark.skins.spark.FormItemSkin</linktext></link></related-links><apiConstructor id="spark.components:FormItem:FormItem"><apiName>FormItem</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:FormItem:protected:updateErrorTextDisplay"><apiName>updateErrorTextDisplay</apiName><shortdesc>
      Преображает elementErrorStrings в String и присваивает этот String компоненту темы оформления errorTextDisplay для отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Преобразовывает <codeph>elementErrorStrings</codeph> в String и присваивает этот String компоненту темы оформления <codeph>errorTextDisplay</codeph> для отображения. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:FormItem:elementErrorStrings:get"><apiName>elementErrorStrings</apiName><shortdesc>
      Каждый элемент Vector содержит строку ошибки из элемента содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc>
      Каждый элемент Vector содержит строку ошибки из элемента содержимого. Если все элементы содержимого являются действительными, то вектор будет пустым. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:helpContent:get"><apiName>helpContent</apiName><shortdesc> 
      Набор компонентов для включения в область содержимого справки FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="helpContentChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Набор компонентов для включения в область содержимого справки FormItem.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:label:get"><apiName>label</apiName><shortdesc>
      Текстовая метка для FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текстовая метка для FormItem. Например, FormItem, с помощью которого вводится адрес, может содержать метку Address.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:required:get"><apiName>required</apiName><shortdesc>
      Если true, помещает тему оформления FormItem в состояние required.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="requiredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>true</codeph>, помещает тему оформления FormItem в состояние <codeph>required</codeph>. По умолчанию это состояние отображает индикатор, указывающий, что для нижестоящих элементов FormItem требуется ввод данных пользователем. Если указано значение <codeph>false</codeph>, индикатор не отображается.
     
      <p>Это свойство управляет только состоянием темы оформления. Если необходимо проверить правильность введенных данных, добавьте соответствующее средство проверки в нижестоящий элемент.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:sequenceLabel:get"><apiName>sequenceLabel</apiName><shortdesc>
      Номер элемента формы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sequenceLabelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Номер элемента формы. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
  Класс SkinnableContainer является базовым классом для контейнеров тем оформления с визуальным содержимым.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Альфа-канал теней текста.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Цвет теней текста.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет фона компонента.
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Уровень альфа-канала фона данного компонента. Допустимыми являются значения от 0,0 до 1,0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Цвет текста активированного компонента, когда фокус на него не наведен.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Цвет текста при выключенном компоненте.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Цвет текста, когда компонент включен и получает фокус.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.5" type="Object">
<description>
  Указывает межсловные интервалы для использования при выравнивании. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Указывает число градусов для поворота данного текста.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера.
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textIndent; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Указывает позиции табуляции, связанные с абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для левого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен перед абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен после абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для правого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Управляет внешним видом элементов списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Управляет размещением маркера элемента списка относительно элемента списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Определяет автоотступ начального края списков, если значением заполнения этой стороны списка является <codeph>auto</codeph>.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Указывает позицию базовой линии первой строки в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Определяет тип обтекания текста вокруг плавающего объекта.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Управляет местом разрыва строк при форматировании текста по размеру окна. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Определяет вертикальное или горизонтальное размещение строки.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="contentGroup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Дополнительный элемент темы оформления, определяющий Group, в которой нижестоящие элементы содержимого помещаются в вышестоящие элементы или располагаются в них.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the Group where the content 
      children get pushed into and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableContainer
    <strong>Properties</strong>
    autoLayout="true"
    creationPolicy="auto"
    layout="BasicLayout"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors=""
    backgroundAlpha="1.0"
    backgroundColor="0xFFFFFF"
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="0xE8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
   
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SkinnableContainer является базовым классом для контейнеров тем оформления с визуальным содержимым. Контейнер SkinnableContainer считает нижестоящими любые компоненты, реализующие интерфейс IVisualElement. Все компоненты Spark и Halo реализуют интерфейс IVisualElement, также как и класс GraphicElement. Это означает, что контейнер может использовать классы Graphics, например Rect и Ellipse в качестве нижестоящих элементов.
 
  <p>Для повышения производительности и минимизации размеров приложений используется контейнер группы. Контейнер группы не может иметь оболочки.</p>
 
  <p>Контейнер SkinnableContainer имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableContainerExample.mxml"><swfblock conref="examples/SkinnableContainerExample.swf"/></example><example conref="MyBorderSkin.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>Группа</linktext></link><link href="spark.skins.spark.xml#SkinnableContainerSkin"><linktext>spark.skins.spark.SkinnableContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  Отправляется при удалении визуального элемента из держателя содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при удалении визуального элемента из держателя содержимого. <codeph>event.element</codeph> является удаляемым визуальным элементом.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  Отправляется при добавлении визуального элемента в держатель содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при добавлении визуального элемента в держатель содержимого. <codeph>event.element</codeph> является добавленным визуальным элементом.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  Отправляется после создания содержимого этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после создания содержимого этого компонента. В случае отложенной реализации содержимое компонента может быть создано намного позже создания самого компонента.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableContainer:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Создайте нижестоящие элементы содержимого, если свойство creationPolicy не равно none.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Создайте нижестоящие элементы содержимого, если свойство <codeph>creationPolicy</codeph> не равно <codeph>none</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Создайте содержимое этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Создайте содержимое этого компонента. Если свойство <codeph>creationPolicy</codeph> имеет значение <codeph>auto</codeph> или <codeph>all</codeph>, эта функция в инфраструктуре Flex вызывается автоматически. Если <codeph>creationPolicy</codeph> имеет значение <codeph>none</codeph>, этот метод вызывается для инициализации содержимого.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      
      Вызывается при добавлении компонента темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Имя компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Экземпляр компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Вызывается при добавлении компонента темы оформления. Этот метод не вызывается напрямую. Для статических компонентов Flex вызывает его автоматически при вызове метода <codeph>attachSkin()</codeph>. Для динамических компонентов Flex вызывает его автоматически при вызове метода <codeph>createDynamicPartInstance()</codeph>. 
     
      <p>Измените эту функцию для присоединения вариантов поведения компоненту темы. Если требуется изменить варианты поведения компонента темы оформления, унаследованные от базового класса, не вызывайте метод <codeph>super.partAdded()</codeph>. В других случаях следует всегда вызывать метод <codeph>super.partAdded()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      Вызывается при удалении экземпляра компонента темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Имя компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Экземпляр компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Вызывается при удалении экземпляра компонента темы оформления. Этот метод не вызывается напрямую. Для статических компонентов Flex вызывает его автоматически при вызове метода <codeph>detachSkin()</codeph>. Для динамических компонентов Flex вызывает его автоматически при вызове метода <codeph>removeDynamicPartInstance()</codeph>. 
     
      <p>Измените эту функцию для удаления вариантов поведения из компонента.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SkinnableContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      Содержит значение true, если отложенное содержимое было создано.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Содержит значение <codeph>true</codeph>, если отложенное содержимое было создано.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContentFactory:set"><apiName>mxmlContentFactory</apiName><shortdesc>
      Заводской объект, создающий начальное значение свойства содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IDeferredInstance"/></apiValueDef><apiDesc>
      Заводской объект, создающий начальное значение свойства <codeph>content</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc conref="spark.components.Group#mxmlContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc conref="spark.components.Group#mxmlContent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichText"><apiName>RichText</apiName><shortdesc>
  RichText является компонентом UIComponent нижнего уровня, который может отображать одну или более строк текста RTF и встроенные изображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style inherit="no" name="columnWidth" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Ширина столбца в пикселях. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.columnWidth.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Величина промежутка между столбцами в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.columnGap.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Число столбцов текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.columnCount.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichText" playerVersion="Flash10.5" type="Object">
<description>
  Указывает межсловные интервалы для использования при выравнивании. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Указывает число градусов для поворота данного текста.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера.
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textIndent; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Указывает позиции табуляции, связанные с абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для левого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен перед абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен после абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для правого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Управляет внешним видом элементов списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Управляет размещением маркера элемента списка относительно элемента списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Определяет автоотступ начального края списков, если значением заполнения этой стороны списка является <codeph>auto</codeph>.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Указывает позицию базовой линии первой строки в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Определяет тип обтекания текста вокруг плавающего объекта.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Управляет местом разрыва строк при форматировании текста по размеру окна. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Определяет вертикальное или горизонтальное размещение строки.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Выравнивание по вертикали или ширине.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Отступ сверху в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Отступ справа в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Отступ слева в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Отступ снизу в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Определяет перенос слов в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichText" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichText" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RichText&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RichText
    <strong>Properties</strong>
    fontContext="<i>IFlexModuleFactory</i>"
    luminosityClip="false"
    luminosityInvert="false"
    maskType="MaskType.CLIP"
    textFlow="<i>TextFlow</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichText является компонентом UIComponent нижнего уровня, который может отображать одну или более строк текста RTF и встроенные изображения.
 
  <p>По причинам производительности он не поддерживает прокрутку, выделение, редактирование, переходы по гиперссылкам и загрузку изображений с URL-адресов. Если вам требуются эти возможности, используйте класс RichEditableText.</p>
 
  <p>RichText использует библиотеку Text Layout Framework (TLF), построенную, в свою очередь, на движке Flash Text Engine (FTE) в Flash Player 10. Вместе они позволяют работать в макете RTF, используя высококачественную международную типографику. </p>
 
  <p>Архитектура Spark обеспечивает три текстовых примитива -- Label, RichText и RichEditableText. Label является наиболее быстрым и облегченным из «примитивов», поскольку использует только FTE, а не TLF, однако при этом он ограничен: нет возможности использования текста RTF, прокрутки, выделения и редактирования. RichText добавляет возможность отображения текста RTF со сложным макетом, однако является полностью неинтерактивным. RichEditableText является самым «тяжелым», но предлагает большую часть возможностей, доступных в TLF. Мы рекомендуем использовать наиболее легкий «примитив» из тех, которые удовлетворяет вашим потребностям.</p>
 
  <p>RichText похож на элемент управления MX mx.controls.Text. В элементе управления Text для отображения текста используется предыдущий класс TextField, а не TLF.</p>
 
  <p>Наиболее важные различия между RichText и Text:
  <ul>
    <li>RichText предлагает пользователям лучшую типографику, лучшую языковую поддержку и лучшее макетирование текста.</li>
    <li>RichText имеет объектно-ориентированную модель отображения, в то время как Text таковой не имеет.</li>
    <li>В Text можно выполнять выделение текста, чего нельзя сделать в RichText.</li>
  </ul></p>
 
  <p>RichText использует объектно-ориентированную модель TLF текста RTF, в которой элементы текстового макета, такие как разделы, абзацы, интервалы и изображения, представлены в среде выполнения объектами ActionScript, к которым можно получить доступ и манипулировать программными средствами. Центральным объектом в TLF для представления текста RTF является TextFlow, таким образом вы определяете текст RTF для отображения его с помощью RichText, устанавливая его свойство <codeph>textFlow</codeph> для экземпляра TextFlow. (Подробные сведения о создании свойства <codeph>textFlow</codeph> см. в его описании.) Также можно установить свойство <codeph>text</codeph>, наследуемое из TextBase, однако если все возможности TextFlow вам не требуются, используйте вместо него Label.</p>
 
  <p>Во время компиляции можно поместить теги разметки TLF в тег RichText, как показано в следующем примере:
  <pre>
  &lt;s:RichText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichText>
  </pre>
  В этом случае компилятор MXML устанавливает свойство <codeph>content</codeph>, инициируя автоматическое создание объекта TextFlow из определенного вами элемента FlowElements.</p>
 
  <p>Форматирование текста по умолчанию определено стилями CSS, например <codeph>fontFamily</codeph> и <codeph>fontSize</codeph>. Любая информация по форматированию в TextFlow переопределяет заданное по умолчанию форматирование, определенное в таблице стилей CSS.</p>
 
  <p>Управление межстрочными интервалами выполняется с помощью стиля <codeph>lineHeight</codeph>, а интервалами между абзацами – с помощью стилей <codeph>paragraphSpaceBefore</codeph> и <codeph>paragraphSpaceAfter</codeph>. Выровнять текст можно с помощью стилей <codeph>textAlign</codeph> и <codeph>textAlignLast</codeph>. Создать отступ от краев компонента можно с помощью стилей <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> и <codeph>paddingBottom</codeph>.</p>
 
  <p>Если вы не определили тип ширины для RichText, то ширина Label определяется самой длинной строкой посредством явного переноса строк.</p>
 
  <p>Если ширина определена, текст обтекает компонент по правому краю, при этом, если весь текст не вмещается, он будет отсечен. Если значение стиля <codeph>lineBreak</codeph> установлено на <codeph>explicit</codeph>, новые строки будут начинаться только с позиций явного переноса строк, например CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) или CR+LF (<codeph>\r\n</codeph>) в <codeph>text</codeph> или <codeph>&lt;p></codeph> и <codeph>&lt;br/></codeph> в разметке TLF. В этом случае строки, которые шире элемента управления, будут отсечены.</p>
 
  <p>Если у вас текста больше, чем пространства для его отображения, RichText усечет текст. Усечение текста означает замену избыточного текста индикатором усечения, например «...». См. наследованные свойства <codeph>maxDisplayedLines</codeph> и <codeph>isTruncated</codeph>.</p>
 
  <p>По умолчанию у RichText нет фона, однако его можно создать с помощью стилей <codeph>backgroundColor</codeph> и <codeph>backgroundAlpha</codeph>. Границы не поддерживаются. При необходимости создания границы или более сложного фона используйте отдельные графические элементы, например Rect, позади RichText.</p>
 
  <p>Поскольку RichText использует TLF, он поддерживает текст, написанный слева направо (LTR) (например, по-французски), справа налево (RTL) (например, по-арабски), а также в двух направлениях одновременно (например, предложения на французском языке в тексте на арабском). Если основным является направление текста справа налево, установите для стиля <codeph>direction</codeph> значение <codeph>rtl</codeph>. По умолчанию стиль <codeph>textAlign</codeph> имеет значение <codeph>"start"</codeph>, благодаря чему текст выравнивается по левому краю, если значение <codeph>direction</codeph> равно <codeph>ltr</codeph>, и по правому краю, если <codeph>direction</codeph> равно <codeph>rtl</codeph>. Чтобы выровнять текст по противоположному краю, установите для <codeph>textAlign</codeph> значение <codeph>end</codeph>.</p>
 
  <p>RichText использует классы TLF StringTextFlowFactory и TextFlowTextLineFactory для создания одного или нескольких объектов TextLine, чтобы статически отобразить его текст. В целях производительности TextLine не содержит информации об отдельных глифах; более подробно описано в разделе класса TextLineValidity.</p>
 
  <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
  
  </apiDesc><example conref="RichTextExample.mxml"><swfblock conref="examples/RichTextExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="flash.text.engine.TextLineValidity.xml"><linktext>flash.text.engine.TextLineValidity</linktext></link></related-links><apiConstructor id="spark.components:RichText:RichText"><apiName>RichText</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RichText:content:get"><apiName>content</apiName><shortdesc>
      Данное свойство предназначено для использования в MXML во время компиляции; для получения или установки содержимого в формате RTF во время выполнения используйте вместо него свойство textFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Данное свойство предназначено для использования в MXML во время компиляции; для получения или установки содержимого в формате RTF во время выполнения используйте вместо него свойство <codeph>textFlow</codeph>.
     
      <p>Свойство <codeph>content</codeph> является свойством по умолчанию для RichText, поэтому можно писать код MXML, например 
      <pre>
      &lt;s:RichText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichText>
      </pre>
      имея String и SpanElement, определяемые в качестве содержимого, которое используется при создании TextFlow.</p>
     
      <p>Это свойство отмечено как Object, поскольку оно может быть установлено как String, FlowElement или как массив String и FlowElement. В вышеприведенном примере содержимое является двухэлементным массивом, первым элементом которого является строка Hello, а вторым элементом – объект SpanElement, содержащий текст World в полужирном начертании.</p>
     
      <p>Независимо от определения содержимого оно преобразуется в объект TextFlow, поэтому при получении данного свойства вы получаете и результирующий TextFlow.</p>
     
      <p>Adobe рекомендует использовать свойство <codeph>textFlow</codeph> для получения и установки содержимого в формате RTF во время выполнения, поскольку это свойство явно назначает тип TextFlow, а не Object. TextFlow является традиционным представлением для содержимого в формате RTF в Text Layout Framework.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      Свойство, управляющее тем, будет ли маска свечения отсекать маскируемое содержимое.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство, управляющее тем, будет ли маска свечения отсекать маскируемое содержимое. Это свойство может иметь эффект только в том случае, если к графическому элементу применена маска типа <codeph>MaskType.LUMINOSITY</codeph>.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      Свойство, управляющее вычислением значения цветов RGB графического элемента, использующего маску свечения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство, управляющее вычислением значения цветов RGB графического элемента, использующего маску свечения. Если true, значение цвета RGB пиксела в исходном содержимом инвертируется и умножается на соответствующую область в маске. Если false, значение цвета RGB пикселя исходного содержимого используется непосредственно. 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:maskType:get"><apiName>maskType</apiName><shortdesc>
      maskType определяет, как маска применяется к компоненту. Возможными значениями являются MaskType.CLIP, MaskType.ALPHA и MaskType.LUMINOSITY. Обрезка по маске. Если маскирование находится в режиме обрезки, обрезочные маски уменьшаются до однобитовых.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>maskType определяет, как маска применяется к компоненту.</p> 
     
      <p>Возможными значениями являются <codeph>MaskType.CLIP</codeph>, <codeph>MaskType.ALPHA</codeph> и <codeph>MaskType.LUMINOSITY</codeph>.</p>  
     
      <p><b>Обрезка по маске</b></p>
     
      <p>Если маскирование находится в режиме обрезки, обрезочные маски уменьшаются до однобитовых. Это означает, что маска не будет влиять на непрозрачность пикселей в исходном содержимом; она либо оставит значение без изменения (если соответствующий пиксель в маске имеет ненулевое значение альфа-канала), либо сделает его полностью прозрачным (если пиксель маски имеет нулевое значение альфа-канала).</p>
     
      <p>При обрезке по маске для достижения эффекта в исходном содержимом используются только фактические векторы кривых и фигур, а также заливки, определенные маской. обводки и растровые фильтры, определенные в маске, игнорируются. Любая заполненная область в маске считается заполненной и визуализирует исходное содержимое. Тип и параметры заливки не являются релевантными; сплошная, градиентная или растровая заливки выполняют визуализацию основного исходного содержимого независимо от значений альфа-канала заливки маски.</p>
      
      <p>При использовании в обрезочной маске BitmapGraphics обрабатываются как прямоугольники с растровой заливкой. В результате при включении исходного растрового изображения в маску его альфа-канал становится нерелевантным: растровое изображение становится для маски эквивалентным прямоугольнику со сплошной заливкой того же размера.</p>
     
      <p><b>Альфа-маскирование</b></p>
     
      <p>В режиме альфа-маскирования непрозрачность каждого пиксела в исходном содержимом умножается на непрозрачность соответствующей области маски. т. е. пиксель исходного содержимого с непрозрачностью 1, маскированный областью с непрозрачностью 0,5, получит в результате непрозрачность 0,5. Исходный пиксель с непрозрачностью 0,8, маскированный областью с непрозрачностью 0,5, получит в результате непрозрачность 0,4.</p>
     
      <p>В общем и целом альфа-маскирование эквивалентно визуализации преобразованной маски и исходного содержимого в отдельное пространство RGBA и умножению альфа-канала содержимого маски на альфа-канал исходного содержимого. Все содержимое маски визуализируется на ее поверхности перед созданием поверхности исходного содержимого. В результате на окончательное комбинированное содержимое влияют все функции FXG, например обводки, растровые фильтры и непрозрачность заливки.</p>
     
      <p>При работе в альфа-режиме альфа-канал любых растровых данных обычно комбинируется в альфа-канале маски, что влияет на конечное визуализированное содержимое. То же самое верно как для BitmapGraphics, так и для векторов и фигур с растровой заливкой.</p>
     
      <p><b>Маскирование свечения</b></p>
     
      <p>Маска свечения, иногда называемая «мягкой маской», действует аналогично маске альфа-канала, за исключением того, что как непрозрачность, так и значение цвета RGB пикселя в исходном содержимом умножаются на непрозрачность и значение цвета RGB в соответствующей области в маске.</p>
     
      <p>В общем и целом маскирование свечения эквивалентно визуализации преобразованной маски и исходного содержимого в отдельное пространство RGBA и умножению альфа-канала и значения цвета RGB содержимого маски на альфа-канал и значение цвета RGB исходного содержимого. Все содержимое маски визуализируется на ее поверхности перед созданием поверхности исходного содержимого. В результате на окончательное комбинированное содержимое влияют все функции FXG, например обводки, растровые фильтры и непрозрачность заливки.</p>
     
      <p>Маскирование свечения не принадлежит Flash, но распространено в таких инструментах Adobe Creative Suite, как Adobe Illustrator и Adobe Photoshop. Чтобы выполнить визуальный эффект маски свечения в содержимом, визуализируемом в Flash, графический элемент, определяющий маску свечения, фактически создает экземпляр фильтра затенения, который имитирует визуальный вид маски свечения, как если бы он был выполнен посредством инструментов Adobe Creative Suite.</p>
     
      <p>Объекты, к которым применяются маски свечения, могут установить свойства для управления значением цвета RGB и обрезкой маски. См. атрибуты luminosityInvert и luminosityClip.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      TextFlow представляет текст RTF, отображаемый данным компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      TextFlow представляет текст RTF, отображаемый данным компонентом.
     
      <p>TextFlow является наиболее важным классом в Text Layout Framework (TLF). Этот класс является корнем дерева FlowElements, представляющего содержимое в формате RTF.</p>
     
      <p>Обычно TextFlow создается из разметки TLF с использованием методов <codeph>TextFlowUtil.importFromString()</codeph> или <codeph>TextFlowUtil.importFromXML()</codeph>. В качестве альтернативы можно использовать класс TLF TextConverter (который может импортировать подгруппу HTML) или встроить TextFlow с помощью методов, например <codeph>addChild()</codeph>, в TextFlow.</p>
     
      <p>Установка этого свойства влияет на свойство <codeph>text</codeph> и наоборот.</p>
     
      <p>При установке <codeph>textFlow</codeph> и получении <codeph>text</codeph> текст в каждом абзаце отделяется одной LF<codeph> (\n)</codeph>.</p>
     
      <p>При установке в качестве значения <codeph>text</codeph> String, например <codeph>Hello World</codeph>, и получения <codeph>textFlow</codeph>, TextFlow будет содержать отдельный ParagraphElement с отдельным SpanElement.</p>
     
      <p>Если текст содержит явные переносы строк – CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) или CR+LF (<codeph>\r\n</codeph>), то содержимое устанавливается на TextFlow, который содержит несколько абзацев, каждый с одним интервалом.</p>
     
      <p>Для преобразования объекта TextFlow в разметку TLF можно использовать разметку, возвращенную из метода <codeph>TextFlowUtil.export()</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
  Класс SkinnableDataContainer является базовым контейнерным классом для элементов данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="focusThickness" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  Толщина контура прямоугольника фокусировки в пикселях.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет кольца фокуса при наведении фокуса на компонент.
 
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал кольца фокуса для данного компонента.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataGroup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" required="false" var_type="spark.components:DataGroup">
<description>
      Дополнительный элемент темы оформления, определяющий DataGroup в классе тем оформления, в котором помещаются, отображаются или располагаются элементы данных.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the DataGroup in the skin class 
      where data items get pushed into, rendered, and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableDataContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableDataContainer
    <strong>Properties</strong>
    autoLayout="true"
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    layout="VerticalLayout"
    typicalItem="null"
  
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontal_stem"
    color="0"
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    focusAlpha="0.55"
    focusColor=""
    focusThickness="2"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textJustify="inter_word"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SkinnableDataContainer является базовым контейнерным классом для элементов данных. Класс SkinnableDataContainer преобразовывает элементы данных в визуальные элементы для отображения. В то время как этот контейнер может хранить визуальные элементы, он зачастую используется только для хранения элементов данных в качестве нижестоящих элементов.
 
  <p>Класс SkinnableDataContainer считает элементы данных и визуальные элементы, реализующие интерфейс IVisualElement и являющиеся объектами отображения, нижестоящими элементами. Элементы данных могут быть простыми элементами данных, такими как объекты String и Number, и более сложными элементами данных, например объектами Object и XMLNode. В то время как эти контейнеры могут хранить визуальные элементы, они зачастую используются только для хранения элементов данных в качестве нижестоящих элементов.</p>
 
  <p>Средство визуализации элементов определяет визуальное представление элемента данных в контейнере. Средство визуализации элементов преобразовывает элемент данных в формат, который может быть отображен контейнером. Для корректной визуализации элементов данных следует передать средство визуализации в контейнер SkinnableDataContainer.</p>
 
  <p>Если необходим контейнер элементов данных и не требуется тема оформления, то для повышения производительности и минимизации размера приложения рекомендуется использовать DataGroup (который не может иметь темы оформления).</p>
 
  <p>Контейнер SkinnableDataContainer имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableDataContainerExample.mxml"><swfblock conref="examples/SkinnableDataContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.components.xml#DataGroup"><linktext>DataGroup</linktext></link><link href="spark.skins.spark.xml#SkinnableDataContainerSkin"><linktext>spark.skins.spark.SkinnableDataContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  Отправляется при удалении средства визуализации из контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при удалении средства визуализации из контейнера. Свойство <codeph>event.renderer</codeph>содержит удаленное средство визуализации.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  Отправляется при добавлении средства визуализации к контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при добавлении средства визуализации к контейнеру. Свойство <codeph>event.renderer</codeph>содержит добавленное средство визуализации.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableDataContainer:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableDataContainer:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      В случае с указанным элементом данных возвращает представление элемента данных toString() для отображения средством визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Строковое представление элемента данных.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент данных.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      В случае с указанным элементом данных возвращает представление элемента данных toString() для отображения средством визуализации элементов. Этот метод использует метод элемента данных <codeph>toString()</codeph> для преобразования его в строковое представление. Элемент данных Null возвращает пустую строку.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableDataContainer:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      Обновляет средство визуализации для использования или повторного использования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Обновляемое средство визуализации. 
      
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Индекс элемента данных в поставщике данных. 
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Объект данных, который представляет это средство визуализации элемента. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обновляет средство визуализации для использования или повторного использования. Когда средство визуализации элемента создается впервые или когда оно повторно используется из-за виртуализации, этот экземпляр SkinnableDataContainer может установить свойства <codeph>label</codeph> и <codeph>owner</codeph> средства визуализации. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableDataContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnableDataContainer/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#SkinnableDataContainer/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc conref="spark.components.DataGroup#itemRendererFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRendererFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.DataGroup#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRenderer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>VerticalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.DataGroup#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.components.DataGroup#typicalItem">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Scroller"><apiName>Scroller</apiName><shortdesc>
  Компонент Scroller отображает одиночный прокручиваемый компонент, называемый областью просмотра, а также горизонтальные и вертикальные полосы прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="viewport"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает, при каких условиях отображается вертикальная полоса прокрутки.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> ("on") – полоса прокрутки всегда отображается.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> ("off") – полоса прокрутки никогда не отображается. Область просмотра по-прежнему может быть прокручена программно путем установки ее свойства verticalScrollPosition.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> ("auto") – полоса прокрутки отображается в случае, когда contentHeight области просмотра больше его высоты.
  </li>
  </ul>
 
  <p>
  Стратегия прокрутки влияет на измеренный размер компонента Scroller.
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:Scroller" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveScrolling" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description>
  Прокси для стиля <codeph>liveDragging</codeph> полос прокрутки, используемых в компоненте Scroller.   
 
  <p>Если для этого стиля устанавливается значение <codeph>true</codeph>, то для стилей <codeph>liveDragging</codeph> по умолчанию также устанавливается значение <codeph>true</codeph>. Это значит, что перетаскивание бегунка полосы прокрутки немедленно обновляет положение прокрутки области просмотра. Если для этого стиля устанавливается значение <codeph>false</codeph>, то для стилей <codeph>liveDragging</codeph> также устанавливается значение <codeph>false</codeph>. Это значит, что при перетаскивании бегунка полосы прокрутки положение прокрутки области просмотра обновляется только после отпускания кнопки мыши.</p>
 
  <p>Установка значения <codeph>false</codeph> для этого стиля полезна в случаях, когда для обновления отображения области просмотра требуется слишком много вычислений, что снижает производительность функции liveDragging.</p> 
  
  <p>По умолчанию для этого стиля указано значение <codeph>undefined</codeph>, т. е. стили <codeph>liveDragging</codeph> не изменены.</p>
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает, при каких условиях отображается горизонтальная полоса прокрутки.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> ("on") – полоса прокрутки всегда отображается.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> ("off") – полоса прокрутки никогда не отображается. Область просмотра по-прежнему может быть прокручена программно путем установки ее свойства horizontalScrollPosition.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> ("auto") – полоса прокрутки отображается в случае, когда contentHeight области просмотра больше его высоты.
  </li>
  </ul>
 
  <p>
  Стратегия прокрутки влияет на измеренный размер компонента Scroller.
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Цвет текста активированного компонента, когда фокус на него не наведен.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Цвет текста при выключенном компоненте.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Цвет текста, когда компонент включен и получает фокус.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:Scroller" playerVersion="Flash10.5" type="Object">
<description>
  Указывает межсловные интервалы для использования при выравнивании. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает число градусов для поворота данного текста.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера.
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textIndent; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает позиции табуляции, связанные с абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для левого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен перед абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен после абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для правого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Управляет внешним видом элементов списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Управляет размещением маркера элемента списка относительно элемента списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Определяет автоотступ начального края списков, если значением заполнения этой стороны списка является <codeph>auto</codeph>.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Указывает позицию базовой линии первой строки в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Определяет тип обтекания текста вокруг плавающего объекта.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Управляет местом разрыва строк при форматировании текста по размеру окна. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Определяет вертикальное или горизонтальное размещение строки.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Scroller/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Scroller/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Scroller/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Scroller/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="horizontalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.HScrollBar" var_type="mx.core:IFactory">
<description>
      Компонент темы оформления, определяющий горизонтальный компонент полосы прокрутки. Элемент темы оформления <codeph>horizontalScrollBar</codeph> является приоритетным по отношению к этому элементу темы оформления. При создании экземпляра этого элемента в Scroller для этого экземпляра устанавливается элемент темы оформления <codeph>horizontalScrollBar</codeph>. Это свойство следует рассматривать только как свойство для чтения. Оно устанавливается только темой оформления Scroller. <codeph/>
     </description>
	<shortdesc>
      A skin part that defines the horizontal scroll bar component.</shortdesc></SkinPart><SkinPart name="verticalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.VScrollBar" var_type="mx.core:IFactory">
<description>
      Элемент темы оформления, определяющий вертикальную полосу прокрутки. Элемент темы оформления <codeph>verticalScrollBar</codeph> является приоритетным по отношению к этому элементу темы оформления. При создании экземпляра этого элемента в Scroller для этого экземпляра устанавливается элемент темы оформления <codeph>verticalScrollBar</codeph>. Это свойство следует рассматривать только как свойство для чтения. Оно устанавливается только темой оформления Scroller. <codeph/>
     </description>
	<shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart><SkinPart name="horizontalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:HScrollBar">
<description>
      Элемент темы оформления, определяющий горизонтальную полосу прокрутки. Это свойство следует рассматривать только как свойство для чтения. Оно устанавливается только темой оформления Scroller. Это свойство – Bindable.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the horizontal scroll bar.</shortdesc></SkinPart><SkinPart name="verticalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:VScrollBar">
<description>
      Элемент темы оформления, определяющий вертикальную полосу прокрутки. Это свойство следует рассматривать только как свойство для чтения. Оно устанавливается только темой оформления Scroller. Это свойство – Bindable.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Scroller&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Scroller
   <strong>Properties</strong>
    measuredSizeIncludesScrollBars="true"
    minViewportInset="0"
    viewport="null"
  
    <strong>Styles</strong>
    alignmentBaseline="use_dominant_baseline"
    alternatingItemColors=""
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    horizontalScrollPolicy="auto"
    inactiveTextSelection=""
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент Scroller отображает одиночный прокручиваемый компонент, называемый областью просмотра, а также горизонтальные и вертикальные полосы прокрутки. Область просмотра должна реализовывать интерфейс IViewport. Его тема оформления должна быть производной от класса Group.
   <p>Компоненты Spark Group, DataGroup и RichEditableText реализуют интерфейс IViewport и могут использоваться в качестве нижестоящих элементов элемента управления Scroller, как показано в примере:</p>
 
  <pre>
  &lt;s:Scroller width="100" height="100">
       &lt;s:Group> 
          &lt;mx:Image width="300" height="400" 
               source="@Embed(source='assets/logo.jpg')"/> 
       &lt;/s:Group>        
  &lt;/s:Scroller></pre>     
   <p>Для элемента управления Image установлен больший размер, чем для его вышестоящего контейнера Group. По умолчанию нижестоящий элемент расширяется за границы вышестоящего контейнера. Для того чтобы не позволить нижестоящему элементу расширяться за границы вышестоящего контейнера, Scroller выполняет отсечение нижестоящего элемента по границам вышестоящего и отображение полосы прокрутки.</p>
   <p>Не все контейнеры Spark реализуют интерфейс IViewPort. Поэтому такие контейнеры, как BorderContainer и SkinnableContainer, не могут использоваться в качестве прямого нижестоящего элемента компонента Scroller. Однако все контейнеры Spark могут иметь компонент Scroller в качестве нижестоящего компонента. Например, чтобы использовать полосы прокрутки в нижестоящем элементе Spark BorderContainer, следует заключить нижестоящий элемент в компонент Scroller. </p>
   <p>Чтобы сделать BorderContainer полностью прокручиваемым, его необходимо вложить в контейнер Group. Затем установите контейнер Group в качестве нижестоящего элемента компонента Scroller. Пользовательская тема оформления, включающая компонент Scroller, может быть создана и для контейнеров Spark, которые поддерживают темы оформления и не реализуют интерфейс IViewport. </p>
 
  <p>Интерфейс IViewport определяет область просмотра для компонентов, которые реализуют его. Область просмотра представляет собой ограниченную прямоугольной рамкой часть области контейнера, которую требуется отобразить вместо отображения всего контейнера. Полосы прокрутки управляют свойствами области просмотра <codeph>horizontalScrollPosition</codeph> и <codeph>verticalScrollPosition</codeph>. Полосы прокрутки обеспечивают возможность просмотра области, определенной свойствами области просмотра <codeph>contentWidth</codeph> и <codeph>contentHeight</codeph>.</p>
   <p><codeph/> <codeph/><codeph/></p>
   <p><codeph/><codeph/></p>
   <p>Вы можете объединить полосы прокрутки с помощью явных параметров настройки для области просмотра контейнера. Параметры настройки области просмотра определяют начальную позицию области просмотра, после чего вы сможете использовать панель прокрутки для ее перемещения, как показано в примере: </p>
  
  <pre>
  &lt;s:Scroller width="100" height="100">
      &lt;s:Group
          horizontalScrollPosition="50" verticalScrollPosition="50"> 
          &lt;mx:Image width="300" height="400" 
              source="@Embed(source='assets/logo.jpg')"/> 
      &lt;/s:Group>                 
  &lt;/s:Scroller></pre>
 
  <p>Полосы прокрутки отображаются в соответствии со стратегией отображения вертикальной и горизонтальной полос прокрутки, которая может быть <codeph>auto</codeph>, <codeph>on</codeph> или <codeph>off</codeph>. Стратегия <codeph>auto</codeph> означает, что полоса прокрутки будет отображаться и будет включена в макет, когда содержимое области просмотра больше самой области просмотра.</p>
 
  <p>Макет темы оформления Scroller не может быть изменен. Он установлен на закрытую реализацию макета, которая обрабатывает стратегии прокрутки. Темы оформления Scroller могут предоставлять только полосы прокрутки замены. Для получения больших возможностей по управлению макетом области просмотра и его полосами прокрутки вместо использования Scroller добавьте их к <codeph>Group</codeph> и используйте свойство полосы прокрутки <codeph>viewport</codeph> для их соединения.</p>
   <p>Элемент управления Scroller имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>0</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>0</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.ScrollerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ScrollerExample.mxml"><swfblock conref="examples/ScrollerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Scroller_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Передается перед изменением положения прокрутки вследствие события mouseWheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается перед изменением положения прокрутки вследствие события <codeph>mouseWheel</codeph>.
  
  <p>При наличии видимого verticalScrollBar область просмотра по умолчанию прокручивается вертикально на количество шагов, указанных в <codeph>event.delta</codeph>. Высота шага определяется методом <codeph>getVerticalScrollPositionDelta</codeph> области просмотра с использованием <codeph>UP</codeph> или <codeph>DOWN</codeph> в зависимости от направления прокрутки.</p>
   <p>При наличии видимого horizontalScrollBar область просмотра по умолчанию прокручивается горизонтально на количество шагов, указанных в <codeph>event.delta</codeph>. Ширина шага определяется методом <codeph>getHorizontalScrollPositionDelta</codeph> области просмотра с использованием <codeph>LEFT</codeph> или <codeph>RIGHT</codeph> в зависимости от направления прокрутки.</p>
   <p>Вызов метода <codeph>preventDefault()</codeph> для события предотвращает изменение положения прокрутки. В противном случае при изменении свойства <codeph>delta</codeph> события это значение будет использоваться для определения количества шагов.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Scroller:Scroller"><apiName>Scroller</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Scroller:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      Эта операция не поддерживается в Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Эта операция не поддерживается в Scroller. Элемент управления Scroller имеет только один нижестоящий элемент. Используйте свойство <codeph>viewport</codeph>, чтобы манипулировать им.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:addElement"><apiName>addElement</apiName><shortdesc>
     
      Эта операция не поддерживается в Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Эта операция не поддерживается в Scroller. Элемент управления Scroller имеет только один нижестоящий элемент. Используйте свойство <codeph>viewport</codeph>, чтобы манипулировать им.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:ensureElementIsVisible"><apiName>ensureElementIsVisible</apiName><shortdesc>
      Прокручивает область просмотра для отображения указанного элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Нижестоящий элемент контейнера или вложенного контейнера, добавленный в Scroller.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Прокручивает область просмотра для отображения указанного элемента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      Возвращает область просмотра, если область просмотра существует и передаваемый индекс равен 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если позиция индекса не существует в списке нижестоящих элементов.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Элемент в указанном индексе.
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс получаемого элемента.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает область просмотра, если область просмотра существует и передаваемый индекс равен 0. В противном случае выдается RangeError.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      Возвращает значение 0, если передаваемый элемент является областью просмотра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если элемент не является нижестоящим элементом этого объекта.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Позиция индекса идентифицируемого элемента.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Идентифицируемый элемент.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает значение 0, если передаваемый элемент является областью просмотра. В противном случае выдается ArgumentError.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
     
      Эта операция не поддерживается в Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      Эта операция не поддерживается в Scroller. Элемент управления Scroller имеет только один нижестоящий элемент. Используйте свойство <codeph>viewport</codeph>, чтобы манипулировать им.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
     
      Эта операция не поддерживается в Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Эта операция не поддерживается в Scroller. Элемент управления Scroller имеет только один нижестоящий элемент. Используйте свойство <codeph>viewport</codeph>, чтобы манипулировать им.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElement"><apiName>removeElement</apiName><shortdesc>
     
      Эта операция не поддерживается в Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Эта операция не поддерживается в Scroller. Элемент управления Scroller имеет только один нижестоящий элемент. Используйте свойство <codeph>viewport</codeph>, чтобы манипулировать им.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
     
      Эта операция не поддерживается в Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Эта операция не поддерживается в Scroller. Элемент управления Scroller имеет только один нижестоящий элемент. Используйте свойство <codeph>viewport</codeph>, чтобы манипулировать им.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
     
      Эта операция не поддерживается в Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Эта операция не поддерживается в Scroller. Элемент управления Scroller имеет только один нижестоящий элемент. Используйте свойство <codeph>viewport</codeph>, чтобы манипулировать им.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElements"><apiName>swapElements</apiName><shortdesc>
     
      Эта операция не поддерживается в Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Эта операция не поддерживается в Scroller. Элемент управления Scroller имеет только один нижестоящий элемент. Используйте свойство <codeph>viewport</codeph>, чтобы манипулировать им.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Scroller:measuredSizeIncludesScrollBars:get"><apiName>measuredSizeIncludesScrollBars</apiName><shortdesc>
      Если значение равно true, измеренный размер Scroller включает в себя пространство, необходимое для видимой полосы прокрутки, в противном случае измеренный размер Scroller зависит только от его области просмотра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, измеренный размер Scroller включает в себя пространство, необходимое для видимой полосы прокрутки, в противном случае измеренный размер Scroller зависит только от его области просмотра.
     
      <p>Такие компоненты, как TextArea, которые «перекомпоновывают» свое содержимое для размещения его в доступных размерах по высоте и ширине могут использовать данное свойство для стабилизации измеренного размера. По умолчанию TextArea определяется своими свойствами <codeph>widthInChars</codeph> и <codeph>heightInChars</codeph>. Во многих приложениях для оставшегося содержимого более предпочтительным, чем измеренный размер, является сообщение при отображении полос прокрутки посредством Scroller темы оформления TextArea.</p>
     
      <p>В компонентах, в которых не выполняется перекомпоновка, например в элементах List, поведение по умолчанию является предпочтительным, поскольку оно делает менее вероятным затенение содержимого компонента полосой прокрутки.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:minViewportInset:get"><apiName>minViewportInset</apiName><shortdesc>
      Минимальный интервал между областью просмотра и краями Scroller.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Минимальный интервал между областью просмотра и краями Scroller. Если ни одна из полос прокрутки не отображается, то выполняется отступ области просмотра на <codeph>minViewportInset</codeph> со всех четырех сторон. Если полоса прокрутки отображается, то выполняется отступ области просмотра на наибольшее из <codeph>minViewportInset</codeph> и размера полосы прокрутки. Полосы прокрутки – это линии, по краям которых расположены компоненты Scroller.   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:numElements:get"><apiName>numElements</apiName><shortdesc>
      Возвращает значение 1, если существует область просмотра, в противном случае – 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Возвращает значение 1, если существует область просмотра, в противном случае – 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
        <codeph/><codeph/>
           <p><b/><codeph/><codeph/></p>
           <p> </p>
           <p>   </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
           </apiDefaultValue></apiValueDef><apiDesc>
        <codeph/><codeph/> <codeph/>
           <p><b/><codeph/><codeph/></p>
           <p><codeph/><codeph/> </p>
           <p><codeph/> Для этого изменения положения прокрутки отсутствует анимация.</p>
           <p><codeph/><codeph/><codeph/><codeph/>  </p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Scroller:viewport:get"><apiName>viewport</apiName><shortdesc>
      Прокручиваемый компонент области просмотра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Прокручиваемый компонент области просмотра.
     
      <p>
      Область просмотра добавлена к теме оформления компонента Scroller, размещающей область просмотра и полосы прокрутки. Когда свойство <codeph>viewport</codeph> установлено, для свойства области просмотра <codeph>clipAndEnableScrolling</codeph> устанавливается значение true для активации прокрутки. Scroller не поддерживает непосредственное вращение области просмотра. Содержимое области просмотра может быть произвольно преобразовано, но сама область просмотра не может.
     </p>
     
      Это свойство является привязываемым.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VGroup"><apiName>VGroup</apiName><shortdesc>
  Контейнер VGroup является экземпляром контейнера Group, использующим класс VerticalLayout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:VGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:VGroup
    <strong>Properties</strong>
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedMaxRowCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount"-1"
    rowHeight="no default"
    variableRowHeight="true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер VGroup является экземпляром контейнера Group, использующим класс VerticalLayout. Не следует изменять свойство <codeph>layout</codeph>. Вместо этого следует использовать свойства класса VGroup для изменения характеристик класса VerticalLayout.
 
  <p>Контейнер VGroup имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VGroupExample.mxml"><swfblock conref="examples/VGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link></related-links><apiConstructor id="spark.components:VGroup:VGroup"><apiName>VGroup</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. Инициализирует свойство <codeph>layout</codeph> к экземпляру класса VerticalLayout.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:VGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.VerticalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  Элемент управления ComboBox является нижестоящим классом элемента управления DropDownListBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ComboBox">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Вставка вверху для текста в области запроса элемента управления (в пикселях).  
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Вставка справа для текста в области запроса элемента управления (в пикселях).  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Вставка слева для текста в области запроса элемента управления (в пикселях).  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Вставка внизу для текста в области запроса элемента управления (в пикселях).  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="textInput" owner="spark.components:ComboBox" playerVersion="Flash10" required="false" var_type="spark.components:TextInput">
<description>
      Дополнительный элемент темы оформления, в котором хранится текст ввода или текст selectedItem. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      Optional skin part that holds the input text or the selectedItem text.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ComboBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ComboBox
    <strong>Properties</strong>
    itemMatchingFunction="null"
    labelToItemFunction="null"
    maxChars="0"
    openOnInput="true"
    prompt="null"
    restrict=""
     <strong>Styles</strong>
    paddingBottom="3"
    paddingLeft="3"
    paddingRight="3"
    paddingTop="5"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления ComboBox является нижестоящим классом элемента управления DropDownListBase. Как и в элементе управления DropDownListBase, когда пользователь выбирает элемент из раскрывающегося списка в элементе управления ComboBox, элемент данных появляется в области запроса элемента управления. 
   <p>Различие между этими элементами управления состоит в том, что область запроса элемента управления ComboBox реализуется с использованием элемента управления TextInput, тогда как элемент управления Label используется для элемента управления DropDownList. Таким образом, пользователь может редактировать область запроса элемента управления и вводить значения, которые не являются предопределенными параметрами.</p>
   <p>Например, элемент управления DropDownList позволяет выбирать только из списка заранее определенных элементов в элементе управления. Элемент управления ComboBox позволяет пользователю выбирать предопределенный элемент или вводить новый элемент в область запроса. Пользовательское приложение может распознать ввод нового элемента и ввести его в список элементов в элементе управления по желанию пользователя.</p>
   <p>Также элемент управления ComboBox выполняет поиск в списке элементов при вводе пользователем символов в область запроса. При введении пользователем символов открывается раскрывающаяся область элемента управления. Затем выполняется прокрутка и цветом выделяется самое близкое соответствие в списке элементов.</p>
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
   <p><b>Примечание. </b>Элементы управления Spark на основе списка (класс Spark ListBase и его подклассы, такие как ButtonBar, ComboBox, DropDownList, List и TabBar) не поддерживают класс BasicLayout в качестве значения свойства <codeph>layout</codeph>. Не следует использовать BasicLayout с элементами управления Spark на основе списка.</p>
 
  <p>Для элемента управления ComboBox установлены следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>146 пикселей в ширину на 23 пикселя в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>20 пикселей в ширину на 23 пикселя в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.ComboBoxSkin
               <p>spark.skins.spark.ComboBoxTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ComboBoxExample.mxml"><swfblock conref="examples/ComboBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link><link href="spark.skins.spark.xml#ComboBoxTextInputSkin"><linktext>spark.skins.spark.ComboBoxTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ComboBox:CUSTOM_SELECTED_ITEM"><apiName>CUSTOM_SELECTED_ITEM</apiName><shortdesc>
      Статическая константа, представляющая значение свойства selectedIndex, когда пользователь вводит значение в область запроса и это значение передается.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Статическая константа, представляющая значение свойства <codeph>selectedIndex</codeph>, когда пользователь вводит значение в область запроса и это значение передается. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:itemMatchingFunction"><apiName>itemMatchingFunction</apiName><shortdesc>
      Определяет функцию обратного вызова, используемую при выполнении поиска в списке элементов при вводе пользователем символов в область запроса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет функцию обратного вызова, используемую при выполнении поиска в списке элементов при вводе пользователем символов в область запроса. Когда пользователь вводит символы, отображается раскрывающаяся область элемента управления. Он прокручивает список элементов до наиболее точного соответствия и выделяет его цветом.
     
      <p>Функция, на которую ссылается это свойство, получает строку ввода и возвращает в поставщик данных индекс элементов, которые соответствуют вводу. Элементы возвращаются как вектор.&lt;int> индексов в поставщике данных. </p>
     
      <p>Функция обратного вызова должна иметь следующую подпись: </p>
     
      <pre>
        function myMatchingFunction(comboBox:ComboBox, inputText:String):Vector.&lt;int></pre>
     
      <p>Если значением этого свойства является null, то ComboBox находит соответствия с использованием заданного по умолчанию алгоритма. По умолчанию принято, что если входная строка длины n эквивалентна первым символам n элемента (без учета регистра), то она соответствует этому элементу. Например, aRiz совпадает с Arizona, в то время как riz – нет.</p>
           <p>Для отмены поиска следует создать функцию обратного вызова, которая возвращает пустой вектор.&lt;int>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:openOnInput"><apiName>openOnInput</apiName><shortdesc>
      Если true, раскрывающийся список открывается, когда пользователь редактирует область запроса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>true</codeph>, раскрывающийся список открывается, когда пользователь редактирует область запроса.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:enableIME:get"><apiName>enableIME</apiName><shortdesc conref="spark.components.TextInput#enableIME">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.TextInput#enableIME">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="spark.components.TextInput#imeMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.TextInput#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:prompt:get"><apiName>prompt</apiName><shortdesc>
      Текст, который будет отображаться при отсутствии вводимого текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Текст, который будет отображаться при отсутствии вводимого текста.
     
      <p>При первом создании элемента управления на экране отображается запрос. Запрос не отображается, когда элемент управления получает фокус, для вводимого текста указано ненулевое значение, а также при выборе элемента списка. Запрос выводится повторно, когда элемент управления теряет фокус и значением текстового поля является null или пустая строка (т. е. текст не был введен).</p>
      
      <p>Для изменения стиля запроса можно использовать CSS. Если элемент управления не выключен и содержит запрос, стиль определяется псевдоселектором <codeph>normalWithPrompt</codeph>. Если элемент управления выключен, то используются стили, определенные псевдоселектором <codeph>disabledWithPrompt</codeph>.</p>
      
      <p>В следующем примере CSS изменяет цвет текста запроса в элементах управления TextInput. Элемент управления ComboBox использует элемент управления TextInput как подчиненный компонент для запросов и ввода, поэтому его текст запросов изменяется при использовании следующего CSS:
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|TextInput:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:labelToItemFunction:set"><apiName>labelToItemFunction</apiName><shortdesc>
      Определяет функцию обратного вызова для преобразования нового значения, введенного в область подсказки, в тот же тип данных, что и элементы данных в поставщике данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Определяет функцию обратного вызова для преобразования нового значения, введенного в область подсказки, в тот же тип данных, что и элементы данных в поставщике данных. Функция, на которую ссылается это свойство, вызывается, когда текст в области запроса передан и не найден в поставщике данных. 
     
      <p>Функция обратного вызова должна иметь следующую подпись: </p>
     
      <pre>
        function myLabelToItem(value:String):Object</pre>
     
      <p>Где <codeph>value</codeph> является строкой, введенной в область запроса. Функция возвращает объект того же типа, что и элементы в поставщике данных.</p>
     
      <p>Заданная по умолчанию функция обратного вызова возвращает <codeph>value</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:maxChars:set"><apiName>maxChars</apiName><shortdesc>
      Введенное пользователем максимальное число символов, которое может содержать область запроса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Введенное пользователем максимальное число символов, которое может содержать область запроса. Нулевое значение соответствует отсутствию ограничений.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:restrict:set"><apiName>restrict</apiName><shortdesc>
      Определяет набор символов, которые могут быть введены пользователем в область запроса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет набор символов, которые могут быть введены пользователем в область запроса. По умолчанию пользователь может вводить любые символы, соответствующие значению пустой строки.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Image"><apiName>Image</apiName><shortdesc>
  Элемент управления Spark Image - это компонент с изменяемым оформлением, который обеспечивает настраиваемое состояние загрузки, хром и состояние ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style enumeration="default,high" inherit="no" name="smoothingQuality" owner="spark.components:Image" playerVersion="Flash9" type="String">
<description>
  Стиль, эквивалентный свойству <codeph>smoothingQuality</codeph> для BitmapImage. При указании значения <codeph>BitmapSmoothingQuality.BEST</codeph> изображение преобразуется (если данные получены из доверенного источника) с целью получения изображения более высокого качества. При установленном <codeph>BitmapSmoothingQuality.DEFAULT</codeph> будет использоваться качество рабочей области по умолчанию для масштабируемых заливок растровых изображений.
 
  </description>
<default>&lt;code>BitmapSmoothingQuality.DEFAULT&lt;/code>
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="enableLoadingState" owner="spark.components:Image" playerVersion="Flash9" type="Boolean">
<description>
  Если <codeph>true</codeph>, включает состояние <codeph>loading</codeph> темы оформления.
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет фона для этого компонента.
   
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Значение альфа-канала фона для данного компонента.
 
  </description>
<default>NaN
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Выключенное состояние элемента управления Image.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="invalid" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Недопустимое состояние элемента управления Image. Это означает, что невозможно загрузить изображение.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:Image" playerVersion="Flash10.1">
<description>
  Состояние готовности элемента управления Image.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Состояние предварительной загрузки элемента управления Image. Чтобы включить этот состояние компонента, для стиля <codeph>enableLoadingState</codeph> необходимо указать значение <codeph>true</codeph>.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Состояние отсутствия инициализации элемента управления Image.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="imageDisplay" owner="spark.components:Image" playerVersion="Flash10" required="true" var_type="spark.primitives:BitmapImage">
<description>
      Необходимый элемент темы оформления, определяющий содержимое изображения.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines image content.</shortdesc></SkinPart><SkinPart name="progressIndicator" owner="spark.components:Image" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:Range">
<description>
      Дополнительный элемент темы оформления, отображающий текущее выполнение загрузки. В целях удобства значение progressIndicator автоматически обновляется и отображает ход выполнения в виде процентов во время загрузки.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that displays the current loading progress.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Image&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Image 
    <strong>Properties</strong>
    clearOnLoad="true"
    contentLoader="null"
    contentLoaderGrouping="null"
    fillMode="scale"
    horizontalAlign="center"
    preliminaryHeight="NaN"
    preliminaryWidth="NaN"
    scaleMode="letterbox"
    smooth="false"
    source="null
    verticalAlign="middle"
 
    <strong>Styles</strong>
    backgroundAlpha="NaN"
    backgroundColor="NaN"
    enableLoadingState="false"
    smoothingQuality="default"
 
    <strong>Events</strong>
    complete="<i>No default</i>"
    httpStatus="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
    securityError="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления Spark Image - это компонент с изменяемым оформлением, который обеспечивает настраиваемое состояние загрузки, хром и состояние ошибки. Элемент управления Image позволяет импортировать файлы в формате JPEG, PNG и GIF во время выполнения. Также эти файлы можно встроить во время компиляции при помощи <codeph>@Embed(source='filename')</codeph>.
   <p><b>Примечание. </b>Flex также включает элемент управления SWFLoader для загрузки приложений Flex. Элемент управления Image обычно используется для загрузки статических графических файлов и файлов SWF, а элемент управления SWFLoader – для загрузки приложений Flex. Элемент управления Image также предназначен для применения в пользовательских средствах визуализации и редакторах элементов. </p>
 
  <p><b>Примечание.</b> Flex также включает класс BitmapImage. Этот класс используется для внедрения изображений в темы оформления и компоненты FXG. </p>
   <p>Встроенные изображения загружаются немедленно, так как они уже являются частью файла Flex SWF. Однако они увеличивают размер приложения и замедляют процесс его инициализации. Встроенные изображения также требуют перекомпиляции приложения при каждом изменении файлов изображения.</p> 
  
  <p>Альтернативой встроенному ресурсу является загрузка ресурса во время выполнения. Можно загрузить ресурс из локальной файловой системы, в которой выполняется файл SWF, или обратиться к удаленному ресурсу, обычно через запрос HTTP по сети. Эти изображения являются независимыми от приложения Flex, поэтому их можно изменять, не вызывая операции перекомпиляции при условии, что имена изменяющихся изображений будут сохранены. Вызванные изображения не добавляют дополнительное время ко времени начальной загрузки приложения. Однако может возникнуть задержка при использовании изображений и загрузке их в Flash Player или AIR. </p>
  
  <p>Тема оформления по умолчанию предоставляет тему оформления изображения без дополнительных элементов оформления с предварительным загрузчиком на основе типового индикатора выполнения и значком отсутствия изображения, обозначающим недействительное содержимое.</p>
   <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
   <p>Элемент управления Image имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>Достаточно широкий, чтобы поместить связанное содержимое источника</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>0 пикселей в ширину на 0 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Класс темы оформления по умолчанию</entry>
           <entry>spark.skins.spark.ImageSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ImageSkin"><linktext>spark.skins.spark.ImageSkin</linktext></link><link href="" invalidHref="mx.controls.SWFLoader.xml"><linktext>mx.controls.SWFLoader</linktext></link></related-links><adobeApiEvent id="spark.components:Image_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
  Передается при возникновении ошибки системы безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при возникновении ошибки системы безопасности.
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.SecurityErrorEvent.xml"><linktext>flash.events.SecurityErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_mx.events.FlexEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  Передается после завершения загрузки содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.READY</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после завершения загрузки содержимого. В отличие от события <codeph>complete</codeph>, это событие отправляется для всех типов ресурсов.  
  
  <p>Следует учесть, что для содержимого, загруженного с помощью Loader, отправляются события <codeph>ready</codeph> и <codeph>complete</codeph>.</p>  Для других исходных типов, например встраивания, отправляется только <codeph>ready</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Передается во время загрузки содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается во время загрузки содержимого.
   <p><b>Примечание.</b> Передача события <codeph>progress</codeph> не является обязательной. Событие <codeph>complete</codeph> может быть получено без передачи события <codeph>progress</codeph>. Это возможно в том случае, если загружаемое содержимое является локальным файлом.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  Отправляется при возникновении ошибки ввода-вывода.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при возникновении ошибки ввода-вывода.
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.IOErrorEvent.xml"><linktext>flash.events.IOErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
  Передается при сетевом запросе по HTTP, если Flash Player или AIR могут определить код состояния HTTP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при сетевом запросе по HTTP, если Flash Player или AIR могут определить код состояния HTTP.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Передается после завершения загрузки содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после завершения загрузки содержимого. Это событие отправляется только для url-адреса и источников на основе ByteArray, для которых требуется Loader.
 
  <p>Обратите внимание, что для содержимого, загруженного с помощью Loader, отправляются события <codeph>ready</codeph> и <codeph>complete</codeph>.</p>  Для других исходных типов, например встраивания, отправляется только <codeph>ready</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Image:Image"><apiName>Image</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Image:bitmapData:get"><apiName>bitmapData</apiName><shortdesc conref="spark.primitives.BitmapImage#bitmapData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:BitmapData"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bitmapData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:clearOnLoad:get"><apiName>clearOnLoad</apiName><shortdesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoaderGrouping:get"><apiName>contentLoaderGrouping</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoader:get"><apiName>contentLoader</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoader">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IContentLoader</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoader">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:fillMode:get"><apiName>fillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.CENTER&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryHeight:get"><apiName>preliminaryHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryWidth:get"><apiName>preliminaryWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapScaleMode.LETTERBOX&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:sourceHeight:get"><apiName>sourceHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:sourceWidth:get"><apiName>sourceWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:trustedSource:get"><apiName>trustedSource</apiName><shortdesc conref="spark.primitives.BitmapImage#trustedSource">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#trustedSource">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.MIDDLE&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:smooth:set"><apiName>smooth</apiName><shortdesc conref="spark.primitives.BitmapImage#smooth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#smooth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:source:set"><apiName>source</apiName><shortdesc conref="spark.primitives.BitmapImage#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#source">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextSelectionHighlighting"><apiName>TextSelectionHighlighting</apiName><shortdesc>
  Этот класс определяет допустимые значения для свойства selectionHighlighting элемента управления RichEditableText и элементов управления, использующих RichEditableText в качестве подчиненного компонента (Spark TextInput и Spark TextArea).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Этот класс определяет допустимые значения для свойства <codeph>selectionHighlighting</codeph> элемента управления RichEditableText и элементов управления, использующих RichEditableText в качестве подчиненного компонента (Spark TextInput и Spark TextArea).
  
  </apiDesc><example conref="TraceSelectionRanges"><swfblock conref="TraceSelectionRanges"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiValue id="spark.components:TextSelectionHighlighting:ALWAYS"><apiName>ALWAYS</apiName><shortdesc>
      Значение ALWAYS подразумевает отображение текстового выделения даже в тех случаях, когда компонент не имеет фокуса клавиатуры, а окно компонента не является активным.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Значение ALWAYS подразумевает отображение текстового выделения даже в тех случаях, когда компонент не имеет фокуса клавиатуры, а окно компонента не является активным.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_ACTIVE"><apiName>WHEN_ACTIVE</apiName><shortdesc>
      Подразумевает отображение текстового выделения всякий раз, когда окно компонента является активным, даже если компонент не имеет фокуса клавиатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenActive</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Подразумевает отображение текстового выделения всякий раз, когда окно компонента является активным, даже если компонент не имеет фокуса клавиатуры.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_FOCUSED"><apiName>WHEN_FOCUSED</apiName><shortdesc>
      Подразумевает, что текстовое выделение отображается только в том случае, когда компонент имеет фокус клавиатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenFocused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Подразумевает, что текстовое выделение отображается только в том случае, когда компонент имеет фокус клавиатуры.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpPosition"><apiName>PopUpPosition</apiName><shortdesc>
  Перечислимый тип для свойств PopUpAnchor.popUpPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Перечислимый тип для свойств <codeph>PopUpAnchor.popUpPosition</codeph>. Этот тип описывает позицию элемента управления <codeph>popUp</codeph>, привязанного к PopUpAnchor. Позиция является относительной для позиции PopUpAnchor.  
    
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:PopUpPosition:ABOVE"><apiName>ABOVE</apiName><shortdesc>
      Расположение над целевым объектом.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>above</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение над целевым объектом.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:BELOW"><apiName>BELOW</apiName><shortdesc>
      Расположение под целевым объектом.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>below</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение под целевым объектом.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:CENTER"><apiName>CENTER</apiName><shortdesc>
      Расположение в центре целевого объекта.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение в центре целевого объекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:LEFT"><apiName>LEFT</apiName><shortdesc>
      Расположение слева от целевого объекта.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение слева от целевого объекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      Расположение справа от целевого объекта.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Расположение справа от целевого объекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
      Расположение в верхнем левом углу целевого объекта.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Позиция в верхнем левом углу целевого объекта.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataGroup"><apiName>DataGroup</apiName><shortdesc>
  Класс DataGroup является основным базовым контейнерным классом для элементов данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:DataGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGroup
    <strong>Properties</strong>
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    typicalItem="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс DataGroup является основным базовым контейнерным классом для элементов данных. Класс DataGroup преобразовывает элементы данных в визуальные элементы для отображения. В то время как этот контейнер может хранить визуальные элементы, он зачастую используется только для хранения элементов данных в качестве нижестоящих элементов.
   <p>Класс DataGroup считает элементы данных и визуальные элементы, реализующие интерфейс IVisualElement и являющиеся DisplayObjects, нижестоящими элементами. Элементы данных могут быть простыми элементами данных, такими как объекты String и Number, и более сложными элементами данных, например объектами Object и XMLNode. В то время как эти контейнеры могут хранить визуальные элементы, они зачастую используются только для хранения элементов данных в качестве нижестоящих элементов.</p>
   <p>Средство визуализации элементов определяет визуальное представление элемента данных в контейнере. Средство визуализации элементов преобразовывает элемент данных в формат, который может быть отображен контейнером. Для корректной визуализации элементов данных следует передать средство визуализации в контейнер DataGroup.</p>
   <p>Для повышения производительности и минимизации размеров приложений контейнер DataGroup не может иметь темы оформления. При необходимости применения тем оформления вместо него следует использовать SkinnableDataContainer. </p>
  
  <p>Контейнер DataGroup имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DataGroupExample.mxml"><swfblock conref="examples/DataGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer"><linktext>spark.skins.spark.DefaultItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultComplexItemRenderer"><linktext>spark.skins.spark.DefaultComplexItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  Отправляется при удалении средства визуализации из этого dataGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при удалении средства визуализации из этого dataGroup. <codeph>event.renderer</codeph> является удаленным средством визуализации.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  Отправляется при добавлении средства визуализации к этому dataGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при добавлении средства визуализации к этому dataGroup. <codeph>event.renderer</codeph> является добавляемым средством визуализации.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGroup:DataGroup"><apiName>DataGroup</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGroup:getItemIndicesInView"><apiName>getItemIndicesInView</apiName><shortdesc>
      Возвращает индексы средств визуализации элементов, видимых в данном DataGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индексы видимых средств визуализации элементов.
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает индексы средств визуализации элементов, видимых в данном DataGroup.
     
      <p>Если <codeph>clipAndEnableScrolling</codeph> равно <codeph>true</codeph>, возвращает индексы <codeph>visible</codeph> = <codeph>true</codeph> элементов ItemRenderer, которые перекрывают этот <codeph>scrollRect</codeph> объекта DataGroup. Т. е. элементы ItemRenderer, которые по крайней мере частично видимы относительно этого DataGroup. Если <codeph>clipAndEnableScrolling</codeph> = <codeph>false</codeph>, возвращает список целых чисел от 0 до <codeph>dataProvider.length</codeph> - 1. Обратите внимание, что если владельцем этого DataGroup является Scroller, то для <codeph>clipAndEnableScrolling</codeph> установлено значение <codeph>true</codeph>.</p>
     
      <p>Соответствующее средство визуализации элементов для каждого возвращенного индекса извлекается посредством метода <codeph>getElementAt()</codeph>, даже если макет является виртуальным.</p>
     
      <p>Порядок элементов в возвращенном векторе не гарантируется.</p>
     
      <p>Обратите внимание, что классы VerticalLayout и HorizontalLayout предоставляют связываемые свойства <codeph>firstIndexInView</codeph> и <codeph>lastIndexInView</codeph>, содержащие ту же информацию, что и этот метод.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="11"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      <codeph/>  
     
      <p>Этот метод вызывается автоматически при непосредственном изменении <codeph>typicalItem</codeph>. Это означает, что для свойства установлено новое значение, которое не совпадает с текущим значением.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:itemToLabel"><apiName>itemToLabel</apiName><shortdesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      В случае с элементом данных возвращает представление элемента данных toString() для отображения средством визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>Строка для отображения в средстве визуализации.
      
      </apiDesc></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент данных для отображения.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      <p>В случае с элементом данных возвращает представление <codeph>toString()</codeph> элемента данных для отображения в средстве визуализации элементов. При нулевом количестве элементов данных возвращается пустая строка. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      
      Обновляет средство визуализации для повторного использования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Средство визуализации элементов.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Индекс данных в поставщике данных.
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Объект данных, который представляет это средство визуализации элемента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обновляет средство визуализации для повторного использования. При этом методе средство визуализации сначала подготавливается для повторного использования через удаление любых устаревших свойств, а также их замену на новые свойства.
     
      <p>И, наконец, данный метод определяет свойство <codeph>data</codeph> для средства визуализации элемента.</p>    
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGroup:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Поставщик данных для этого DataGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Поставщик данных для этого DataGroup. Это должен быть IList.
     
      <p>Существует несколько реализаций IList, включенных в инфраструктуру Flex, включая ArrayCollection, ArrayList и XMLListCollection.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGroup/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#DataGroup/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGroup:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc>
      Функция, возвращающая средство визуализации элементов IFactory для конкретной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Функция, возвращающая средство визуализации элементов IFactory для конкретной позиции. Следует определить функцию средства визуализации элементов, подобную этой типовой функции:
      
      <pre>
        function myItemRendererFunction(item:Object):IFactory</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      Средство визуализации элементов для использования для элементов данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Средство визуализации элементов для использования для элементов данных. Класс должен реализовывать интерфейс IDataRenderer. Если определено, свойство <codeph>itemRendererFunction</codeph> имеет приоритет над этим свойством.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      Макеты используют предпочтительный размер typicalItem, когда требуются фиксированные размеры строки или столбца, но конкретное значение rowHeight или columnWidth не задано.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Макеты используют предпочтительный размер <codeph>typicalItem</codeph>, когда требуются фиксированные размеры строки или столбца, но конкретное значение <codeph>rowHeight</codeph> или <codeph>columnWidth</codeph> не задано. Аналогично виртуальные макеты используют этот элемент для определения размера элементов макета, которые не были прокручены в видимую область.
           <p>Контейнер использует типичный элемент данных и связанное с ним средство визуализации элементов для определения стандартного размера нижестоящих элементов контейнера. При заданном типичном элементе контейнер не должен измерять каждый нижестоящий элемент при выводе его на экран.</p>
           <p>Установка этого свойства устанавливает свойство макета <codeph>typicalLayoutElement</codeph>.</p>
     
      <p>Ограничение. Если <codeph>typicalItem</codeph> является IVisualItem, то он не должен быть также элементом поставщика данных.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HSlider"><apiName>HSlider</apiName><shortdesc>
  Элемент управления HSlider (горизонтальный ползунок) позволяет пользователям выбирать значение путем перемещения ползунка между конечными точками полосы прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:HSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления HSlider (горизонтальный ползунок) позволяет пользователям выбирать значение путем перемещения ползунка между конечными точками полосы прокрутки. Элемент управления HSlider имеет горизонтальное направление. Полоса прокрутки растягивается от левого края до правого. Текущее значение ползунка определяется относительным местоположением ползунка между конечными точками, соответствующими минимальному и максимальному значениям ползунка.
 
  <p>Ползунок может включать непрерывный диапазон значений перемещения между его минимальным и максимальным значениями, или же его перемещение может быть ограничено определенными интервалами между минимальным и максимальным значениями. Ползунок может содержать всплывающую подсказку для отображения его текущего значения.</p>
 
  <p>Для элемента управления HSlider по умолчанию установлены характеристики, перечисленные ниже.</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>100 пикселей в ширину на 11 пикселей в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>100 пикселей в ширину и 100 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Заданные по умолчанию классы темы оформления</entry>
           <entry>spark.skins.spark.HSliderSkin
              <p>spark.skins.spark.HSliderThumbSkin</p>
              <p>spark.skins.spark.HSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HSliderExample.mxml"><swfblock conref="examples/HSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HSliderSkin"><linktext>spark.skins.spark.HSliderSkin</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DataGrid"><apiName>DataGrid</apiName><shortdesc>
  DataGrid отображает строку заголовков столбцов над прокручиваемой сеткой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DataGrid">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Указывает, при каких условиях отображается вертикальная полоса прокрутки.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> ("on") – полоса прокрутки всегда отображается.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> ("off") – полоса прокрутки никогда не отображается. Область просмотра по-прежнему может быть прокручена программно путем установки ее свойства <codeph>verticalScrollPosition</codeph>.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> ("auto") – полоса прокрутки отображается в случае, когда <codeph>contentHeight</codeph> области просмотра больше его высоты.
  </li>
  </ul>
 
  <p>
  Стратегия прокрутки влияет на измеренный размер компонента темы оформления средства прокрутки. Этот стиль представляет собой ссылку на стиль <codeph>verticalScrollPolicy</codeph> компонента темы оформления средства прокрутки. Это не стиль наследования, поэтому он не будет воздействовать на средства визуализации элементов. </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Обозначает условия, при которых отображается горизонтальная полоса прокрутки.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> ("on") – полоса прокрутки всегда отображается.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> ("off") – полоса прокрутки никогда не отображается. Область просмотра по-прежнему может быть прокручена программно путем установки ее свойства <codeph>horizontalScrollPosition</codeph>.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> ("auto") - полоса прокрутки отображается в случае, когда <codeph>contentWidth</codeph> области просмотра больше его ширины.
  </li>
  </ul>
 
  <p>
  Стратегия прокрутки влияет на измеренный размер компонента темы оформления средства прокрутки. Этот стиль представляет собой ссылку на стиль <codeph>horizontalScrollPolicy</codeph> компонента темы оформления средства прокрутки. Это не стиль наследования, поэтому он не будет воздействовать на средства визуализации элементов. </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="defaultDataGridItemEditor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  Класс, используемый в качестве редактора элементов, если иной редактор не указан в столбце. Это свойство стиля определяет установку редактора элементов для группы элементов управления DataGrid вместо установки каждого редактора по отдельности. Свойство <codeph>DataGridColumn.itemEditor</codeph> заменяет это значение.
  
  </description>
<default>null
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:DataGrid" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#DataGrid/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#DataGrid/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#DataGrid/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#DataGrid/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:DataGrid" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="stretchCursor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  Класс, используемый в качестве темы оформления курсора, указывающего на то, что столбец может быть изменен. Значением по умолчанию является символ <codeph>cursorStretch</codeph> из файла Assets.swf.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента. Действительны значения от 0.0 до 1.0. 
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="caretColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет индикатора символа вставки при навигации по сетке.
   </description>
<default>0x0167FF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Управляет видимостью границы для этого компонента.
   </description>
<default>true
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет границы для данного компонента.
   </description>
<default>#696969
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Значение альфа-канала границы для данного компонента. Действительны значения от 0.0 до 1.0. 
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="alternatingRowColors" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Array">
<description>
  Используется для инициализации компонента темы оформления <codeph>rowBackground</codeph> в DataGrid. Если указан стиль <codeph>alternatingRowColors</codeph>, компонент темы оформления <codeph>alternatingRowColorsBackground</codeph> используется в качестве значения компонента темы оформления <codeph>rowBackground</codeph>. Изменяемые цвета для строк сетки определяются путем последовательного ввода в значении Array этого стиля.
   <p>Для изменения способа визуализации этого стиля замените компонент темы оформления <codeph>alternatingRowColorsBackground</codeph> в классе DataGridSkin. Если требуется указать фон для каждой строки, выполните непосредственную инициализацию компонента темы оформления <codeph>rowBackground</codeph>.</p>
 
  </description>
<default>undefined
   
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="alternatingRowColorsBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Класс IVisualElement, используемый для визуализации стиля <codeph>alternatingRowColors</codeph>.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the alternatingRowColors style.</shortdesc></SkinPart><SkinPart name="caretIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Класс IVisualElement, используемый для визуализации индикатора символа вставки сетки.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the grid's caret indicator.</shortdesc></SkinPart><SkinPart name="columnHeaderGroup" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:GridColumnHeaderGroup">
<description>
      Ссылка на объект GridColumnHeaderGroup, который отображает заголовки столбца.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the GridColumnHeaderGroup object that displays the column headers.</shortdesc></SkinPart><SkinPart name="columnSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Класс IVisualElement, используемый для визуализации вертикального разделителя между столбцами. 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the vertical separator between columns.</shortdesc></SkinPart><SkinPart name="editorIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Класс IVisualElement, используемый для визуализации фона, расположенного под редактируемыми средствами визуализации. Редактирование средств визуализации элементов допускается, только если сетка данных и столбец также являются редактируемыми и для <codeph>rendererIsEditable</codeph><codeph> в столбце установлено значение true</codeph>.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render a background behind
      item renderers that are being edited.</shortdesc></SkinPart><SkinPart name="grid" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Grid">
<description>
      Ссылка к Управляющему элемент сетки, который отображает строку и столбцы.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Grid control that displays row and columns.</shortdesc></SkinPart><SkinPart name="hoverIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Класс IVisualElement, используемый для обеспечения ответа при наведении.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to provide hover feedback.</shortdesc></SkinPart><SkinPart name="rowBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Класс IVisualElement, используемый для визуализации фона в каждой строке.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the background of each row.</shortdesc></SkinPart><SkinPart name="rowSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Класс IVisualElement, используемый для визуализации горизонтального разделителя между строками заголовка. 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the horizontal separator between header rows.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Ссылка к элементу управления Scroller в классе темы, который добавляет полосы прокрутки к элементу управления DataGrid.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Scroller control in the skin class 
      that adds scroll bars to the DataGrid control.</shortdesc></SkinPart><SkinPart name="selectionIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Класс IVisualElement, используемый для визуализации выбранных строк или столбцов.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render selected rows or cells.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataGrid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGrid 
    <strong>Properties</strong>
    columns="null"
    dataProvider="null"  
    dataTipField="null"  
    dataTipFunction="null"
    editable="false"
    editorColumnIndex="-1"
    editorRowIndex="-1"
    imeMode="null"
    itemEditor="null"
    itemRenderer="<i>DefaultGridItemRenderer</i>" 
    preserveSelection="true"
    requestedColumnCount="-1"
    requestedMaxRowCount="-1"
    requestedMinColumnCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount="-1"
    requireSelection="false"
    resizeableColumns="true"
    rowHeight="<i>Calculated default</i>"
    selectedCell="null"
    selectedCells="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedIndex="null"
    selectedIndices="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedItem="null"
    selectedItems="<i>empty Vector.&lt;Object&gt</i>"
    selectionMode="singleRow"
    showDataTips="false"
    sortableColumns="true"
    typicalItem="null"
    variableRowHeight="false" 
 
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontalStem"
    color="0"
    defaultGridItemEditor="null"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="cff"
    stretchCursor="<i>cursorStretch symbol from Assets.swf</i>"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    verticalScrollPolicy="auto"
     <strong>Styles for the Spark Theme</strong>
    alternatingRowColors="undefined"
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    caretColor="0x0167FF"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
 
    <strong>Styles for the Mobile Theme</strong>
    leading="0"
    letterSpacing="0"
    selectionColor="0xE0E0E0"
    symbolColor="0x000000"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridItemEditorSessionCancel="<i>No default</i>"
    gridItemEditorSessionSave="<i>No default</i>"
    gridItemEditorSessionStart="<i>No default</i>"
    gridItemEditorSessionStarting="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    selectionChange="<i>No default</i>"
    selectionChanging="<i>No default</i>"
    sortChange="<i>No default</i>"
    sortChanging="<i>No default</i>" 
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataGrid отображает строку заголовков столбцов над прокручиваемой сеткой. Сетка представляет собой набор отдельных ячеек, упорядоченных по строкам и столбцам. Элемент управления DataGrid поддерживает плавную прокрутку при наличии большого количества строк и столбцов.
   <p>Элемент управления Spark DataGrid реализуется как оболочка с изменяемым оформлением для элемента управления Spark Grid. Элемент управления Grid определяет столбцы сетки данных и многие функциональные возможности самого элемента управления DataGrid.</p>
   <p>Тема оформления DataGrid используется для размещения сетки, заголовка столбца и средства прокрутки. С помощью этой темы оформления также настраиваются графические элементы для отображения визуальных элементов, используемых как индикаторы, разделители или фоновые изображения. Тема оформления DataGrid также определяет средство визуализации элементов по умолчанию, используемое для отображения содержимого каждой ячейки. См. список поддерживаемых стилей в документации для класса средства визуализации.</p>
   <p>Переходы в средствах визуализации элементов DataGrid не поддерживаются. В классе GridItemRenderer выключено свойство <codeph>transitions</codeph>, поэтому установка этого свойства не будет иметь эффект.</p>
   </apiDesc><example conref="DataGridSimpleExample.mxml"><swfblock conref="examples/DataGridSimpleExample.swf"/></example><example conref="DataGridMasterDetailExample.mxml"><swfblock conref="examples/DataGridMasterDetailExample.swf"/></example><example conref="DataGridTypicalItemExample.mxml"><swfblock conref="examples/DataGridTypicalItemExample.swf"/></example><example conref="DataGridRowHeightExample.mxml"><swfblock conref="examples/DataGridRowHeightExample.swf"/></example><example conref="DataGridSelectionExample.mxml"><swfblock conref="examples/DataGridSelectionExample.swf"/></example><example conref="DataGridInvalidateCellExample.mxml"><swfblock conref="examples/DataGridInvalidateCellExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>spark.components.Grid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link><link href="spark.skins.spark.xml#DataGridSkin"><linktext>spark.skins.spark.DataGridSkin</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL_gridItemEditorSessionCancel"><apiName>gridItemEditorSessionCancel</apiName><shortdesc>
  Отправляется после закрытия редактора элементов без сохранения данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после закрытия редактора элементов без сохранения данных.  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE_gridItemEditorSessionSave"><apiName>gridItemEditorSessionSave</apiName><shortdesc>
  Отправляется после сохранения данных редактора элементов в поставщике данных и закрытия редактора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после сохранения данных редактора элементов в поставщике данных и закрытия редактора.  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START_gridItemEditorSessionStart"><apiName>gridItemEditorSessionStart</apiName><shortdesc>
  Отправляется непосредственно после открытия редактора элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется непосредственно после открытия редактора элементов. 
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING_gridItemEditorSessionStarting"><apiName>gridItemEditorSessionStarting</apiName><shortdesc>
  Отправляется при запросе на создание нового сеанса редактора элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при запросе на создание нового сеанса редактора элементов. Прослушиватель может динамически определять, является ли ячейка редактируемой, и отменять редактирование, вызывая метод <codeph>preventDefault()</codeph>, если ячейка не является редактируемой. Прослушиватель также может динамически менять используемый редактор, присваивая другой редактор элементов столбцу.
 
  <p>В случае отмены этого события редактор элементов не будет создан.</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link><link href="" invalidHref="flash.events.Event.xml"><linktext>flash.events.Event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGE_sortChange"><apiName>sortChange</apiName><shortdesc>
  Отправляется после выполнения сортировки коллекции поставщика данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после выполнения сортировки коллекции поставщика данных. Как правило, это происходит после того, как пользователь отпускает кнопку мыши над заголовком столбца и завершается сортировка коллекции поставщика данных. 
  
  <p>Это событие отправляется при взаимодействии пользователя с элементом управления. Когда вы сортируете коллекцию поставщика данных с точки зрения программы, компонент не отправляется <codeph>sortChanging</codeph> событие.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGING_sortChanging"><apiName>sortChanging</apiName><shortdesc>
  Отправляется перед выполнением сортировки коллекции поставщика данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется перед выполнением сортировки коллекции поставщика данных. Как правило, это происходит, когда пользователь отпускает кнопку мыши над заголовком столбца для запроса сортировки содержимого сетки на основе содержимого столбца. Передается только в том случае, если столбец доступен для сортировки и сортировка поддерживается поставщиком данных. 
  
  <p>У элемента управления DataGrid есть стандартный обработчик для этого события, которое внедряет вид вертикальной строки и обновляет <codeph>visibleSortIndices</codeph> в сетке <codeph>columnHeaderGroup</codeph> с <codeph>columnIndices</codeph>. </p>
 
  <p>Для сортировки по нескольким столбцам вызовите метод <codeph>preventDefault()</codeph>, предотвращающий сортировку по одному столбцу, и определите параметры <codeph>columnIndices</codeph> и <codeph>newSortFields</codeph> события для изменения поведения по умолчанию. Укажите необходимые поля сортировки для <codeph>newSortFields</codeph>. Для <codeph>columnIndices</codeph> необходимо указать индексы столбцов, содержащих видимый индикатор сортировки в панели заголовка.</p>
   
  <p>Это событие отправляется при взаимодействии пользователя с элементом управления. Когда вы сортируете коллекцию поставщика данных с точки зрения программы, компонент не отправляется <codeph>sortChanging</codeph> событие. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  Отправляется после изменения выбора. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения выбора.  
  
  <p>Это событие отправляется при взаимодействии пользователя с элементом управления. При изменении выбора программным способом компонент не отправляет событие <codeph>selectionChange</codeph>. В любом регистре он отправляется <codeph>valueCommit</codeph> событие также.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGING_selectionChanging"><apiName>selectionChanging</apiName><shortdesc>
  Передается, когда выбор должен измениться.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается, когда выбор должен измениться. Вызов метода <codeph>preventDefault()</codeph> для события предотвращает изменение выбора.
  
  <p>Это событие отправляется при взаимодействии пользователя с элементом управления. При изменении выбора программным способом компонент не отправляет событие <codeph>selectionChanging</codeph>. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Отправляется компонентом темы оформления сетки при двойном щелчке кнопкой мыши в области ячейки..</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется компонентом темы оформления <codeph>grid</codeph> при двойном щелчке кнопкой мыши в области ячейки.
   <p>Для обработки этого события следует назначить обработчик событий для компонента темы оформления <codeph>grid</codeph> элемента управления DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Отправляется компонентом темы оформления grid при щелчке кнопкой мыши в области ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется компонентом темы оформления <codeph>grid</codeph> при щелчке кнопкой мыши в области ячейки.
   <p>Для обработки этого события следует назначить обработчик событий для компонента темы оформления <codeph>grid</codeph> элемента управления DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Отправляется компонентом темы оформления сетки при выводе курсора мыши из области ячейки сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется компонентом темы оформления <codeph>grid</codeph> при выводе курсора мыши из области ячейки сетки.
   <p>Для обработки этого события следует назначить обработчик событий для компонента темы оформления <codeph>grid</codeph> элемента управления DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Отправляется компонентом темы оформления сетки при вводе курсора мыши в область ячейки сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется компонентом темы оформления <codeph>grid</codeph> при вводе курсора мыши в область ячейки сетки.
   <p>Для обработки этого события следует назначить обработчик событий для компонента темы оформления <codeph>grid</codeph> элемента управления DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Отправляется компонентом темы оформления grid после события gridMouseDown при отпускании кнопки мыши, даже если курсор мыши больше не находится в пределах сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется компонентом темы оформления <codeph>grid</codeph> после события <codeph>gridMouseDown</codeph> при отпускании кнопки мыши, даже если курсор мыши больше не находится в пределах сетки.
   <p>Для обработки этого события следует назначить обработчик событий для компонента темы оформления <codeph>grid</codeph> элемента управления DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Отправляется компонентом темы оформления grid после события gridMouseDown, если выполняется движение мыши перед отпусканием кнопки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется компонентом темы оформления <codeph>grid</codeph> после события <codeph>gridMouseDown</codeph>, если выполняется движение мыши перед отпусканием кнопки.
   <p>Для обработки этого события следует назначить обработчик событий для компонента темы оформления <codeph>grid</codeph> элемента управления DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Отправляется компонентом темы оформления grid при нажатии кнопки мыши в области ячейки сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется компонентом темы оформления <codeph>grid</codeph> при нажатии кнопки мыши в области ячейки сетки.
   <p>Для обработки этого события следует назначить обработчик событий для компонента темы оформления <codeph>grid</codeph> элемента управления DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Отправляется компонентом темы оформления сетки при изменении положения, размера и параметров отображения символа вставки вследствие действий пользователя или задач программирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется компонентом темы оформления <codeph>grid</codeph> при изменении положения, размера и параметров отображения символа вставки вследствие действий пользователя или задач программирования.
   <p>Для обработки этого события следует назначить обработчик событий для компонента темы оформления <codeph>grid</codeph> элемента управления DataGrid.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGrid:DataGrid"><apiName>DataGrid</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGrid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc conref="spark.components.Grid#addSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>rowIndex</codeph>, <codeph>columnIndex</codeph> или <codeph>selectionMode</codeph>.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc conref="spark.components.Grid#addSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>index</codeph> или <codeph>selectionMode</codeph>. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:clearSelection"><apiName>clearSelection</apiName><shortdesc conref="spark.components.Grid#clearSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, если выделенный фрагмент изменился, или <codeph>false</codeph>, если выбор не выполнялся.
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#clearSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitCaretPosition"><apiName>commitCaretPosition</apiName><shortdesc>
      Обновляет позицию символа вставки сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newCaretRowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 rowIndex новой позиции символа вставки.
     
      </apiDesc></apiParam><apiParam><apiItemName>newCaretColumnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 columnIndex новой позиции символа вставки. Если selectionMode основан на строке, то используется значение -1.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обновляет позицию символа вставки сетки. Если изменения положения символа вставки компонент темы оформления <codeph>grid</codeph> отправляет событие <codeph>caretChange</codeph>.
           </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridCaretEvent/CARET_CHANGE"><linktext>spark.events.GridCaretEvent.CARET_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitInteractiveSelection"><apiName>commitInteractiveSelection</apiName><shortdesc>
      В ответ на ввод пользователя (посредством мыши или клавиатуры), который изменяет выделенный фрагмент, этот метод отправляет событие selectionChanging.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>True</codeph>, если выбор был передан или не изменился, или <codeph>false</codeph>, если выбор был отменен или не мог быть передан вследствие ошибки, например если индекс находится вне пределов или отсутствует совместимость <codeph>selectionEventKind</codeph> с <codeph>selectionMode</codeph>.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>selectionEventKind</apiItemName><apiType value="String"/><apiDesc>Константа, определенная классом GridSelectionEventKind, который указывает передаваемый выделенный фрагмент. Если значение не null, этот элемент используется для создания события <codeph>selectionChanging</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Если <codeph>selectionEventKind</codeph> указан для строки или ячейки, то отображает отсчитываемый от нуля <codeph>rowIndex</codeph> выбранного фрагмента в поставщике данных. Если <codeph>selectionEventKind</codeph> указан для нескольких ячеек, то отображает отсчитываемый от нуля <codeph>rowIndex</codeph> начала координат области ячейки. Значение по умолчанию -1 указывает, что этот параметр не используется.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Если <codeph>selectionEventKind</codeph> указан для одной строки или ячейки, то отображает отсчитываемый от нуля <codeph>columnIndex</codeph> выбора. Если <codeph>selectionEventKind</codeph> указан для нескольких ячеек, то отображает отсчитываемый от нуля <codeph>columnIndex</codeph> начала координат области ячейки. Значение по умолчанию -1 указывает, что этот параметр не используется.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc>Если <codeph>selectionEventKind</codeph> указан для области ячейки, то отображает количество строк в этой области ячейки. Значение по умолчанию -1 указывает, что этот параметр не используется.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc>Если <codeph>selectionEventKind</codeph> указан для области ячейки, то отображает количество столбцов в этой области ячейки. Значение по умолчанию -1 указывает, что этот параметр не используется.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      В ответ на ввод пользователя (посредством мыши или клавиатуры), который изменяет выделенный фрагмент, этот метод отправляет событие <codeph>selectionChanging</codeph>. Если событие не отменено, передается изменение выбора и отправляется событие <codeph>selectionChange</codeph>. Местоположение символа вставки не обновляется. Событие <codeph>caretChanged</codeph> используется для обнаружения изменений символа вставки.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGE"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGE</linktext></link><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGING"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGING</linktext></link><link href="spark.events.xml#GridSelectionEventKind"><linktext>spark.events.GridSelectionEventKind</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:endItemEditorSession"><apiName>endItemEditorSession</apiName><shortdesc>
      Закрывает текущий активный редактор и дополнительно сохраняет значение редактора, вызывая метод save() редактора элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если сеанс редактора сохранен, и <codeph>false</codeph>, если сохранение отменено.  
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cancel</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если <codeph>false</codeph>, данные в редакторе сохранены. В противном случае данные в редакторе удаляются.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Закрывает текущий активный редактор и дополнительно сохраняет значение редактора, вызывая метод <codeph>save()</codeph> редактора элемента. Если параметр <codeph>cancel</codeph> имеет значение <codeph>true</codeph>, то вместо этого вызывается метод <codeph>cancel()</codeph> редактора.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc conref="spark.components.Grid#ensureCellIsVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки средства визуализации элементов или -1 для указания столбца.
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Отсчитываемый от 0 индекс столбца ячейки средства визуализации элементов или -1 для указания строки.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#ensureCellIsVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc conref="spark.components.Grid#invalidateCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки измененной ячейки или -1.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца измененной ячейки или -1.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateTypicalItem"><apiName>invalidateTypicalItem</apiName><shortdesc conref="spark.components.Grid#invalidateTypicalItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateTypicalItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc conref="spark.components.Grid#removeSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>rowIndex</codeph>, <codeph>columnIndex</codeph> или <codeph>selectionMode</codeph>.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc conref="spark.components.Grid#removeSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>index</codeph> или <codeph>selectionMode</codeph>. 
           
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.components.Grid#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>True</codeph> при изменении выбора.
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#selectAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc conref="spark.components.Grid#selectCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях области ячейки или <codeph>selectionMode</codeph>.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки начала координат области ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца начала координат области ячейки.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc>Количество строк начиная с <codeph>rowIndex</codeph> для включения в область ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc>Количество столбцов начиная с <codeph>columnIndex</codeph> для включения в область ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectIndices"><apiName>selectIndices</apiName><shortdesc conref="spark.components.Grid#selectIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> при отсутствии ошибок. <codeph>false</codeph>, если любые индексы недействительны, <codeph>startRowIndex</codeph> меньше или равен <codeph>endRowIndex</codeph> или если <codeph>selectionMode</codeph> недействителен. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Индекс строки на основе 0 первой строки в выделенном фрагменте.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Количество строк в выделенном фрагменте.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, если текущий выбор содержит все ячейки в области ячейки.
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Количество строк начиная с <codeph>rowIndex</codeph> для включения в область ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc>Количество столбцов начиная с <codeph>columnIndex</codeph> для включения в область ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc conref="spark.components.Grid#selectionContainsCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, если текущий выбор содержит эту ячейку.
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, если текущий выбор содержит эту строку.
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки для строки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, если текущий выбор содержит эти строки.
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Вектор индексов строк на основе 0 для включения в выбор. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc conref="spark.components.Grid#setSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true </codeph>при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>rowIndex</codeph>, <codeph>columnIndex</codeph> или <codeph>selectionMode</codeph>.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс столбца ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc conref="spark.components.Grid#setSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true </codeph>при отсутствии ошибок. <codeph>false</codeph> при недействительных значениях <codeph>index</codeph> или <codeph>selectionMode</codeph>. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от 0 индекс строки ячейки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:sortByColumns"><apiName>sortByColumns</apiName><shortdesc>
      Сортирует DataGrid по одному или нескольким столбцам и обновляет отображение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>True</codeph>, если <codeph>dataProvider</codeph> был отсортирован по указанным индексам столбцов.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Индексы столбцов, по которым выполняется сортировка <codeph>dataProvider</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>isInteractive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При значении true отправляются события <codeph>GridSortEvent.SORT_CHANGING</codeph> и <codeph>GridSortEvent.SORT_CHANGE</codeph> и для группы заголовков столбца <codeph>visibleSortIndicatorIndices</codeph> устанавливаются значения <codeph>columnIndices</codeph>, если событие <codeph>GridSortEvent.SORT_CHANGING</codeph> не отменено.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Сортирует DataGrid по одному или нескольким столбцам и обновляет отображение.
     
      <p>Если <codeph>dataProvider</codeph> представлен ICollectionView, то для его свойства <codeph>sort</codeph> устанавливается значение на основе флага <codeph>dataField</codeph>, <codeph>sortCompareFunction</codeph> и <codeph>sortDescending</codeph> каждого столбца. Затем вызывается метод <codeph>refresh()</codeph> поставщика данных. </p>
      
      <p>Если <codeph>dataProvider</codeph> не является ICollectionView, то этот метод не действует.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortCompareFunction"><linktext>spark.components.gridClasses. GridColumn.sortCompareFunction</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortDescending"><linktext>spark.components.gridClasses. GridColumn.sortDescending</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortField"><linktext>spark.components.gridClasses. GridColumn.sortField</linktext></link><link href="" invalidHref="spark.components.gridClasses.xml#GridColumnHeaderGroup/visibleSortIndicatorIndices"><linktext>spark.components.gridClasses. GridColumnHeaderGroup.visibleSortIndicatorIndices</linktext></link><link href="spark.events.xml#GridSortEvent"><linktext>spark.events. GridSortEvent</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:startItemEditorSession"><apiName>startItemEditorSession</apiName><shortdesc>
      Запускает сеанс редактора в выбранной ячейке сетки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если запущен сеанс редактора. Возвращает <codeph>false</codeph>, если сеанс редактора был отменен или не начат. Обратите внимание, что сеанс редактора невозможно начать в столбце, который не отображается.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от нуля индекс строки редактируемой ячейки.
           </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от нуля индекс столбца редактируемой ячейки.  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Запускает сеанс редактора в выбранной ячейке сетки. Этот метод обходит проверки редактируемого свойства в DataGrid и GridColumn, которые предотвращают запуск сеанса редактора в пользовательском интерфейсе. Событие <codeph>startItemEditorSession</codeph> отправляется до создания редактора элементов. При этом прослушиватель может динамически изменять редактор элементов для указанной ячейки. Это событие можно отменить с помощью метода <codeph>preventDefault()</codeph>, если создание сеанса редактора не требуется.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGrid:columnsLength:get"><apiName>columnsLength</apiName><shortdesc>
      Возвращает значение columns.length, если указан IList столбцов, иначе возвращает 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Возвращает значение <codeph>columns.length</codeph>, если указан IList столбцов, иначе возвращает 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:columns:get"><apiName>columns</apiName><shortdesc conref="spark.components.Grid#columns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#columns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProviderLength:get"><apiName>dataProviderLength</apiName><shortdesc>
      Возвращает значение dataProvider.length, если указан dataProvider IList, иначе возвращает 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Возвращает значение <codeph>dataProvider.length</codeph>, если указан dataProvider IList, иначе возвращает 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.Grid#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataProvider">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.Grid#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.Grid#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editable:get"><apiName>editable</apiName><shortdesc>
      Значение по умолчанию для свойства editable GridColumn, которое указывает возможность редактирования элемента поставщика данных соответствующей ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию для свойства <codeph>editable</codeph> GridColumn, которое указывает возможность редактирования элемента поставщика данных соответствующей ячейки. Если <codeph>true</codeph>, редактор элементов откроется при щелчке в указанной ячейке. Для включения или выключения редактирования в каждой ячейке (а не в каждом столбце) обрабатывается событие <codeph>startItemEditorSession</codeph>. Чтобы определить, должна ли ячейка быть редактируемой, добавьте необходимую логику в обработчик событий. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorColumnIndex:get"><apiName>editorColumnIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс столбца редактируемой ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс столбца редактируемой ячейки. Значение -1, если отсутствуют редактируемые ячейки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorRowIndex:get"><apiName>editorRowIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс строки редактируемой ячейки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс строки редактируемой ячейки. Значение -1, если отсутствуют редактируемые ячейки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий на необходимость активации IME при получении компонентом фокуса. Если редактор элементов открыт, он устанавливает эти свойство соответственно.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Значение по умолчанию для свойства imeMode GridColumn, которое указывает режим IME (редактор метода ввода).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию для свойства <codeph>imeMode</codeph> GridColumn, которое указывает режим IME (редактор метода ввода). IME позволяет пользователям вводить текст на китайском, японском и корейском языках. Flex устанавливает указанный режим IME при получении фокуса элементом управления и возвращается к предыдущему значению при потере фокуса элементом управления.
          <p>Класс flash.system.IMEConversionMode определяет константы для допустимых значений этого свойства. Можно также указать значение <codeph>null</codeph> и не указывать IME.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemEditorInstance:get"><apiName>itemEditorInstance</apiName><shortdesc>
      Ссылка на активный в настоящий момент экземпляр редактора элементов, если таковой существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.gridClasses:IGridItemEditor</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на активный в настоящий момент экземпляр редактора элементов, если таковой существует.
           <p>Для получения доступа к экземпляру редактора элементов и новому значению элемента во время редактирования воспользуйтесь свойством <codeph>itemEditorInstance</codeph>. Свойство <codeph>itemEditorInstance</codeph> недействительно до отправки события <codeph>itemEditorSessionStart</codeph>.</p>
           <p>Свойство <codeph>DataGridColumn.itemEditor</codeph> определяет класс редактора элемента, а, следовательно, тип данных для экземпляра редактора элементов.</p>
           <p>Не устанавливайте это свойство в MXML.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:itemEditor:get"><apiName>itemEditor</apiName><shortdesc>
      Значение по умолчанию для свойства imeMode GridColumn, которое указывает класс IGridItemEditor, используемый для создания экземпляров редактора элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemEditorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null.
           </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию для свойства <codeph>itemEditor</codeph> GridColumn, которое указывает класс IGridItemEditor, используемый для создания экземпляров редактора элементов.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataField"><linktext>dataField</linktext></link><link href="spark.components.gridClasses.xml#IGridItemEditor"><linktext>spark.components.gridClasses.IGridItemEditor</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.Grid#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>DefaultGridItemRenderer
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#itemRenderer">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc conref="spark.components.Grid#preserveSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#preserveSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.components.Grid#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc conref="spark.components.Grid#requireSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requireSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc conref="spark.components.Grid#resizableColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#resizableColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.components.Grid#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.Grid#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc conref="spark.components.Grid#selectedCell">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedCell">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc conref="spark.components.Grid#selectedCells">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedCells">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc conref="spark.components.Grid#selectedIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc conref="spark.components.Grid#selectedIndices">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndices">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc conref="spark.components.Grid#selectedItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc conref="spark.components.Grid#selectedItems">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedItems">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc conref="spark.components.Grid#selectionLength">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectionLength">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc conref="spark.components.Grid#selectionMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectionMode">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc conref="spark.components.Grid#showDataTips">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#showDataTips">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:sortableColumns:get"><apiName>sortableColumns</apiName><shortdesc>
      Обозначает возможность для пользователя интерактивно сортировать столбцы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Обозначает возможность для пользователя интерактивно сортировать столбцы. Если <codeph>true</codeph>, пользователь может отсортировать поставщик данных по полю данных в столбце, щелкнув заголовок столбца. Если <codeph>true</codeph>, для свойства <codeph>sortable</codeph> отдельного столбца можно установить значение <codeph>false</codeph>, чтобы предотвратить выполнение сортировки по определенному столбцу.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.Grid#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#typicalItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.components.Grid#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  Компонент RadioButtonGroup определяет группу компонентов RadioButton, которая рассматривается как единый компонент с взаимоисключающими вариантами выбора. Таким образом, единовременно можно выбрать только один компонент RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true"
    selectedValue="null"
    selection="null"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
    valueCommit="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент RadioButtonGroup определяет группу компонентов RadioButton, которая рассматривается как единый компонент с взаимоисключающими вариантами выбора. Таким образом, единовременно можно выбрать только один компонент RadioButton. Свойство <codeph>id</codeph> требуется при использовании тега <codeph>&lt;s:RadioButtonGroup></codeph> для определения имени группы. Любой компонент <codeph>&lt;s:RadioButton></codeph>, добавленный в эту группу, получит имя группы.
 
  <p>Обратите внимание, что компонент RadioButtonGroup является подклассом EventDispatcher, а не UIComponent, и реализует интерфейс IMXMLObject. Все остальные визуальные компоненты Flex реализуют интерфейс IVisualElement. Объявление компонента RadioButtonGroup должно содержаться в пределах тега <codeph>&lt;Declarations></codeph>, т.к. оно не может быть присвоено IVisualElement.</p> 
 
  <p>Чтобы использовать этот компонент в компоненте на основе списка, таком как List или DataGrid, следует создать средство визуализации элементов. Для получения информации о создании средства визуализации элементов см. раздел <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Пользовательские средства визуализации элементов Spark</xref>. </p>
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Отправляется при изменении значений программным способом или в результате действий пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при изменении значений программным способом или в результате действий пользователя.
 
  <p>Поскольку программное изменение инициирует это событие, убедитесь, что ни один обработчик события <codeph>valueCommit</codeph> не изменяет значение, вызывающее другое событие <codeph>valueCommit</codeph>. Например, не изменяйте свойство <codeph>selectedValue</codeph> или <codeph>selection</codeph> в обработчике событий <codeph>valueCommit</codeph>. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Передается при выборе компонента RadioButton в группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при выборе компонента RadioButton в группе. Можно также указать обработчик для отдельных компонентов RadioButton. Это событие отправляется только при взаимодействии пользователя с переключателями с помощью мыши.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Передается при изменении значения выбранного компонента RadioButton в этой группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении значения выбранного компонента RadioButton в этой группе.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>В простых случаях, когда класс расширяет EventDispatcher, не следует использовать параметр<codeph>document</codeph>.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="spark.components:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      Возвращает компонент RadioButton из заданной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Указанный компонент RadioButton, если индекс находится между 0 и <codeph>numRadioButtons</codeph> – 1. Возвращает <codeph>null</codeph>, если индекс является недействительным.
     
      </apiDesc><apiOperationClassifier>spark.components:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс RadioButton на основе 0 в RadioButtonGroup.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает компонент RadioButton из заданной позиции индекса.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="spark.components.numRadioButtons.xml"><linktext>numRadioButtons</linktext></link></related-links></apiOperation><apiOperation id="spark.components:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      Реализация метода IMXMLObject.initialized() для поддержки отложенной реализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Документ MXML, создавший этот объект.
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Идентификатор, используемый document в качестве ссылки на этот объект. Если объект представляет собой глубокое свойство в документе, <codeph>id</codeph> равно null.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Реализация метода <codeph>IMXMLObject.initialized()</codeph> для поддержки отложенной реализации.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IMXMLObject.xml"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="spark.components:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      Определяет, разрешен выбор или нет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет, разрешен выбор или нет. Следует отметить, что возвращаемое значение отражает только значение, которое было явно установлено в <codeph>RadioButtonGroup</codeph>, и не отражает любые значения, установленные явно на отдельных переключателях RadioButton. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      Число элементов RadioButton, принадлежащих этой RadioButtonGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="numRadioButtonsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"0"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число элементов RadioButton, принадлежащих этой RadioButtonGroup.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      Свойство value выбранного компонента RadioButton в группе, если таковое было установлено, в противном случае – свойство label выбранного переключателя RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство <codeph>value</codeph> выбранного компонента RadioButton в группе, если таковое было установлено, в противном случае – свойство <codeph>label</codeph> выбранного переключателя RadioButton. При отсутствии выбранного элемента RadioButton для этого свойства устанавливается значение <codeph>null</codeph>.
     
      <p>В компоненте Flex при установке значения <codeph>selectedValue</codeph> выбирается первый компонент RadioButton со свойством <codeph>value</codeph> или <codeph>label</codeph>, соответствующим этому значению.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      Содержит ссылку на текущий выбранный компонент RadioButton в группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Содержит ссылку на текущий выбранный компонент RadioButton в группе. Можно получить доступ к данному свойству только в ActionScript; установка в MXML не предусмотрена. Установка этого свойства как <codeph>null</codeph> отменяет выбор текущего компонента RadioButton. Событие изменения не отправляется.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  Элемент управления VScrollBar (вертикальная полоса прокрутки) позволяет управлять частью данных, отображаемой при слишком большом количестве данных для размещения в области просмотра по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:VScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VScrollBar
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
   
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления VScrollBar (вертикальная полоса прокрутки) позволяет управлять частью данных, отображаемой при слишком большом количестве данных для размещения в области просмотра по вертикали.
 
  <p>Элемент управления VScrollBar можно использовать автономно, однако обычно он используется как часть группы компонентов, обеспечивающих возможность прокрутки.</p>
   <p>Элемент управления VScrollBar имеет следующие характеристики по умолчанию:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>15 пикселей в ширину на 85 пикселей в высоту</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>15 пикселей в ширину и 15 пикселей в высоту</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row><row>
           <entry>Заданные по умолчанию классы темы оформления</entry>
           <entry>spark.skins.spark.VScrollBarSkin
              <p>spark.skins.spark.VScrollBarThumbSkin</p>
              <p>spark.skins.spark.VScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VScrollBarSkin"><linktext>spark.skins.spark.VScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Передается перед изменением verticalScrollPosition вследствие события mouseWheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается перед изменением <codeph>verticalScrollPosition</codeph> вследствие события <codeph>mouseWheel</codeph>.
 
  <p>Поведением по умолчанию является вертикальная прокрутка в соответствии с количеством "шагов" в событии <codeph>delta</codeph>. Высота шага определяется методом <codeph>getVerticalScrollPositionDelta</codeph> области просмотра с использованием <codeph>UP</codeph> или <codeph>DOWN</codeph> в зависимости от направления прокрутки.</p>
 
  <p>Вызов метода <codeph>preventDefault()</codeph> для события предотвращает изменение положения вертикальной прокрутки. В противном случае при изменении свойства <codeph>delta</codeph> события это значение будет использоваться для определения количества шагов в вертикальном направлении.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Увеличивает value постранично, если increase равно true, или уменьшает value постранично, если increase равно false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Следует ли увеличить (<codeph>true</codeph>) или уменьшить (<codeph>false</codeph>) <codeph>value</codeph>. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Увеличивает <codeph>value</codeph> постранично, если <codeph>increase</codeph> равно <codeph>true</codeph>, или уменьшает <codeph>value</codeph> постранично, если <codeph>increase</codeph> равно <codeph>false</codeph>. Увеличение значения <codeph>value</codeph> полосы прокрутки прокручивает область просмотра вверх. Уменьшение значения <codeph>value</codeph> прокручивает область просмотра вниз.
      
      <p>Если установлено свойство <codeph>viewport</codeph>, то его метод <codeph>getVerticalScrollPositionDelta()</codeph> используется для вычисления размера приращения страницы. Если <codeph>viewport</codeph> равно null, то используется свойство <codeph>pageSize</codeph> полосы прокрутки.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Если область просмотра имеет значение, отличное от null, измените положение вертикальной прокрутки для перехода на строку вверх или вниз с помощью прокрутки области просмотра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Является ли прокрутка строк вверх (<codeph>true</codeph>) или вниз (<codeph>false</codeph>). 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Если свойство <codeph>viewport</codeph> имеет значение, отличное от null, измените положение прокрутки по вертикали на строку вверх или вниз с помощью прокрутки области просмотра. Этот метод вычисляет количество прокручиваемых строк путем вызова метода <codeph>IViewport.getVerticalScrollPositionDelta()</codeph> с <codeph>flash.ui.Keyboard.RIGHT</codeph> или <codeph>flash.ui.Keyboard.LEFT</codeph>. Затем вызывается метод <codeph>setValue()</codeph> для установки соответствующего значения для свойства <codeph>IViewport.verticalScrollPosition</codeph>.
           <p>Если <codeph>viewport</codeph> не имеет значение null, измените положение вертикальной прокрутки для перехода на строку вверх или вниз путем вызова метода <codeph>changeValueByStep()</codeph>.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Обновляет свойство значения и, если viewport имеет значение, отличное от null, устанавливает его значение для verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Новое значение свойства <codeph>value</codeph>. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обновляет свойство значения и, если <codeph>viewport</codeph> имеет значение, отличное от null, устанавливает его значение <codeph>value</codeph> для <codeph>verticalScrollPosition</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VScrollBar/viewport"><linktext>область просмотра</linktext></link></related-links></apiOperation><apiValue id="spark.components:VScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      Область просмотра, управляемая этой полосой прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Область просмотра, управляемая этой полосой прокрутки.
      
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  Класс VideoDisplay представляет собой видеопроигрыватель без дополнительных элементов оформления, который поддерживает последовательную загрузку, множественную скорость передачи и потоковое видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoDisplay">
<description>
 Так как этот компонент не определяет тему оформления для мобильной темы, компания Adobe не рекомендует использовать этот компонент в мобильном приложении. Также можно указать пользовательскую мобильную тему оформления для компонента. Для получения подробной информации см. раздел <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Основы создания мобильных тем оформления</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoDisplay&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoDisplay 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс VideoDisplay представляет собой видеопроигрыватель без дополнительных элементов оформления, который поддерживает последовательную загрузку, множественную скорость передачи и потоковое видео.
 
  <p><codeph>VideoDisplay</codeph> является версией без хрома, которая не поддерживает создание тем оформления. Он используется в случаях, когда требуется, чтобы пользователь не мог взаимодействовать с элементами управления.</p>
 
  <p><codeph>VideoPlayer</codeph> является версией с возможностью изменения оформления.</p>
   <p>Для элемента управления VideoDisplay по умолчанию установлены следующие характеристики:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row>
           <entry>Размер по умолчанию</entry>
           <entry>0 пикселей в ширину и 0 пикселей в высоту без содержимого, а также ширина и высота видеоролика с содержимым</entry>
        </row><row>
           <entry>Минимальный размер</entry>
           <entry>0</entry>
        </row><row>
           <entry>Максимальный размер</entry>
           <entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoDisplayExample.mxml"><swfblock conref="examples/VideoDisplayExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link></related-links><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  Отправляется после изменения состояния MediaPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения состояния MediaPlayer.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  Отправляется после изменения свойства содержимого duration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения свойства содержимого <codeph>duration</codeph>.
 
  <p>Это событие невозможно отправить при значении источника, установленном на null, или при возникновении ошибки воспроизведения.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  Отправляется после изменения свойства currentTime MediaPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения свойства <codeph>currentTime</codeph> MediaPlayer.
 
  <p>Это событие невозможно отправить при значении источника, установленном на null, или при возникновении ошибки воспроизведения.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Отправляется при достижении точкой воспроизведения продолжительности воспроизводимого мультимедийного содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при достижении точкой воспроизведения продолжительности воспроизводимого мультимедийного содержимого.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  Отправляется после получения данных во время операции загрузки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после получения данных во время операции загрузки. Это событие отправляется только при воспроизведении видеоролика путем его непосредственной загрузки с сервера, как правило, путем выдачи запроса HTTP. Оно не отправляется при воспроизведении видеофрагмента из специального мультимедийного сервера, такого как Flash Media Server.
 
  <p>Это событие невозможно отправить при значении источника, установленном на null, или при возникновении ошибки воспроизведения.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      Приостановка воспроизведения без перемещения точки воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Приостановка воспроизведения без перемещения точки воспроизведения. Если воспроизведение уже приостановлено или остановлено, метод не действует.  
           <p>Для повторного запуска воспроизведения следует выполнить вызов метода <codeph>play()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      Вызывает воспроизведение видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Вызывает воспроизведение видео. Вызов возможен, если воспроизведение видеозаписи приостановлено, остановлено или в данный момент выполняется.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:seek"><apiName>seek</apiName><shortdesc>
      Выполняет поиск заданного времени в видеоролике.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>Время поиска в секундах.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет поиск заданного времени в видеоролике. Если видео воспроизводится, то воспроизведение продолжается с этого момента. Если видео приостановлено, то осуществляется переход к данному моменту и видео остается приостановленным. Если видео остановлено, то выполняется переход к данному моменту и вход в состояние приостановки воспроизведения. Этот метод не влияет на видеопотоки в реальном времени.
           <p>Если время меньше 0 или NaN, выдает исключение. Если время превышает окончание потока или продолжительность загруженного файла, то будет предпринята попытка перехода, а при неудачной попытке произойдет восстановление.</p>
     
      <p>Свойство <codeph>currentTime</codeph> может не иметь ожидаемое значение непосредственно после вызова <codeph>seek()</codeph>. При использовании последовательной загрузки можно перейти только в ключевой кадр. Поэтому переход перемещает пользователя в первый ближайший ключевой кадр к указанному времени.</p>
      
      <p><b>Примечание.</b> При потоковом воспроизведении переход осуществляется точно на указанное время, даже если исходный FLV-файл не имеет ключевых кадров.</p>
           <p>Процесс перехода является асинхронным, т. е. при вызове метода <codeph>seek()</codeph> значение свойства <codeph>currentTime</codeph> обновляется с задержкой. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      Останавливает воспроизведение видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Останавливает воспроизведение видео. Если для свойства <codeph>autoRewind</codeph> установлено значение <codeph>true</codeph>, то производится перемотка видео к первому кадру. Не оказывает влияния на проигрыватель, если воспроизведение уже остановлено. Для продолжения воспроизведения вызовите метод <codeph>play()</codeph>.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="spark.components:VideoDisplay:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc>
      Если autoPlay = false, то autoDisplayFirstFrame управляет загрузкой видеоролика после установки source.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Если <codeph>autoPlay = false</codeph>, то <codeph>autoDisplayFirstFrame</codeph> управляет загрузкой видеоролика после установки <codeph>source</codeph>. Если <codeph>autoDisplayFirstFrame</codeph> установлен на <codeph>true</codeph>, то первый кадр видеоролика загружен и размер видеоролика установлен правильно. Если <codeph>autoDisplayFirstFrame</codeph> установлен на <codeph>false</codeph>, тогда подключение к источнику не выполняется, первый кадр не отображается и размер видеоролика не определен, пока не будет выполнена попытка воспроизведения видеоролика.
     
      <p>При <codeph>autoPlay = true</codeph> этот флажок игнорируется.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      Указывает, должно воспроизведение видео начаться немедленно после установки свойства source или нет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, должно воспроизведение видео начаться немедленно после установки свойства <codeph>source</codeph> или нет. Если <codeph>true</codeph>, видеофайл буферизуется и воспроизводится немедленно.
           <p>Даже если <codeph>autoPlay</codeph> установлено как <codeph>false</codeph>, в компоненте Flex видео начинает загружаться после вызова метода <codeph>initialize()</codeph>. При использовании Flash Media Server это означает создание потока и загрузку первого кадра для отображения. В случае загрузки http в компоненте Flex начинается загрузка потока и показ первого кадра.</p>
     
      <p>Если для <codeph>playWhenHidden</codeph> установлено значение <codeph>false</codeph>, то <codeph>autoPlay</codeph> также влияет на события, происходящие при возвращении активированного и видимого видеоролика в рабочую область.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      Указывает, когда следует перемотать файл FLV на первый кадр при остановке воспроизведения: в результате выполнения вызова метода stop() или при достижении конца потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, когда следует перемотать файл FLV на первый кадр при остановке воспроизведения: в результате выполнения вызова метода <codeph>stop()</codeph> или при достижении конца потока.
           <p>Это свойство не влияет на живое потоковое видео.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      Число байт данных, загруженных в приложение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число байт данных, загруженных в приложение.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      Общий размер данных, загружаемых в приложение (в байтах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Общий размер данных, загружаемых в приложение (в байтах).
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:currentTime:get"><apiName>currentTime</apiName><shortdesc>
      Текущее время воспроизведения, измеряемое в секундах, с начала запуска видеоролика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текущее время воспроизведения, измеряемое в секундах, с начала запуска видеоролика. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:duration:get"><apiName>duration</apiName><shortdesc>
      Продолжительность воспроизведения видеоролика в секундах
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Продолжительность воспроизведения видеоролика в секундах
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:loop:get"><apiName>loop</apiName><shortdesc>
      Указывает на то, следует ли повторить воспроизведение с носителя после его завершения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает на то, следует ли повторить воспроизведение с носителя после его завершения. Свойство <codeph>loop</codeph> имеет приоритет перед свойством <codeph>autoRewind</codeph>, поэтому если свойство loop установлено на значение <codeph>true</codeph>, свойство <codeph>autoRewind</codeph> игнорируется. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc>
      Текущее состояние видеоролика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Текущее состояние видеоролика. См. доступные значения в org.osmf.media.MediaPlayerState.
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:muted:get"><apiName>muted</apiName><shortdesc>
      Для отключения звука видеозаписи установите true; для включения звука – false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Для отключения звука видеозаписи установите <codeph>true</codeph>; для включения звука – <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc>
      Управляет продолжением воспроизведения видео, когда оно скрыто.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Управляет продолжением воспроизведения видео, когда оно скрыто. Видео скрыто, когда свойство <codeph>visible</codeph> установлено как <codeph>false</codeph> для ролика или одного из его предшествующих элементов или когда видео удалено из списка отображения. Если установлено значение <codeph>true</codeph>, воспроизведение видео будет приостановлено, пока оно будет скрыто. Если установлено значение <codeph>false</codeph>, воспроизведение видео будет продолжено, даже когда оно скрыто.
     
      <p>При блокировании видеоролика (или одного из его вышестоящих узлов) видеоролик будет приостановлен, но при повторном включении видеоролика видео не будет воспроизводиться. Этот вариант поведения не управляется через <codeph>pauseWhenHidden</codeph>, а определен в компоненте VideoDisplay.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      Содержит значение true, если видео воспроизводится или осуществляется попытка воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Содержит значение <codeph>true</codeph>, если видео воспроизводится или осуществляется попытка воспроизведения.
      
      <p>Возможно, видео в настоящее время не воспроизводится, а выполняется поиск или буферизация, но при этом происходит попытка воспроизведения.</p> 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link><link href="spark.components.xml#VideoDisplay/pause()"><linktext>pause()</linktext></link><link href="spark.components.xml#VideoDisplay/stop()"><linktext>stop()</linktext></link><link href="spark.components.xml#VideoDisplay/autoPlay"><linktext>autoPlay</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
      Свойство scaleMode описывает различные способы измерения содержимого видеоролика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc>
       Свойство <codeph>scaleMode</codeph> описывает различные способы измерения содержимого видеоролика. <codeph>scaleMode</codeph> можно установить на <codeph>none</codeph>, <codeph>stretch</codeph>, <codeph>letterbox</codeph> или <codeph>zoom</codeph>.
     
      <p>Если не указаны ширина, высота или какие-либо ограничения для компонента, это свойство не оказывает влияния.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      Видеоисточник.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Видеоисточник.
     
      <p>Для последовательной загрузки источником является путь или URL-адрес, указывающий на видеофайл для воспроизведения.</p>
     
      <p>Для потокового видео (записанное потоковое видео, потоковое видео в реальном времени или видео с разной скоростью передачи) свойством источника является объект DynamicStreamingVideoSource. Если требуется воспроизвести записанный или потоковый видеоролик в реальном времени без поддержки множественной скорости передачи, можно передать URL-адрес строки, указывающий на видеопоток. Однако в этом случае тип streamType будет рассматриваться как any, и пользователь не сможет управлять потоком с такой же эффективностью, как при управлении объектом DynamicStreamingVideoSource.</p>
     
      <p>Примечание. Не рекомендуется указывать в качестве источника MediaPlayerStateChangeEvent.LOADING или MediaPlayerStateChangeEvent.READY, если источник уже был установлен. Это может привести к появлению бесконечного цикла или ошибки времени выполнения. Если выполнение этой процедуры необходимо, дождитесь дополнительного фрейма для указания источника.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.mediaClasses.xml#DynamicStreamingVideoSource"><linktext>spark.components.mediaClasses.DynamicStreamingVideoSource</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:videoObject:get"><apiName>videoObject</apiName><shortdesc>
      Основной объект флэш-проигрывателя flash.media.Video.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Основной объект <codeph>flash.media.Video</codeph> Flash Player.
     
      <p>Если значение источника равно <codeph>null</codeph>, то возможно, что основной объект <codeph>flash.media.Video</codeph> еще не существует. В этом случае <codeph>videoObject</codeph> возвращает <codeph>null</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      Уровень громкости, указанный как значение между 0 и 1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Уровень громкости, указанный как значение между 0 и 1.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TileGroup"><apiName>TileGroup</apiName><shortdesc>
  Контейнер TileGroup является экземпляром контейнера Group, использующим класс TileLayout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TileGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TileGroup
    <strong>Properties</strong>
    columnAlign="left"
    columnCount="-1"
    columnWidth="0"
    horizontalAlign="justify"
    horizontalGap="6"
    orientation="rows"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount"-1"
    requestedRowCount="-1"
    rowAlign="top"
    rowCount="-1"
    rowHeight="0"
    verticalAlign="justify"
    verticalGap="6"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Контейнер TileGroup является экземпляром контейнера Group, использующим класс TileLayout. Не следует изменять свойство <codeph>layout</codeph>. Вместо этого следует использовать свойства класса TileGroup для изменения характеристик класса TileLayout.
 
  <p>Контейнер TileGroup имеет следующие характеристики по умолчанию:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Характеристика</entry><entry>Описание</entry></row></thead><tbody><row><entry>Размер по умолчанию</entry><entry>Достаточно большой, чтобы отобразить нижестоящие элементы</entry></row><row><entry>Минимальный размер</entry><entry>0 пикселей.</entry></row><row><entry>Максимальный размер</entry><entry>10000 пикселей в ширину и 10000 пикселей в высоту</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileGroupExample.mxml"><swfblock conref="examples/TileGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link></related-links><apiConstructor id="spark.components:TileGroup:TileGroup"><apiName>TileGroup</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. Инициализирует свойство <codeph>layout</codeph> к экземпляру класса TileLayout.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:TileGroup:columnAlign:get"><apiName>columnAlign</apiName><shortdesc conref="spark.layouts.TileLayout#columnAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.TileLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.TileLayout#columnWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalGap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:orientation:get"><apiName>orientation</apiName><shortdesc conref="spark.layouts.TileLayout#orientation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"rows"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#orientation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.TileLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.TileLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.TileLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.TileLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowAlign:get"><apiName>rowAlign</apiName><shortdesc conref="spark.layouts.TileLayout#rowAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.TileLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.TileLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalGap:get"><apiName>verticalGap</apiName><shortdesc conref="spark.layouts.TileLayout#verticalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalGap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>