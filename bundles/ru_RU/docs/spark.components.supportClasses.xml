<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components.supportClasses"><apiName>spark.components.supportClasses</apiName><apiDetail/><apiClassifier id="spark.components.supportClasses:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
  Базовый класс для компонентов тем оформления контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Отключенное состояние
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Обычное состояние
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Базовый класс для компонентов тем оформления контейнера.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:SkinnableContainerBase:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableContainerBase:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      Возвращает имя состояния, которое должно быть применено к теме оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Строка, указывающая имя состояния, которое должно быть применено к теме оформления.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      Возвращает имя состояния, которое должно быть применено к теме оформления. Например, компонент Button может возвратить строку up, down, over или disabled для указания состояния.
     
      <p>Подкласс SkinnableComponent должен обеспечивать перезапись этого метода для возврата значения.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableContainerBase:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Элемент управления Button, определенный в качестве кнопки по умолчанию для контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Элемент управления Button, определенный в качестве кнопки по умолчанию для контейнера. При фокусе, установленном на элементах управления в контейнере, нажатие клавиши Enter эквивалентно нажатию элемента управления Button
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Range"><apiName>Range</apiName><shortdesc>
  Класс Range сохраняет значение и допустимый диапазон для этого значения, определенный свойствами minimum и maximum.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Range&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Range
    <strong>Properties</strong>
    maximum="100"
    minimum="0"
    snapInterval="1"
    stepSize="1"
    value="0"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Range сохраняет значение и допустимый диапазон для этого значения, определенный свойствами <codeph>minimum</codeph> и <codeph>maximum</codeph>. Свойство <codeph>value</codeph> всегда ограничивается текущими значениями <codeph>minimum</codeph> и <codeph>maximum</codeph>, и эти <codeph>minimum</codeph> и <codeph>maximum</codeph> всегда должны располагаться в правильном порядке номеров, чтобы <codeph>(minimum &lt;= value &lt;= maximum)</codeph> имело значение <codeph>true</codeph>. Если значение свойства <codeph>snapInterval</codeph> не равняется 0, то свойство <codeph>value</codeph> также ограничивается, чтобы быть множителем <codeph>snapInterval</codeph>.
 
  <p>Range является базовым классом для различных элементов управления, требующих функций диапазона, включая TrackBase и Spinner.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#TrackBase"><linktext>spark.components.supportClasses.TrackBase</linktext></link><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Range:Range"><apiName>Range</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Range:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Увеличивает или уменьшает значение value на stepSize.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>При значении true прибавляет <codeph>stepSize</codeph> к <codeph>value</codeph>, в противном случае – вычитает его.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Увеличивает или уменьшает значение <codeph>value</codeph> на <codeph>stepSize</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:nearestValidValue"><apiName>nearestValidValue</apiName><shortdesc>
      Возвращает сумму минимума с целочисленным множителем interval, который наиболее приближен к value, если value не приближено к максимальному ограничению, в этом случае возвращается максимум.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ближайшее к входному допустимое значение.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Входное значение.
      </apiDesc></apiParam><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>Значение snapInterval или целое число, кратное snapInterval.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает сумму минимума с целочисленным множителем<codeph>interval</codeph>, который наиболее приближен к <codeph>value</codeph>, если <codeph>value</codeph> не приближено к максимальному ограничению, в этом случае возвращается максимум.
     
      <p>Если <codeph>interval</codeph> равен 0, значение отсекается по минимальному и максимальному лимитам.</p>
     
      <p>Действительные значения для диапазона определяются суммой свойства <codeph>minimum</codeph> с множителями <codeph>interval</codeph> и также определяются как меньше или равные свойству <codeph>maximum</codeph>. Максимум не обязательно должен быть кратным <codeph>snapInterval</codeph>.</p>
     
      <p>Например, если <codeph>minimum</codeph> равняется 1, <codeph>максимум</codeph> – 6, а <codeph>snapInterval</codeph> – 3, то действительными значениями для диапазона будут 1, 2, 5, 6. Аналогично, если <codeph>minimum</codeph> равняется 2, <codeph>maximum</codeph> – 9, а <codeph>snapInterval</codeph> – 1,5, то действительными значениями для диапазона будут 2, 3.5, 5, 6.5, 8, и 9.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Устанавливает вспомогательное хранилище для свойства value и передает событие valueCommit при изменении этого свойства.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Новое значение свойства <codeph>value</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Устанавливает вспомогательное хранилище для свойства <codeph>value</codeph> и передает событие <codeph>valueCommit</codeph> при изменении этого свойства.  
     
      <p>Все обновления свойства <codeph>value</codeph> приводят к вызову этого метода.</p>
     
      <p>Этот метод предполагает, что вызывающий объект уже использовал <codeph>nearestValidValue()</codeph> для ограничения параметра value.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:Range:maximum:get"><apiName>maximum</apiName><shortdesc>
      Максимальное допустимое value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      </apiDefaultValue></apiValueDef><apiDesc>
      Максимальное допустимое <codeph>value</codeph>.
     
      <p>Изменения свойства value ограничены <codeph>commitProperties()</codeph>. Значение value должно быть меньше или равно значению maximum метода <codeph>nearestValidValue()</codeph>.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:minimum:get"><apiName>minimum</apiName><shortdesc>
      Минимальное допустимое value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Минимальное допустимое <codeph>value</codeph>.
     
      <p>Изменения свойства value ограничены <codeph>commitProperties()</codeph>. Значение value должно быть больше или равно значению minimum метода <codeph>nearestValidValue()</codeph>.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:snapInterval:get"><apiName>snapInterval</apiName><shortdesc>
      Свойство snapInterval управляет действительными значениями свойства value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство snapInterval управляет действительными значениями свойства <codeph>value</codeph>. Если отлично от нуля, то действительные значения являются суммой <codeph>minimum</codeph> и целочисленных множителей этого свойства для всех сумм, которые меньше или равны <codeph>maximum</codeph>.
     
      <p>Например, если <codeph>minimum</codeph> равно 10, <codeph>maximum</codeph> - 20 и это свойство - 3, то допустимыми значениями диапазона будут 10, 13, 16, 19 и 20.</p>
      
      <p>Если значение этого свойства равно нулю, то допустимыми значениями являются числа, находящиеся между minimum и maximum включительно.</p>
     
      <p>Это свойство также ограничивает допустимые значения для свойства <codeph>stepSize</codeph>, если оно задано. Если это свойство не установлено явно и <codeph>stepSize</codeph> установлено, то <codeph>snapInterval</codeph> будет задано по умолчанию для <codeph>stepSize</codeph>.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      Степень изменения свойства value при вызове метода changeValueByStep().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Степень изменения свойства <codeph>value</codeph>при вызове метода <codeph>changeValueByStep()</codeph>. Оно должно быть кратным <codeph>snapInterval</codeph>, если <codeph>snapInterval</codeph> не равно 0. Если значение <codeph>stepSize</codeph> не является кратным, оно округляется до ближайшего кратного значения, которое больше или равно <codeph>snapInterval</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Range:value:get"><apiName>value</apiName><shortdesc>
      Текущее значение для этого диапазона.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Текущее значение для этого диапазона.
      
      <p>Изменения свойства value ограничены <codeph>commitProperties()</codeph>. Значение value должно быть больше или равно значению <codeph>minimum</codeph>, меньше или равно значению <codeph>maximum</codeph> и кратным <codeph>snapInterval</codeph> метода <codeph>nearestValidValue()</codeph>.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/setValue"><linktext>setValue</linktext></link><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
  Компонент ToggleButtonBase является базовым классом для компонентов Spark button, поддерживающих свойство selected.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Отключенное состояние кнопки Button при ее выборе
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="downAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Состояние нажатия кнопки Button при ее выборе
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="overAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Состояние наведения на кнопку Button при ее выборе
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="upAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Отжатое состояние кнопки Button при ее выборе
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ToggleButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButtonBase
    <strong>Properties</strong>
    selected="false"
 
    <strong>events</strong>
    change="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Компонент ToggleButtonBase является базовым классом для компонентов Spark button, поддерживающих свойство <codeph>selected</codeph>. ToggleButton, CheckBox и RadioButton являются подклассами ToggleButtonBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ToggleButtonBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Передается при изменении свойства selected для элемента управления ToggleButtonBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении свойства <codeph>selected</codeph> для элемента управления ToggleButtonBase. Это событие передается только в том случае, если пользователь выполняет действия с элементом управления посредством мыши.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ToggleButtonBase:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ToggleButtonBase:selected:get"><apiName>selected</apiName><shortdesc>
      Содержит true, если кнопка находится в состоянии нажатия, и false – в состоянии отжатия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Содержит <codeph>true</codeph>, если кнопка находится в состоянии нажатия, и <codeph>false</codeph> – в состоянии отжатия.
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:OverlayDepth"><apiName>OverlayDepth</apiName><shortdesc>
  Класс OverlayDepth определяет заданные по умолчанию значения глубины для различных элементов перекрытия, используемых в Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс OverlayDepth определяет заданные по умолчанию значения глубины для различных элементов перекрытия, используемых в Flex.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiValue id="spark.components.supportClasses:OverlayDepth:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      Заданное по умолчанию значение глубины под всеми элементами перекрытия Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Заданное по умолчанию значение глубины под всеми элементами перекрытия Flex.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:DROP_INDICATOR"><apiName>DROP_INDICATOR</apiName><shortdesc>
	  Глубина перекрытия для индикатора перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Глубина перекрытия для индикатора перетаскивания.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:FOCUS_PANE"><apiName>FOCUS_PANE</apiName><shortdesc>
	  Глубина перекрытия для области фокусировки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Глубина перекрытия для области фокусировки.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:MASK"><apiName>MASK</apiName><shortdesc>
      Глубина перекрытия для маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Глубина перекрытия для маски.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:TOP"><apiName>TOP</apiName><shortdesc>
	  Заданное по умолчанию значение глубины над всеми элементами перекрытия Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Заданное по умолчанию значение глубины над всеми элементами перекрытия Flex.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
  Класс ItemRenderer является базовым классом для средств визуализации элемента Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ItemRenderer
    <strong>Properties</strong>
    autoDrawBackground="true"
    selected="false"
    showsCaret="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:DataRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ItemRenderer является базовым классом для средств визуализации элемента Spark.
 
  <p>Средства визуализации элементов поддерживают дополнительные состояния представлений. Как правило, состояния представлений в средствах визуализации элементов MXML управляют внешним видом элемента данных с учетом взаимодействия пользователя с этим элементом. Класс ItemRenderer поддерживает все состояния представлений и позволяет использовать эти средства визуализации элементов с классами на основе списка.</p>
 
  <p>Flex определяет следующие состояния представлений, поддерживаемых в средствах визуализации элементов: </p>
  <ul>
    <li>normal: элемент данных не использует взаимодействие с пользователем.</li>
    <li>hovered: указатель мыши наведен на элемент данных.</li>
    <li>selected: элемент данных выбран.</li>
    <li>dragging: элемент данных перетаскивается.</li>
    <li>normalAndShowCaret: элемент данных находится в состоянии normal и получает фокус в списке элементов. </li>
    <li>hoveredAndShowCaret: элемент данных находится в состоянии hovered и получает фокус в списке элементов.</li>
    <li>selectedAndShowCaret: элемент данных находится в состоянии normal и получает фокус в списке элементов.</li>
  </ul>
 
  <p>Когда пользователь взаимодействует с элементом управления, чтобы изменить состояние представления средства визуализации элементов, Flex сначала определяет, указано ли это состояние представления в средстве визуализации. Если средство визуализации элементов поддерживает данное состояние представления, Flex использует это состояние представления в средстве визуализации элементов. Если средство визуализации элементов не поддерживает данное состояние отображения, действия в Flex не выполняются.</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ItemRenderer:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:getCurrentRendererState"><apiName>getCurrentRendererState</apiName><shortdesc>
      Возвращает имя состояния, которое должно быть применено к средству визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>String, указывающая имя состояния, которое должно быть применено к средству визуализации. 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает имя состояния, которое должно быть применено к средству визуализации. Например, основное средство визуализации элемента List возвращает строки normal, hovered или selected для определения состояния средства визуализации. Если используются действия касания (или действия мыши при игнорировании выбора), значения down и downAndSelected также важны.
     
      <p>Подкласс ItemRenderer должен перезаписать этот метод, чтобы вернуть значение, если заданное поведение отличается от поведения по умолчанию.</p>
     
      <p>Тремя основными состояниями в Flex 4.0 были "normal", "hovered" и "selected". В Flex 4.5 добавлены состояния "down" и "downAndSelected".</p>
     
      <p>Ниже представлен полный набор поддерживаемых состояний (в порядке приоретности): 
        <ul>
          <li>dragging</li>
          <li>downAndSelected</li>
          <li>selectedAndShowsCaret</li>
          <li>hoveredAndShowsCaret</li>
          <li>normalAndShowsCaret</li>
          <li>down</li>
          <li>selected</li>
          <li>hovered</li>
          <li>normal</li>
        </ul>
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:invalidateRendererState"><apiName>invalidateRendererState</apiName><shortdesc>
      Отмечает состояние визуализации как недопустимое, при этом новое состояние устанавливается во время последующего обновления экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Отмечает состояние визуализации как недопустимое, при этом новое состояние устанавливается во время последующего обновления экрана.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Необязательный компонент метки средства визуализации элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      Необязательный компонент метки средства визуализации элемента. Этот компонент используется для определения значения свойства <codeph>baselinePosition</codeph> в компоненте хоста для средства визуализации элемента. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:autoDrawBackground:get"><apiName>autoDrawBackground</apiName><shortdesc>
      Определяет, будет ли средство визуализации элемента рисовать фон элемента данных при взаимодействии с пользователем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет, будет ли средство визуализации элемента рисовать фон элемента данных при взаимодействии с пользователем. Виды взаимодействия включают перемещение мыши над элементом, выбор элемента и перемещение символа вставки элемента.
     
      <p>Если <codeph>true</codeph>, фон средства визуализации элемента создается автоматически и зависит от установленных стилей (<codeph>contentBackgroundColor</codeph>, <codeph>alternatingItemColor</codeph>, <codeph>rollOverColor</codeph>, <codeph>downColor</codeph>, <codeph>selectionColor</codeph>) и состояния, в котором находится средство визуализации.</p>
     
      <p>Если <codeph>false</codeph>, средство визуализации элемента не создает фон. Пользовательское средство визуализации элемента используется для отображения цветов фона для всех видов взаимодействий с пользователем.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      Значение установлено на true, когда пользователь нажимает кнопку мыши на средстве визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение установлено на <codeph>true</codeph>, когда пользователь нажимает кнопку мыши при наведенном на средство визуализации элементов курсоре.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      Содержит true при перемещении визуализатора элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Содержит <codeph>true</codeph> при перемещении визуализатора элементов.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Значение установлено на true, когда курсор мыши наведен на средство визуализации элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение установлено на <codeph>true</codeph>, когда курсор мыши наведен на средство визуализации элементов.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      Индекс элемента в поставщике данных основного компонента визуализатора элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Индекс элемента в поставщике данных основного компонента визуализатора элемента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      String для отображения в средстве визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      String для отображения в средстве визуализации. 
     
      <p>Компонент хоста средства визуализации элемента может использовать метод <codeph>itemToLabel()</codeph> для преобразования элемента данных в строку дисплея с помощью средства визуализации элемента. </p>
     
      <p>Для элементов управления, таких как List и ButtonBar, можно использовать свойства <codeph>labelField</codeph> или <codeph>labelFunction</codeph> для указания поля элемента данных, содержащего строку. В других случаях компонент хоста использует метод <codeph>toString()</codeph> для преобразования элемента данных в строку. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      Содержит true, если средство визуализации элемента может отображаться как выбранное.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Содержит <codeph>true</codeph>, если средство визуализации элемента может отображаться как выбранное.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Имеет значение true, если средство визуализации элементов может отображаться как находящееся в фокусе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Имеет значение <codeph>true</codeph>, если средство визуализации элементов может отображаться как находящееся в фокусе. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:GroupBase"><apiName>GroupBase</apiName><shortdesc>
  Класс GroupBase определяет базовый класс для компонентов, отображающих визуальные элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" type="Number">
<description>
  Для режима взаимодействия касанием: время ожидания в миллисекундах после события взаимодействия пользователя и до отображения компонента в состоянии нажатия.
 
  <p>Эта задержка необходима, чтобы предотвратить мерцание компонентов, когда пользователь касается экрана при инициализации действия прокрутки. Продолжительность задержки достаточна для того, чтобы пользователь получил ответ при нажатии компонента, но этот ответ не будет слишком быстрым и не отобразится при выполнении прокрутки.</p>
  
  <p>Если применяется мобильная тема, значение по умолчанию для этого стиля будет составлять 100 мс для компонентов в пределах Scroller и 0 мс для компонентов вне Scroller.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет любого символа компонента. Примером является флажок элемента управления CheckBox или стрелка на кнопке прокрутки.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет выделения при наведении курсора мыши на компонент.
 
  <p>Этот стиль применяется только в режиме <codeph>interactionMode</codeph> мыши.</p>
 
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет кольца фокуса при наведении фокуса на компонент.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="uint">
<description>
  Фоновый цвет средства визуализации элементов при его нажатии.
 
  <p>Если для <codeph>downColor</codeph> указано значение <codeph>undefined</codeph>, <codeph>downColor</codeph> не используется.</p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>undefined</codeph>. Значение по умолчанию для мобильной темы - <codeph>0xE0E0E0</codeph>.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Значение альфа-канала при заблокированном контейнере.
   </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет фона содержимого для данного компонента.
 
  <p>Изменение значения <codeph>contentBackgroundColor</codeph> для списка переопределит цвет фона содержимого элемента List, однако если средство визуализации элементов непрозрачно, видимые отличия могут отсутствовать. Цвет средства визуализации элементов определяется <codeph>alternatingItemColors</codeph>. В темах Spark стандартные средства визуализации элементов прозрачны (<codeph>alternatingItemColors = undefined</codeph>), однако в мобильных темах стандартные средства визуализации элементов непрозрачны (<codeph>alternatingItemColors = 0xFFFFFF</codeph>).</p>
  
  <p>Значение по умолчанию для темы Spark - <codeph>0xFFFFFF</codeph>. Значение по умолчанию для мобильной темы - <codeph>0xF0F0F0</codeph>.</p> 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента.
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Основной цвет компонента. 
   
  </description>
<default>0xCCCCCC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description>
  Цвет, используемый для фона элементов списка. Значение представляет собой массив из одного или более цветов. Цвет фона элементов списка изменяется согласно установленным значениям массива. 
 
  <p>Значение по умолчанию для темы Spark - <codeph>undefined</codeph>. Значение по умолчанию для мобильной темы - <codeph>0xFFFFFF</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Цвет для акцентов, используемый темами оформления компонента. Заданная по умолчанию тема оформления кнопки использует этот цвет для определения оттенка фона. Этот цвет используется при выделении полосы прокрутки. 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста активированного компонента, когда фокус на него не наведен.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста при выключенном компоненте.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста, когда компонент включен и получает фокус.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.5" type="Object">
<description>
  Указывает межсловные интервалы для использования при выравнивании. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Указывает число градусов для поворота данного текста.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера.
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textIndent; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Указывает позиции табуляции, связанные с абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для левого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен перед абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен после абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для правого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Управляет внешним видом элементов списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Управляет размещением маркера элемента списка относительно элемента списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Определяет автоотступ начального края списков, если значением заполнения этой стороны списка является <codeph>auto</codeph>.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Указывает позицию базовой линии первой строки в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Определяет тип обтекания текста вокруг плавающего объекта.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Управляет местом разрыва строк при форматировании текста по размеру окна. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Определяет вертикальное или горизонтальное размещение строки.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:GroupBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:GroupBase
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    horizontalScrollPosition="null"
    luminosityClip="false"
    luminosityInvert="false"
    layout="BasicLayout"
    mask=""
    maskType="clip"
    mouseEnabledWhereTransparent="true"
    resizeMode="noScale"
    verticalScrollPosition="no default"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors="undefined"
    baselineShift="0"
    blockProgression="tb"
    breakOpportunity="auto"
    cffHinting="horizontalStem"
    chromeColor="0xCCCCCC"
    color="0x000000"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    clearFloats="none"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    disabledAlpha="0.5"
    dominantBaseline="auto"
    firstBaselineOffset="auto"
    focusColor="0x70B2EE"
    focusedTextSelectionColor="A8C6EE"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="E8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="cff"
    rollOverColor="0xCEDBEF"
    symbolColor="0x000000"
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="interWord"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor="0xE8E8E8"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс GroupBase определяет базовый класс для компонентов, отображающих визуальные элементы. Компонент group не управляет макетом визуальных элементов, которые он содержит. Управление макетом осуществляется отдельным компонентом layout.
   </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:GroupBase:GroupBase"><apiName>GroupBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:GroupBase:containsElement"><apiName>containsElement</apiName><shortdesc>
      Определяет, является ли указанный IVisualElement нижестоящим элементом экземпляра контейнера или самим экземпляром.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>True, если элемент является нижестоящим элементом контейнера.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Тестируемый нижестоящий объект
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Определяет, является ли указанный IVisualElement нижестоящим элементом экземпляра контейнера или самим экземпляром. Возвращает true в случае многоуровневого поиска, т. е. если искомый объект является нижестоящим элементом первого, второго, третьего и т. д. уровней этого контейнера.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc conref="mx.core.UIComponent:createChildren()">
      Если объект макета еще не установлен, createChildren() назначает этому контейнеру стандартный объект макета BasicLayout.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent:createChildren()">
      <p>Если объект макета еще не установлен, createChildren() назначает этому контейнеру стандартный объект макета BasicLayout.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Изменение горизонтального положения прокрутки.
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Принимает следующие значения: 
      <ul>
      <li> 
      <codeph>END</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание scrollRect по правому краю в области содержимого.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание элемента scrollRect по левому краю в области содержимого.
      </li>
     
      <li> 
      <codeph>LEFT</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание по левому краю scrollRect с первым элементом, охватывающим левый край scrollRect или находящимся слева от него.
      </li>
     
      <li>
      <codeph>PAGE_LEFT</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание по правому краю scrollRect с первым элементом, охватывающим левый край scrollRect или находящимся слева от него.
      </li>
     
      <li> 
      <codeph>PAGE_RIGHT</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание по левому краю scrollRect с первым элементом, охватывающим правый край scrollRect или находящимся справа от него.
      </li>
     
      <li> 
      <codeph>LEFT</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание по правому краю scrollRect с первым элементом, охватывающим правый край scrollRect или находящимся справа от него.
      </li>
           </ul>
     
      <p>Реализация вызывает методы <codeph>getElementBoundsLeftOfScrollRect()</codeph> и <codeph>getElementBoundsRightOfScrollRect()</codeph> для определения границ элементов. Классы макета обычно переопределяют эти методы вместо метода <codeph>getHorizontalScrollPositionDelta()</codeph>.</p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Изменение вертикального положения прокрутки.
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Принимает следующие значения: 
      <ul>
      <li> 
      <codeph> DOWN</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание по нижнему краю scrollRect с первым элементом, охватывающим нижний край scrollRect или находящимся ниже него.
      </li>
     
      <li> 
      <codeph>END</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание scrollRect по нижнему краю в области содержимого.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание элемента scrollRect по верхнему краю в области содержимого.
      </li>
     
      <li> 
      <codeph>PAGE_DOWN</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание по верхнему краю scrollRect с первым элементом, охватывающим нижний край scrollRect или находящимся ниже него.
      </li>
     
      <codeph>PAGE_UP</codeph>
      <li>
      Возвращает дельту прокрутки, обеспечивающую выравнивание по нижнему краю scrollRect с первым элементом, охватывающим верхний край scrollRect или находящимся выше него.
      </li>
           <li> 
      <codeph>UP</codeph> Возвращает дельту прокрутки, обеспечивающую выравнивание по верхнему краю scrollRect с первым элементом, охватывающим верхний край scrollRect или находящимся выше него.
      </li>
           </ul>
     
      <p>Реализация вызывает методы <codeph>getElementBoundsAboveScrollRect()</codeph> и <codeph>getElementBoundsBelowScrollRect()</codeph> для определения границ элементов. Классы макета обычно переопределяют эти методы вместо метода <codeph>getVerticalScrollPositionDelta()</codeph>. </p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVirtualElementAt"><apiName>getVirtualElementAt</apiName><shortdesc>
      Макеты, не игнорирующие флаг useVirtualLayout, используют этот метод во время updateDisplayList() для получения элементов макета, находящихся «в пределах видимости», т. е.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Проверенный элемент с указанным индексом.
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс получаемого элемента.
      </apiDesc></apiParam><apiParam><apiItemName>eltWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Если указано – начальная ширина созданного или удаленного элемента.
      </apiDesc></apiParam><apiParam><apiItemName>eltHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Если указано – начальная высота созданного или удаленного элемента.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Макеты, не игнорирующие флаг <codeph>useVirtualLayout</codeph>, используют этот метод во время updateDisplayList() для получения элементов макета, находящихся «в пределах видимости», т. е. перекрывающих scrollRect группы.
     
      <p>Если элемент, который должен быть возвращен, не был видимым нижестоящим элементом, т. е. если он был создан или удален, и если были указаны eltWidth или eltHeight, то начальный размер элемента устанавливается с помощью setLayoutBoundsSize() до его утверждения. Это важно для таких компонентов, как текст, которые перекомпоновываются при выравнивании макета по ширине или высоте группы.</p>
      
      <p>Возвращенный элемент макета будет проверен.</p>
     
      <p>Этот метод будет по необходимости «лениво» создавать или повторно использовать и проверять правильность элементов макета.</p>
     
      <p>Этот метод не предназначен для непосредственного вызова, его вызывают макеты, поддерживающие визуализацию.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:setContentSize"><apiName>setContentSize</apiName><shortdesc>
      Определяет свойства contentWidth и contentHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Новое значение свойства <codeph>contentWidth</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Новое значение свойства <codeph>contentHeight</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Определяет свойства <codeph>contentWidth</codeph> и <codeph>contentHeight</codeph>. Этот метод предназначен для разработчиков класса layout, которые должны вызывать его из методов <codeph>updateDisplayList()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:GroupBase:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      При значении true измерение и макет выполняются при изменении позиции или размера нижестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      При значении <codeph>true</codeph> измерение и макет выполняются при изменении позиции или размера нижестоящего элемента. При значении <codeph>false</codeph> измерение и макет выполняются только однажды, при добавлении или удалении нижестоящих элементов из контейнера.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:GroupBase:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentHeight:get"><apiName>contentHeight</apiName><shortdesc conref="spark.core.IViewport#contentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentWidth:get"><apiName>contentWidth</apiName><shortdesc conref="spark.core.IViewport#contentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:layout:get"><apiName>layout</apiName><shortdesc>
      Объект layout для этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>spark.layouts.BasicLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Объект layout для этого контейнера. Этот объект отвечает за измерение и макет визуальных элементов в контейнере.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      Свойство, управляющее тем, будет ли маска свечения отсекать маскируемое содержимое.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство, управляющее тем, будет ли маска свечения отсекать маскируемое содержимое. Это свойство может иметь эффект только в том случае, если к графическому элементу применена маска типа MaskType.LUMINOSITY.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#GroupBase/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      Свойство, управляющее вычислением значения цветов RGB графического элемента, использующего маску свечения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство, управляющее вычислением значения цветов RGB графического элемента, использующего маску свечения. Если true, значение цвета RGB пиксела в исходном содержимом инвертируется и умножается на соответствующую область в маске. Если false, значение цвета RGB пикселя исходного содержимого используется непосредственно. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:maskType:get"><apiName>maskType</apiName><shortdesc>
      Тип маски.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP 
           </apiDefaultValue></apiValueDef><apiDesc>
      <p>Тип маски. Возможными значениями являются <codeph>MaskType.CLIP</codeph>, <codeph>MaskType.ALPHA</codeph> или <codeph>MaskType.LUMINOSITY</codeph>.</p> 
           <p><b>Обрезка по маске</b></p>
     
      <p>Если маскирование находится в режиме обрезки, обрезочные маски уменьшаются до однобитовых. Это означает, что маска не будет влиять на непрозрачность пикселей в исходном содержимом; она либо оставит значение без изменения (если соответствующий пиксель в маске имеет ненулевое значение альфа-канала), либо сделает его полностью прозрачным (если пиксель маски имеет нулевое значение альфа-канала).</p>
     
      <p><b>Альфа-маскирование</b></p>
     
      <p>В режиме альфа-маскирования непрозрачность каждого пиксела в исходном содержимом умножается на непрозрачность соответствующей области маски. т. е. пиксель исходного содержимого с непрозрачностью 1, маскированный областью с непрозрачностью 0,5, получит в результате непрозрачность 0,5. Исходный пиксель с непрозрачностью 0,8, маскированный областью с непрозрачностью 0,5, получит в результате непрозрачность 0,4.</p>
     
      <p><b>Маскирование свечения</b></p>
     
      <p>Маска свечения, иногда называемая «мягкой маской», действует аналогично маске альфа-канала, за исключением того, что как непрозрачность, так и значение цвета RGB пикселя в исходном содержимом умножаются на непрозрачность и значение цвета RGB в соответствующей области в маске.</p>
     
      <p>Маскирование свечения не принадлежит Flash, но распространено в таких инструментах Adobe Creative Suite, как Adobe Illustrator и Adobe Photoshop. Чтобы выполнить визуальный эффект маски свечения в содержимом, визуализируемом в Flash, графический элемент, определяющий маску свечения, фактически создает экземпляр фильтра затенения, который имитирует визуальный вид маски свечения, как если бы он был выполнен посредством инструментов Adobe Creative Suite.</p>
     
      <p>Объекты, к которым применяются маски свечения, могут установить свойства для управления значением цвета RGB и обрезкой маски. См. атрибуты luminosityInvert и luminosityClip.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mask:get"><apiName>mask</apiName><shortdesc>
      Устанавливает маску.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Устанавливает маску. Маска будет добавлена к списку отображения. Маска не должна быть уже ни в списке отображения, ни в массиве элементов.  
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/mask"><linktext>flash.display.DisplayObject.mask</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mouseEnabledWhereTransparent:get"><apiName>mouseEnabledWhereTransparent</apiName><shortdesc>
      Установка значения true для этого свойства обеспечивает отвечаемость всех границ Group на события мыши, такие как щелчок и наведение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Установка значения <codeph>true</codeph> для этого свойства обеспечивает отвечаемость всех границ Group на события мыши, такие как щелчок и наведение. Это свойство действует только в том случае, если к этому экземпляру добавляются события мыши, касания или жеста Flash Player. Кроме того, оно предполагает, что вызовы addEventListener()/removeEventListener() не являются избыточными.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:overlay:get"><apiName>overlay</apiName><shortdesc>
      Плоскость перекрытия для этой группы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:DisplayLayer</apiValueClassifier></apiValueDef><apiDesc>
      Плоскость перекрытия для этой группы. Все объекты плоскости перекрытия выполняют визуализацию поверх элементов группы. 
           <p><b>Примечание. </b>Не сохраняйте этот объект, потому что группа уничтожает и создает его по требованию.</p>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:resizeMode:get"><apiName>resizeMode</apiName><shortdesc>
      ResizeMode для этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      ResizeMode для этого контейнера. Если устанавливается режим изменения размера <codeph>ResizeMode.NO_SCALE</codeph>, то изменение размеров выполняется путем установки новой ширины и высоты для нижестоящих элементов. Если устанавливается режим изменения размера <codeph>ResizeMode.SCALE</codeph>, то все нижестоящие элементы сохранят свою немасштабируемую ширину и высоту, и нижестоящие элементы масштабируются с целью изменения размера.
     
     <p>Значением по умолчанию является <codeph>ResizeMode.NO_SCALE</codeph>, соответствующее noScale.</p>
     
     </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
  Класс SkinnableComponent определяет базовый класс для компонентов тем оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><Exclude kind="style" name="themeColor"/><styles><style name="skinClass" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Имя класса тем оформления, используемого для этого компонента. Тема оформления должна быть классом, который расширяет UIComponent. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style name="errorSkin" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Имя класса темы оформления, используемое для этого компонента при возникновении ошибки проверки. 
  
  </description>
<default>spark.skins.spark.ErrorSkin
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SkinnableComponent определяет базовый класс для компонентов тем оформления. Темы оформления, используемые классом SkinnableComponent, обычно являются нижестоящими классами по отношению к классу Skin.
 
  <p>Свяжите класс тем оформления с классом компонента, установив свойство стиля класса компонента <codeph>skinClass</codeph>. Свойство <codeph>skinClass</codeph> можно установить в CSS, как показано в следующем примере:</p>
 
  <pre>MyComponent
  {
    skinClass: ClassReference("my.skins.MyComponentSkin")
  }</pre>
 
  <p>В следующем примере свойство <codeph>skinClass</codeph> устанавливается в MXML:</p>
 
  <pre>
  &lt;MyComponent skinClass="my.skins.MyComponentSkin"/></pre>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Skin"><linktext>spark.components.supportClasses.Skin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SkinnableComponent:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:attachSkin"><apiName>attachSkin</apiName><shortdesc>
      Создание темы оформления для компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Создание темы оформления для компонента. Этот метод не вызывается напрямую. Flex вызывает его автоматически при вызове метода <codeph>createChildren()</codeph> или <codeph>UIComponent.commitProperties()</codeph>. Как правило, подкласс SkinnableComponent не переопределяет этот метод.
     
      <p>Этот метод реализует тему оформления для компонента, добавляет тему оформления как нижестоящий элемент компонента и реализует связи всех компонентов этой темы оформления.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:clearSkinParts"><apiName>clearSkinParts</apiName><shortdesc>
      Удалите ссылки на компоненты темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Удалите ссылки на компоненты темы оформления. Этот метод не вызывается напрямую. Flex вызывает его автоматически при вызове метода <codeph>detachSkin()</codeph>.
     
      <p>Как правило, подклассы SkinnableComponent не переопределяют этот метод.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:createDynamicPartInstance"><apiName>createDynamicPartInstance</apiName><shortdesc>
      Создание экземпляра динамического компонента темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Экземпляр компонента или null, если этот компонент не может быть создан.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Имя компонента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создание экземпляра динамического компонента темы оформления. Динамические компоненты темы оформления должны всегда реализовываться посредством этого метода, а не непосредственно путем вызова метода <codeph>newInstance()</codeph> с фабрики. Этот метод создает компонент, но не добавляет его к списку отображения. Этот компонент должен вызывать метод <codeph>Group.addElement()</codeph> или соответствующий метод для добавления компонента темы оформления к списку отображения. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:detachSkin"><apiName>detachSkin</apiName><shortdesc>
      Разрушает и удаляет тему оформления для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Разрушает и удаляет тему оформления для этого компонента. Этот метод не вызывается напрямую. Flex вызывает его автоматически при изменении темы оформления во время выполнения. Этот метод удаляет тему оформления и очищает все связи компонентов.
     
      <p>Как правило, подклассы SkinnableComponent не переопределяют этот метод.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:findSkinParts"><apiName>findSkinParts</apiName><shortdesc>
      Найдите компоненты тем оформления в классе тем оформления и присвойте их свойствам компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Найдите компоненты тем оформления в классе тем оформления и присвойте их свойствам компонента. Этот метод не вызывается напрямую. Flex вызывает его автоматически при вызове метода <codeph>attachSkin()</codeph>. Как правило, подкласс SkinnableComponent не переопределяет этот метод.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      Возвращает имя состояния, которое должно быть применено к теме оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Строка, указывающая имя состояния, которое должно быть применено к теме оформления.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает имя состояния, которое должно быть применено к теме оформления. Например, компонент Button может возвратить строку up, down, over или disabled для указания состояния.
     
      <p>Подкласс SkinnableComponent должен обеспечивать перезапись этого метода для возврата значения.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getDynamicPartAt"><apiName>getDynamicPartAt</apiName><shortdesc>
      Возвращает определенный экземпляр динамического компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Экземпляр компонента или null, если этот компонент не существует.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Имя динамического компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс динамического компонента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает определенный экземпляр динамического компонента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:invalidateSkinState"><apiName>invalidateSkinState</apiName><shortdesc>
      Отмечает компонент с целью установки нового состояния темы оформления во время последующего обновления экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Отмечает компонент с целью установки нового состояния темы оформления во время последующего обновления экрана.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:numDynamicParts"><apiName>numDynamicParts</apiName><shortdesc>
      Возвращает количество экземпляров динамического компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Количество экземпляров динамического компонента.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Имя динамического компонента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает количество экземпляров динамического компонента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      Вызывается при добавлении компонента темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Имя компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Экземпляр компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при добавлении компонента темы оформления. Этот метод не вызывается напрямую. Для статических компонентов Flex вызывает его автоматически при вызове метода <codeph>attachSkin()</codeph>. Для динамических компонентов Flex вызывает его автоматически при вызове метода <codeph>createDynamicPartInstance()</codeph>. 
     
      <p>Измените эту функцию для присоединения вариантов поведения компоненту темы. Если требуется изменить варианты поведения компонента темы оформления, унаследованные от базового класса, не вызывайте метод <codeph>super.partAdded()</codeph>. В других случаях следует всегда вызывать метод <codeph>super.partAdded()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      Вызывается при удалении экземпляра компонента темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Имя компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Экземпляр компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при удалении экземпляра компонента темы оформления. Этот метод не вызывается напрямую. Для статических компонентов Flex вызывает его автоматически при вызове метода <codeph>detachSkin()</codeph>. Для динамических компонентов Flex вызывает его автоматически при вызове метода <codeph>removeDynamicPartInstance()</codeph>. 
     
      <p>Измените эту функцию для удаления вариантов поведения из компонента.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:removeDynamicPartInstance"><apiName>removeDynamicPartInstance</apiName><shortdesc>
      Удалите экземпляр динамического компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Имя компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Экземпляр компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удалите экземпляр динамического компонента. Следует вызвать этот метод перед удалением динамического компонента. Этот метод не удаляет компонент из списка отображения.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      Состояние, используемое при сопоставлении псевдоселекторов CSS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Состояние, используемое при сопоставлении псевдоселекторов CSS. Это изменение возвращает текущее состояние темы оформления взамен состояния компонента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:skin:get"><apiName>skin</apiName><shortdesc>
      Экземпляр класса тем оформления для этого экземпляра компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="skinChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:UIComponent"/></apiValueDef><apiDesc>
      Экземпляр класса тем оформления для этого экземпляра компонента. Это свойство, предназначенное только для чтения, устанавливается автоматически при вызове Flex метода <codeph>attachSkin()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:suggestedFocusSkinExclusions:get"><apiName>suggestedFocusSkinExclusions</apiName><shortdesc>
      Перечисляет компоненты темы оформления, исключенные из растровых объектов, захваченных и используемых для отображения фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Перечисляет компоненты темы оформления, исключенные из растровых объектов, захваченных и используемых для отображения фокуса. Этот список используется, только если для свойства <codeph>focusSkinExclusions</codeph> темы оформления установлено значение <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TextBase"><apiName>TextBase</apiName><shortdesc>
  Базовый класс для элемента управления текста Spark, например Label или RichText, который отображает текст при помощи стилей CSS для формата по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="uint">
<description>
  Фоновый цвет ограничительного прямоугольника для этого компонента. В случае установки для стиля значения <codeph>undefined</codeph> фоновый цвет отсутствует. В противном случае этот цвет RGB отображается с альфа-уровнем, определяемым стилем <codeph>backgroundAlpha</codeph>.
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="Number">
<description>
  Альфа-уровень цвета, определенного стилем <codeph>backgroundColor</codeph>. Допустимыми являются значения от 0,0 до 1,0.
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IDisplayText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Базовый класс для элемента управления текста Spark, например Label или RichText, который отображает текст при помощи стилей CSS для формата по умолчанию.
 
  <p>В дополнение к добавлению свойства <codeph>text</codeph>, он также добавляет свойства <codeph>maxDisplayedLines</codeph> и <codeph>isTruncated</codeph> для поддержки усечения.</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:TextBase:TextBase"><apiName>TextBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:TextBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc>
	  Свойство только для чтения, информирующее о том, был ли усечен текст.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Свойство только для чтения, информирующее о том, был ли усечен текст.
	 
	  <p>Усечение текста означает замену избыточного текста индикатором усечения, например «...». Индикатор усечения зависит от языкового стандарта; он определяется ресурсом truncationIndicator в пакете ресурсов core.</p>
	 
      <p>Если значение <codeph>maxDisplayedLines</codeph> равно 0, усечения не происходит. Вместо этого текст просто обрезается, если он не помещается в границы компонента.</p>
     
      <p>Если <codeph>maxDisplayedLines</codeph> является положительным целым числом, текст будет усечен при необходимости для сокращения числа строк для данного числа.</p>
     
      <p>Если значение <codeph>maxDisplayedLines</codeph> равно -1, текст будет усечен для отображения такого числа строк, которое поместится в пределах высоты компонента.</p>
     
      <p>Усечение выполняется только в том случае, если значение стиля <codeph>lineBreak</codeph> равно <codeph>toFit</codeph>; значение данного свойства игнорируется, если <codeph>lineBreak</codeph> равно <codeph>explicit</codeph>.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc>
      Целое число, определяющее необходимость и место усечения текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Целое число, определяющее необходимость и место усечения текста.
	 
	  <p>Усечение текста означает замену избыточного текста индикатором усечения, например «...». Индикатор усечения зависит от языкового стандарта; он определяется ресурсом truncationIndicator в пакете ресурсов core.</p>
     
      <p>Если значение равно 0, усечение не выполняется. Вместо этого текст просто обрезается, если он не помещается в границы компонента.</p>
     
      <p>Если значение является положительным целым числом, текст будет усечен при необходимости для сокращения числа строк для данного числа.</p>
     
      <p>Если значение равно -1, текст будет усечен для отображения такого числа строк, которое поместится в пределах высоты компонента.</p>
     
      <p>Усечение выполняется только в том случае, если значение стиля <codeph>lineBreak</codeph> равно <codeph>toFit</codeph>; значение данного свойства игнорируется, если <codeph>lineBreak</codeph> равно <codeph>explicit</codeph>.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:showTruncationTip:get"><apiName>showTruncationTip</apiName><shortdesc>
	  Свойство, управляющее тем, должен ли компонент отображать всплывающую подсказку при усечении текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Свойство, управляющее тем, должен ли компонент отображать всплывающую подсказку при усечении текста.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:text:get"><apiName>text</apiName><shortdesc>
      Текст, отображаемый данным текстовым компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текст, отображаемый данным текстовым компонентом.
	 
      <p>Форматированием данного этого текста управляют стили CSS. Поддерживаемые стили зависят от подкласса.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
  Класс ScrollBarBase позволяет разместить часть данных, отображаемую при наличии слишком большого объема данных, которые не помещаются в области отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style inherit="no" name="smoothScrolling" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
 Этот стиль определяет необходимость плавной анимации полосы прокрутки при подкачке страниц и пошаговом продвижении. При значении false операции page и step перейдут непосредственно к местам выполнения подкачки страниц и пошагового продвижения. При значении true полоса прокрутки и все прокручиваемое содержимое будет анимировано в это местоположение.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  Количество миллисекунд между событиями страницы при нажатии и удержании пользователем кнопки мыши на дорожке.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  Количество миллисекунд после первого события страницы до начала последующих событий страницы.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  Если указано значение true (по умолчанию), то при перетаскивании ползунка полосы прокрутки с помощью мыши немедленно обновляется значение полосы прокрутки. Если false, значение полосы прокрутки обновляется после того, как кнопка мыши будет отпущена.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="autoThumbVisibility" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  Если значение равно true (по умолчанию), свойство видимости ползунка будет сброшено при обновлении его размера. Отмена <codeph>updateSkinDisplayList()</codeph> в <codeph>HScrollBar</codeph> и <codeph>VScrollBar</codeph> обеспечивает видимость ползунка, если он меньше полосы прокрутки, за исключением случаев, когда стиль имеет значение false. Для непосредственного управления видимостью ползунка необходимо установить значение false для этого стиля.  
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fixedThumbSize" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  При значении true размер ползунка по оси полосы прокрутки будет его предпочтительным размером.
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="inactive" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10">
<description>
  Неактивное состояние. Это состояние, при котором отсутствует содержимое для прокрутки, которое подразумевает, что <codeph>maximum</codeph> &lt;= <codeph>minimum</codeph>.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="decrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Необязательный компонент темы оформления, определяющий кнопку, которая при нажатии увеличивает длину полосы прокрутки. Это соответствует уменьшению свойства <codeph>value</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar up.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Необязательный компонент темы оформления, определяющий кнопку, которая при нажатии уменьшает длину полосы прокрутки. Это соответствует увеличению свойства <codeph>value</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar down.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ScrollBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ScrollBarBase
    <strong>Properties</strong>
    pageSize="20"
    snapInterval="1"
    viewport="null"
     <strong>Styles</strong>
    autoThumbVisibility="true"
    fixedThumbSize="false"
    repeatDelay="500"
    repeatInterval="35"
    smoothScrolling="true"
    symbolColor="0x000000"
  /&gt;
  </pre> 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ScrollBarBase позволяет разместить часть данных, отображаемую при наличии слишком большого объема данных, которые не помещаются в области отображения. Класс ScrollBarBase отображает пару полос прокрутки и область просмотра. Область просмотра является компонентом UIComponent, который реализует IViewport, например Group.
  
  <p>Этот элемент управления расширяет класс TrackBase и является базовым классом для элементов управления VScrollBar и HScrollBar.</p> 
 
  <p>Полоса прокрутки состоит из дорожки, ползунка прокрутки переменного размера и двух необязательных кнопок со стрелками. Класс ScrollBarBase использует четыре параметра для вычисления его состояния отображения:</p>
   <ul>
    <li><codeph>minimum</codeph>: минимальное значение диапазона.</li>
    <li><codeph>maximum</codeph>: максимальное значение диапазона.</li>
    <li><codeph>value</codeph>: текущая позиция, которая должно находиться между минимальным и максимальным значениями диапазона.</li>
    <li>Размер области просмотра представляет число одновременно отображаемых элементов в диапазоне. Число элементов должно быть меньше или равно диапазону, где диапазоном является набор значений от минимальных значений диапазона до его максимальных значений.</li>
  </ul>
    </apiDesc></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ScrollBarBase:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animatePaging"><apiName>animatePaging</apiName><shortdesc>
     Анимирует операцию перемещения к newValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>Конечное значение, к которому необходимо выполнить перемещение.
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiType value="Number"/><apiDesc>Значение запрашиваемого горизонтального или вертикального перемещения. Это значение используется для вычисления (вместе со стилем <codeph>repeatInterval</codeph>) общего времени, затраченного на перемещение к новому значению. Scroller, содержащий <codeph>pageSize</codeph>, обычно динамически назначает этому параметру значение, необходимое для просмотра содержимого в его логических границах.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Анимирует операцию перемещения к <codeph>newValue</codeph>. Параметр <codeph>pageSize</codeph> используется для вычисления времени, затрачиваемого на перемещение к значению для того, чтобы время, затраченное на анимацию операции перемещения, было примерно одинаково для анимированной и неанимированной версий; обе операции должны быть завершены в одном месте приблизительно в одно время.
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animateStepping"><apiName>animateStepping</apiName><shortdesc>
     Анимирует операцию пошагового продвижения к newValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>Конечное значение, к которому необходимо выполнить продвижение.
     </apiDesc></apiParam><apiParam><apiItemName>stepSize</apiItemName><apiType value="Number"/><apiDesc>Значение запрашиваемого пошагового продвижения. Это значение используется для вычисления (вместе со стилем <codeph>repeatInterval</codeph>) общего времени, затраченного на пошаговое продвижение к новому значению. Scroller, содержащий <codeph>stepSize</codeph>, обычно динамически назначает этому параметру значение, необходимое для просмотра содержимого в его логических границах.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Анимирует операцию пошагового продвижения к <codeph>newValue</codeph>. Параметр <codeph>stepSize</codeph> используется для вычисления времени, затрачиваемого на перемещение к значению для того, чтобы время, затраченное на анимацию операции пошагового продвижения, было примерно одинаково для анимированной и неанимированной версий; обе операции должны быть завершены в одном месте приблизительно в одно время.
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonDownHandler"><apiName>button_buttonDownHandler</apiName><shortdesc>
      Обрабатывает нажатие кнопки увеличения или уменьшения на полосе прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект события.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обрабатывает нажатие кнопки увеличения или уменьшения на полосе прокрутки. Это должно вызвать операцию пошагового продвижения, которая будет повторяться при удержании кнопки. Начинается задержка перед повторением, которая между повторяющимися событиями определяется стилями <codeph>repeatDelay</codeph> и <codeph>repeatInterval</codeph> основных объектов Button.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonUpHandler"><apiName>button_buttonUpHandler</apiName><shortdesc>
      Обрабатывает событие при отпускании кнопки увеличения или уменьшения на полосе прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект события.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обрабатывает событие при отпускании кнопки увеличения или уменьшения на полосе прокрутки. Это приводит к завершению операции пошагового продвижения, начатой первоначальным событием buttonDown на кнопке.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Прибавляет или вычитает pageSizе из value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Увеличивает ли действие страницы (<codeph>true</codeph>) или уменьшает (<codeph>false</codeph>) значение <codeph>value</codeph>. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Прибавляет или вычитает <codeph>pageSizе</codeph> из <codeph>value</codeph>. При прибавлении новое значение <codeph>value</codeph> принимает ближайшее кратное значению <codeph>pageSize</codeph>, которое больше текущего значения <codeph>value</codeph>. При вычитании новое <codeph>value</codeph> принимает ближайшее кратное значению <codeph>pageSize</codeph>, которое меньше текущего значения. Минимальным значением <codeph>value</codeph> является <codeph>pageSize</codeph>. 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ScrollBarBase:pageSize:get"><apiName>pageSize</apiName><shortdesc>
      Изменение значения свойства value при вызове метода changeValueByPage().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>20
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Изменение значения свойства <codeph>value</codeph> при вызове метода <codeph>changeValueByPage()</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      Значение, которое получает полоса прокрутки при отпускании кнопки мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение, которое получает полоса прокрутки при отпускании кнопки мыши. 
     
      <p>Если значение стиля <codeph>liveDragging</codeph> равно false, то значение полосы прокрутки устанавливается только в момент отпускания кнопки мыши. Значение не обновляется в процессе перемещения ползунка.</p>
     
      <p>Это свойство обновляется при перемещении ползунка полосы прокрутки, даже если значение <codeph>liveDragging</codeph> равно false.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:viewport:get"><apiName>viewport</apiName><shortdesc>
      Область просмотра, управляемая этой полосой прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Область просмотра, управляемая этой полосой прокрутки. Если указана область просмотра, то изменение ее реального размера, размера содержимого и позиции прокрутки вызовет запуск соответствующих методов ScrollBarBase:
      <ul>
      <li><codeph>viewportResizeHandler()</codeph></li>
      <li><codeph>contentWidthChangeHandler()</codeph></li>
      <li><codeph>contentHeightChangeHandler()</codeph></li>
      <li><codeph>viewportVerticalScrollPositionChangeHandler()</codeph></li>
      <li><codeph>viewportHorizontalScrollPositionChangeHandler()</codeph></li>
      </ul>
     
      <p>Классы VScrollBar и HScrollBar переопределяют эти методы для сохранения своих свойств <codeph>pageSize</codeph>, <codeph>maximum</codeph> и <codeph>value</codeph> в синхронизации с областью просмотра. Подобным образом они изменяют свои методы <codeph>changeValueByPage()</codeph> и <codeph>changeValueByStep()</codeph> для использования методов <codeph>scrollPositionDelta</codeph> области просмотра с целью вычисления смещений подкачки страниц и шагов.</p>
        
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:snapInterval:set"><apiName>snapInterval</apiName><shortdesc>
      
      Свойство snapInterval управляет действительными значениями свойства value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Свойство snapInterval управляет действительными значениями свойства <codeph>value</codeph>. Если отлично от нуля, то действительные значения являются суммой <codeph>minimum</codeph> и целочисленных множителей этого свойства для всех сумм, которые меньше или равны <codeph>maximum</codeph>.
     
      <p>Например, если <codeph>minimum</codeph> равно 10, <codeph>maximum</codeph> - 20 и это свойство - 3, то допустимыми значениями диапазона будут 10, 13, 16, 19 и 20.</p>
      
      <p>Если значение этого свойства равно нулю, то допустимыми значениями являются числа, находящиеся между minimum и maximum включительно.</p>
     
      <p>Это свойство также ограничивает допустимые значения для свойства <codeph>stepSize</codeph>, если оно задано. Если это свойство не установлено явно и <codeph>stepSize</codeph> установлено, то <codeph>snapInterval</codeph> будет задано по умолчанию для <codeph>stepSize</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
  Класс ButtonBase является базовым классом для всех компонентов Spark Button.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Состояние отключения Button
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="down" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Состояние нажатия Button
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="over" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Состояние наведения курсора на Button
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="up" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Состояние отжатия Button
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" type="Number">
<description>
  Для режима взаимодействия касанием: время ожидания в миллисекундах после события взаимодействия пользователя и до отображения компонента в состоянии нажатия.
 
  <p>Эта задержка необходима, чтобы предотвратить мерцание компонентов, когда пользователь касается экрана при инициализации действия прокрутки. Продолжительность задержки достаточна для того, чтобы пользователь получил ответ при нажатии компонента, но этот ответ не будет слишком быстрым и не отобразится при выполнении прокрутки.</p>
  
  <p>Если применяется мобильная тема, значение по умолчанию для этого стиля будет составлять 100 мс для компонентов в пределах Scroller и 0 мс для компонентов вне Scroller.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Количество миллисекунд между событиями <codeph>buttonDown</codeph> при нажатии и удержании пользователем кнопки мыши на кнопке.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Количество миллисекунд ожидания после первого события <codeph>buttonDown</codeph> до следующего события <codeph>buttonDown</codeph> в каждом <codeph>repeatInterval</codeph>.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="String">
<description>
  Ориентация значка по отношению к метке. Допустимыми значениями в MXML являются <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> и <codeph>top</codeph>.
 
  <p>В ActionScript для установки значения этого свойства используются следующие константы: <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> и <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Класс или экземпляр, используемый в качестве значка по умолчанию. Для визуализации значка могут использоваться различные графические источники, включая перечисленные ниже.  
  <ul>
   <li>Растровое изображение или экземпляр BitmapData.</li>
   <li>Класс, представляющий подкласс DisplayObject. BitmapFill реализует класс и выполняет его растровую визуализацию.</li>
   <li>Экземпляр DisplayObject. BitmapFill копирует его в растровое изображение для заливки.</li>
   <li>Имя внешнего файла изображения.  </li>
  </ul>
 
  </description>
<default>null 
 
  </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.primitives.BitmapImage.source.xml"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал кольца фокуса для данного компонента.
 
  </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Радиус углов данного компонента.
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="iconDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" required="false" var_type="spark.primitives:BitmapImage">
<description>
      Элемент темы оформления, определяющий дополнительный значок кнопки. 
      
      </description>

<playerversion>AIR 2.0
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines an optional icon for the button.</shortdesc></SkinPart><SkinPart name="labelDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Компонент темы оформления, определяющий метку кнопки. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the label of the button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBase
    <strong>Properties</strong>
    autoRepeat="false"
    content="null"
    label=""
    stickyHighlighting="false"
  
    <strong>Events</strong>
    buttonDown="<i>No default</i>"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    cornerRadius="4"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    repeatDelay="500"
    repeatInterval="35"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
    wordSpacing="100%"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ButtonBase является базовым классом для всех компонентов Spark Button. Классы Button и ToggleButtonBase являются подклассами ButtonBase. ToggleButton. Классы CheckBox и RadioButton являются подклассами ToggleButtonBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link><link href="spark.components.supportClasses.xml#ToggleButtonBase"><linktext>spark.components.supportClasses.ToggleButtonBase</linktext></link><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ButtonBase_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  Передается при нажатии пользователем элемента управления ButtonBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при нажатии пользователем элемента управления ButtonBase. Если для свойства <codeph>autoRepeat</codeph> установлено значение <codeph>true</codeph>, это событие передается многократно в течение всего времени, пока кнопка остается нажатой.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ButtonBase:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ButtonBase:protected:buttonReleased"><apiName>buttonReleased</apiName><shortdesc>
      Этот метод вызывается при обработке события MouseEvent.MOUSE_UP, когда пользователь нажимает на кнопку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Этот метод вызывается при обработке события <codeph>MouseEvent.MOUSE_UP</codeph>, когда пользователь нажимает на кнопку. Он вызывается только в том случае, если кнопка является целевым объектом и когда <codeph>mouseCaptured</codeph> равно <codeph>true</codeph>. С помощью этого метода подклассы могут обновлять свойства кнопки непосредственно при нажатии, что позволяет избежать нахождение кнопки в промежуточных состояниях между событиями мыши up и click.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      Измените этот метод в подклассах для обработки события click вместо добавления отдельного обработчика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект Event, связанный с событием.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Измените этот метод в подклассах для обработки события <codeph>click</codeph> вместо добавления отдельного обработчика. Этот метод не вызывается при отключенной кнопке. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:mouseEventHandler"><apiName>mouseEventHandler</apiName><shortdesc>
      Этот метод обрабатывает события мыши, при необходимости вызывает метод clickHandler и обновляет свойства hovered и mouseCaptured.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event, связанный с событием.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Этот метод обрабатывает события мыши, при необходимости вызывает метод <codeph>clickHandler</codeph> и обновляет свойства <codeph>hovered</codeph> и <codeph>mouseCaptured</codeph>.
     
      <p>Этот метод вызывается для обработки событий <codeph>MouseEvent.ROLL_OVER</codeph>, <codeph>MouseEvent.ROLL_OUT</codeph>, <codeph>MouseEvent.MOUSE_DOWN</codeph>, <codeph>MouseEvent.MOUSE_UP</codeph> и <codeph>MouseEvent.CLICK</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ButtonBase:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      Определяет, требуется ли передавать повторяющиеся события buttonDown при удерживании пользователем кнопки мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, требуется ли передавать повторяющиеся события <codeph>buttonDown</codeph> при удерживании пользователем кнопки мыши.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:content:get"><apiName>content</apiName><shortdesc>
      Свойство content позволяет передавать произвольный объект для использования в пользовательской теме оформления кнопки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство <codeph>content</codeph> позволяет передавать произвольный объект для использования в пользовательской теме оформления кнопки. При определении темой оформления необязательного компонента <codeph>labelDisplay</codeph> строковое представление <codeph>content</codeph> перейдет к свойству <codeph>text</codeph> этого компонента. Тема оформления по умолчанию использует этот механизм для визуализации <codeph>content</codeph> в виде метки кнопки.  
     
      <p>Свойство <codeph>label</codeph> представляет собой тип facade этого свойства, вводимый в виде <codeph>String</codeph>. Это свойство является привязываемым и использует событие contentChange совместно со свойством <codeph>label</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/label"><linktext>метка</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Определяет, находится ли курсор мыши над кнопкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Определяет, находится ли курсор мыши над кнопкой. Используется для определения состояния темы оформления.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:keyboardPressed:get"><apiName>keyboardPressed</apiName><shortdesc>
      Указывает, нажата ли клавиша клавиатуры, когда кнопка находится в фокусе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Указывает, нажата ли клавиша клавиатуры, когда кнопка находится в фокусе. Используется для определения состояния темы оформления.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:mouseCaptured:get"><apiName>mouseCaptured</apiName><shortdesc>
      Указывает, нажата ли кнопка мыши и находился ли курсор мыши над кнопкой при первой передаче события MouseEvent.MOUSE_DOWN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Указывает, нажата ли кнопка мыши и находился ли курсор мыши над кнопкой при первой передаче события <codeph>MouseEvent.MOUSE_DOWN</codeph>. Используется для определения состояния темы оформления.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:stickyHighlighting:get"><apiName>stickyHighlighting</apiName><shortdesc>
      При значении false кнопка отображает тему оформления для состояния нажатия при нажатии кнопки пользователем, но соответствующим образом изменяет ее, когда курсор мыши убирается с кнопки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      При значении <codeph>false</codeph> кнопка отображает тему оформления для состояния нажатия при нажатии кнопки пользователем, но соответствующим образом изменяет ее, когда курсор мыши убирается с кнопки. При значении <codeph>true</codeph> кнопка отображает тему оформления для состояния нажатия при нажатии кнопки пользователем и сохраняет ее, когда курсор мыши убирается с кнопки.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:label:set"><apiName>label</apiName><shortdesc>
      Текст, отображаемый на элементе управления ButtonBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue></apiValueDef><apiDesc>
      Текст, отображаемый на элементе управления ButtonBase.
     
      <p>Если ширина метки больше ширины элемента управления ButtonBase, метка усекается с добавлением многоточия (...). Полная метка отображается в виде всплывающей подсказки при наведении на элемент управления курсора мыши. Кроме того, при установке всплывающей подсказки с помощью свойства <codeph>tooltip</codeph> отображается всплывающая подсказка, а не текст метки.</p>
     
      <p>Это – свойство ButtonBase по умолчанию.</p>
     
      <p>Это свойство является типом facade свойства <codeph>content</codeph>, вводимым в виде <codeph>String</codeph>. Это свойство является привязываемым и использует передачу события contentChange совместно со свойством <codeph>content</codeph>.</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/content"><linktext>содержимое</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TrackBase"><apiName>TrackBase</apiName><shortdesc>
  Класс TrackBase является базовым классом для компонентов с дорожкой ползунка и одной или несколькими кнопками ползунка, такими как Slider и ScrollBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Time" inherit="no" name="slideDuration" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" type="Number">
<description>
  Продолжительность в миллисекундах для скользящей анимации при щелчке дорожки для перемещения ползунка. Этот стиль используется как для Sliders, так и для Scrollbars. Для Slider любой щелчок по дорожке ползунка вызовет анимацию, использующую этот стиль, при перемещении ползунка в позицию щелчка. Для ScrollBar этот стиль применяется только при щелчке по дорожке с нажатой клавишей Shift, что приведет к перемещению ползунка в позицию щелчка. Щелчок по дорожке без нажатия на клавишу Shift приведет к подкачке страниц. Для получения анимации при щелчке с нажатием клавиши Shift для ScrollBar следует также установить стиль <codeph>smoothScrolling</codeph>.
  
 <p>Это длительность отображения анимации перемещения по всей длине дорожки; меньшие перемещения будут иметь пропорционально меньшую длительность.</p>
 
  </description>
<default>300
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Отключенное состояние
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Обычное состояние
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="thumb" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Компонент темы оформления, определяющий кнопку, которую можно перетаскивать по дорожке для увеличения или уменьшения свойства <codeph>value</codeph>. Обновление свойства <codeph>value</codeph>: автоматически обновляют позицию кнопки ползунка по отношению к дорожке.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that can be dragged along the track to increase or
      decrease the value property.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Компонент темы оформления, определяющий кнопку, которая при нажатии устанавливает для свойства <codeph>value</codeph> значение, соответствующее текущей позиции кнопки на дорожке.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that, when  pressed, sets the value property
      to the value corresponding with the current button position on the track.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TrackBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TrackBase
    <strong>Styles</strong>
    slideDuration="300"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"
    thumbDrag="<i>No default</i>"
    thumbPress="<i>No default</i>"
    thumbRelease="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс TrackBase является базовым классом для компонентов с дорожкой ползунка и одной или несколькими кнопками ползунка, такими как Slider и ScrollBar. Он объявляет два требуемых компонента темы оформления: <codeph>thumb</codeph> и <codeph>track</codeph>. Класс TrackBase также предоставляет код для перетаскивания кнопки ползунка, который является общим для классов Slider и ScrollBar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.supportClasses.Slider.xml"><linktext>spark.components.supportClasses.Slider</linktext></link><link href="" invalidHref="spark.components.supportClasses.ScrollBar.xml"><linktext>spark.components.supportClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_RELEASE_thumbRelease"><apiName>thumbRelease</apiName><shortdesc>
  Передается при освобождении ползунка; это означает, что пользователь отпускает кнопку мыши после выполнения события thumbPress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_RELEASE</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при освобождении ползунка; это означает, что пользователь отпускает кнопку мыши после выполнения события <codeph>thumbPress</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_PRESS_thumbPress"><apiName>thumbPress</apiName><shortdesc>
  Передается при нажатии ползунка; это означает, что пользователь нажимает кнопку мыши при наведении на ползунок.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_PRESS</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при нажатии ползунка; это означает, что пользователь нажимает кнопку мыши при наведении на ползунок.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_DRAG_thumbDrag"><apiName>thumbDrag</apiName><shortdesc>
  Передается при нажатии ползунка и его перемещении при помощи мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_DRAG</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при нажатии ползунка и его перемещении при помощи мыши. Этому событию всегда предшествует событие <codeph>thumbPress</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_START_changeStart"><apiName>changeStart</apiName><shortdesc>
  Отправляется при начале действий пользователя или анимации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при начале действий пользователя или анимации.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_END_changeEnd"><apiName>changeEnd</apiName><shortdesc>
  Отправляется по завершении действий пользователя или анимации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется по завершении действий пользователя или анимации.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Передается при изменении значения элемента управления в результате действия пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении значения элемента управления в результате действия пользователя.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:TrackBase:TrackBase"><apiName>TrackBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:TrackBase:protected:pointToValue"><apiName>pointToValue</apiName><shortdesc>
      Преобразует относительное пиксельное положение (x, y) полосы прокрутки в значение между minimum и maximum включительно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Значение между minimum и maximum включительно.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Положение по оси x относительно исходной координаты x полосы прокрутки.
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Положение по оси y относительно исходной координаты y полосы прокрутки.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Преобразует относительное пиксельное положение (x, y) полосы прокрутки в значение между minimum и maximum включительно.  
     
      <p>Подклассы TrackBase должны отменить этот метод и выполнить преобразования, учитывающие их собственную геометрию. Например, вертикальный ползунок может вычислять значение следующим образом:
      <pre>
      return (y / track.height) (maximum - minimum);
      </pre>
      </p>
     
      <p>По умолчанию данный метод возвращает значение <codeph>minimum</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      Устанавливает границы тем оформления (как правило, ползунки), для которых геометрия полностью не задана макетом темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Устанавливает границы тем оформления (как правило, ползунки), для которых геометрия полностью не задана макетом темы оформления.
     
      <p>Большинство подклассов переопределяет этот метод для обновления размеров, положения и видимости ползунка на основе свойств <codeph>minimum</codeph>, <codeph>maximum</codeph> и <codeph>value</codeph>. </p>
     
      <p>По умолчанию данный метод не выполняет никаких действий.</p> 
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components.supportClasses:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
      Класс DisplayLayer поддерживает упорядоченный список DisplayObject, сортированный по глубине.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      Класс DisplayLayer поддерживает упорядоченный список DisplayObject, сортированный по глубине. Вместо создания экземпляров этого класса используется свойство <codeph>overlay</codeph> для <codeph>Group</codeph> и <codeph>DataGroup</codeph>.
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DisplayLayer:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
          Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Конструктор. 
         
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DisplayLayer:addDisplayObject"><apiName>addDisplayObject</apiName><shortdesc>
          Добавляет displayObject с указанной глубиной к упорядоченному списку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс объекта.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Добавляемый объект.
         
          </apiDesc></apiParam><apiParam><apiItemName>depth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Глубина объекта.   
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Добавляет <codeph>displayObject</codeph> с указанной глубиной к упорядоченному списку. Позиция <codeph>displayObject</codeph> в сортированных списках основана на его глубине. Объект вставлен после всех объектов с меньшим или равным значением <codeph>depth</codeph>.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectAt"><apiName>getDisplayObjectAt</apiName><shortdesc>
          Возвращает DisplayObject с указанным индексом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс объекта.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Возвращает DisplayObject с указанным индексом. 
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectDepth"><apiName>getDisplayObjectDepth</apiName><shortdesc>
          Возвращает глубину для указанного DisplayObject.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Глубина объекта.
         
          </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Объект.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Возвращает глубину для указанного DisplayObject.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:removeDisplayObject"><apiName>removeDisplayObject</apiName><shortdesc>
          Удаляет указанный displayObject из сортированного списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Удаленный объект.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Объект.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Удаляет указанный <codeph>displayObject</codeph> из сортированного списка.
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DisplayLayer:numDisplayObjects:get"><apiName>numDisplayObjects</apiName><shortdesc>
          Количество объектов в DisplayLayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          Количество объектов в DisplayLayer. 
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SliderBase"><apiName>SliderBase</apiName><shortdesc>
  Класс SliderBase позволяет пользователям выбирать значение путем перемещения ползунка между крайними точками дорожки ползунка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="fontWeight"/><Exclude kind="style" name="fontSize"/><Exclude kind="style" name="color"/><styles><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description>
  При значении <codeph>true</codeph> значение ползунка подтверждается по мере перетаскивания по дорожке, а не после отпускания кнопки ползунка.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал кольца фокуса для данного компонента.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataTip" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" required="false" type="mx.core.IDataRenderer" var_type="mx.core:IFactory">
<description>
      Компонент темы оформления, определяющий dataTip, который отображает форматированную версию текущего значения. dataTip появляется при перетаскивании ползунка. Это – динамический компонент темы оформления, он должен иметь тип IFactory.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a dataTip that displays a formatted version of 
      the current value.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SliderBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SliderBase
    <strong>Properties</strong>
    dataTipFormatFunction="20"
    dataTipPrecision="2"
    maximum="10"
    showDataTip="true"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlph="0.55"
    focusColor="0xFFFFFF"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    liveDragging="true"
    local="en"
    renderingMode="CFF"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс SliderBase позволяет пользователям выбирать значение путем перемещения ползунка между крайними точками дорожки ползунка. Текущее значение ползунка определяется относительным местоположением ползунка между конечными точками, соответствующими минимальному и максимальному значениям ползунка. Класс SliderBase является базовым классом для HSlider и VSlider.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SliderBase:SliderBase"><apiName>SliderBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SliderBase:protected:updateDataTip"><apiName>updateDataTip</apiName><shortdesc>
      Используется для позиционирования всплывающей подсказки текущего значения при ее отображении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dataTipInstance</apiItemName><apiType value="mx.core:IDataRenderer"/><apiDesc>Экземпляр <codeph>dataTip</codeph>, который необходимо обновить и положение которого необходимо изменить.
      </apiDesc></apiParam><apiParam><apiItemName>initialPosition</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Начальное положение <codeph>dataTip</codeph> в теме оформления
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Используется для позиционирования всплывающей подсказки текущего значения при ее отображении. Эта функция реализуется подклассами. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SliderBase:dataTipPrecision"><apiName>dataTipPrecision</apiName><shortdesc>
      Число десятичных разрядов, используемых для текста всплывающей подсказки текущего значения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>2</apiData><apiType value="int"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число десятичных разрядов, используемых для текста всплывающей подсказки текущего значения. Нулевое значение соответствует округлению всех значений до целого числа. Это значение игнорируется, если <codeph>dataTipFormatFunction</codeph> определена.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:showDataTip"><apiName>showDataTip</apiName><shortdesc>
      Если задано значение true, в процессе действий пользователя отображается всплывающая подсказка текущего значения, содержащая текущее значение ползунка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если задано значение <codeph>true</codeph>, в процессе действий пользователя отображается всплывающая подсказка текущего значения, содержащая текущее значение ползунка. Кроме того, для отображения всплывающей подсказки текущего значения в теме оформления должен быть определен skinPart <codeph>dataTip</codeph>. 
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:dataTipFormatFunction:get"><apiName>dataTipFormatFunction</apiName><shortdesc>
      Функция обратного вызова, используемая для форматирования текста всплывающей подсказки текущего значения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Функция обратного вызова, используемая для форматирования текста всплывающей подсказки текущего значения. Функция принимает одно число в качестве аргумента и возвращает отформатированную строку.
     
      <p>Функция имеет следующую подпись:</p>
      <pre>
      funcName(value:Number):Object
      </pre>
     
      <p>В следующем примере к тексту всплывающей подсказки текущего значения добавляется символ доллара, а затем текст форматируется с использованием свойства <codeph>dataTipPrecision</codeph> элемента управления SliderBase с именем slide: </p>
     
      <pre>
      import mx.formatters.NumberBase;
      function myDataTipFormatter(value:Number):Object { 
          var dataFormatter:NumberBase = new NumberBase(".", ",", ".", ""); 
          return   "$ " + dataFormatter.formatPrecision(String(value), slide.dataTipPrecision); 
      }
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:maximum:get"><apiName>maximum</apiName><shortdesc>
      Число, представляющее максимальное значение для value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, представляющее максимальное значение для <codeph>value</codeph>. Если значения <codeph>minimum</codeph> или <codeph>value</codeph> будут больше, чем <codeph>maximum</codeph>, то они будут изменены для отображения нового <codeph>maximum</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      Значение, которое получает ползунок, когда кнопка мыши отпускается.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение, которое получает ползунок, когда кнопка мыши отпускается. Это свойство также сохраняет временные значения, установленные в процессе анимации миниатюры, в случае, если стиль <codeph>liveDragging</codeph> равен true; реальное значение устанавливается только при завершении анимации.
     
      <p>Если значение стиля <codeph>liveDragging</codeph> равно false, то значение ползунка устанавливается только в момент отпускания кнопки мыши. Значение не обновляется в процессе перемещения ползунка.</p>
     
      <p>Это свойство обновляется, когда ползунок передвигается, даже если значение <codeph>liveDragging</codeph> равно false.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Skin"><apiName>Skin</apiName><shortdesc>
  Класс Skin определяет базовый класс для всех тем оформления, используемых компонентами тем оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.skins:IHighlightBitmapCaptureClient</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Skin определяет базовый класс для всех тем оформления, используемых компонентами тем оформления. Класс SkinnableComponent определяет базовый класс для компонентов тем оформления.
 
  <p>Как правило, классы тем оформления записываются в MXML, как показано в следующем примере:</p>
 
  <pre>  &lt;?xml version="1.0"?>
  &lt;Skin xmlns="http://ns.adobe.com/mxml/2009">
  
  &lt;Metadata>
          &lt;!-- Specify the component that uses this skin class. -->
          [HostComponent("my.component.MyComponent")]
      &lt;/Metadata> 
      
      &lt;states>
          &lt;!-- Specify the states controlled by this skin. -->
      &lt;/states>
          
      &lt;!-- Define skin. -->
  
  &lt;/Skin></pre>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.SkinnableComponent.xml"><linktext>mx.core.SkinnableComponent</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Skin:Skin"><apiName>Skin</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Skin:beginHighlightBitmapCapture"><apiName>beginHighlightBitmapCapture</apiName><shortdesc>
      Вызывается перед выполнением захвата растрового изображения для этой темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если компонент необходимо перерисовать. В противном случае <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Вызывается перед выполнением захвата растрового изображения для этой темы оформления. Реализация по умолчанию исключает элементы в массиве <codeph>focusSkinExclusions</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Skin:endHighlightBitmapCapture"><apiName>endHighlightBitmapCapture</apiName><shortdesc>
      Вызывается после выполнения захвата растрового изображения для этой темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если компонент необходимо перерисовать. В противном случае <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Вызывается после выполнения захвата растрового изображения для этой темы оформления. Реализация по умолчанию восстанавливает элементы в массиве <codeph>focusSkinExclusions</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:Skin:focusSkinExclusions:get"><apiName>focusSkinExclusions</apiName><shortdesc>
      Список идентификаторов элементов, которые необходимо исключить при визуализации кольца фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Список идентификаторов элементов, которые необходимо исключить при визуализации кольца фокуса. Должны быть исключены только элементы типа DisplayObject или GraphicElement. Элементы других типов игнорируются.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownController"><apiName>DropDownController</apiName><shortdesc>
  Класс DropDownController управляет мышью, клавиатурой и действиями с фокусом для кнопки привязки и связанных с ней раскрывающихся списков.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс DropDownController управляет мышью, клавиатурой и действиями с фокусом для кнопки привязки и связанных с ней раскрывающихся списков. Этот класс используется раскрывающимися списками (например, DropDownList) для управления их открытием и закрытием в результате действий пользователя.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DropDownController:DropDownController"><apiName>DropDownController</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownController:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Закрывает раскрывающийся список и передает событие DropDownEvent.CLOSE.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>Если значение равно <codeph>true</codeph>, то выбранный элемент данных подтверждается. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Закрывает раскрывающийся список и передает событие <codeph>DropDownEvent.CLOSE</codeph>.  
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Открывает раскрывающийся список и передает событие DropdownEvent.OPEN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Открывает раскрывающийся список и передает событие <codeph>DropdownEvent.OPEN</codeph>. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processFocusOut"><apiName>processFocusOut</apiName><shortdesc>
      Закрывает раскрывающийся список, если он уже вне фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект события для события <codeph>FOCUS_OUT</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Закрывает раскрывающийся список, если он уже вне фокуса.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processKeyDown"><apiName>processKeyDown</apiName><shortdesc>
      Обрабатывает действия пользователя клавиатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает значение <codeph>true</codeph>, если <codeph>keyCode</codeph> был распознан и обработан.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Объект события из события клавиатуры.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обрабатывает действия пользователя клавиатуры.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownController:hitAreaAdditions"><apiName>hitAreaAdditions</apiName><shortdesc>
      Список объектов просмотра для рекомендованной части области щелчка раскрывающегося списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Vector$flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Список объектов просмотра для рекомендованной части области щелчка раскрывающегося списка. Щелчок мышью в пределах любого компонента, обозначенного как включение, не будет автоматически закрывать раскрывающийся список.
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:closeOnResize:get"><apiName>closeOnResize</apiName><shortdesc>
      Если установлено значение true, при изменении размера диспетчера системы закрывается раскрывающийся список.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если установлено значение <codeph>true</codeph>, при изменении размера диспетчера системы закрывается раскрывающийся список. При работе с мобильными приложениями для этого свойства можно указать значение <codeph>false</codeph>, чтобы раскрывающийся список оставался открытым при изменении ориентации страницы.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      Содержит значение true, если раскрывающийся список является открытым.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Содержит значение <codeph>true</codeph>, если раскрывающийся список является открытым.   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:rollOverOpenDelay:get"><apiName>rollOverOpenDelay</apiName><shortdesc>
      Указывает задержку (в миллисекундах) перед открытием раскрывающегося списка при наведении курсора мыши на кнопку привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
             
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает задержку (в миллисекундах) перед открытием раскрывающегося списка при наведении курсора мыши на кнопку привязки. Если установлено значение <codeph>NaN</codeph>, то раскрывающийся список открывается не наведением курсора, а щелчком мыши.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:openButton:set"><apiName>openButton</apiName><shortdesc>
      Ссылка на компонент темы оформления openButton компонента раскрывающегося списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:ButtonBase</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на компонент темы оформления <codeph>openButton</codeph> компонента раскрывающегося списка. 
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:systemManager:set"><apiName>systemManager</apiName><shortdesc>
      Ссылка на SystemManager, используемый для отслеживания движений мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.managers:ISystemManager"/></apiValueDef><apiDesc>
      Ссылка на <codeph>SystemManager</codeph>, используемый для отслеживания движений мыши. если таковой на определен, контроллер использует systemManager, ассоциированный с openButton.
             
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
  Класс ButtonBarHorizontalLayout – это макет, специально разработанный для тем оформления Spark ButtonBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ButtonBarHorizontalLayout – это макет, специально разработанный для тем оформления Spark ButtonBar. Макет располагает нижестоящие элементы по горизонтали, слева направо. 
  
  <p>Макет пытается изменить размер всех нижестоящих элементов в соответствии с предпочтительным размером. Если имеется достаточно места, то для каждого нижестоящего элемента устанавливается его предпочтительный размер плюс избыточное пространство, равномерно распределенное между нижестоящими элементами.</p>
 
  <p>Если места не достаточно для установки предпочтительного размера для всех нижестоящих элементов, то нижестоящим элементам с шириной меньше средней ширины присваивается их предпочтительный размер, а остальные элементы уменьшаются в равной степени.</p>
 
  <p>Всем нижестоящим элементам присваивается высота вышестоящего элемента.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ButtonBarHorizontalLayout:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarHorizontalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      Горизонтальный интервал между элементами макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Горизонтальный интервал между элементами макета. Следует отметить, что этот интервал определяет только расстояние между элементами макета, таким образом, при наличии единственного элемента, интервал не оказывает влияния на макет.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
  Класс ListItemDragProxy определяет прокси перетаскивания по умолчанию, используемый при перетаскивании из элементов управления на базе Spark List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ListItemDragProxy определяет прокси перетаскивания по умолчанию, используемый при перетаскивании из элементов управления на базе Spark List.
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ListItemDragProxy:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionState"><apiName>InteractionState</apiName><shortdesc>
      Значения свойства state класса InteractionStateDetector.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Значения свойства <codeph>state</codeph> класса InteractionStateDetector.
           </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionStateDetector"><linktext>spark.components.supportClasses.InteractionStateDetector</linktext></link></related-links><apiValue id="spark.components.supportClasses:InteractionState:DOWN"><apiName>DOWN</apiName><shortdesc>
          Компонент должен находиться в состоянии нажатия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Компонент должен находиться в состоянии нажатия.
          
          <p>В настоящее время пользователь нажимает этот компонент.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:OVER"><apiName>OVER</apiName><shortdesc>
          Компонент должен находиться в состоянии наведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>over</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Компонент должен находиться в состоянии наведения.
          
          <p>В настоящее время указатель мыши пользователя наведен на этот компонент.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:UP"><apiName>UP</apiName><shortdesc>
          Компонент должен находиться в состоянии отпускания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Компонент должен находиться в состоянии отпускания.
          
          <p>Действия с этим компонентом не выполняются.</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
  Класс ButtonBarBase определяет общие варианты поведения для ButtonBar, TabBar и подобных подклассов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBarBase" playerVersion="Flash10" type="String">
<description>
  Ориентация значка по отношению к метке. Допустимыми значениями в MXML являются <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> и <codeph>top</codeph>.
 
  <p>В ActionScript для установки значения этого свойства используются следующие константы: <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> и <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBarBase/&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ButtonBarBase определяет общие варианты поведения для ButtonBar, TabBar и подобных подклассов. Этот класс не добавляет новых API, однако он уточняет выбор, фокус клавиатуры и варианты поведения перемещения с помощью клавиатуры для элементов ItemRenderer элемента управления. Этот базовый класс не предназначен для непосредственного создания экземпляров.
 
  <p>ItemRenderer выбирается путем нажатия, и при этом устанавливаются свойства <codeph>selectedIndex</codeph> и <codeph>caretIndex</codeph>. Если <codeph>requireSelection</codeph> имеет значение <codeph>false</codeph>, то повторное нажатие отменит выбор. Если поставщиком данных является объект <codeph>ISelectableList</codeph>, его <codeph>selectedIndex</codeph> также установлен.</p> 
 
  <p>События клавиш стрелок обрабатываются с регулированием <codeph>caretIndex</codeph>. Если <codeph>arrowKeysWrapFocus</codeph> имеет значение <codeph>true</codeph>, то <codeph>caretIndex</codeph> является переносимым. При нажатии клавиши пробела выбирается ItemRenderer в <codeph>caretIndex</codeph>.</p>
 
  <p>Свойство <codeph>showsCaret</codeph> элемента ItemRenderer в <codeph>caretIndex</codeph> установлено на <codeph>true</codeph>, когда у объекта ButtonBarBase есть фокус и <codeph>caretIndex</codeph> был достигнут как результат действий на клавиатуре. Если <codeph>caretIndex</codeph> был установлен как побочный эффект при ответе на щелчок мыши, то <codeph>showsCaret</codeph> не установлен.</p>
 
  <p> Свойство <codeph>allowDeselection</codeph> элемента <codeph>ButtonBarButton</codeph> ItemRenderer установлено как <codeph>!requireSelection</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarBase:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      <p>Инициирует обработку табуляторов: компонент получит фокус вследствие табулирования, но не в результате нажатия на него мышью. Табулирование к нижестоящим элементам заблокировано.</p> 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarBase:iconField:get"><apiName>iconField</apiName><shortdesc>
      Имя поля в элементах поставщика данных, которое отображается как значок.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Имя поля в элементах поставщика данных, которое отображается как значок. Свойство <codeph>iconFunction</codeph> переопределяет данное свойство.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBarBase:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения ее значка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения ее значка. Свойство <codeph>iconFunction</codeph> переопределяет свойство <codeph>iconField</codeph>.
     
      <p>Для поиска соответствующих полей и возврата отображаемого значка можно использовать функцию <codeph>iconFunction</codeph>. </p>
     
      <p>Функция значка принимает отдельный аргумент, являющийся элементом в поставщике данных, и возвращает действительный источник BitmapImage.</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListBase"><apiName>ListBase</apiName><shortdesc>
  Класс ListBase является базовым классом для всех компонентов, поддерживающих выбор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ListBase
 
    <strong>Properties</strong>
    arrowKeysWrapFocus="false"
    labelField="label"
    labelFunction="null"
    requireSelection="false"
    selectedIndex="-1"
    selectedItem="undefined"
    useVirtualLayout="false"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    change="<i>No default</i>"
    changing="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableDataContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ListBase является базовым классом для всех компонентов, поддерживающих выбор. 
 
  <p><b>Примечание. </b>Элементы управления Spark на основе списка (класс Spark ListBase и его подклассы, такие как ButtonBar, ComboBox, DropDownList, List и TabBar) не поддерживают класс BasicLayout в качестве значения свойства <codeph>layout</codeph>. Не следует использовать BasicLayout с элементами управления Spark на основе списка.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Передается после изменения фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается после изменения фокуса.  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Передается после изменения выбора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается после изменения выбора. Это событие отправляется при взаимодействии пользователя с элементом управления.
 
  <p>При изменении значения свойств <codeph>selectedIndex</codeph> или <codeph>selectedItem</codeph> программным способом элемент управления не отправляет событие <codeph>change</codeph>. Вместо этого отправляется событие <codeph>valueCommit</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Передается, когда выбор должен измениться.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается, когда выбор должен измениться. Вызов метода <codeph>preventDefault()</codeph> для события предотвращает изменение выбора.
  
  <p>Это событие отправляется при взаимодействии пользователя с элементом управления. При изменении значения свойств <codeph>selectedIndex</codeph> или <codeph>selectedItem</codeph> программным способом элемент управления не отправляет событие <codeph>changing</codeph>. Вместо этого отправляется событие <codeph>valueCommit</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  Передается при выводе курсора из элемента в элементе управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при выводе курсора из элемента в элементе управления.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  Передается при наведении курсора мыши на элемент в элементе управления..</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при наведении курсора мыши на элемент в элементе управления..
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ListBase:ListBase"><apiName>ListBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ListBase:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      Корректирует выбранный индекс с учетом элементов, добавленных или удаленных из этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Новый индекс.
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Значение <codeph>true</codeph>, если элемент был добавлен к компоненту, и <codeph>false</codeph> если элемент был удален.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Корректирует выбранный индекс с учетом элементов, добавленных или удаленных из этого компонента. Этот метод корректирует выбранное значение индекса и передает событие <codeph>valueCommit</codeph>. Он не передает событие <codeph>change</codeph>, поскольку изменение не является непосредственным результатом действий пользователя. Кроме того, этот метод не передает событие <codeph>changing</codeph> и не разрешает отмену выбора. Он также не вызывает метод <codeph>itemSelected()</codeph>, поскольку выбран тот же элемент; единственное, что изменилось – это индекс элемента.
     
      <p>Событие <codeph>valueCommit</codeph> передается при следующем вызове метода <codeph>commitProperties()</codeph>.</p>
     
      <p>События <codeph>change</codeph> и <codeph>changing</codeph> не передаются при корректировке <codeph>selectedIndex</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemAdded"><apiName>itemAdded</apiName><shortdesc>
      Вызывается при добавлении элемента к этому компоненту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс добавляемого элемента. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при добавлении элемента к этому компоненту. Соответствующим образом изменяются и свойства выделения и символа вставки. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemRemoved"><apiName>itemRemoved</apiName><shortdesc>
      Вызывается при удалении элемента из этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс удаляемого элемента. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при удалении элемента из этого компонента. Соответствующим образом изменяются и свойства выделения и символа вставки. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemSelected"><apiName>itemSelected</apiName><shortdesc>
      Вызывается при выборе или отмене выбора элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Выбранный индекс элемента.
     
      </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> если элемент выбран, и <codeph>false</codeph>, если его выбор отменен.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при выборе или отмене выбора элемента. Подклассы должны отменять этот метод для отображения выбора.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemShowingCaret"><apiName>itemShowingCaret</apiName><shortdesc>
      Вызывается для определения, находится ли элемент в состоянии символа вставки или нет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс элемента, помещенный в состояние символа вставки. 
     
      </apiDesc></apiParam><apiParam><apiItemName>showsCaret</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, если элемент находится в состоянии символа вставки, и <codeph>false</codeph>, если нет.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается для определения, находится ли элемент в состоянии символа вставки или нет. Подклассы должны отменять этот метод для отображения символа вставки. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      В случае с элементом данных возвращает правильный текст, который должен быть отображен средством визуализации с учетом свойств labelField и labelFunction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, представляющая текст, отображаемый для элемента данных в средстве визуализации. 
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Элемент данных 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      В случае с элементом данных возвращает правильный текст, который должен быть отображен средством визуализации с учетом свойств <codeph>labelField</codeph> и <codeph>labelFunction.</codeph> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ListBase:NO_SELECTION"><apiName>NO_SELECTION</apiName><shortdesc>
      Статическая константа, представляющая значение «выбор отсутствует».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Статическая константа, представляющая значение «выбор отсутствует».
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:arrowKeysWrapFocus"><apiName>arrowKeysWrapFocus</apiName><shortdesc>
      Если значение равно true, навигация с помощью клавиш курсора внутри компонента приводит к переносу при достижении любого из концов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение <codeph>true</codeph>, навигация с помощью клавиш стрелок внутри компонента приведет к переносу при достижении любого из концов.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      Элемент, находящийся в настоящее время в фокусе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Элемент, находящийся в настоящее время в фокусе. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelField:get"><apiName>labelField</apiName><shortdesc>
      Имя поля в элементах поставщика данных, которое следует отобразить как метку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label" 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Имя поля в элементах поставщика данных, которое следует отобразить как метку. Если в качестве значения для labelField будет установлена пустая строка (""), ни одно из полей поставщика данных не будет рассматриваться как представляющее метку. Свойство <codeph>labelFunction</codeph> переопределяет данное свойство.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения его метки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Предоставленная пользователем функция, выполняемая для каждого элемента с целью определения его метки. Свойство <codeph>labelFunction</codeph> переопределяет свойство <codeph>labelField</codeph>.
     
      <p>Можно предоставить функцию <codeph>labelFunction</codeph>, которая выполняет поиск соответствующих полей и возвращает отображаемую строку. <codeph>labelFunction</codeph> можно также использовать для обработки форматирования и локализации. </p>
     
      <p>Функция метки принимает отдельный аргумент, являющийся элементом в поставщике данных, и возвращает строку.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      Если значение равно true, элемент данных будет всегда выбираться в элементе управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, элемент данных будет всегда выбираться в элементе управления. При значении <codeph>true</codeph> для свойства <codeph>selectedIndex</codeph> всегда устанавливается значение между 0 и (<codeph>dataProvider.length</codeph> - 1).
     
     <p>По умолчанию используется значение <codeph>false</codeph> для большинства подклассов, кроме TabBar. Для этого подкласса значение по умолчанию - <codeph>true</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Отсчитываемый от нуля индекс выбранного элемента или -1, если элемент не выбран.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Отсчитываемый от нуля индекс выбранного элемента или -1, если элемент не выбран. Установка свойства <codeph>selectedIndex</codeph> отменяет текущий выбор элемента и выбирает элемент данных в указанном индексе.
     
      <p>Значение всегда находится между -1 и (<codeph>dataProvider.length</codeph> – 1). Если элементы в индексе более низком, чем <codeph>selectedIndex</codeph>, удаляются из компонента, выбранный индекс соответственно корректируется с понижением.</p>
     
      <p>Если выбранный элемент удален, выбранный индекс устанавливается следующим образом:</p>
     
      <ul>
        <li>-1, если <codeph>requireSelection</codeph> = <codeph>false</codeph> или элементы отсутствуют.</li>
        <li>0, если <codeph>requireSelection</codeph> = <codeph>true</codeph> и имеется по крайней мере один элемент.</li>
      </ul>
     
      <p>При изменении пользователем свойства <codeph>selectedIndex</codeph> путем взаимодействия с элементом управления этот элемент управления отправляет события <codeph>change</codeph> и <codeph>changing</codeph>. При изменении значения свойства <codeph>selectedIndex</codeph> программным способом элемент управления отправляет событие <codeph>valueCommit</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Выбранный в настоящее время элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Выбранный в настоящее время элемент. Установка этого свойства отменяет выбор текущего выбранного элемента и выбирает вновь указанный элемент.
     
      <p>Установка для <codeph>selectedItem</codeph> значения элемента, не принадлежащего этому компоненту, не приведет к выбору элемента, и <codeph>selectedItem</codeph> будет установлен в состояние <codeph>undefined</codeph>.</p>
     
      <p>При удалении выбранного элемента значение выбранного элемента устанавливается как:</p>
     
      <ul>
        <li><codeph>undefined</codeph>, если <codeph>requireSelection</codeph> = <codeph>false</codeph> или элементы отсутствуют.</li>
        <li>Первый элемент, если <codeph>requireSelection</codeph> = <codeph>true</codeph> и имеется по крайней мере один элемент.</li>
      </ul>
     
      <p>При изменении пользователем свойства <codeph>selectedItem</codeph> путем взаимодействия с элементом управления этот элемент управления отправляет события <codeph>change</codeph> и <codeph>changing</codeph>. При изменении значения свойства <codeph>selectedItem</codeph> программным способом элемент управления отправляет событие <codeph>valueCommit</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      Устанавливает значение свойства useVirtualLayout макета, связанного с этим элементом управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Устанавливает значение свойства <codeph>useVirtualLayout</codeph> макета, связанного с этим элементом управления. Если макет впоследствии заменен, а значение этого свойства является <codeph>true</codeph>, то для свойства <codeph>useVirtualLayout</codeph> нового макета устанавливается значение <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
  Служебный класс для компонентов, помогающий определить, должны ли компоненты находиться в состояниях нажатия, наведения или отпускания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Служебный класс для компонентов, помогающий определить, должны ли компоненты находиться в состояниях нажатия, наведения или отпускания.
 
  <p>При изменении состояния, если требуется воспроизвести переход, выполняется playTransitions.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionState"><linktext>spark.components.supportClasses.InteractionState</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:InteractionStateDetector_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Передается после изменения состояния.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается после изменения состояния.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:InteractionStateDetector:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
      Конструктор
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>component</apiItemName><apiType value="mx.core:UIComponent"/><apiDesc> UIComponent, определяющий состояния отпускания, наведения или нажатия. Прослушиватели событий присоединены к этому объекту.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:InteractionStateDetector:state:get"><apiName>state</apiName><shortdesc>
      Возвращает состояние компонента. Допустимые значения: InteractionState.UP, nteractionState.DOWN, teractionState.OVER.
        
      
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Возвращает состояние компонента
     
      <p>Возможные значения:
        <ul>
          <li>InteractionState.UP</li>
          <li>InteractionState.DOWN</li>
          <li>InteractionState.OVER</li>
        </ul>
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.InteractionState;.xml"><linktext>spark.components.supportClasses.InteractionState;</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
  Элемент управления DropDownListBase содержит раскрывающийся список, из которого можно выбрать одно значение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="selectedItems"/><Exclude kind="property" name="selectedIndices"/><Exclude kind="property" name="dropEnabled"/><Exclude kind="property" name="dragMoveEnabled"/><Exclude kind="property" name="dragEnabled"/><Exclude kind="property" name="allowMultipleSelection"/><skinStates><SkinState name="open" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10">
<description>
  Состояние темы оформления для открытого состояния элемента управления DropDownListBase.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Управляет видимостью тени для этого компонента.
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Радиус углов данного компонента.
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropDown" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      Элемент темы оформления, определяющий область раскрывающегося списка. При открытом DropDownListBase щелчок в любом месте вне элемента темы оформления dropDown приведет к закрытию раскрывающегося списка. 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down list area.</shortdesc></SkinPart><SkinPart name="openButton" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="true" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Элемент темы оформления, определяющий кнопку привязки.  
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the anchor button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;s:DropDownListBase 
    <strong>Styles</strong>
    cornerRadius="4"
    dropShadowVisible="true"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент управления DropDownListBase содержит раскрывающийся список, из которого можно выбрать одно значение. Его функциональные возможности очень похожи на возможности элемента формы SELECT в HTML.
 
  <p>Элемент управления DropDownListBase состоит из кнопки привязки и раскрывающегося списка. Кнопка привязки используется для открытия и закрытия раскрывающегося списка. 
  </p>
 
  <p>Когда раскрывающийся список открыт:</p>
  <ul>
    <li>Нажатие кнопки привязки закрывает раскрывающийся список и передает выбранный в настоящий момент элемент данных.</li>
    <li>Нажатие вне раскрывающегося списка закрывает раскрывающийся список и передает выбранный в настоящий момент элемент данных.</li>
    <li>Нажатие элемента данных выбирает этот элемент и закрывает раскрывающийся список.</li>
    <li>Если свойство <codeph>requireSelection</codeph> имеет значение <codeph>false</codeph>, то нажатие элемента данных при нажатой клавише Ctrl отменяет выбор элемента и закрывает раскрывающийся список.</li>
  </ul>
 
  </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Передается при нажатии пользователем кнопки привязки для отображения раскрывающегося списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при нажатии пользователем кнопки привязки для отображения раскрывающегося списка. Также отправляется при вводе Ctrl-Down для открытия dropDown.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Отправляется при закрытии раскрывающегося списка по любой причине, как, например, при выполнении пользователем следующих действий: выбор элемента в раскрывающемся списке; щелчок за пределами раскрывающегося списка; щелчок по кнопке привязки при отображаемом раскрывающемся списке.
  
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при закрытии раскрывающегося списка по какой-либо причине, например в случае если пользователь:
  <ul>
      <li>выбирает элемент в раскрывающемся списке;</li>
      <li>щелчок за пределами раскрывающегося списка;</li>
      <li>щелчок по кнопке привязки при отображаемом раскрывающемся списке.</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:DropDownListBase:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownListBase:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Закрывает раскрывающийся список и передает событие DropDownEvent.CLOSE.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>Если значение равно <codeph>true</codeph>, то выбранный элемент данных подтверждается. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Закрывает раскрывающийся список и передает событие <codeph>DropDownEvent.CLOSE</codeph>. 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownListBase:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Открывает раскрывающийся список и передает событие DropdownEvent.OPEN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Открывает раскрывающийся список и передает событие <codeph>DropdownEvent.OPEN</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownListBase:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      Экземпляр класса DropDownController, обрабатывающий все действия пользователя мыши, клавиатуры и фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:DropDownController</apiValueClassifier></apiValueDef><apiDesc>
      Экземпляр класса DropDownController, обрабатывающий все действия пользователя мыши, клавиатуры и фокуса. Flex вызывает метод <codeph>initializeDropDownController()</codeph> после создания DropDownController в конструкторе.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownListBase:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
  Базовый класс для таких компонентов с изменяемым оформлением, как Spark TextInput и TextArea, включающих в тему оформления экземпляр IEditableText для отображения, прокрутки, выделения и редактирования текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  Отключенное состояние с подсказкой.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  Нормальное состояние с подсказкой.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  Отключенное состояние.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  Обычное состояние.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="yes" name="showPromptWhenFocused" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2" theme="mobile" type="Boolean">
<description>
  Управляет отображением текста запроса этого компонента, когда текст не указан или находится в фокусе.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал кольца фокуса для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  Управляет видимостью границы для этого компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет границы для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал границы для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста активированного компонента, когда фокус на него не наведен.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста при выключенном компоненте.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста, когда компонент включен и получает фокус.
  
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.5" type="Object">
<description>
  Указывает межсловные интервалы для использования при выравнивании. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Указывает число градусов для поворота данного текста.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера.
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textIndent; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Указывает позиции табуляции, связанные с абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для левого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен перед абзацем.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Размер интервала, который должен быть оставлен после абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Величина отступа для правого края абзаца.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Управляет внешним видом элементов списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Управляет размещением маркера элемента списка относительно элемента списка.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Определяет автоотступ начального края списков, если значением заполнения этой стороны списка является <codeph>auto</codeph>.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Указывает позицию базовой линии первой строки в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Определяет тип обтекания текста вокруг плавающего объекта.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Управляет местом разрыва строк при форматировании текста по размеру окна. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Определяет вертикальное или горизонтальное размещение строки.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Тип типографского регистра в тексте.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого справа от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Размер трекинга (ручного кернинга), применяемого слева от каждого символа.   
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Указывает параметры выравнивания текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textJustify</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование подчеркивания текста. 
   <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textDecoration; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Значение альфа-канала (прозрачность) текста.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Выравнивание последней строки в абзаце относительно контейнера в выровненном тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Выравнивание текста внутри контейнера. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.textAlign</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style textAlign; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style textAlign.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Режим визуализации, используемый для этого текста, который применяется только к встроенным шрифтам.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Локаль текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы локали, описанные в техническом стандарте Юникод № 35. Например en, en_US и en-US относятся к английскому, а ja – к японскому. 
  
  <p>По умолчанию используется значение undefined. Это свойство наследует свое значение из вышестоящего узла; если указано undefined, то значение наследуется из глобального стиля <codeph>locale</codeph>. Если во время инициализации приложения для глобального стиля <codeph>locale</codeph> указано значение undefined, то принимается значение по умолчанию en.</p>
 
  <p>При использовании средств форматирования Spark и классов глобализации в корневом приложении для этого стиля можно указать значение константы <codeph>LocaleID.DEFAULT</codeph>. При этом классы будут использовать международные установки клиентской операционной системы.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Boolean">
<description> 
  Если значение равно true, применяет перечеркивание, размещая линию посередине строки.  
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Управление интерлиньяжем текста. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b> См. <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между символами.
 
  <p><b>Не поддерживается для темы Spark.</b> См. <codeph>trackingLeft</codeph> и <codeph>trackingRight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField.letterSpacing; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
   <p><b>Не поддерживается для темы Spark.</b> См. <codeph>lineHeight</codeph>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight; если используется StyleableStageText, то эта функция не поддерживается.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p>Кернинг включен по умолчанию для компонентов Spark, но выключен по умолчанию для компонентов MX. Компоненты Spark обрабатывают значение <codeph>default</codeph> как <codeph>auto</codeph>, в то время как компоненты MX обрабатывают значение <codeph>default</codeph> как <codeph>false</codeph>.</p>
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.kerning</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Стиль, используемый для выравнивания абзаца. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Правило, используемое для выравнивания текста в абзаце.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование полужирного шрифта в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontWeight; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontWeight.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Определяет использование курсива в тексте. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontStyle; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Высота текста в пикселах. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontSize</b>.</p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontSize; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontSize.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>12</codeph>. Значение по умолчанию для мобильной темы - <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Поиск используемых шрифтов. 
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Имя используемого шрифта или разделенный запятой список имен шрифтов. 
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style fontFamily; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Значение по умолчанию для темы Spark - <codeph>Arial</codeph>. Значение по умолчанию для мобильной темы - <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения вертикальной позиции элемента в строке.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Указывает уровень двунаправленной вложенности текста по умолчанию.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Тип ширины цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Тип регистра цифр в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Цвет текста.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Если в мобильной теме используется StyleableTextField, см. раздел spark.components.supportClasses.StyleableTextField Style color; если используется StyleableStageText, см. раздел spark.components.supportClasses.StyleableStageText Style color.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Тип подсказки CFF в тексте.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Величина сдвига базовой линии.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Указывает базовую линию, по которой выравнивается основная базовая линия.
  
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b>.</p>
   <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Выравнивание по вертикали или ширине.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Отступ сверху в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Отступ справа в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Отступ слева в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Отступ снизу в пикселах.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Определяет перенос слов в контейнере.
 
  <p><b>Для получения информации о теме Spark см. flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style></styles><skinParts><SkinPart name="promptDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Label или другой IDisplayText, который может присутствовать в любой теме оформления, присваиваемой этому компоненту.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The Label or other IDisplayText that might be present
      in any skin assigned to this component.</shortdesc></SkinPart><SkinPart name="textDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IEditableText">
<description>
      IEditableText, который может присутствовать в любой теме оформления, присваиваемой этому компоненту. Это RichEditableText для темы Spark и StyleableStageText для мобильной темы.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The IEditableText that may be present
      in any skin assigned to this component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:SkinnableTextBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnableTextBase
    autoCapitalize="none"  <b>[Mobile theme only]</b>
    autoCorrect="true"  <b>[Mobile theme only]</b>
    displayAsPassword="false"
    editable="true"
    imeMode="null"  <b>[Spark theme only]</b>
    maxChars="0"
    prompt="null"
    restrict="null"
    returnLabelKey="default"  <b>[Mobile theme only]</b>
    selectable="true"
    selectionHighlighting="whenFocused"  <b>[Spark theme only]</b>
    softKeyBoardType="default"  <b>[Mobile theme only]</b>
    text=""
    typicalText="null"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    contentBackgroundAlpha="1.0" 
    contentBackgroundColor="0xFFFFFF"
    focusAlpha="0.55"
    focusColor="0x70B2EE"
    showPromptWhenFocused="true"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"  <b>[Spark theme only]</b>
    selectionChange="<i>No default</i>"  <b>[Spark theme only]</b>
    textInput="<i>No default</i>"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>spark.core:ISoftKeyboardHintClient</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Базовый класс для таких компонентов с изменяемым оформлением, как Spark TextInput и TextArea, включающих в тему оформления экземпляр IEditableText для отображения, прокрутки, выделения и редактирования текста. По умолчанию IEditableText используется как RichEditableText для темы Spark и StyleableStageText для мобильной темы. StyleableTextField также доступен для мобильной темы.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  Отправляется непосредственно перед нажатием клавиши в данном компоненте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется непосредственно перед нажатием клавиши в данном компоненте.
   <p><b>В мобильной теме — не отправляется.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Передается после завершения пользователем операции редактирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается после завершения пользователем операции редактирования.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Передается до начала пользовательской операции редактирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается до начала пользовательской операции редактирования. Для предотвращения обработки этой операции можно изменить ее или отменить событие.
   <p><b>В мобильной теме — не отправляется.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  Передается после изменения свойств selectionAnchorPosition и/или selectionActivePosition по любой причине.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается после изменения свойств <codeph>selectionAnchorPosition</codeph> и/или <codeph>selectionActivePosition</codeph> по любой причине.
   <p><b>В мобильной теме — не отправляется.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:SkinnableTextBase:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableTextBase:appendText"><apiName>appendText</apiName><shortdesc conref="spark.core.IEditableText#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Текст, который будет добавлен.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#appendText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/appendText()"><linktext>spark.components.RichEditableText.appendText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/appendText()"><linktext>spark.components.supportClasses.StyleableStageText.appendText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:insertText"><apiName>insertText</apiName><shortdesc conref="spark.core.IEditableText#insertText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Текст, который будет вставлен.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#insertText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/insertText()"><linktext>spark.components.RichEditableText.insertText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/insertText()"><linktext>spark.components.supportClasses.StyleableStageText.insertText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.core.IEditableText#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectAll()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectAll()"><linktext>spark.components.RichEditableText.selectAll()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectAll()"><linktext>spark.components.supportClasses.StyleableStageText.selectAll()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectRange"><apiName>selectRange</apiName><shortdesc conref="spark.core.IEditableText#selectRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>Позиция символа, определяющая конец выделенного фрагмента, который остается фиксированным при расширении выделения.
           </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>Позиция символа, определяющая конец выделенного фрагмента, который перемещается при расширении выделения.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectRange()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectRange()"><linktext>spark.components.RichEditableText.selectRange()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectRange()"><linktext>spark.components.supportClasses.StyleableStageText.selectRange()</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCapitalize:get"><apiName>autoCapitalize</apiName><shortdesc>
      Совет по использованию прописных букв программными клавиатурами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Совет по использованию прописных букв программными клавиатурами. 
           <p>Поддерживаемые значения определены в flash.text.AutoCapitalize:</p>
     
      <ul>
          <li><codeph>none</codeph> — без автоматического преобразования в верхний регистр</li>
          <li><codeph>word</codeph> — преобразование в верхний регистр первой буквы, перед которой находится пробел или пунктуационный знак</li>
          <li><codeph>sentence</codeph> — преобразование в верхний регистр первой буквы, перед которой находится точка</li>
          <li><codeph>all</codeph> — преобразование всех букв в верхний регистр</li>
      </ul>
           <p><b>Не поддерживается для темы Spark.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AutoCapitalize.xml"><linktext>flash.text.AutoCapitalize</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCorrect:get"><apiName>autoCorrect</apiName><shortdesc>
      Совет по использованию программной клавиатурой функции автоматического исправления (если поддерживается).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Совет по использованию программной клавиатурой функции автоматического исправления (если поддерживается).
      <p><b>Не поддерживается для темы Spark.</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:editable:get"><apiName>editable</apiName><shortdesc>
      Определяет, доступен ли текст для редактирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет, доступен ли текст для редактирования.
     
      <p><b>Для получения информации о теме Spark см. spark.components.RichEditableText.editable</b>.</p>
           <p><b>Для использования в мобильной теме см. раздел spark.components.supportClasses.StyleableStageText.editable</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/editable"><linktext>spark.components.RichEditableText.editable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/editable"><linktext>spark.components.supportClasses.StyleableStageText.editable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.
     
      <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/enableIME"><linktext>spark.components.RichEditableText.enableIME</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Указывает режим IME (редактор методов ввода).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает режим IME (редактор методов ввода).
     
      <p><b>Для получения информации о теме Spark см. spark.components.RichEditableText.imeMode</b>.</p>
           <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/imeMode"><linktext>spark.components.RichEditableText.imeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:prompt:get"><apiName>prompt</apiName><shortdesc>
      Текст, выводимый на экран, если фактическим значением свойства текста является пустая строка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Текст, выводимый на экран, если фактическим значением свойства текста является пустая строка.
     
      <p>При первом создании элемента управления текстом на экране отображается запрос. Запрос не отображается, когда элемент управления получает фокус или значением его свойства <codeph>text</codeph> становится непустая строка. Запрос выводится повторно, когда элемент управления теряет фокус и значением текстового поля является пустая строка (т. е. текст не был введен).</p>
      
      <p>Если пользователь использует элемент управления текстом для ввода и последующего удаления текста, запрос отображается повторно, когда этот элемент управления теряет фокус. Для повторного отображения запроса также можно применить программный способ, указав пустую строку в качестве значения свойства text элемента управления текстом.</p>
      
      <p>Для изменения стиля запроса можно использовать CSS. Если элемент управления не выключен и содержит запрос, стиль определяется псевдоселектором <codeph>normalWithPrompt</codeph>. Если элемент управления выключен, то используются стили, определенные псевдоселектором <codeph>disabledWithPrompt</codeph>.</p>
      
      <p>В приведенном ниже примере CSS изменяет цвет текста запроса в элементах управления, которые создают подкласс SkinnableTextBase (в том числе элементов управления Spark TextInput и TextArea):
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|SkinnableTextBase:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:returnKeyLabel:get"><apiName>returnKeyLabel</apiName><shortdesc>
      Совет по использованию метки для клавиши return программной клавиатуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Совет по использованию метки для клавиши return программной клавиатуры.
           <p>Поддерживаемые значения определены в flash.text.ReturnKeyLabel:</p>
     
      <ul>
          <li><codeph>default</codeph> — значок или текст метки по умолчанию</li>
          <li><codeph>done</codeph> — значок или текст метки, обозначающий завершенную текстовую запись</li>
          <li><codeph>go</codeph> — значок или текст метки, обозначающий начало действия</li>
          <li><codeph>next</codeph> — значок или текст метки, обозначающий переход к следующему полю</li>
          <li><codeph>search</codeph> — значок или текст метки, обозначающий выполнение поиска во введенном тексте</li>
      </ul>
           <p><b>Не поддерживается для темы Spark.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.ReturnKeyLabel.xml"><linktext>flash.text.ReturnKeyLabel</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectable:get"><apiName>selectable</apiName><shortdesc>
      Флаг, указывающий возможность выбора содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, указывающий возможность выбора содержимого. Пользователь настольного компьютера может выбирать содержимое с помощью мыши или клавиатуры, если элемент управления имеет фокус клавиатуры. Пользователь устройства с сенсорным экраном может выбирать текст с помощью касаний после активации режима выбора для текстового компонента.
     
      <p><b>Для получения информации о теме Spark см. spark.components.RichEditableText.selectable</b>.</p>
           <p><b>Для использования в мобильной теме см. раздел spark.components.supportClasses.StyleableStageText.selectable</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectable"><linktext>spark.components.supportClasses.StyleableStageText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      Позиция символа, относительно начала text String, определяющая конец выделения, перемещающийся при расширении выделения клавишами со стрелками.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Позиция символа, относительно начала <codeph>text</codeph> String, определяющая конец выделения, перемещающийся при расширении выделения клавишами со стрелками.
     
      <p><b>Для получения информации о теме Spark см. spark.components.RichEditableText.selectionActivePosition</b>.</p>
           <p><b>Для использования в мобильной теме см. раздел spark.components.supportClasses.StyleableStageText.selectionActivePosition</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionActivePosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      Позиция символа, относительно начала text String, определяющая конец выделения, остающийся фиксированным при расширении выделения клавишами со стрелками.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Позиция символа, относительно начала <codeph>text</codeph> String, определяющая конец выделения, остающийся фиксированным при расширении выделения клавишами со стрелками.
     
      <p><b>Для получения информации о теме Spark см. spark.components.RichEditableText.selectionAnchorPosition</b>.</p>
           <p><b>Для использования в мобильной теме см. раздел spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionAnchorPosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
      Определяет момент подсветки текстового выделения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет момент подсветки текстового выделения.
     
      <p><b>Для получения информации о теме Spark см. spark.components.RichEditableText.selectionHighlighting</b>.</p>
           <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionHighlighting"><linktext>spark.components.RichEditableText.selectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:softKeyboardType:get"><apiName>softKeyboardType</apiName><shortdesc>
      Совет по выведению на экран типа программной клавиатуры для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Совет по выведению на экран типа программной клавиатуры для этого компонента.
           <p>Поддерживаемые значения определены в flash.text.SoftKeyboardType:</p>
     
      <ul>
          <li><codeph>default</codeph> — клавиатура по умолчанию</li>
          <li><codeph>punctuation</codeph> — переводит клавиатуру в режим ввода пунктуационных знаков и символов</li>
          <li><codeph>url</codeph> — предоставляет экранные клавиши для ввода URL, например специальную клавишу для вставки .com</li>
          <li><codeph>number</codeph> — переводит клавиатуру в режим ввода чисел</li>
          <li><codeph>contact</codeph> — переводит клавиатуру в режим, необходимый для ввода контактной информации</li>
          <li><codeph>email</codeph> — переводит клавиатуру в режим ввода адреса электронной почты, упрощая ввод знака @ и .com</li>
      </ul>
           <p><b>Не поддерживается для темы Spark.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.SoftKeyboardType.xml"><linktext>flash.text.SoftKeyboardType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:text:get"><apiName>text</apiName><shortdesc>
      Текст, отображаемый данным текстовым компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текст, отображаемый данным текстовым компонентом.
     
      <p><b>Для получения информации о теме Spark см. spark.components.RichEditableText.text</b>.</p>
           <p><b>Для использования в мобильной теме см. раздел spark.components.supportClasses.StyleableStageText#text</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/text"><linktext>spark.components.supportClasses.StyleableStageText.text</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:typicalText:get"><apiName>typicalText</apiName><shortdesc>
      Текст, который используется для определения стандартной ширины и высоты элемента управления без его фактического отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Текст, который используется для определения стандартной ширины и высоты элемента управления без его фактического отображения.
     
      <p><b>Для получения информации о теме Spark см. spark.components.RichEditableText.typicalText</b>.</p>
           <p><b>Эта функция не поддерживается в мобильной теме.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/typicalText"><linktext>spark.components.RichEditableText.typicalText</linktext></link></related-links></apiValue></apiClassifier></apiPackage>