<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="fl.video"><apiName>fl.video</apiName><apiDetail/><apiClassifier id="fl.video:DVRManager"><apiName>DVRManager</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	  
     
     </apiDesc></apiClassifierDetail><apiConstructor id="fl.video:DVRManager:DVRManager"><apiName>DVRManager</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>nc</apiItemName><apiType value="flash.net:NetConnection"/><apiDesc>
		 
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
		  
         
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:DVRManager:checkInterval"><apiName>checkInterval</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
		 
         
         </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/><codeph/> 
         
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DVRManager:getStreamDuration"><apiName>getStreamDuration</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>streamName</apiItemName><apiType value="String"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         <codeph/> <codeph/> 
         
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="fl.video:DVRManager:DVR_ERROR"><apiName>DVR_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dvrError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:DVR_EVENT"><apiName>DVR_EVENT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dvrEvent</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:DVR_STOP"><apiName>DVR_STOP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dvrStop</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:currentDuration:get"><apiName>currentDuration</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:isRec:get"><apiName>isRec</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		   
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:nc:get"><apiName>nc</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc>
		  
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:offline:get"><apiName>offline</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:offset:get"><apiName>offset</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		  
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:totalDuration:get"><apiName>totalDuration</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
           
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:NCManagerDynamicStream"><apiName>NCManagerDynamicStream</apiName><shortdesc>
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>
     </apiTipText></apiTipTexts><apiBaseInterface>fl.video:INCManager</apiBaseInterface><apiBaseClassifier>fl.video:NCManager</apiBaseClassifier></apiClassifierDef><apiDesc>
	  
	 
	 <p/>
	 
     <codeblock rev="3.0">
     import fl.video.
     VideoPlayer.iNCManagerClass = fl.video.NCManagerDynamicStream;
     </codeblock>
	 
     </apiDesc></apiClassifierDetail><related-links><link href="fl.video.xml#NCManager"><linktext>NCManager</linktext></link></related-links><apiConstructor id="fl.video:NCManagerDynamicStream:NCManagerDynamicStream"><apiName>NCManagerDynamicStream</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiTipTexts><apiTipText>
         </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
         
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:NCManagerDynamicStream:connectDynamicStream"><apiName>connectDynamicStream</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dsi</apiItemName><apiType value=""/><apiDesc>
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="fl.video:NCManagerDynamicStream:SHORT_VERSION"><apiName>SHORT_VERSION</apiName><shortdesc>
	Переменная состояния, указывающая сокращенный номер версии компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5</apiData><apiType value="String"/></apiValueDef><apiDesc>
	Переменная состояния, указывающая сокращенный номер версии компонента. Номер версии полезен, если есть FLA-файл и нужно узнать версию компонента. Для определения версии компонента вставьте следующий код трассировки в FLA-файл:
	
	<codeblock>FLVPlayback.SHORT_VERSION</codeblock>
	
	<p>Переменная <codeph>SHORT_VERSION</codeph> включает только старший и младший номер версии, например 2.0. Переменная <codeph>VERSION</codeph> включает старший и младший номер версии, редакцию и номер сборки, например 2.0.0.11.</p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManagerDynamicStream/VERSION"><linktext>Переменная VERSION </linktext></link></related-links></apiValue><apiValue id="fl.video:NCManagerDynamicStream:VERSION"><apiName>VERSION</apiName><shortdesc>
	Переменная состояния, указывающая полный номер версии компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5.0.15</apiData><apiType value="String"/></apiValueDef><apiDesc>
	Переменная состояния, указывающая полный номер версии компонента. Номер версии полезен, если есть FLA-файл и нужно узнать версию компонента. Для определения версии компонента вставьте следующий код трассировки в FLA-файл:
	
	<codeblock>FLVPlayback.VERSION</codeblock>
	
	<p>Переменная <codeph>VERSION</codeph> включает старший и младший номер версии, редакцию и номер сборки, например 2.0.0.11. Переменная <codeph>SHORT_VERSION</codeph> включает только старший и младший номер версии, например 2.0. </p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManagerDynamicStream/SHORT_VERSION"><linktext>Переменная SHORT_VERSION</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManagerDynamicStream:streamLength:get"><apiName>streamLength</apiName><shortdesc>
		 Продолжительность потока (мс).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiTipTexts><apiTipText>Свойство streamLength
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 Продолжительность потока (мс). Если после вызова метода <codeph>VideoPlayer.ncConnected()</codeph> возвращаемое значение не определено, равно <codeph>null</codeph> или меньше 0, то объект VideoPlayer знает, что здесь нет информации о длине потока. Если возвращается информация о длине потока, то она замещает любую существующую информацию о длине потока, включая информацию, устанавливаемую параметром <codeph>totalTime</codeph> метода <codeph>VideoPlayer.play()</codeph> или метода <codeph>VideoPlayer.load()</codeph>, или информацию, полученную из метаданных FLV-файла.
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamLength"><linktext>INCManager.streamLength</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:IVPEvent"><apiName>IVPEvent</apiName><shortdesc>
	 Интерфейс IVPEvent реализован видео-событиями, которые относятся к определенным объектам VideoPlayer компонента FLVPlayback.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Интерфейс IVPEvent
     
     </apiTipText></apiTipTexts><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Интерфейс IVPEvent реализован видео-событиями, которые относятся к определенным объектам VideoPlayer компонента FLVPlayback. Если несколько объектов VideoPlayer используются в одном компоненте FLVPlayback, то каждому объекту назначается уникальный индекс, и данные индексы используются с свойством <codeph>visibleVideoPlayerIndex</codeph>, свойством <codeph>activeVideoPlayerIndex</codeph> и методом <codeph>getVideoPlayer()</codeph>. Если событие запускается для определенного объекта VideoPlayer, то класс события реализует интерфейс IVPEvent, а свойство <codeph>vp</codeph> равняется индексу объекта VideoPlayer, используемого в событии.
     
     </apiDesc></apiClassifierDetail><apiValue id="fl.video:IVPEvent:fl.video:IVPEvent:type:get"><apiName>type</apiName><shortdesc>
         Тип события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiTipTexts><apiTipText>Свойство type
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
         Тип события. Данный тип является зависит от регистра.
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:IVPEvent:fl.video:IVPEvent:vp:get"><apiName>vp</apiName><shortdesc>
         Индекс объекта VideoPlayer, участвующего в этом событии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/><apiTipTexts><apiTipText>Свойство vp
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
         Индекс объекта VideoPlayer, участвующего в этом событии.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:AutoLayoutEvent"><apiName>AutoLayoutEvent</apiName><shortdesc>
     Проигрыватель Flash&amp;#xAE; Player отправляет объект AutoLayoutEvent при автоматическом изменении размера или макета видеопроигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>fl.video:IVPEvent</apiBaseInterface><apiBaseClassifier>fl.video:LayoutEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
     Проигрыватель Flash<sup>®</sup> Player отправляет объект AutoLayoutEvent при автоматическом изменении размера или макета видеопроигрывателя. Видеопроигрыватель размещается автоматически, если для свойства <codeph>maintainAspectRatio</codeph> или свойства <codeph>autoSize</codeph> установлено значение <codeph>true</codeph> или если загружен новый FLV-файл. 
     
     <p>Есть только один тип объекта AutoLayoutEvent: <codeph>AutoLayoutEvent.AUTO_LAYOUT</codeph>.</p>
     
     <p>После выполнения попытки автоматического расположения видеопроигрывателя отправляется событие объекта, даже если размеры не изменились. </p>
     
     <p>Объект <codeph>LayoutEvent</codeph> также отправляет событие в следующих трех случаях.</p>
     <ul>
     <li>Если расположенный видеопроигрыватель является видимым.</li>
     <li>Если есть два видеопроигрывателя с разными размерами или положеничми и свойство <codeph>visibleVideoPlayerIndex</codeph> переключается с одного видеопроигрывателя на другой.</li>
     <li>Если вызываются методы или свойства, изменяющие размер или положение видеопроигрывателя, такие как <codeph>setSize()</codeph>, <codeph>setScale()</codeph>, <codeph>width</codeph>, <codeph>height</codeph>, <codeph>scaleX</codeph>,<codeph>scaleY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph>.</li>
     </ul>
     
     <p>Если используется несколько экземпляров видеопроигрывателя, данное событие может не применяться к видимым видеопроигрывателям.</p>
     
     </apiDesc></apiClassifierDetail><related-links><link href="fl.video.xml#AutoLayoutEvent/AUTO_LAYOUT"><linktext>AUTO_LAYOUT</linktext></link></related-links><adobeApiEvent id="fl.video:AutoLayoutEvent:AUTO_LAYOUT_autoLayout"><apiName>autoLayout</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:AutoLayoutEvent:AUTO_LAYOUT</apiEventType><adobeApiEventClassifier>fl.video:AutoLayoutEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:autoLayout"><linktext>FLVPlayback.autoLayout</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:AutoLayoutEvent:AutoLayoutEvent"><apiName>AutoLayoutEvent</apiName><shortdesc>
         Создает объект Event, содержащий данные о событиях autoLayout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события автоматического создания макета — <codeph>AutoLayoutEvent.AUTO_LAYOUT</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>oldBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Указывает значения свойств <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> и <codeph>height</codeph> целевого объекта, прежде чем выполняется событие <codeph>autoLayout</codeph>. Прослушиватели событий могут получать эту информацию через свойство <codeph>LayoutEvent.oldBounds</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>oldRegistrationBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Указывает значения свойств <codeph>registrationX</codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph> целевого объекта, прежде чем выполняется событие <codeph>autoLayout</codeph>. Прослушиватели событий могут получать эту информацию через свойство <codeph>LayoutEvent.oldRegistrationBounds</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>vp</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Индекс объекта VideoPlayer, участвующего в этом событии.
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         Создает объект Event, содержащий данные о событиях <codeph>autoLayout</codeph>. Объекты Event передаются прослушивателям событий в качестве параметров.
         
         </apiDesc></apiConstructorDetail><related-links><link href="fl.video.xml#LayoutEvent/oldBounds"><linktext>LayoutEvent.oldBounds</linktext></link><link href="fl.video.xml#LayoutEvent/oldRegistrationBounds"><linktext>LayoutEvent.oldRegistrationBounds</linktext></link></related-links></apiConstructor><apiValue id="fl.video:AutoLayoutEvent:AUTO_LAYOUT"><apiName>AUTO_LAYOUT</apiName><shortdesc>
         Задает значение свойства type для объекта события autoLayout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>autoLayout</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>autoLayout</codeph>.
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>oldBounds</codeph></entry><entry>Указывает значения свойств <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> и <codeph> height</codeph> целевого объекта перед отправкой события <codeph>autoLayout</codeph>.</entry></row><row><entry><codeph>oldRegistrationBounds</codeph></entry><entry>Указывает значения свойств <codeph>registrationX </codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph> целевого объекта перед отправкой события <codeph>autoLayout</codeph>.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:autoLayout"><linktext>FLVPlayback.autoLayout</linktext></link></related-links></apiValue><apiValue id="fl.video:AutoLayoutEvent:vp:get"><apiName>vp</apiName><shortdesc>
         Индекс объекта VideoPlayer, участвующего в этом событии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
         Индекс объекта VideoPlayer, участвующего в этом событии.
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/activeVideoPlayerIndex"><linktext>FLVPlayback.activeVideoPlayerIndex</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/visibleVideoPlayerIndex"><linktext>FLVPlayback.visibleVideoPlayerIndex</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/getVideoPlayer()"><linktext>FLVPlayback.getVideoPlayer()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:DynamicStreamItem"><apiName>DynamicStreamItem</apiName><shortdesc>
     
     </shortdesc><prolog><author>Adobe Systems Incorporated
     
     </author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
     
       <codeph/> 
     
     </apiDesc></apiClassifierDetail><apiConstructor id="fl.video:DynamicStreamItem:DynamicStreamItem"><apiName>DynamicStreamItem</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
           
		 <p> </p>
         <p><codeph/></p>
         
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:DynamicStreamItem:addStream"><apiName>addStream</apiName><shortdesc>
		  
         
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>streamName</apiItemName><apiType value="String"/><apiDesc>   <codeph/><codeph/>  <codeph/>
         
         </apiDesc></apiParam><apiParam><apiItemName>bitRate</apiItemName><apiType value="Number"/><apiDesc>   <codeph/>
		 
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		  
         
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="fl.video:DynamicStreamItem:streams:get"><apiName>streams</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 <codeph/> <codeph/><codeph/><codeph/><codeph/><codeph/> 
         
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:MetadataEvent"><apiName>MetadataEvent</apiName><shortdesc>
         Проигрыватель Flash&amp;#xAE; Player отправляет объект MetadataEvent, когда пользователь запрашивает пакет метаданных FLV-файла (NetStream.onMetaData), а также когда в FLV-файле обнаруживаются ключевые точки (NetStream.onCuePoint).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>fl.video:IVPEvent</apiBaseInterface><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
         Проигрыватель Flash<sup>®</sup> Player отправляет объект MetadataEvent, когда пользователь запрашивает пакет метаданных FLV-файла (<codeph>NetStream.onMetaData</codeph>), а также когда в FLV-файле обнаруживаются ключевые точки (<codeph>NetStream.onCuePoint</codeph>).
		 
		 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.net.xml#NetStream/event:onCuePoint"><linktext>Событие NetStream.onCuePoint </linktext></link><link href="" invalidHref="flash.net.xml#NetStream/event:onMetaData"><linktext>Событие NetStream.onMetaData</linktext></link></related-links><adobeApiEvent id="fl.video:MetadataEvent:CUE_POINT_cuePoint"><apiName>cuePoint</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:MetadataEvent:CUE_POINT</apiEventType><adobeApiEventClassifier>fl.video:MetadataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:cuePoint"><linktext>Событие cuePoint</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:MetadataEvent:METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:MetadataEvent:METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>fl.video:MetadataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:metadataReceived"><linktext>Событие metadataReceived</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:MetadataEvent:MetadataEvent"><apiName>MetadataEvent</apiName><shortdesc>
		 Создает объект Event, содержащий информацию о событиях метаданных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Возможные значения: <codeph>MetadataEvent.CUE_POINT</codeph> и <codeph>MetadataEvent.METADATA_RECEIVED</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Определяет добавляемые динамические свойства.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>vp</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Определяет индекс объекта VideoPlayer.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Создает объект Event, содержащий информацию о событиях метаданных. Объекты Event передаются прослушивателям событий в качестве параметров.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:MetadataEvent:CUE_POINT"><apiName>CUE_POINT</apiName><shortdesc>
		 Задает значение свойства type для объекта события cuePoint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cuePoint</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Задает значение свойства <codeph>type</codeph> для объекта события <codeph>cuePoint</codeph>.
		 
		 <p>Это событие имеет следующие свойства:</p>
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
	         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>info</codeph></entry><entry>Объект со свойствами, описывающими ключевую точку.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:cuePoint"><linktext>Событие cuePoint</linktext></link></related-links></apiValue><apiValue id="fl.video:MetadataEvent:METADATA_RECEIVED"><apiName>METADATA_RECEIVED</apiName><shortdesc>
		 Задает значение свойства type для объекта события metadataReceived.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>metadataReceived</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Задает значение свойства <codeph>type</codeph> для объекта события <codeph>metadataReceived</codeph>.
		 
		 <p>Это событие имеет следующие свойства:</p>
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
	         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>info</codeph></entry><entry>Объект со свойствами, описывающими FLV-файл.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:metadataReceived"><linktext>Событие metadataReceived</linktext></link></related-links></apiValue><apiValue id="fl.video:MetadataEvent:info:get"><apiName>info</apiName><shortdesc>
		 Объект с динамическими свойствами, добавляемыми в зависимости от типа события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Объект с динамическими свойствами, добавляемыми в зависимости от типа события.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.net.xml#NetStream/event:onCuePoint"><linktext>Событие NetStream.onCuePoint </linktext></link><link href="" invalidHref="flash.net.xml#NetStream/event:onMetaData"><linktext>Событие NetStream.onMetaData</linktext></link></related-links></apiValue><apiValue id="fl.video:MetadataEvent:vp:get"><apiName>vp</apiName><shortdesc>
		 Индекс объекта VideoPlayer, участвующего в этом событии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
		 Индекс объекта VideoPlayer, участвующего в этом событии.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/activeVideoPlayerIndex"><linktext>FLVPlayback.activeVideoPlayerIndex</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/visibleVideoPlayerIndex"><linktext>FLVPlayback.visibleVideoPlayerIndex</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/getVideoPlayer()"><linktext>FLVPlayback.getVideoPlayer()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:FMSCapabilities"><apiName>FMSCapabilities</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="fl.video:FMSCapabilities:FMSCapabilities"><apiName>FMSCapabilities</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>version</apiItemName><apiType value="String"/><apiData>2,0,0,0</apiData><apiDesc>        
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         <codeph/>  
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:FMSCapabilities:codecs:get"><apiName>codecs</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:dataStreamAccess:get"><apiName>dataStreamAccess</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:dvr:get"><apiName>dvr</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:dynamicStreaming:get"><apiName>dynamicStreaming</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:progressive:get"><apiName>progressive</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
           
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:version:get"><apiName>version</apiName><shortdesc>
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
	 Класс VideoPlayer позволяет создать видеопроигрыватель с объемом SWF-файла несколько меньшим, чем при использовании компонента FLVPlayback.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Класс VideoPlayer
     
     </apiTipText></apiTipTexts><apiBaseClassifier>flash.media:Video</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Класс VideoPlayer позволяет создать видеопроигрыватель с объемом SWF-файла несколько меньшим, чем при использовании компонента FLVPlayback. <codeph/> 
	 
     <p>Класс FLVPlayback охватывает класс VideoPlayer. Используйте класс FLVPlayback практически во всех случаях, поскольку в классе VideoPlayer не имеется функциональности, которой бы не было в классе FLVPlayback.</p>
	 
	 <p> <codeph/><codeph/><codeph/> </p>
	 
	 <codeblock>var _forceNCManager:fl.video.NCManager;</codeblock>
	 
	 <p>Класс NCManager реализует интерфейс INCManager, и его можно заменить пользовательским классом для управления сетевыми соединениями, осуществляемыми данным интерфейсом. Если выполняется замена класса, то необходимо включить следующую инструкцию, заменяя NCManager именем предоставляемого класса:</p>
	 
	 <codeblock>fl.video.VideoPlayer.iNCManagerClass = fl.video.NCManager;</codeblock>
	 
	 <p>Нет необходимости добавлять данную инструкцию, если используется стандартный класс NCManager.</p>
	 
     <p><b>Примечание.</b> При использовании компонента FLVPlayback можно установить класс <codeph>iNCManagerClass</codeph>, заменяя стандартный класс fl.video.NCManager.</p>
	 
	 <p>Класс NCManager поддерживает подмножество SMIL для обработки нескольких потоков для нескольких полос пропускания.</p>
	 
	 </apiDesc><example conref="VideoPlayerExample.as"/></apiClassifierDetail><related-links><link href="fl.video.xml#NCManager"><linktext>NCManager</linktext></link><link href="" invalidHref="fl.video.FLVPlayback.xml"><linktext>FLVPlayback</linktext></link></related-links><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.UNSUPPORTED_PLAYER_VERSION_unsupportedPlayerVersion"><apiName>unsupportedPlayerVersion</apiName><shortdesc>
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	  <codeph/>
	 
	 <p><codeph/><codeph/></p>
	 
     </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/UNSUPPORTED_PLAYER_VERSION"><linktext/></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.STATE_CHANGE_stateChange"><apiName>stateChange</apiName><shortdesc>
	 Отправляется при изменении состояния воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.STATE_CHANGE</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Событие stateChange
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Отправляется при изменении состояния воспроизведения. После завершения вызова <codeph>autoRewind</codeph> отправляется событие <codeph>stateChange</codeph>с состоянием перемотки видео. Событие <codeph>stateChange</codeph> не отправляется, пока не будет завершена перемотка видео. 
	 
	 <p>Событие может использоваться для определения перехода в состояние воспроизведения или выхода из неуправляемых состояний, таких как середина процесса подключения, изменение размеров или процесс перемотки. Методы <codeph>play()</codeph>, <codeph>pause()</codeph>, <codeph>stop()</codeph> и <codeph>seek()</codeph> образуют очередь запросов на выполнение при переходе проигрывателя в управляемое состояние.</p>
	 
	 <p>Событие <codeph>stateChange</codeph> относится к типу VideoEvent и имеет константу <codeph>VideoEvent.STATE_CHANGE</codeph>.</p>
	 
     </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/STATE_CHANGE"><linktext>VideoEvent.STATE_CHANGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.AUTO_REWOUND_autoRewound"><apiName>autoRewound</apiName><shortdesc>
	 Отправляется при перемещении точки воспроизведения в начальное положение видеопроигрывателя, поскольку свойство autoRewind имеет значение true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.AUTO_REWOUND</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Событие autoRewound 
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Отправляется когда точка воспроизведения переходит в начало видеопроигрывателя, потому что для свойства <codeph>autoRewind</codeph> установлено значение <codeph>true</codeph>.
	 
	 <p>Событие <codeph>autoRewound</codeph> относится к типу VideoEvent и имеет константу <codeph>VideoEvent.AUTO_REWOUND</codeph>.</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/AUTO_REWOUND"><linktext>VideoEvent.AUTO_REWOUND</linktext></link><link href="fl.video.xml#VideoPlayer/autoRewind"><linktext>autoRewind</linktext></link><link href="fl.video.xml#VideoState/REWINDING"><linktext>VideoState.REWINDING</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.LayoutEvent.LAYOUT_layout"><apiName>layout</apiName><shortdesc>
	 Отправляется при изменении размера или макета видеопроигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.LayoutEvent.LAYOUT</apiEventType><adobeApiEventClassifier>fl.video.LayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Событие layout
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Отправляется при изменении размера или макета видеопроигрывателя. Есть два случая, при которых появляется событие layout.
	 <ul><li>Если видеопроигрыватель изменяет размеры с помощью события <codeph>autoLayout</codeph> или вызова методов <codeph>setScale()</codeph> или <codeph>setSize()</codeph>, или изменением свойств <codeph>width</codeph>, <codeph>height</codeph>, <codeph>scaleX</codeph> и <codeph>scaleY</codeph>.</li>
	 <li>Если есть два видеопроигрывателя с разными размерами, свойство <codeph>visibleVideoPlayerIndex</codeph> переключается с одно видеопроигрывателя на другой.</li>
	 </ul>  
	 
	 <p>Событие <codeph>layout</codeph> относится к типу VideoEvent и имеет константу <codeph>LayoutEvent.LAYOUT</codeph>.</p> 
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:autoLayout"><linktext>Событие autoLayout </linktext></link><link href="fl.video.xml#LayoutEvent/LAYOUT"><linktext>LayoutEvent.LAYOUT</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/visibleVideoPlayerIndex"><linktext>FLVPlayback.visibleVideoPlayerIndex</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.READY_ready"><apiName>ready</apiName><shortdesc>
	 Событие, отправляемое, когда FLV-файл загружен и готов к отображению.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.READY</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Событие ready
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Событие, отправляемое, когда FLV-файл загружен и готов к отображению. Событие начинается первый раз при переходе видеопроигрывателя в управляемое состояние после загрузки нового FLV-файла методом <codeph>play()</codeph> или <codeph>load()</codeph>. Событие начинается один раз при каждой загрузки FLV-файла.
	 
	 <p>Событие <codeph>ready</codeph> относится к типу VideoEvent и имеет константу <codeph>VideoEvent.READY</codeph>.</p> 
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link><link href="fl.video.xml#VideoEvent/READY"><linktext>VideoEvent.READY</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
	 Показывает ход загрузки, отображая число загруженных байтов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>fl.video.VideoProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Событие progress
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Показывает ход загрузки, отображая число загруженных байтов. Отправляется с частотой, определяемой свойством <codeph>progressInterval</codeph>, начинается одновременно с загрузкой и заканчивается, когда все байты загружены или произошла сетевая ошибка. По умолчанию событие отправляется каждые 0,25 секунды при вызове загрузки и заканчивается после загрузки всех байтов или появления сетевой ошибки. Используйте данное событие для проверки загруженных байтов или количества байтов в буфере. 
	 
	 <p>Отправляется только при последовательной загрузке HTTP. Показывает ход загрузки, отображая количество загруженных байтов. Объект события имеет свойства <codeph>bytesLoaded</codeph> и <codeph>bytesTotal</codeph>, которые выполняют те же функции, что и свойства FLVPlayback с теми же именами.</p>
	 
	 <p>Событие <codeph>progress</codeph> относится к типу VideoProgressEvent и имеет константу <codeph>VideoProgressEvent.PROGRESS</codeph>.</p> 
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoPlayer/bytesLoaded"><linktext>bytesLoaded</linktext></link><link href="fl.video.xml#VideoPlayer/bytesTotal"><linktext>bytesTotal</linktext></link><link href="fl.video.xml#VideoProgressEvent/PROGRESS"><linktext>VideoProgressEvent.PROGRESS</linktext></link><link href="fl.video.xml#VideoPlayer/progressInterval"><linktext>progressInterval</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><shortdesc>
	 Отправляется, когда FLV-файл воспроизводится с частотой, указанной в свойстве playheadUpdateInterval, а также при начале перемотки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiDefaultValue>0.25
	 
	 </apiDefaultValue><apiTipTexts><apiTipText>событие change.
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Отправляется при воспроизведении FLV-файла, с частотой, указанной в свойстве <codeph>playheadUpdateInterval</codeph>, или при начале процесса перемотки. Данный компонент не отправляет это событие, когда видеопроигрыватель находится в приостановленном состоянии или остановлен, если только не производится поиск. 
	 
	 <p>Событие <codeph>playheadUpdate</codeph> относится к типу VideoEvent и имеет константу <codeph>VideoEvent.PLAYHEAD_UPDATE</codeph>.</p> 
     
     </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/PLAYHEAD_UPDATE"><linktext>VideoEvent.PLAYHEAD_UPDATE</linktext></link><link href="fl.video.xml#VideoPlayer/playheadUpdateInterval"><linktext>playheadUpdateInterval</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.MetadataEvent.METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><shortdesc>
	 Первый раз отправляется при достижении метаданных FLV-файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.MetadataEvent.METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>fl.video.MetadataEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Событие metadataReceived
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Первый раз отправляется при достижении метаданных FLV-файла. Объект события имеет свойство <codeph>info</codeph>, содержащее информацию об объекте, полученную обратным вызовом события <codeph>NetStream.onMetaData</codeph>.
	 
	 <p>Событие <codeph>metadataReceived</codeph> относится к типу VideoEvent и имеет константу <codeph>MetadataEvent.METADATA_RECEIVED</codeph>.</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#MetadataEvent/METADATA_RECEIVED"><linktext>MetadataEvent.METADATA_RECEIVED</linktext></link><link href="" invalidHref="flash.net.xml#NetStream/event:onMetaData"><linktext>Событие NetStream.onMetaData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.MetadataEvent.CUE_POINT_cuePoint"><apiName>cuePoint</apiName><shortdesc>
	 Отправляется по достижении ключевой точки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.MetadataEvent.CUE_POINT</apiEventType><adobeApiEventClassifier>fl.video.MetadataEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Событие cuePoint
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Отправляется по достижении ключевой точки. Объект события имеет свойство <codeph>info</codeph>, содержащее информацию об объекте, полученную отзывом события <codeph>NetStream.onCuePoint</codeph> для ключевых точек FLV-файла. Для ключевых точек ActionScript он содержит объект, переданный в методы ключевых точек ActionScript или свойства.
	 
	 <p>Событие <codeph>cuePoint</codeph> относится к типу MetadataEvent и имеет константу <codeph>MetadataEvent.CUE_POINT</codeph>.</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#MetadataEvent/CUE_POINT"><linktext>MetadataEvent.CUE_POINT</linktext></link><link href="" invalidHref="flash.net.xml#NetStream/event:onCuePoint"><linktext>Событие NetStream.onCuePoint </linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
	 Отправляется, когда воспроизведение завершается по достижении конца FLV-файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.COMPLETE</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Событие complete
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Отправляется, когда воспроизведение завершается по достижении конца FLV-файла. Компонент не отправляет событие, если вызван метод <codeph>stop()</codeph> или <codeph>pause()</codeph> или выбран соответствующий элемент управления. 
	 
	 <p>Если приложение использует последовательную загрузку, то свойство <codeph>totalTime</codeph> не устанавливается явным образом. При этом загружается FLV-файл, в метаданных которого не указана длительность. Перед отправкой данного события видеопроигрыватель устанавливает свойство <codeph>totalTime</codeph> равным приблизительному общему значению.</p>
	 
	 <p>Видеопроигрыватель также отправляет события <codeph>stateChange</codeph> и <codeph>stopped</codeph>.</p>
	 
	 <p>Событие <codeph>complete</codeph> относится к типу VideoEvent и имеет константу <codeph>VideoEvent.COMPLETE</codeph>.</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoPlayer/event:stateChange"><linktext>Событие \"stateChange\"</linktext></link><link href="fl.video.xml#VideoPlayer/stop()"><linktext>stop()</linktext></link><link href="fl.video.xml#VideoPlayer/pause()"><linktext>pause()</linktext></link><link href="fl.video.xml#VideoPlayer/totalTime"><linktext>totalTime</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
	 Отправляется экземпляром VideoPlayer, когда подключение NetConnection закрывается по истечении времени ожидания или вызовом метода close(), а также при вызове методов load() или play(), либо установке свойства source, в результате чего закрывается подключение RTMP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.CLOSE</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>событие close
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 Отправляется экземпляром VideoPlayer, когда подключение NetConnection закрывается по истечении времени ожидания, или при вызове метода <codeph>close()</codeph>, а также при вызове методов <codeph>load()</codeph> или <codeph>play()</codeph> или при установке свойства <codeph>source</codeph>. В результате закрывается подключение RTMP. Экземпляр FLVPlayback отправляет данное событие только при воспроизведении потока с сервера Flash Media Server (FMS) или другого сервиса Flash Video Streaming Service (FVSS). 
	 
	 <p>Событие <codeph>close</codeph> относится к типу VideoEvent и имеет константу <codeph>VideoEvent.CLOSE</codeph>.</p>
	 
 	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/CLOSE"><linktext>VideoEvent.CLOSE</linktext></link><link href="fl.video.xml#VideoPlayer/close()"><linktext>close()</linktext></link><link href="fl.video.xml#VideoPlayer/source"><linktext>source</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
		 Создает объект VideoPlayer заданной ширины и высоты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>width</apiItemName><apiType value="int"/><apiData>320</apiData><apiDesc>Ширина видеопроигрывателя в пикселях.
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="int"/><apiData>240</apiData><apiDesc>Высота видеопроигрывателя в пикселях.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Создает объект VideoPlayer заданной ширины и высоты.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="fl.video.xml#INCManager"><linktext>INCManager</linktext></link><link href="fl.video.xml#NCManager"><linktext>NCManager</linktext></link></related-links></apiConstructor><apiOperation id="fl.video:VideoPlayer:flvplayback_internal:_playDynamicStream"><apiName>_playDynamicStream</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="flvplayback_internal"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startTime</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>endTime</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:VideoPlayer:close"><apiName>close</apiName><shortdesc>
		 Принудительно закрывает видеопоток и подключение к серверу Flash Media Server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Принудительно закрывает видеопоток и подключение к серверу Flash Media Server. Данный метод запускает событие <codeph>close</codeph>. Нет необходимости непосредственно вызывать данный метод, потому что функция таймаута при бездействии проигрывателя позаботится о закрытии потока.
		 
         </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/idleTimeout"><linktext>idleTimeout</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:flvplayback_internal:handleDVRError"><apiName>handleDVRError</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="flvplayback_internal"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="fl.video:VideoPlayer:load"><apiName>load</apiName><shortdesc>
		 Аналогичен методу play(), но взывает загрузку FLV-файла без воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiDesc>URL-адрес для FLV-файла, который необходимо загрузить. Если для URL-адреса не передано значения, то создается ошибка с сообщением <codeph>null URL sent to VideoPlayer.load</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>totalTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Длина FLV-файла. Передайте значение 0, <codeph>null</codeph> или не определено для автоматического определения длины файла из метаданных, с сервера или XML-файла.  
		  
		 </apiDesc></apiParam><apiParam><apiItemName>isLive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Передайте значение <codeph>true</codeph> при воспроизведении потока непосредственно с Flash Media Server (FMS). 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Данный метод аналогичен методу <codeph>play()</codeph>, но вызывает загрузку FLV-файла без последующего воспроизведения. Если необходимо, то при отображении первого кадра FLV-файла выполняется автоматическое изменение размеров. После начальной загрузки файла и автоматической установки размеров видеопроигрыватель переходит в состояние <codeph>VideoState.PAUSED</codeph>.
		 
		 <p>Данный метод принимает такие же параметры, как и метод <codeph>play()</codeph>, но нельзя вызывать метод <codeph>load()</codeph> без значения URL-адреса. При попытке вызова без значения URL-адреса возникает ошибка. Если видеопроигрыватель находится в неуправляемом состоянии, то запрос метода <codeph>load()</codeph> будет поставлен в очередь.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:ncConnected"><apiName>ncConnected</apiName><shortdesc>
		 Вызывается интерфейсом INCManager в случае успешного или неуспешного завершения подключения после вызова метода INCManager.connectToURL().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Вызывается объектом INCManager в случае успешного или неуспешного завершения подключения, после вызова метода <codeph>INCManager.connectToURL()</codeph>. После неуспешного соединения перед вызовом метода установите для свойства <codeph>INCManager.netConnection</codeph> значение <codeph>null</codeph> или «не определено».
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/ncReconnected()"><linktext>ncReconnected()</linktext></link><link href="fl.video.xml#INCManager/connectToURL()"><linktext>INCManager.connectToURL()</linktext></link><link href="fl.video.xml#NCManager/connectToURL()"><linktext>NCManager.connectToURL()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:ncReconnected"><apiName>ncReconnected</apiName><shortdesc>
		 Вызывается интерфейсом INCManager в случае успешного или неуспешного завершения переподключения после вызова метода INCManager.reconnect().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Вызывается объектом INCManager после завершения или сбоя повторного подключения, после того как завершен вызов метода <codeph>INCManager.reconnect()</codeph>. Если соединение разорвано, установите для свойства <codeph>INCManager.netconnection</codeph> значение <codeph>null</codeph> перед вызовом метода.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>ncConnected()</linktext></link><link href="fl.video.xml#INCManager/reconnect()"><linktext>INCManager.reconnect()</linktext></link><link href="fl.video.xml#NCManager/reconnect()"><linktext>NCManager.reconnect()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:pause"><apiName>pause</apiName><shortdesc>
		 Приостанавливает воспроизведение видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Приостанавливает воспроизведение видео. Не влияет на остановленное или приостановленное видео. Для продолжения воспроизведения вызовите метод <codeph>play()</codeph>. Не имеет параметров.
		 
		 <p>Если проигрыватель находится в неуправляемом состоянии, то запрос метода <codeph>pause()</codeph> будет поставлен в очередь.</p>
		 
		 <p>При вызове метода без подключенного потока создается исключение. Используйте событие <codeph>stateChange</codeph> и значение свойства <codeph>connected</codeph> для определения безопасного момента для вызова метода.</p>
		 
         <p>Если проигрыватель находится в остановленном состоянии, то вызов метода <codeph>pause()</codeph> не влияет на проигрыватель, который останется в остановленном состоянии.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>stateResponsive</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:play"><apiName>play</apiName><shortdesc>
		 Вызывает воспроизведение видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Передайте URL-адрес, если необходимо загрузить или воспроизвести новый FLV-файл. Если FLV-файл уже загружен, и необходимо продолжить воспроизведение, то передайте значение <codeph>null</codeph>. 
		 
		 </apiDesc></apiParam><apiParam><apiItemName>totalTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Передача длины FLV-файла. Для автоматического определения длины файла из метаданных, сервера или XML-файла, передайте значение <codeph>0</codeph> или <codeph>NaN</codeph>. Если при вызове свойства <codeph>ncConnected</codeph> свойство <codeph>INCManager.streamLength</codeph> не равно <codeph>0</codeph>, <codeph>null</codeph> или не определено, то то значение свойства имеет приоритет над значением данного параметра.  
		 
		 </apiDesc></apiParam><apiParam><apiItemName>isLive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Передайте значение <codeph>true</codeph>, если выполняется потоковое воспроизведение с Flash Media Server (FMS).  
		 
		 </apiDesc></apiParam><apiTipTexts><apiTipText>Метод play
		 
		 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
		 Вызывает воспроизведение видео. Можно вызвать метод, если воспроизведение приостановлено или остановлено, или если видео уже воспроизводится. Вызовите данный метод без параметров для воспроизведения уже загруженного видеофайла или передайте URL-адрес для загрузки нового потока.
		 
		 <p>Если проигрывательнаходится в неуправляемом состоянии, то запрос будет поставлен в очередь.</p>
		 
		 <p>Если метод вызывается без аргументов и в данный момент нет подключенного потока, то создается исключение. Для определения безопасного момента для вызова метода используйте событие <codeph>stateChange</codeph> и значение свойства <codeph>connected</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>stateResponsive</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:play2"><apiName>play2</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dsi</apiItemName><apiOperationClassifier>fl.video:DynamicStreamItem</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		   
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:VideoPlayer:playWhenEnoughDownloaded"><apiName>playWhenEnoughDownloaded</apiName><shortdesc>
		 Воспроизведение FLV-файла при загрузке достаточной части файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiTipTexts><apiTipText>Метод playWhenEnoughDownloaded
		 
         </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
		 Воспроизведение FLV-файла при загрузке достаточной части файла. Если FLV-файл уже загружен или происходит потоковое воспроизведение с Flash Media Server (FMS), то вызов метода <codeph>playWhenEnoughDownloaded()</codeph>аналогичен вызову метода <codeph>play()</codeph> без параметров. Вызов данного метода не приостанавливает воспроизведение, поэтому во многих случаях перед вызовом этого метода необходимо вызвать метод <codeph>pause()</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:VideoPlayer:seek"><apiName>seek</apiName><shortdesc>
		 Переходит в файле на позицию, заданную временем в секундах с точностью в три десятичных разряда (до миллисекунды).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если время &lt; 0 или <codeph>NaN</codeph>.
         </apiDesc><apiItemName>VideoError</apiItemName><apiOperationClassifier>fl.video:VideoError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>Число, определяющее время в секундах, в которое устанавливается точка воспроизведения. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Переходит в файле в положение, заданное временем в секундах с точностью в три десятичных разряда (до миллисекунды). Если видео воспроизводится, то воспроизведение продолжится с этой точки. Если видео приостановлено, то видео переместится в эту точку и останется в приостановленном состоянии. Если видео остановлено, то видео переместится в эту точку и перейдет в приостановленное состояние. Неприменимо для потокового воспроизведения.
		 
         <p>Свойство <codeph>playheadTime</codeph>может не иметь ожидаемого значения немедленно после вызова одного из методов перехода или установки свойства <codeph>playheadTime</codeph>. При использовании последовательной загрузки можно перейти только в ключевой кадр. Поэтому переход перемещает пользователя в первый ближайший ключевой кадр к указанному времени.</p>
		 
		 <p><b>Примечание.</b> При потоковом воспроизведении переход осуществляется точно на указанное время, даже если исходный FLV-файл не имеет ключевых кадров.</p>
		 
		 <p>Процесс перехода асинхронный, то есть при вызове метода перехода или установке значения для свойства <codeph>playheadTime</codeph>, значение свойства <codeph>playheadTime</codeph> обновляется с задержкой. Для получения значения времени после завершения перехода программа прослушивает событие <codeph>seek</codeph>, которое не будет запущено до завершения обновления свойства <codeph>playheadTime</codeph>.</p>
		 
		 <p>При вызове метода без подключенного потока создается исключение. Для определения безопасного момента для вызова метода используйте событие <codeph>stateChange</codeph> и значение свойства <codeph>connected</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>stateResponsive</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:setScale"><apiName>setScale</apiName><shortdesc>
		 Одновременно задает свойства масштаба по горизонтали и вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scaleX</apiItemName><apiType value="Number"/><apiDesc>Число, представляющее масштаб по горизонтали.
		 </apiDesc></apiParam><apiParam><apiItemName>scaleY</apiItemName><apiType value="Number"/><apiDesc>Число, представляющее масштаб по вертикали.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Одновременно задает свойства <codeph>scaleX</codeph> и <codeph>scaleY</codeph>. Установка <codeph>scaleX</codeph> или <codeph>scaleY</codeph> по отдельности вызывает два события <codeph>autolayout</codeph>, в то время как вызов метода <codeph>setScale()</codeph> вызывает только одно событие <codeph>autolayout</codeph>. 
                 
		 <p>Если свойство <codeph>scaleMode</codeph> имеет значение <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> или <codeph>VideoScaleMode.NO_SCALE</codeph>, то вызов данного метода немедленно запускает событие <codeph>autolayout</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/scaleX"><linktext>scaleX</linktext></link><link href="fl.video.xml#VideoPlayer/scaleY"><linktext>scaleY</linktext></link><link href="fl.video.xml#VideoScaleMode/MAINTAIN_ASPECT_RATIO"><linktext>VideoScaleMode.MAINTAIN_ASPECT_RATIO</linktext></link><link href="fl.video.xml#VideoScaleMode/NO_SCALE"><linktext>VideoScaleMode.NO_SCALE</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:setSize"><apiName>setSize</apiName><shortdesc>
		 Одновременно задает свойства ширины и высоты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Ширина видеопроигрывателя.
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Высота видеопроигрывателя.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Одновременно задает свойства <codeph>width</codeph> и <codeph>height</codeph>. Установка только свойства <codeph>width</codeph> или <codeph>height</codeph> запускает два события <codeph>autolayout</codeph>, тогда как при вызове метода <codeph>setSize()</codeph> запускается только одно событие <codeph>autolayout</codeph>. 
		 
		 <p>Если свойство <codeph>scaleMode</codeph> имеет значение <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> или <codeph>VideoScaleMode.NO_SCALE</codeph>, то вызов данного метода немедленно запускает событие <codeph>autolayout</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/width"><linktext>width</linktext></link><link href="fl.video.xml#VideoPlayer/height"><linktext>height</linktext></link><link href="fl.video.xml#VideoScaleMode/MAINTAIN_ASPECT_RATIO"><linktext>VideoScaleMode.MAINTAIN_ASPECT_RATIO</linktext></link><link href="fl.video.xml#VideoScaleMode/NO_SCALE"><linktext>VideoScaleMode.NO_SCALE</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:stop"><apiName>stop</apiName><shortdesc>
		 Останавливает воспроизведение видео.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Останавливает воспроизведение видео. Если для свойства <codeph>autoRewind</codeph> установлено значение <codeph>true</codeph>, то производится перемотка видео к первому кадру. Не оказывает влияния на проигрыватель, если воспроизведение уже остановлено. Для продолжения воспроизведения вызовите метод <codeph>play()</codeph>. Не имеет параметров.
		 
		 <p>Если проигрыватель находится в неуправляемом состоянии, запрос будет поставлен в очередь.</p>
		 
		 <p>При вызове метода без подключенного потока создается исключение. Используйте событие <codeph>stateChange</codeph> и значение свойства <codeph>connected</codeph> для определения безопасного момента для вызова метода.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>stateResponsive</linktext></link><link href="fl.video.xml#VideoPlayer/autoRewind"><linktext>autoRewind</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="fl.video:VideoPlayer:SHORT_VERSION"><apiName>SHORT_VERSION</apiName><shortdesc>
	Переменная состояния, указывающая сокращенный номер версии компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5</apiData><apiType value="String"/></apiValueDef><apiDesc>
	Переменная состояния, указывающая сокращенный номер версии компонента. Номер версии полезен, если есть FLA-файл и нужно узнать версию компонента. Для определения версии компонента вставьте следующий код трассировки в FLA-файл:
	
	<codeblock>FLVPlayback.SHORT_VERSION</codeblock>
	
	<p>Переменная <codeph>SHORT_VERSION</codeph> включает только старший и младший номер версии, например 2.0. Переменная <codeph>VERSION</codeph> включает старший и младший номер версии, редакцию и номер сборки, например 2.0.0.11.</p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/VERSION"><linktext>Переменная VERSION </linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:VERSION"><apiName>VERSION</apiName><shortdesc>
	Переменная состояния, указывающая полный номер версии компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5.0.15</apiData><apiType value="String"/></apiValueDef><apiDesc>
	Переменная состояния, указывающая полный номер версии компонента. Номер версии полезен, если есть FLA-файл и нужно узнать версию компонента. Для определения версии компонента вставьте следующий код трассировки в FLA-файл:
	
	<codeblock>FLVPlayback.VERSION</codeblock>
	
	<p>Переменная <codeph>VERSION</codeph> включает старший и младший номер версии, редакцию и номер сборки, например 2.0.0.11. Переменная <codeph>SHORT_VERSION</codeph> включает только старший и младший номер версии, например 2.0. </p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/SHORT_VERSION"><linktext>Переменная SHORT_VERSION</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:iNCManagerClass"><apiName>iNCManagerClass</apiName><shortdesc>
		 Установите в качестве значения свойств iNCManagerClass объект класса или строковое имя пользовательского класса, чтобы объекты VideoPlayer использовали их в качестве реализации интерфейса INCManager по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>fl.video.NCManagerDynamicStream</apiData><apiType value="Object"/><apiDefaultValue>"fl.video.NCManager" as a string
		 
		 </apiDefaultValue><apiTipTexts><apiTipText>Класс VideoPlayer
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 Для того чтобы объекты VideoPlayer использовали пользовательский класс как стандартную реализацию интерфейса INCManager, установите для свойства <codeph>iNCManagerClass</codeph> значение объекта класса или имени пользовательского класса. Класс FLVPlayback включает описание пользовательского класса. Видеопроигрыватель не включает описание класса.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:netStreamClientClass"><apiName>netStreamClientClass</apiName><shortdesc>
	Регистрирует пользовательский класс клиентского свойства NetStream.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiType value="Object"/><apiException><apiDesc>Если для данного свойства установлено недопустимое значение, то вызывается ошибка <codeph>VideoError.NETSTREAM_CLIENT_CLASS_UNSET</codeph>.
   </apiDesc><apiItemName>VideoError</apiItemName><apiOperationClassifier>fl.video:VideoError</apiOperationClassifier></apiException><apiDefaultValue>fl.video.VideoPlayerClient
   </apiDefaultValue></apiValueDef><apiDesc>
	Регистрирует пользовательский класс клиентского свойства NetStream. По умолчанию используется класс <codeph>fl.video.VideoPlayerClient</codeph>. Данный класс обрабатывает сообщения <codeph>onMetaData()</codeph> и <codeph>onCuePoint()</codeph>. Чтобы добавить собственный обработчик других сообщений, таких как <codeph>onImageData()</codeph> и <codeph>onTextData()</codeph>, необходимо создать собственный класс и установить в классе данное свойство.
	
	<p>Конструктор класса должен иметь логическое свойство ready, а в качестве единственного параметра иметь экземпляр <codeph>VideoPlayer</codeph>. Свойство должно иметь значение <codeph>false</codeph>, пока клиент еще ждет сообщения данных, ожидаемых в начале файла. Если VideoPlayer перед получением данных сообщений выполнял изменение размеров и автоматическую перемотку, то сообщения могут быть пропущены. По умолчанию объект <codeph>fl.video.VideoPlayerClient</codeph> из свойства ready возвращает значение <codeph>true</codeph>, как только вызвано сообщение <codeph>onMetaData()</codeph>.</p>
	
	<p>Можно установить свойство на сам класс объекта (как в примере ниже) или имя класса:</p>
	<codeblock>
        import fl.video.
        VideoPlayer.netStreamClientClass = MyCustomClient;
        </codeblock>
        <p>Одной установки имени класса для значения свойства недостаточно для включения класса в компиляцию SWF. Значением по умолчанию является класс объекта <codeph>fl.video.VideoPlayerClient</codeph>, а не имя класса.</p>
	<p>Настоятельно рекомендуется, чтобы любые собственные реализации класса были подклассами <codeph>fl.video.VideoPlayer</codeph>. Иначе при выполнении построения в компоненте VideoPlayer и компоненте FLVPlayback существует вероятность нарушения метаданных и ключевой точки.</p>
	
        
   </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:align:get"><apiName>align</apiName><shortdesc>
		 Задает способ отображения видео относительно свойств registrationX, registrationY, registrationWidth и registrationHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>VideoAlign.CENTER
		 
		 </apiDefaultValue></apiValueDef><apiDesc>
		 Устанавливает отображение видео относительно свойств <codeph>registrationX</codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph>. Свойство <codeph>align</codeph> создает автоматическое размещение, если для свойства <codeph>scaleMode</codeph> установлено значение <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> или <codeph>VideoScaleMode.NO_SCALE</codeph>. Изменение данного свойства после загрузки FLV-файла приводит к немедленному началу автоматического размещения. Значения приходят от класса VideoAlign.
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationX"><linktext>registrationX</linktext></link><link href="fl.video.xml#VideoPlayer/registrationY"><linktext>registrationY</linktext></link><link href="fl.video.xml#VideoPlayer/registrationWidth"><linktext>registrationWidth</linktext></link><link href="fl.video.xml#VideoPlayer/registrationHeight"><linktext>registrationHeight</linktext></link><link href="fl.video.xml#VideoPlayer/scaleMode"><linktext>scaleMode</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
		 Логический параметр, вызывающий (в случае значения true) перемотку FLV-файла к кадру 1 после остановки воспроизведения по причине достижения конца потока или вызова метода stop().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
         
         </apiDefaultValue></apiValueDef><apiDesc>
		 В случае значения <codeph>true</codeph> логический параметр вызывает перемотку FLV-файла к кадру 1 после остановки воспроизведения по причине достижения конца потока или вызова метода <codeph>stop()</codeph>. Данное свойство неприменимо к потоковому воспроизведению.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:bufferTime:get"><apiName>bufferTime</apiName><shortdesc>
		 Число, указывающее количество секунд для буферизации в памяти перед началом воспроизведения видеопотока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Число, указывающее количество секунд для буферизации в памяти перед началом воспроизведения видеопотока. Для FLV-файлов, воспроизводимых в потоке с RTMP, которые не загружены и не буферизированы в памяти, необходимо уменьшить данное значение со стандартного на значение 0,1. При последовательной загрузке FLV-файла с HTTP можно увеличить данное значение, что позволит улучшить воспроизведение высококачественного видео на старом медленном компьютере.
		 
		 <p>Для предварительно записанного видео (не потоковое воспроизведение) не устанавливайте для свойства <codeph>bufferTime</codeph> значение <codeph>0</codeph>. Используйте стандартное время для буфера или увеличьте его.</p>
		 
		 <p>Данное свойство не определяет размер загружаемого FLV-файла перед началом воспроизведения.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/bufferTime"><linktext>FLVPlayback.bufferTime</linktext></link><link href="fl.video.xml#VideoPlayer/isLive"><linktext>isLive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
		 Число, указывающее объем загружаемых данных по HTTP (в байтах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/><apiTipTexts><apiTipText>Количество загруженных байтов
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 Число, указывающее объем загружаемых данных по HTTP (в байтах). Возвращает значение 0, если нет потока, если поток поступает с Flash Media Server (FMS) или информация еще недоступна. Возвращенное значение используется только при HTTP-загрузке.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
		 Число, указывающее общее количество загруженных байт по HTTP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/><apiTipTexts><apiTipText>Количество загружаемых байтов
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 Число, указывающее общее количество загруженных байт по HTTP. Возвращает значение «-1», если нет потока, если поток поступает с Flash Media Server (FMS) или информация еще недоступна. Возвращенное значение используется только при HTTP-загрузке. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:dvrFixedDuration:get"><apiName>dvrFixedDuration</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		   
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link><link href="fl.video.xml#VideoPlayer/dvrIncrement"><linktext/></link><link href="fl.video.xml#VideoPlayer/dvrIncrementVariance"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:dvrIncrement:get"><apiName>dvrIncrement</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		  
		  
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link><link href="fl.video.xml#VideoPlayer/dvrIncrementVariance"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:dvrIncrementVariance:get"><apiName>dvrIncrementVariance</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		   
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link><link href="fl.video.xml#VideoPlayer/dvrIncrement"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:dvrSnapToLive:get"><apiName>dvrSnapToLive</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		  
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:idleTimeout:get"><apiName>idleTimeout</apiName><shortdesc>
		 Промежуток времени (в миллисекундах) перед тем, как приложение Flash закрывает бездействующее подключение к видеосерверу (например, FMS) из-за того, что воспроизведение приостановлено или остановлено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Промежуток времени (в миллисекундах) перед тем, как приложение Flash закрывает бездействующее подключение к видеосерверу (например, FMS) из-за того, что воспроизведение приостановлено или остановлено. Данное свойство не действует при загрузке FLV-файла по протоколу HTTP.
		 
		 <p>Если установить данное свойство, когда видео находится в режиме бездействия, то свойство перезапустит период таймаута с новым значением.</p>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:isDVR:get"><apiName>isDVR</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0.0.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:isLive:get"><apiName>isLive</apiName><shortdesc>
		 Логический параметр, принимающий значение true, если видеопоток воспроизводится в реальном времени.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Логический параметр, принимающий значение <codeph>true</codeph>, если видеопоток воспроизводится в реальном времени. Данное свойство действительно, только если поток воспроизводится с видосервера, такого как Flash Media Server (FMS) или другого сервиса Flash Video Streaming Service (FVSS). Данное свойство игнорируется при HTTP-загрузке.
		 
		 <p>Установите для свойства <codeph>isLive</codeph> значение <codeph>false</codeph> при отправке предварительно записанного видеопотока в видеопроигрыватель и установите значение <codeph>true</codeph> при отправке данных реального времени, таких как прямая трансляция. Для улучшения производительности при установке для свойства <codeph>isLive</codeph> значения <codeph>false</codeph> не устанавливайте для свойства <codeph>bufferTime</codeph> значение <codeph>0</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/bufferTime"><linktext>bufferTime</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/isLive"><linktext>FLVPlayback.isLive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:isRTMP:get"><apiName>isRTMP</apiName><shortdesc>
		 Логическое значение, принимающее значение true, если FLV-файл воспроизводится в потоковом режиме с сервера FMS по протоколу RTMP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Логическая переменная, принимающая значение <codeph>true</codeph>, если FLV-файл воспроизводится в потоковом режиме с сервера FMS по протоколу RTMP. Принимает начение <codeph>false</codeph> для любых других источников FLV-файла. 
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/isRTMP"><linktext>FLVPlayback.isRTMP</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:metadata:get"><apiName>metadata</apiName><shortdesc>
         Объект, представляющий собой пакет метаданных, полученный в результате вызова метода обратного вызова NetSteam.onMetaData(), если такой объект доступен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
         Объект, представляющий собой пакет метаданных, полученных в результате вызова метода обратного вызова <codeph>NetSteam.onMetaData()</codeph>, если такой объект доступен. Готово, если передано событие <codeph>metadataReceived</codeph>.
		 
		 <p>Если FLV-файл закодирован с помощью кодировщика Flash 8, то свойство <codeph>metadata</codeph> содержит следующую информацию. Старые FLV-файлы содержат только значения <codeph>height</codeph>, <codeph>width</codeph> и <codeph>duration</codeph>.</p>
		 
		 <adobetable class="innertable">
		 	
		 		
		 		
		 
		 
 		 
 		 
 		 
 		 
		 
 		 
 		 
		 <tgroup cols="2"><thead><row><entry><b>Параметр</b></entry><entry><b>Описание</b></entry></row></thead><tbody><row><entry><codeph>canSeekToEnd</codeph></entry><entry>Логическое значение равно <codeph>true</codeph>, если FLV-файл закодирован с ключевым кадром в последнем кадре, позволяющем перемещаться в конец последовательно загружаемого фрагмента ролика. Значение параметра <codeph>false</codeph>, если FLV-файл не имеет ключевого кадра в последнем кадре.</entry></row><row><entry><codeph>cuePoints</codeph></entry><entry>Массив объектов, один для каждой ключевой точки, встроенный в FLV-файл. Значение undefined, если FLV-файл не имеет контрольных точек. Каждый объект имеет следующие свойства:
	       	
		 			<ul>
		 				<li><codeph>type</codeph> — строка, определяющая тип ключевой точки: navigation или event.</li>
		 				<li><codeph>name</codeph> — строка, являющаяся именем ключевой точки.</li>
		 				<li><codeph>time</codeph> — число, являющееся временем ключевой точки в секундах с точностью до третьего десятичного знака (миллисекунды).</li>
		 				<li><codeph>parameters</codeph> — необязательный параметр, имеющий пары «имя-значение», назначаемые пользователем при создании ключевых точек.</li>
		 			</ul>
		 		</entry></row><row><entry><codeph>audiocodecid</codeph></entry><entry>Число, указывающее на используемый аудиокодек (способ кодирования/декодирования).</entry></row><row><entry><codeph>audiodelay</codeph></entry><entry> Число, представляющее момент времени <codeph>0</codeph> в исходном файле, с которого декодирован FLV-файл. 
		 <p>Используется задержка видеоряда на короткий период времени, необходимая для синхронизации звука. Например, если значение <codeph>audiodelay</codeph> равно <codeph>0,038</codeph>, то видео, начинающееся в исходном файле с момента времени <codeph>0</codeph>, начнется в FLV-файле с момента времени <codeph>0,038</codeph>.</p> 
		 <p>Обратите внимание, что классы FLVPlayback и VideoPlayer имеют параметры компенсации этой задержки. Это означает, что можно продолжать использовать параметры настройки времени, применяемые в исходном файле.</p>
</entry></row><row><entry><codeph>audiodatarate</codeph></entry><entry>Скорость передачи аудио: килобайтов в секунду.</entry></row><row><entry><codeph>videocodecid</codeph></entry><entry>Номер версии кодека, используемого для кодирования видео.</entry></row><row><entry><codeph>framerate</codeph></entry><entry>Частота кадров FLV-файла.</entry></row><row><entry><codeph>videodatarate</codeph></entry><entry>Скорость передачи видеоданных FLV-файла.</entry></row><row><entry><codeph>height</codeph></entry><entry>Высота видео в FLV-файле.</entry></row><row><entry><codeph>width</codeph></entry><entry>Ширина видео в FLV-файле.</entry></row><row><entry><codeph>duration</codeph></entry><entry>Число, определяющее длительность видео в FLV-файле (в секундах).</entry></row></tbody></tgroup></adobetable>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/metadata"><linktext>FLVPlayback.metadata</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:ncMgr:get"><apiName>ncMgr</apiName><shortdesc>
		 Объект INCManager, предоставляющий доступ к экземпляру класса, реализующего интерфейс INCManager к классу NCManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>fl.video:INCManager</apiValueClassifier></apiValueDef><apiDesc>
		 Объект INCManager, предоставляющий доступ к экземпляру класса, реализующего интерфейс <codeph> INCManager</codeph> к классу NCManager.
		 
		 <p>Можно использовать данное свойство для реализации пользовательского класса INCManager, требующего инициализации пользователем.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/ncMgr"><linktext>FLVPlayback.ncMgr</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:netConnection:get"><apiName>netConnection</apiName><shortdesc>
		 Разрешает прямой доступ к экземпляру подключения NetConnection, созданному видеопроигрывателем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc>
		 Разрешает прямой доступ к экземпляру подключения NetConnection, созданному видеопроигрывателем.  
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:netStream:get"><apiName>netStream</apiName><shortdesc>
		 Разрешает прямой доступ к экземпляру NetStream, созданному видеопроигрывателем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetStream"/></apiValueDef><apiDesc>
		 Разрешает прямой доступ к экземпляру NetStream, созданному видеопроигрывателем.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
		 Число, обозначающее текущее время воспроизведения или положение, которое может быть дробным (в секундах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiTipTexts><apiTipText>Текущее положение точки воспроизведения, в секундах
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 Число, обозначающее текущее время воспроизведения или положение, которое может быть дробным (в секундах). Установка данного свойства запускает процесс перехода и имеет все ограничения для процесса перехода.
		 
		 <p>Если измененяется время точки воспроизведения, которое при воспроизведении FLV-файла меняется четыре раза в секунду, то компонент отправляет событие <codeph>playheadUpdate</codeph>.</p>
		 
		 <p>По нескольким причинам свойство <codeph>playheadTime</codeph> может не иметь ожидаемого значения немедленно после вызова одного из методов перехода или установки свойства <codeph>playheadTime</codeph>. Во-первых, при последовательной загрузке можно перейти только к ключевому кадру, поэтому переход происходит к первому ближайшему ключевому кадру к заданному времени. При использовании потокового воспроизведения переход осуществляется точно в указанное время, даже если исходный FLV-файл не имеет ключевых кадров. Во-вторых, процесс перехода асинхронный, то есть, если вызвать метод перехода или установить значение для свойства playheadTime, значение свойства <codeph>playheadTime</codeph> обновится с задержкой. Для получения времени после завершения перехода прослушивайте событие <codeph>seek</codeph>, которое не посылается, пока не обновится свойство <codeph>playheadTime</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/seek()"><linktext>seek()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/playheadTime"><linktext>FLVPlayback.playheadTime</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:playheadUpdateInterval:get"><apiName>playheadUpdateInterval</apiName><shortdesc>
		 Число, представляющее промежуток времени (в миллисекундах) между событиями playheadUpdate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>250
         
         </apiDefaultValue></apiValueDef><apiDesc>
		 Число, представляющее промежуток времени (в миллисекундах) между событиями <codeph>playheadUpdate</codeph>. Установка данного значения при воспроизведении FLV-файла перезапустит таймер.  
		 
		 <p>Так как ключевые точки ActionScript начинаются при обновлении точек воспроизведения, то уменьшение значения свойства <codeph>playheadUpdateInterval</codeph> позволит повысить точность ключевых точек ActionScript.</p>
		 
		 <p>Так как интервал обновления точек воспроизведения устанавливается глобальным методом <codeph>setInterval()</codeph>, то обновление не может запускаться чаще частоты кадров SWF-файла, как и любой интервал, устанавливаемый данным методом. Так, например для стандартной частоты 12 кадров в секунду минимальный эффективный интервал, который можно создать, равен приблизительно 83 миллисекундам, или 1/12 секунды (1000 миллисекунд, деленные на 12).</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/playheadUpdateInterval"><linktext>FLVPlayback.playheadUpdateInterval</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:progressInterval:get"><apiName>progressInterval</apiName><shortdesc>
		 Число, представляющее промежуток времени (в миллисекундах) между событиями progress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Число, представляющее промежуток времени (в миллисекундах) между событиями <codeph>progress</codeph>. Если установить данное свойство при воспроизведении видеопотока, то таймер перезапустится. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:registrationHeight:get"><apiName>registrationHeight</apiName><shortdesc>
		 Высота, используемая для выравнивания видеосодержимого в ходе автоматического изменения размеров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Высота, используемая для выравнивания видеосодержимого в ходе автоматического изменения размеров. Не путайте свойство <codeph>registrationHeight</codeph> с свойством <codeph>height</codeph>. Свойство <codeph>height</codeph> показывает фактическую высоту видео.
		 
		 <p>Пример 1. Загрузите FLV-файл 80x80 со следующими параметрами:
		 <ul>
		 <li><codeph>registrationX</codeph> = 100</li> 
		 <li><codeph>registrationY</codeph> = 100</li>
		 <li><codeph>registrationWidth</codeph> = 60</li> 
		 <li><codeph>registrationHeight</codeph> = 40</li>
		 <li><codeph>align</codeph> = <codeph>VideoAlign.CENTER</codeph></li> 
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.NO_SCALE</codeph></li>
		 </ul>
		 
		 
		 После автоматического изменения размеров будут получены следующее значения:
		 <ul>
		 <li><codeph>x</codeph> = 90</li>
		 <li><codeph>y</codeph> = 80</li>
		 <li><codeph>width</codeph> = 80</li>
		 <li><codeph>height</codeph> = 80</li>  
		 </ul>
		 </p>
		 
		 <p>Пример 2. Загрузите тот же сценарий, что и в примере 1, но со следующими параметрами: 
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph></li>
		 </ul>
		 
		 Будут получены следующие значения:
		 <ul>
		 <li><codeph>x</codeph> = 110</li>
		 <li><codeph>y</codeph> = 100</li> 
		 <li><codeph>width</codeph> = 40</li> 
		 <li><codeph>height</codeph> = 80</li>
		 </ul>
		 </p>
		 
		 <p>Пример 3. Загрузите тот же сценарий, что в примере 2, но со следующими параметрами:
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.EXACT_FIT</codeph></li>
		 </ul>
		 
		 Будут получены все значения, аналогичные зарегистрированным значениям:
		 <ul>
		 <li><codeph>x</codeph> = 100</li> 
		 <li><codeph>y</codeph> = 100</li>
		 <li><codeph>width</codeph> = 60</li> 
		 <li><codeph>height</codeph> = 40</li>
		 </ul>
		 </p>
		 
		 <p>Установка свойства <codeph>registrationHeight</codeph>аналогична установке свойства <codeph>height</codeph>, и наоборот. При установке любого другого свойства или вызове любого метода, влияющего на высоту, таких как <codeph>scaleX</codeph>, <codeph>setSize</codeph> и <codeph>setScale</codeph>, также синхронно сохраняются свойства <codeph>height</codeph> и <codeph>registrationHeight</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationX"><linktext>registrationX</linktext></link><link href="fl.video.xml#VideoPlayer/registrationY"><linktext>registrationY</linktext></link><link href="fl.video.xml#VideoPlayer/registrationWidth"><linktext>registrationWidth</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:registrationWidth:get"><apiName>registrationWidth</apiName><shortdesc>
		 Ширина, используемая для выравнивания видеосодержимого в ходе автоматического изменения размеров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Ширина, используемая для выравнивания видеосодержимого в ходе автоматического изменения размеров. Не путайте свойство <codeph>registrationWidth</codeph> с свойством <codeph>width</codeph>. Свойство <codeph>width</codeph> показывает фактическую ширину видео.
		 
		 <p>Пример 1. Загрузите FLV-файл 80x80 со следующими параметрами:
		 <ul>
		 <li><codeph>registrationX</codeph> = 100</li> 
		 <li><codeph>registrationY</codeph> = 100</li>
		 <li><codeph>registrationWidth</codeph> = 60</li> 
		 <li><codeph>registrationHeight</codeph> = 40</li>
		 <li><codeph>align</codeph> = <codeph>VideoAlign.CENTER</codeph></li> 
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.NO_SCALE</codeph></li>
		 </ul>
		 
		 
		 После автоматического изменения размеров будут получены следующее значения:
		 <ul>
		 <li><codeph>x</codeph> = 90</li>
		 <li><codeph>y</codeph> = 80</li>
		 <li><codeph>width</codeph> = 80</li>
		 <li><codeph>height</codeph> = 80</li>  
		 </ul>
		 </p>
		 
		 <p>Пример 2. Загрузите тот же сценарий, что и в примере 1, но со следующими параметрами: 
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph></li>
		 </ul>
		 
		 Будут получены следующие значения:
		 <ul>
		 <li><codeph>x</codeph> = 110</li>
		 <li><codeph>y</codeph> = 100</li> 
		 <li><codeph>width</codeph> = 40</li> 
		 <li><codeph>height</codeph> = 80</li>
		 </ul>
		 </p>
		 
		 <p>Пример 3. Загрузите тот же сценарий, что в примере 2, но со следующими параметрами:
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.EXACT_FIT</codeph></li>
		 </ul>
		 
		 Будут получены все значения, аналогичные зарегистрированным значениям:
		 <ul>
		 <li><codeph>x</codeph> = 100</li> 
		 <li><codeph>y</codeph> = 100</li>
		 <li><codeph>width</codeph> = 60</li> 
		 <li><codeph>height</codeph> = 40</li>
		 </ul>
		 </p>
		 
		 <p>Установка свойства <codeph>registrationWidth</codeph> аналогична установке свойства <codeph>width</codeph>, и наоборот. При установке любого другого свойства или вызове любого метода, влияющего на ширину, таких как <codeph>scaleX</codeph>, <codeph>setSize</codeph> и <codeph>setScale</codeph>, также синхронно сохраняются свойства <codeph>width</codeph> и <codeph>registrationWidth</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationX"><linktext>registrationX</linktext></link><link href="fl.video.xml#VideoPlayer/registrationY"><linktext>registrationY</linktext></link><link href="fl.video.xml#VideoPlayer/registrationHeight"><linktext>registrationHeight</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:registrationX:get"><apiName>registrationX</apiName><shortdesc>
		 Координата по горизонтали, используемая для выравнивания видеосодержимого в ходе автоматического изменения размеров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Координата по горизонтали, используемая для выравнивания видеосодержимого в ходе автоматического изменения размеров. Не путайте с свойством <codeph>x</codeph>, которое показывает фактическое положение видео.
		 
		 <p>Пример 1. Загрузите FLV-файл 80x80 со следующими параметрами:
		 <ul>
		     <li><codeph>registrationX</codeph> = 100</li> 
		     <li><codeph>registrationY</codeph> = 100</li>
		     <li><codeph>registrationWidth</codeph> = 60</li> 
		     <li><codeph>registrationHeight</codeph> = 40</li>
		     <li><codeph>align</codeph> = <codeph>VideoAlign.CENTER</codeph></li> 
		     <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.NO_SCALE</codeph></li>
		 </ul>
		 
		 
		 После автоматического изменения размеров будут получены следующее значения:
		 <ul>
             <li><codeph>x</codeph> = 90</li>
             <li><codeph>y</codeph> = 80</li>
             <li><codeph>width</codeph> = 80</li>
             <li><codeph>height</codeph> = 80</li>  
		 </ul>
		 </p>
		 
		 <p>Пример 2. Загрузите тот же сценарий, что и в примере 1, но со следующими параметрами: 
		 <ul>
		     <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph></li>
		 </ul>
		 
		 Будут получены следующие значения:
		 <ul>
		 <li><codeph>x</codeph> = 110</li>
		 <li><codeph>y</codeph> = 100</li> 
		 <li><codeph>width</codeph> = 40</li> 
		 <li><codeph>height</codeph> = 80</li>
		 </ul>
		 </p>
		 
		 <p>Пример 3. Загрузите тот же сценарий, что в примере 2, но со следующими параметрами:
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.EXACT_FIT</codeph></li>
		 </ul>
		 
		 Будут получены все значения, аналогичные зарегистрированным значениям:
		 <ul>
		 <li><codeph>x</codeph> = 100</li> 
		 <li><codeph>y</codeph> = 100</li>
		 <li><codeph>width</codeph> = 60</li> 
		 <li><codeph>height</codeph> = 40</li>
		 </ul>
		 </p>
		 
		 <p>При установке свойства <codeph>x</codeph> или <codeph>registrationX</codeph>} второе свойство меняется, сохраняя свое смещение от первого. Например, если <codeph>x</codeph> = 10 и <codeph>registrationX</codeph> = 20, то при установке значения <codeph>x</codeph> = 110 значение <codeph>registrationX</codeph> устанавливается равным 120.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationY"><linktext>registrationY</linktext></link><link href="fl.video.xml#VideoPlayer/registrationWidth"><linktext>registrationWidth</linktext></link><link href="fl.video.xml#VideoPlayer/registrationHeight"><linktext>registrationHeight</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:registrationY:get"><apiName>registrationY</apiName><shortdesc>
		 Координата по вертикали, используемая для выравнивания видеосодержимого в ходе автоматического изменения размеров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Координата по вертикали, используемая для выравнивания видеосодержимого в ходе автоматического изменения размеров. Не путайте с свойством <codeph>y</codeph>, которое показывает фактическое положение видео.
		 
		 <p>Пример 1. Загрузите FLV-файл 80x80 со следующими параметрами:
		 <ul>
		 <li><codeph>registrationX</codeph> = 100</li> 
		 <li><codeph>registrationY</codeph> = 100</li>
		 <li><codeph>registrationWidth</codeph> = 60</li> 
		 <li><codeph>registrationHeight</codeph> = 40</li>
		 <li><codeph>align</codeph> = <codeph>VideoAlign.CENTER</codeph></li> 
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.NO_SCALE</codeph></li>
		 </ul>
		 
		 
		 После автоматического изменения размеров будут получены следующее значения:
		 <ul>
		 <li><codeph>x</codeph> = 90</li>
		 <li><codeph>y</codeph> = 80</li>
		 <li><codeph>width</codeph> = 80</li>
		 <li><codeph>height</codeph> = 80</li>  
		 </ul>
		 </p>
		 
		 <p>Пример 2. Загрузите тот же сценарий, что и в примере 1, но со следующими параметрами: 
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph></li>
		 </ul>
		 
		 Будут получены следующие значения:
		 <ul>
		 <li><codeph>x</codeph> = 110</li>
		 <li><codeph>y</codeph> = 100</li> 
		 <li><codeph>width</codeph> = 40</li> 
		 <li><codeph>height</codeph> = 80</li>
		 </ul>
		 </p>
		 
		 <p>Пример 3. Загрузите тот же сценарий, что в примере 2, но со следующими параметрами:
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.EXACT_FIT</codeph></li>
		 </ul>
		 
		 Будут получены все значения, аналогичные зарегистрированным значениям:
		 <ul>
		 <li><codeph>x</codeph> = 100</li> 
		 <li><codeph>y</codeph> = 100</li>
		 <li><codeph>width</codeph> = 60</li> 
		 <li><codeph>height</codeph> = 40</li>
		 </ul>
		 </p>
		 
		 <p>При установке свойства <codeph>y</codeph> или <codeph>registrationY</codeph> второе свойство меняется, сохраняя свое смещение от первого. Например, если <codeph>y</codeph> = 10 и <codeph>registrationY</codeph> = 20, то при установке значения <codeph>y</codeph> = 110 значение <codeph>registrationY</codeph> устанавливается равным 120.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationX"><linktext>registrationX</linktext></link><link href="fl.video.xml#VideoPlayer/registrationWidth"><linktext>registrationWidth</linktext></link><link href="fl.video.xml#VideoPlayer/registrationHeight"><linktext>registrationHeight</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
		 Указывает способ изменения размеров видео после загрузки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>VideoScaleMode.MAINTAIN_ASPECT_RATIO
                 
                 </apiDefaultValue></apiValueDef><apiDesc>
		 Указывает способ изменения размеров видео после загрузки. Если установлено значение <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph>, то сохраняется соотношение сторон видео внутри прямоугольника, заданного свойствами <codeph>registrationX</codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph>. Если установлено значение <codeph>VideoScaleMode.NO_SCALE</codeph>, то видео автоматически меняет размеры соответственно исходным размерам FLV-файла. Если установлено <codeph>VideoScaleMode.EXACT_FIT</codeph>, то размеры исходного FLV-файла игнорируются и видео растягивается по размерам прямоугольника, заданного свойствами <codeph>registrationX</codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph>. Если свойство устанавливается после загрузки FLV-файла, то немедленно начинается автоматическое размещение. Значения приходят от свойства <codeph>VideoScaleMode</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoScaleMode"><linktext>VideoScaleMode</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:soundTransform:get"><apiName>soundTransform</apiName><shortdesc>
		 Предоставляет непосредственный доступ к свойству NetStream.soundTransform, обеспечивая дополнительный возможности управления звуком.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.media:SoundTransform"/></apiValueDef><apiDesc>
		 Предоставляет прямой доступ к свойству к свойству <codeph>NetStream.soundTransform</codeph>, обеспечивая дополнительные возможности управления звуком. Установите свойство для изменения параметров. Используйте метод accessor получателя для определения текущих параметров.
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/volume"><linktext>volume</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:source:get"><apiName>source</apiName><shortdesc>
		 Строка, задающая URL-адрес FLV-файла и метод его потокового воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 Строка, задающая URL-адрес FLV-файла и метод его потокового воспроизведения. URL-адрес может быть URL-адресом HTTP на FLV-файл, URL-адресом RTMP на поток или URL-адресом HTTP на XML-файл.
		 
		 <p>Если данное свойство было установлено с помощью инспектора компонентов или инспектора свойств, то начнется загрузка и воспроизведение FLV-файла с приходом следующего события <codeph>enterFrame</codeph>. Задержка обеспечивает время для установки свойств <codeph>isLive</codeph>, <codeph>autoPlay</codeph> и <codeph>cuePoints</codeph> из числа других, влияющих на загрузку. Это также позволяет коду ActionScript, расположенному в первом кадре, влиять на компонент FLVPlayback до начала воспроизведения.</p>
		 
		 <p>Если установить данное свойство через ActionScript, то оно немедленно вызовет метод <codeph>VideoPlayer.load()</codeph>, если для свойства <codeph>autoPlay</codeph> установлено значение <codeph>false</codeph>. Если для свойства <codeph>autoPlay</codeph> установлено значение <codeph>true</codeph>, вызывается метод <codeph>VideoPlayer.play()</codeph>. Свойства <codeph>autoPlay</codeph>, <codeph>totalTime</codeph> и <codeph>isLive</codeph> влияют на загрузку нового FLV-файла, поэтому данные свойства должны устанавливаться до установки свойства <codeph>source</codeph>.</p>
		 
		 <p>Установка для свойства <codeph>autoPlay</codeph> значения <codeph>false</codeph>, предотвращает автоматическое воспроизведение нового FLV-файла.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/autoPlay"><linktext>FLVPlayback.autoPlay</linktext></link><link href="fl.video.xml#VideoPlayer/isLive"><linktext>isLive</linktext></link><link href="fl.video.xml#VideoPlayer/totalTime"><linktext>totalTime</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/load()"><linktext>FLVPlayback.load()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/play()"><linktext>FLVPlayback.play()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:state:get"><apiName>state</apiName><shortdesc>
		 Строка, задающая состояние компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 Строка, задающая состояние компонента. Данное свойство устанавливается методами <codeph>load()</codeph>, <codeph>play()</codeph>, <codeph>stop()</codeph>, <codeph>pause()</codeph> и <codeph>seek()</codeph>. 
		 
		 <p>Возможные значения для свойства состояния: <codeph>buffering</codeph>, <codeph>connectionError</codeph>, <codeph>disconnected</codeph>, <codeph>loading</codeph>, <codeph>paused</codeph>, <codeph>playing</codeph>, <codeph>rewinding</codeph>, <codeph>seeking</codeph> и <codeph>stopped</codeph>. Для определения этих состояний можно использовать свойства класса FLVPlayback. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState/DISCONNECTED"><linktext>VideoState.DISCONNECTED</linktext></link><link href="fl.video.xml#VideoState/STOPPED"><linktext>VideoState.STOPPED</linktext></link><link href="fl.video.xml#VideoState/PLAYING"><linktext>VideoState.PLAYING</linktext></link><link href="fl.video.xml#VideoState/PAUSED"><linktext>VideoState.PAUSED</linktext></link><link href="fl.video.xml#VideoState/BUFFERING"><linktext>VideoState.BUFFERING</linktext></link><link href="fl.video.xml#VideoState/LOADING"><linktext>VideoState.LOADING</linktext></link><link href="fl.video.xml#VideoState/CONNECTION_ERROR"><linktext>VideoState.CONNECTION_ERROR</linktext></link><link href="fl.video.xml#VideoState/REWINDING"><linktext>VideoState.REWINDING</linktext></link><link href="fl.video.xml#VideoState/SEEKING"><linktext>VideoState.SEEKING</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:stateResponsive:get"><apiName>stateResponsive</apiName><shortdesc>
		 Логический параметр, принимающий значение true, если состояние разрешает работу элементов управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Логический параметр, принимающий значение <codeph>true</codeph>, если состояние является управляемым. Если состояние неуправляемое, то вызов методов <codeph>play()</codeph>, <codeph>load()</codeph>, <codeph>stop()</codeph>, <codeph>pause()</codeph> и <codeph>seek()</codeph> будет поставлен в очередь, а выполнение отложено до момента, когда состояние изменится на управляемое. Так как эти вызовы будут поставлены в очередь и их выполнение отложено, то нет необходимости следить за значением свойства <codeph>stateResponsive</codeph>. Управляемые состояния: <codeph>stopped</codeph>, <codeph>playing</codeph>, <codeph>paused</codeph> и <codeph>buffering</codeph>. 
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link><link href="fl.video.xml#VideoState/DISCONNECTED"><linktext>VideoState.DISCONNECTED</linktext></link><link href="fl.video.xml#VideoState/STOPPED"><linktext>VideoState.STOPPED</linktext></link><link href="fl.video.xml#VideoState/PLAYING"><linktext>VideoState.PLAYING</linktext></link><link href="fl.video.xml#VideoState/PAUSED"><linktext>VideoState.PAUSED</linktext></link><link href="fl.video.xml#VideoState/LOADING"><linktext>VideoState.LOADING</linktext></link><link href="fl.video.xml#VideoState/RESIZING"><linktext>VideoState.RESIZING</linktext></link><link href="fl.video.xml#VideoState/CONNECTION_ERROR"><linktext>VideoState.CONNECTION_ERROR</linktext></link><link href="fl.video.xml#VideoState/REWINDING"><linktext>VideoState.REWINDING</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:totalTime:get"><apiName>totalTime</apiName><shortdesc>
		 Число, определяющее общее время воспроизведения видео (секунды).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiTipTexts><apiTipText>Общая продолжительность FLV-файла в секундах
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 Число, определяющее общее время воспроизведения видео (секунды).
		 
		 <p>При потоковом воспроизведении с Flash Media Server (FMS) и использовании стандартного объекта <codeph>NCManager</codeph> данное значение определяется автоматически интерфейсом программного приложения сервера (APIs), и данное значение отменяет все установленное через данное свойство или полученное с метаданных. Данное свойство готово для чтения, если после установки свойства <codeph>source</codeph> получено состояние <codeph>stopped</codeph> или <codeph>playing</codeph>. Данное свойство неприменимо при потоковом воспроизведении с FMS.</p>
		 
		 <p>При HTTP-загрузке, если FLV-файл имеет встроенные метаданные, значение определяется автоматически. В противном случае установите его явно, иначе оно будет установлено как NaN. При явной установке значение, полученное из метаданных потока, будет проигнорировано.</p>
		 
		 <p>После установки данного свойства значение вступит в силу для следующего FLV-файла, загружаемого установкой свойства <codeph>source</codeph>. Оно не влияет на уже загруженный FLV-файл. Также данное свойство не возвращает значение, переданное до загрузки FLV-файла.</p>
		 
		 <p>Если данное свойство не установить (явно или автоматически), то воспроизведение продолжает работать, но могут возникнуть проблемы с элементами управления переходом.</p>
		 
		 <p>Если свойство не установлено явно, то свойство будет иметь значение NaN, пока не будет установлено правильное значение из метаданных.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/source"><linktext>source</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:videoHeight:get"><apiName>videoHeight</apiName><shortdesc>
		 Исходная ширина загруженного FLV-файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Исходная ширина загруженного FLV-файла. Свойство возвращает значение -1, если еще нет доступной информации.
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:videoWidth:get"><apiName>videoWidth</apiName><shortdesc>
		 Исходная ширина загруженного FLV-файла.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Исходная ширина загруженного FLV-файла. Свойство возвращает значение -1, если еще нет доступной информации.
		 
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:visible:get"><apiName>visible</apiName><shortdesc>
		 Логический параметр, делающий (в случае значения true) видимым экземпляр VideoPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
         
         </apiDefaultValue></apiValueDef><apiDesc>
		 Если данный логический параметр имеет значение <codeph>true</codeph>, экземпляр VideoPlayer делается видимым. В случае значения <codeph>false</codeph> экземпляр делается невидимым. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc>
		 Число в диапазоне от 0 до 1, указывающее уровень громкости.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
		 
		 </apiDefaultValue><apiTipTexts><apiTipText>Значение уровня громкости, от 0 до 1.
		 
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 Число в диапазоне от 0 до 1, указывающее уровень громкости. 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/soundTransform"><linktext>soundTransform</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:height:set"><apiName>height</apiName><shortdesc>
		 Число, указывающее высоту экземпляра VideoPlayer (в пикселах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Число, указывающее высоту экземпляра VideoPlayer (в пикселах). 
		 
		 <p><b>Примечание.</b> Не путайте данное свойство с свойством <codeph>flash.media.Video.height</codeph>, аналогичным свойству <codeph>fl.video.VideoPlayer.videoHeight</codeph>.</p>
         
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#height/setSize()"><linktext>setSize()</linktext></link><link href="" invalidHref="flash.media.xml#Video/videoHeight"><linktext>Video.videoHeight</linktext></link><link href="" invalidHref="fl.video.xml#height/videoHeight"><linktext>VideoPlayer.videoHeight</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:scaleX:set"><apiName>scaleX</apiName><shortdesc>
		 Число, являющееся масштабом по горизонтали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>1
         </apiDefaultValue></apiValueDef><apiDesc>
		 Число, являющееся масштабом по горизонтали. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#scaleX/setScale()"><linktext>setScale()</linktext></link><link href="" invalidHref="fl.video.xml#scaleX/scaleY"><linktext>scaleY</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:scaleY:set"><apiName>scaleY</apiName><shortdesc>
		 Число, являющееся масштабом по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>1
         </apiDefaultValue></apiValueDef><apiDesc>
		 Число, являющееся масштабом по вертикали. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#scaleY/setScale()"><linktext>setScale()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:width:set"><apiName>width</apiName><shortdesc>
		 Число, указывающее ширину экземпляра VideoPlayer в рабочей области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Число, указывающее ширину экземпляра VideoPlayer на монтажном столе.
		 
		 <p><b>Примечание.</b> Свойство <codeph>flash.media.Video.width</codeph> аналогично свойству <codeph>fl.video.VideoPlayer.videoWidth</codeph>.</p>
         
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#width/setSize()"><linktext>setSize()</linktext></link><link href="" invalidHref="flash.media.xml#Video/videoWidth"><linktext>Video.videoWidth</linktext></link><link href="" invalidHref="fl.video.xml#width/videoWidth"><linktext>VideoPlayer.videoWidth</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:x:set"><apiName>x</apiName><shortdesc>
		 Число, указывающее положение видеопроигрывателя по горизонтали (в пикселах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Число, указывающее положение видеопроигрывателя по горизонтали (в пикселах).
		 
		 <p>Установка свойства <codeph>x</codeph> также влияет на значение свойства <codeph>registrationX</codeph>. При установке свойства <codeph>x</codeph> или <codeph>registrationX</codeph>} второе свойство меняется, сохраняя свое смещение от первого. Например, если <codeph>x</codeph> = 10 и <codeph>registrationX</codeph> = 20, то при установке значения <codeph>x</codeph> = 110 значение <codeph>registrationX</codeph> устанавливается равным 120.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#x/registrationX"><linktext>registrationX</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:y:set"><apiName>y</apiName><shortdesc>
		 Число, указывающее положение видеопроигрывателя по вертикали (в пикселах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Число, указывающее положение видеопроигрывателя по вертикали (в пикселах).
		 
		 <p>Установка свойства <codeph>y</codeph> также влияет на значение свойства <codeph>registrationY</codeph>. При установке свойства <codeph>y</codeph> или <codeph>registrationY</codeph> второе свойство меняется, сохраняя свое смещение от первого. Например, если <codeph>y</codeph> = 10 и <codeph>registrationY</codeph> = 20, то при установке значения <codeph>y</codeph> = 110 значение <codeph>registrationY</codeph> устанавливается равным 120.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#y/registrationY"><linktext>registrationY</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:NCManager"><apiName>NCManager</apiName><shortdesc>
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>fl.video:INCManager</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <codeph/> 
	 
	 <p>Класс NCManager ищет URL-адрес и принимает следующее.</p>
	 <ul>
	 <li/>
	 <li/>
	 <li> Если адрес заканчивается на .flv, то класс предполагает, что используется последовательная загрузка FLV. В противном случае это SMIL-файл для загрузки и разбора.</li>
	 </ul>
	 
	 </apiDesc><example conref="NCManagerExample.as"/></apiClassifierDetail><apiConstructor id="fl.video:NCManager:NCManager"><apiName>NCManager</apiName><shortdesc>
         Создает новый экземпляр класса NCManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
         Создает новый экземпляр класса NCManager.
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:NCManager:close"><apiName>close</apiName><shortdesc conref="INCManager#close()">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="INCManager#close()">
	 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/close()"><linktext>INCManager.close()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:connectAgain"><apiName>connectAgain</apiName><shortdesc conref="INCManager#connectAgain()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Если предпринимается попытка установить еще одно соединение, значение будет <codeph>true</codeph>. Если попытка уже предпринималась или если дополнительных попыток не было, значение будет <codeph>false</codeph>.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc conref="INCManager#connectAgain()">
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/connectAgain()"><linktext>INCManager.connectAgain()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:connectToURL"><apiName>connectToURL</apiName><shortdesc conref="INCManager#connectToURL()">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Если подключение производится синхронно, принимает значение <codeph>true</codeph>. Если предпринимается попытка асинхронного подключения, и вызывающая сторона ожидает наступления события "connected", значение будет <codeph>false</codeph>.
         
         </apiDesc></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiDesc>URL-адрес, к которому подключается объект VideoPlayer.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="INCManager#connectToURL()">
	 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/connectToURL()"><linktext>INCManager.connectToURL()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:getProperty"><apiName>getProperty</apiName><shortdesc>
		 Позволяет возвращать свойства fallbackServerName, fpadZone, objectEncoding и proxyType.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Строковое представление свойств fallbackServerName, fpadZone, objectEncoding и proxyType.
         </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="String"/><apiDesc>Имя свойства, вызываемого методом <codeph>getProperty</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Позволяет возвращать свойства <codeph>fallbackServerName</codeph>, <codeph>fpadZone</codeph>, <codeph>objectEncoding</codeph> и <codeph>proxyType</codeph>. Более подробную информации об этих свойствах смотрите в <codeph>setProperty()</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#NCManager/setProperty()"><linktext>setProperty()</linktext></link><link href="fl.video.xml#NCManager/fallbackServerName"><linktext>fallbackServerName</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:helperDone"><apiName>helperDone</apiName><shortdesc conref="INCManager#helperDone()">
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>helper</apiItemName><apiType value="Object"/><apiDesc>Вспомогательный объект.
         
         </apiDesc></apiParam><apiParam><apiItemName>success</apiItemName><apiType value="Boolean"/><apiDesc>Настройка вывода сигнала, если задача завершена. Если свойство <codeph>success</codeph> имеет значение <codeph>true</codeph>, то задача завершена успешно, иначе значение <codeph>false</codeph>.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="INCManager#helperDone()">
	 
	 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/helperDone()"><linktext>INCManager.helperDone()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:reconnect"><apiName>reconnect</apiName><shortdesc conref="INCManager#reconnect()">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="INCManager#reconnect()">
	 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/reconnect()"><linktext>INCManager.reconnect()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:setProperty"><apiName>setProperty</apiName><shortdesc>
		 Позволяет задавать свойства fallbackServerName, fpadZone, objectEncoding и proxyType.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="String"/><apiDesc>Имя свойства, вызываемого методом <codeph>setProperty</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>Значение свойства.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Позволяет задавать свойства <codeph>fallbackServerName</codeph>, <codeph>fpadZone</codeph>, <codeph>objectEncoding</codeph> и <codeph>proxyType</codeph>.
		 
		 <p>Свойство <codeph>fallbackServerName</codeph> указывает, какой URL-адрес сервера Flash Media Server (FMS) использовать, если первичный адрес сервера, полученный из URL-адреса, переданного в <codeph>connectToURL()</codeph>, недоступен. Данное свойство также можно установить непосредственно через свойство <codeph>fallbackServerName</codeph>.</p>
		 
	 <p>Свойство <codeph>fpadZone</codeph> определяет свойство <codeph>fpadZone</codeph> для Flash Media Server (FMS). Если возвращаемое значение не является номером (NaN), то присваивается значение «нет зоны». Свойство <codeph>fpadZone</codeph> должно быть задано до начала процесса подключения. Если не требуется установка зоны, то установите для свойства <codeph>fpadZone</codeph> значение <codeph>NaN</codeph>.</p>
		 По умолчанию используется <codeph>NaN</codeph>.
		 
		 <p>Свойство <codeph>objectEncoding</codeph> указывает, какое значение нужно использовать для свойства <codeph>objectEncoding</codeph> в экземплярах <codeph>NetConnection</codeph>. Значение по умолчанию — <codeph>flash.net.ObjectEncoding.AMF0</codeph>.</p>
		 
		 <p>Свойство <codeph>proxyType</codeph> указывает, какое значение нужно использовать для свойства <codeph>proxyType</codeph> в экземплярах <codeph>NetConnection</codeph>. По умолчанию используется значение best.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#NCManager/getProperty()"><linktext>getProperty()</linktext></link><link href="fl.video.xml#NCManager/fallbackServerName"><linktext>fallbackServerName</linktext></link></related-links></apiOperation><apiValue id="fl.video:NCManager:DEFAULT_TIMEOUT"><apiName>DEFAULT_TIMEOUT</apiName><shortdesc>
	 Время ожидания по умолчанию, в миллисекундах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>60000</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	 Время ожидания по умолчанию, в миллисекундах.
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/timeout"><linktext>INCManager.timeout</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:SHORT_VERSION"><apiName>SHORT_VERSION</apiName><shortdesc>
	Переменная состояния, указывающая сокращенный номер версии компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5</apiData><apiType value="String"/></apiValueDef><apiDesc>
	Переменная состояния, указывающая сокращенный номер версии компонента. Номер версии полезен, если есть FLA-файл и нужно узнать версию компонента. Для определения версии компонента вставьте следующий код трассировки в FLA-файл:
	
	<codeblock>FLVPlayback.SHORT_VERSION</codeblock>
	
	<p>Переменная <codeph>SHORT_VERSION</codeph> включает только старший и младший номер версии, например 2.0. Переменная <codeph>VERSION</codeph> включает старший и младший номер версии, редакцию и номер сборки, например 2.0.0.11.</p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManager/VERSION"><linktext>Переменная VERSION </linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:VERSION"><apiName>VERSION</apiName><shortdesc>
	Переменная состояния, указывающая полный номер версии компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5.0.15</apiData><apiType value="String"/></apiValueDef><apiDesc>
	Переменная состояния, указывающая полный номер версии компонента. Номер версии полезен, если есть FLA-файл и нужно узнать версию компонента. Для определения версии компонента вставьте следующий код трассировки в FLA-файл:
	
	<codeblock>FLVPlayback.VERSION</codeblock>
	
	<p>Переменная <codeph>VERSION</codeph> включает старший и младший номер версии, редакцию и номер сборки, например 2.0.0.11. Переменная <codeph>SHORT_VERSION</codeph> включает только старший и младший номер версии, например 2.0. </p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManager/SHORT_VERSION"><linktext>Переменная SHORT_VERSION</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:fallbackServerName"><apiName>fallbackServerName</apiName><shortdesc>
	 Явно или косвенно делает доступным свойство fallbackServerName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	 Делает явно или косвенно доступным свойство <codeph>fallbackServerName</codeph>.
	 
	 <ul>
	 <li>Косвенно — дает второй &lt;meta base> в SMIL. Свойство <codeph>fallbackServerName</codeph> использует основной атрибут. (Свойство <codeph>fallbackServerName</codeph> использует только имя сервера).</li>
	 
	 <li>Явно — обращение к свойству <codeph>ncMgr</codeph> в FLVPlayback или VideoPlayer и установка свойства <codeph>fallbackServerName</codeph> или использование метода <codeph>setProperty()</codeph>.</li>
         </ul>
         
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManager/setProperty()"><linktext>setProperty()</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:bitrate:get"><apiName>bitrate</apiName><shortdesc>
		 При потоковой загрузке с сервера Flash Media Server (FMS) свойство bitrate содержит значение, вычисленное в ходе автообнаружения, а не значение, установленное с помощью свойства bitrate().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 При потоковой загрузке с сервера Flash Media Server (FMS) свойство <codeph>bitrate</codeph> содержит значение, вычисленное в ходе автообнаружения, а не значение, установленное с помощью свойства <codeph>bitrate()</codeph>.
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/bitrate"><linktext>INCManager.bitrate</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:isDynamicStream:get"><apiName>isDynamicStream</apiName><shortdesc>
		 
         
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:NCManager:isRTMP:get"><apiName>isRTMP</apiName><shortdesc conref="INCManager#isRTMP">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="INCManager#isRTMP">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/isRTMP"><linktext>INCManager.isRTMP</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:netConnection:get"><apiName>netConnection</apiName><shortdesc conref="INCManager#netConnection">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc conref="INCManager#netConnection">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/netConnection"><linktext>INCManager.netConnection</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streamHeight:get"><apiName>streamHeight</apiName><shortdesc conref="INCManager#streamHeight">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="INCManager#streamHeight">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamHeight"><linktext>INCManager.streamHeight</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streamLength:get"><apiName>streamLength</apiName><shortdesc conref="INCManager#streamLength">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="INCManager#streamLength">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamLength"><linktext>INCManager.streamLength</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streamName:get"><apiName>streamName</apiName><shortdesc conref="INCManager#streamName">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="INCManager#streamName">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamName"><linktext>INCManager.streamName</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streamWidth:get"><apiName>streamWidth</apiName><shortdesc conref="INCManager#streamWidth">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="INCManager#streamWidth">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamWidth"><linktext>INCManager.streamWidth</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streams:get"><apiName>streams</apiName><shortdesc conref="INCManager#streams">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="INCManager#streams">
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:NCManager:timeout:get"><apiName>timeout</apiName><shortdesc conref="INCManager#timeout">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="INCManager#timeout">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/timeout"><linktext>INCManager.timeout</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:videoPlayer:get"><apiName>videoPlayer</apiName><shortdesc conref="INCManager#videoPlayer">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>fl.video:VideoPlayer</apiValueClassifier></apiValueDef><apiDesc conref="INCManager#videoPlayer">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/videoPlayer"><linktext>INCManager.videoPlayer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:VideoEvent"><apiName>VideoEvent</apiName><shortdesc>
     Flash&amp;#xAE; Player отправляет объект события VideoEvent, когда пользователь воспроизводит видеофайл.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Класс VideoEvent
     </apiTipText></apiTipTexts><apiBaseInterface>fl.video:IVPEvent</apiBaseInterface><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
     Flash<sup>®</sup> Player отправляет объект события VideoEvent, когда пользователь проигрывает видеофайл.
     
     </apiDesc></apiClassifierDetail><adobeApiEvent id="fl.video:VideoEvent:AUTO_REWOUND_autoRewound"><apiName>autoRewound</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:AUTO_REWOUND</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:BUFFERING_STATE_ENTERED_bufferingStateEntered"><apiName>bufferingStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:BUFFERING_STATE_ENTERED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:CLOSE</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:COMPLETE</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:FAST_FORWARD_fastForward"><apiName>fastForward</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:FAST_FORWARD</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:PAUSED_STATE_ENTERED_pausedStateEntered"><apiName>pausedStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:PAUSED_STATE_ENTERED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:PLAYING_STATE_ENTERED_playingStateEntered"><apiName>playingStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:PLAYING_STATE_ENTERED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:READY_ready"><apiName>ready</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:READY</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:REWIND_rewind"><apiName>rewind</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:REWIND</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:SCRUB_FINISH_scrubFinish"><apiName>scrubFinish</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:SCRUB_FINISH</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:SCRUB_START_scrubStart"><apiName>scrubStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:SCRUB_START</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:SEEKED_seeked"><apiName>seeked</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:SEEKED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:SKIN_LOADED_skinLoaded"><apiName>skinLoaded</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:SKIN_LOADED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:STATE_CHANGE_stateChange"><apiName>stateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:STATE_CHANGE</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:STOPPED_STATE_ENTERED_stoppedStateEntered"><apiName>stoppedStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:STOPPED_STATE_ENTERED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:UNSUPPORTED_PLAYER_VERSION_stoppedStateEntered"><apiName>stoppedStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:VideoEvent:VideoEvent"><apiName>VideoEvent</apiName><shortdesc>
         Создает объект Event, содержащий данные о видеособытиях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Возможные значения: <codeph>VideoEvent.AUTO_REWOUND</codeph>, <codeph>VideoEvent.BUFFERING_STATE_ENTERED</codeph>, <codeph>VideoEvent.CLOSE</codeph>, <codeph>VideoEvent.COMPLETE</codeph>, <codeph>VideoEvent.FAST_FORWARD</codeph>, <codeph>VideoEvent.PAUSED_STATE_ENTERED</codeph>, <codeph>VideoEvent.PLAYHEAD_UPDATE</codeph>, <codeph>VideoEvent.PLAYING_STATE_ENTERED</codeph>, <codeph>VideoEvent.READY</codeph>, <codeph>VideoEvent.REWIND</codeph>, <codeph>VideoEvent.SCRUB_FINISH</codeph>, <codeph>VideoEvent.SCRUB_START</codeph>, <codeph>VideoEvent.SEEKED</codeph>, <codeph>VideoEvent.SKIN_LOADED</codeph>, <codeph>VideoEvent.STATE_CHANGE</codeph>, <codeph>VideoEvent.STOPPED_STATE_ENTERED</codeph> и <codeph>VideoEvent.VOLUME_UPDATE</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>state</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.
         
         </apiDesc></apiParam><apiParam><apiItemName>playheadTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Число, показывающее текущую точку воспроизведения или положение.
         
         </apiDesc></apiParam><apiParam><apiItemName>vp</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Определяет индекс объекта VideoPlayer.     
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         Создает объект Event, содержащий данные о видеособытиях. Объекты Event передаются прослушивателям событий в качестве параметров.
         
         </apiDesc></apiConstructorDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiConstructor><apiValue id="fl.video:VideoEvent:AUTO_REWOUND"><apiName>AUTO_REWOUND</apiName><shortdesc>
         Задает значение свойства type для объекта события autoRewound.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>autoRewound</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>autoRewound</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:BUFFERING_STATE_ENTERED"><apiName>BUFFERING_STATE_ENTERED</apiName><shortdesc>
         Задает значение свойства type для объекта события bufferingStateEntered.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bufferingStateEntered</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>bufferingStateEntered</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
         Задает значение свойства type для объекта события Close.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>close</codeph>.
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
         Задает значение свойства type для объекта события complete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>complete</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:FAST_FORWARD"><apiName>FAST_FORWARD</apiName><shortdesc>
         Задает значение свойства type для объекта события fastForward.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fastForward</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>fastForward</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:PAUSED_STATE_ENTERED"><apiName>PAUSED_STATE_ENTERED</apiName><shortdesc>
         Задает значение свойства type для объекта события pausedStateEntered.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pausedStateEntered</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>pausedStateEntered</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:PLAYHEAD_UPDATE"><apiName>PLAYHEAD_UPDATE</apiName><shortdesc>
         Задает значение свойства type для объекта события playheadUpdate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playheadUpdate</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>playheadUpdate</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:PLAYING_STATE_ENTERED"><apiName>PLAYING_STATE_ENTERED</apiName><shortdesc>
         Задает значение свойства type для объекта события playingStateEntered.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playingStateEntered</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>playingStateEntered</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:READY"><apiName>READY</apiName><shortdesc>
         Определяет значение свойства type для объекта события Ready.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>ready</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:REWIND"><apiName>REWIND</apiName><shortdesc>
         Определяет значение свойства type для объекта события Rewind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rewind</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>rewind</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:SCRUB_FINISH"><apiName>SCRUB_FINISH</apiName><shortdesc>
         Задает значение свойства type для объекта события scrubFinish.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scrubFinish</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>scrubFinish</codeph>. 
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:SCRUB_START"><apiName>SCRUB_START</apiName><shortdesc>
         Задает значение свойства type для объекта события scrubStart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scrubStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>scrubStart</codeph>.
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:SEEKED"><apiName>SEEKED</apiName><shortdesc>
         Определяет значение свойства type для объекта события Seeked.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>seeked</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>seeked</codeph>.
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:SKIN_LOADED"><apiName>SKIN_LOADED</apiName><shortdesc>
         Задает значение свойства type для объекта события skinLoaded.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>skinLoaded</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>skinLoaded</codeph>.
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:STATE_CHANGE"><apiName>STATE_CHANGE</apiName><shortdesc>
         Задает значение свойства type для объекта события stateChange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stateChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>stateChange</codeph>.
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:STOPPED_STATE_ENTERED"><apiName>STOPPED_STATE_ENTERED</apiName><shortdesc>
         Задает значение свойства type для объекта события stoppedStateEntered.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stoppedStateEntered</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>stoppedStateEntered</codeph>.
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:UNSUPPORTED_PLAYER_VERSION"><apiName>UNSUPPORTED_PLAYER_VERSION</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unsupportedPlayerVersion</apiData><apiType value="String"/></apiValueDef><apiDesc>
         <codeph/><codeph/>
         
         <p>Это событие имеет следующие свойства:</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>state</codeph></entry><entry>Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>Число, показывающее текущую точку воспроизведения или положение.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
         Число, обозначающее текущее время воспроизведения или положение, которое может быть дробным (в секундах).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiTipTexts><apiTipText>Текущее положение точки воспроизведения, в секундах
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
         Число, обозначающее текущее время воспроизведения или положение, которое может быть дробным (в секундах). Установка данного свойства запускает процесс перехода и имеет все ограничения для процесса перехода.
         
         <p>При изменении времени точки воспроизведения, которое при воспроизведении FLV-файла происходит четыре раза в секунду, данный компонент отправляет событие <codeph>playheadUpdate</codeph>.</p>
         
         <p>По некоторым причинам свойство <codeph>playheadTime</codeph> может не иметь ожидаемого значения сразу после вызова одного из методов перехода или установки свойства <codeph>playheadTime</codeph>. Во-первых, при последовательной загрузке можно перейти только к ключевому кадру, поэтому переход происходит к первому ближайшему ключевому кадру к заданному времени. При использовании потокового воспроизведения переход осуществляется точно в указанное время, даже если исходный FLV-файл не имеет ключевых кадров. Во-вторых, процесс перехода асинхронный, поэтому при вызове метода перехода или установке свойства <codeph>playheadTime</codeph> значение свойства <codeph>playheadTime</codeph> будет обновлено с задержкой. Для получения времени после завершения перехода прослушивайте событие <codeph>seek</codeph>, которое не посылается, пока не обновится свойство <codeph>playheadTime</codeph>.</p>
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/playheadTime"><linktext>FLVPlayback.playheadTime</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/seek()"><linktext>FLVPlayback.seek()</linktext></link><link href="fl.video.xml#VideoPlayer/playheadTime"><linktext>VideoPlayer.playheadTime</linktext></link><link href="fl.video.xml#VideoPlayer/seek()"><linktext>VideoPlayer.seek()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:state:get"><apiName>state</apiName><shortdesc>
         Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
         Строка, идентифицирующая константу из класса VideoState, которая описывает состояние воспроизведения компонента. Данное свойство устанавливается методами <codeph>load()</codeph>, <codeph>play()</codeph>, <codeph>stop()</codeph>, <codeph>pause()</codeph> и <codeph>seek()</codeph>. 
         
         <p>Возможные значения для свойства состояния: <codeph>buffering</codeph>, <codeph>connectionError</codeph>, <codeph>disconnected</codeph>, <codeph>loading</codeph>, <codeph>paused</codeph>, <codeph>playing</codeph>, <codeph>rewinding</codeph>, <codeph>seeking</codeph> и <codeph>stopped</codeph>. Можно использовать свойства класса FLVPlayback для определения этих состояний. </p>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState/DISCONNECTED"><linktext>VideoState.DISCONNECTED</linktext></link><link href="fl.video.xml#VideoState/STOPPED"><linktext>VideoState.STOPPED</linktext></link><link href="fl.video.xml#VideoState/PLAYING"><linktext>VideoState.PLAYING</linktext></link><link href="fl.video.xml#VideoState/PAUSED"><linktext>VideoState.PAUSED</linktext></link><link href="fl.video.xml#VideoState/BUFFERING"><linktext>VideoState.BUFFERING</linktext></link><link href="fl.video.xml#VideoState/LOADING"><linktext>VideoState.LOADING</linktext></link><link href="fl.video.xml#VideoState/CONNECTION_ERROR"><linktext>VideoState.CONNECTION_ERROR</linktext></link><link href="fl.video.xml#VideoState/REWINDING"><linktext>VideoState.REWINDING</linktext></link><link href="fl.video.xml#VideoState/SEEKING"><linktext>VideoState.SEEKING</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:vp:get"><apiName>vp</apiName><shortdesc>
         Индекс объекта VideoPlayer, участвующего в этом событии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
         Индекс объекта VideoPlayer, участвующего в этом событии.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoAlign"><apiName>VideoAlign</apiName><shortdesc>
	 Класс VideoAlign содержит значения констант для использования со свойствами FLVPlayback.align и VideoPlayer.align.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Класс VideoAlign содержит значения констант для использования со свойствами <codeph>FLVPlayback.align</codeph> и <codeph>VideoPlayer.align</codeph>.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/align"><linktext>FLVPlayback.align</linktext></link><link href="fl.video.xml#VideoPlayer/align"><linktext>VideoPlayer.align</linktext></link></related-links><apiValue id="fl.video:VideoAlign:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
         Задает выравнивание видео по нижнему краю.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по нижнему краю.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:BOTTOM_LEFT"><apiName>BOTTOM_LEFT</apiName><shortdesc>
         Задает выравнивание видео по левому нижнему углу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottomLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по левому нижнему углу.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:BOTTOM_RIGHT"><apiName>BOTTOM_RIGHT</apiName><shortdesc>
         Задает выравнивание видео по правому нижнему углу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottomRight</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по правому нижнему углу.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:CENTER"><apiName>CENTER</apiName><shortdesc>
         Задает выравнивание видео по центру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по центру.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:LEFT"><apiName>LEFT</apiName><shortdesc>
         Задает выравнивание видео по левому краю.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по левому краю.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc>
         Задает выравнивание видео по правому краю.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по правому краю.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:TOP"><apiName>TOP</apiName><shortdesc>
         Задает выравнивание видео по верхнему краю.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по верхнему краю.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
         Задает выравнивание видео по левому верхнему углу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по левому верхнему углу.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:TOP_RIGHT"><apiName>TOP_RIGHT</apiName><shortdesc>
         Задает выравнивание видео по правому верхнему углу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topRight</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает выравнивание видео по правому верхнему углу.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:DynamicStream"><apiName>DynamicStream</apiName><shortdesc>
     
     </shortdesc><prolog><author>Adobe Systems Incorporated
     
     </author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.net:NetStream</apiBaseClassifier></apiClassifierDef><apiDesc>
     
         <codeph/>    <codeph/> 
     
     <codeblock> 
     import fl.video. 
     
     var dsi:DynamicStreamItem = new DynamicStreamItem(); 
     dsi.uri = "rtmp://localhost/vod/"; 
     dsi.addStream("mp4:sample1_150kbps.f4v", 150); 
     dsi.addStream("mp4:sample1_700kbps.f4v", 700); 
     dsi.addStream("mp4:sample1_1500kbps.f4v", 1500); 
     
     vid.play2(dsi);
     </codeblock>
     
	 </apiDesc></apiClassifierDetail><apiConstructor id="fl.video:DynamicStream:DynamicStream"><apiName>DynamicStream</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>nc</apiItemName><apiType value="flash.net:NetConnection"/><apiDesc>	 
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
		  
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:DynamicStream:close"><apiName>close</apiName><shortdesc>
 		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
 		 <codeph/>
 		 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:getStreamItemAt"><apiName>getStreamItemAt</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>fl.video:DynamicStreamItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:manualSwitchMode"><apiName>manualSwitchMode</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mode</apiItemName><apiType value="Boolean"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		  <codeph/><codeph/><codeph/><codeph/><codeph/> <codeph/>  
         
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:onMetaData"><apiName>onMetaData</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>infoObj</apiItemName><apiType value="Object"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/>  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:onPlayStatus"><apiName>onPlayStatus</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         <codeph/>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:play"><apiName>play</apiName><shortdesc>
 		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>		 
         </apiDesc></apiParam></apiOperationDef><apiDesc>
 		 <codeph/>
 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:play2"><apiName>play2</apiName><shortdesc>
 		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="flash.net:NetStreamPlayOptions"/><apiDesc>		 
 		 </apiDesc></apiParam></apiOperationDef><apiDesc>
 		 <codeph/> <codeph/>
 		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.net.NetStream.xml"><linktext>flash.net.NetStream</linktext></link></related-links></apiOperation><apiOperation id="fl.video:DynamicStream:setBandwidthLimit"><apiName>setBandwidthLimit</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>limit</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
            
		 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:startPlay"><apiName>startPlay</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dsi</apiItemName><apiOperationClassifier>fl.video:DynamicStreamItem</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 <codeph/> 
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:switchDown"><apiName>switchDown</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         <codeph/>   
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#DynamicStream/manualSwitchMode()"><linktext/></link></related-links></apiOperation><apiOperation id="fl.video:DynamicStream:switchToStreamName"><apiName>switchToStreamName</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/>  
         
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#DynamicStream/manualSwitchMode()"><linktext/></link></related-links></apiOperation><apiOperation id="fl.video:DynamicStream:switchToStreamRate"><apiName>switchToStreamRate</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rate</apiItemName><apiType value="int"/><apiDesc>        </apiDesc></apiParam></apiOperationDef><apiDesc>
         <codeph/>  
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#DynamicStream/manualSwitchMode()"><linktext/></link></related-links></apiOperation><apiOperation id="fl.video:DynamicStream:switchUp"><apiName>switchUp</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         <codeph/>  
         
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#DynamicStream/manualSwitchMode()"><linktext/></link></related-links></apiOperation><apiValue id="fl.video:DynamicStream:STATE_BUFFERING"><apiName>STATE_BUFFERING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>buffering</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:STATE_PAUSED"><apiName>STATE_PAUSED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>paused</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:STATE_PLAYING"><apiName>STATE_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>playing</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:STATE_STOPPED"><apiName>STATE_STOPPED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>stopped</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:VERSION"><apiName>VERSION</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1.1.0.6</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:aggressiveModeBufferLength:get"><apiName>aggressiveModeBufferLength</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
            
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:currentStreamBitRate:get"><apiName>currentStreamBitRate</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
           <codeph/><codeph/><codeph/>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:currentStreamName:get"><apiName>currentStreamName</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
          <codeph/><codeph/><codeph/> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:droppedFramesLockDelay:get"><apiName>droppedFramesLockDelay</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
             <codeph/>    <codeph/>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:maxBandwidth:get"><apiName>maxBandwidth</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
           
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:preferredBufferLength:get"><apiName>preferredBufferLength</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
           <codeph/> <codeph/>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:startBufferLength:get"><apiName>startBufferLength</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
            
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:switchQOSTimerDelay:get"><apiName>switchQOSTimerDelay</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
         
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoError"><apiName>VideoError</apiName><shortdesc>
     Исключение VideoError – первичный механизм сообщения об ошибках в ходе работы классов FLVPlayback и VideoPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Класс VideoError
     </apiTipText></apiTipTexts><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
     Исключение VideoError — первичный механизм сообщения об ошибках в ходе работы классов FLVPlayback и VideoPlayer.
     
     </apiDesc></apiClassifierDetail><apiConstructor id="fl.video:VideoError:VideoError"><apiName>VideoError</apiName><shortdesc>
         Создает новый объект VideoError.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>errCode</apiItemName><apiType value="uint"/><apiDesc>Код, соответствующий ошибке.
         
         </apiDesc></apiParam><apiParam><apiItemName>msg</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Сообщение об ошибке.
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         Создает новый объект VideoError.
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:VideoError:DELETE_DEFAULT_PLAYER"><apiName>DELETE_DEFAULT_PLAYER</apiName><shortdesc>
         Переменная состояния, указывающая на то, что пользователь не может удалить объект VideoPlayer по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1007</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на то, что пользователь не может удалить объект VideoPlayer по умолчанию.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:ILLEGAL_CUE_POINT"><apiName>ILLEGAL_CUE_POINT</apiName><shortdesc>
         Переменная состояния, указывающая на недопустимую ключевую точку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1002</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на недопустимую ключевую точку.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:INCMANAGER_CLASS_UNSET"><apiName>INCMANAGER_CLASS_UNSET</apiName><shortdesc>
         Переменная состояния, указывающая на то, что класс INCManager не задан.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1008</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на то, что класс INCManager не задан.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:INVALID_SEEK"><apiName>INVALID_SEEK</apiName><shortdesc>
         Переменная состояния, указывающая на недопустимость поиска.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1003</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на недопустимость поиска.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:INVALID_SOURCE"><apiName>INVALID_SOURCE</apiName><shortdesc>
         Переменная состояния, указывающая на недопустимый источник.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1004</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на недопустимый источник.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:INVALID_XML"><apiName>INVALID_XML</apiName><shortdesc>
         Переменная состояния, указывающая на недопустимый XML-файл.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1005</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на недопустимый XML-файл.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:MISSING_SKIN_STYLE"><apiName>MISSING_SKIN_STYLE</apiName><shortdesc>
         Переменная состояния, указывающая на то, что стиль обложки отсутствует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1010</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на то, что стиль обложки отсутствует.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:NETSTREAM_CLIENT_CLASS_UNSET"><apiName>NETSTREAM_CLIENT_CLASS_UNSET</apiName><shortdesc>
	Ошибка, возникающая, когда статическому свойству VideoPlayer.netStatusClientClass задано недопустимое значение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1012</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	Ошибка, возникающая, когда статическому свойству <codeph>VideoPlayer.netStatusClientClass</codeph> задано недопустимое значение. Это включает случаи, когда значеение является строкой и не найден класс, либо когда класс не имеет конструктора, принимающего экземпляр VideoPlayer в качестве параметра. 
	
	<p>Пример сообщения об ошибке можно увидеть, используя следующий код:</p>
	<codeblock>
	  // Place the FLVPlayback component on the Stage at 0,0 and provide the instance name myflvPlayback.
	  import fl.video.
	  VideoPlayer.netStreamClientClass = null;
	   try {
	        myflvPlayback.play('test.flv');
	   } catch (e:VideoError) {
	         if (e.code =VideoError.NETSTREAM_CLIENT_CLASS_UNSET) {
	           trace('I forced this error on purpose');
	         }
	  }
	</codeblock>
    	</apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:NO_BITRATE_MATCH"><apiName>NO_BITRATE_MATCH</apiName><shortdesc>
         Переменная состояния, указывающая на то, что скорость не совпадает.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1006</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на то, что скорость не совпадает.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:NO_CONNECTION"><apiName>NO_CONNECTION</apiName><shortdesc>
         Переменная состояния, указывающая на то, что Flash Player не может произвести подключение к серверу или не может найти FLV-файл на сервере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на то, что Flash Player не может произвести подключение к серверу или не может найти FLV-файл на сервере.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:NULL_URL_LOAD"><apiName>NULL_URL_LOAD</apiName><shortdesc>
         Переменная состояния, указывающая на то, что методу load() был передан адрес URL со значением NULL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1009</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на то, что методу <codeph>load()</codeph> передан URL-адрес со значением <codeph>null</codeph>.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:SHORT_VERSION"><apiName>SHORT_VERSION</apiName><shortdesc>
	Переменная состояния, указывающая сокращенный номер версии компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5</apiData><apiType value="String"/></apiValueDef><apiDesc>
	Переменная состояния, указывающая сокращенный номер версии компонента. Номер версии полезен, если есть FLA-файл и нужно узнать версию компонента. Для определения версии компонента вставьте следующий код трассировки в FLA-файл:
	
	<codeblock>FLVPlayback.SHORT_VERSION</codeblock>
	
	<p>Переменная <codeph>SHORT_VERSION</codeph> включает только старший и младший номер версии, например 2.0. Переменная <codeph>VERSION</codeph> включает старший и младший номер версии, редакцию и номер сборки, например 2.0.0.11.</p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoError/VERSION"><linktext>Переменная VERSION </linktext></link></related-links></apiValue><apiValue id="fl.video:VideoError:UNSUPPORTED_PROPERTY"><apiName>UNSUPPORTED_PROPERTY</apiName><shortdesc>
         Переменная состояния, указывающая на то, что классу INCManager либо методам getProperty или setProperty было передано неподдерживаемое свойство.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1011</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         Переменная состояния, указывающая на то, что классу INCManager либо методам <codeph>getProperty</codeph> или <codeph>setProperty</codeph> было передано неподдерживаемое свойство.
	 
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/getProperty()"><linktext>INCManager.getProperty()</linktext></link><link href="fl.video.xml#INCManager/setProperty()"><linktext>INCManager.setProperty()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoError:VERSION"><apiName>VERSION</apiName><shortdesc>
	Переменная состояния, указывающая полный номер версии компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5.0.15</apiData><apiType value="String"/></apiValueDef><apiDesc>
	Переменная состояния, указывающая полный номер версии компонента. Номер версии полезен, если есть FLA-файл и нужно узнать версию компонента. Для определения версии компонента вставьте следующий код трассировки в FLA-файл:
	
	<codeblock>FLVPlayback.VERSION</codeblock>
	
	<p>Переменная <codeph>VERSION</codeph> включает старший и младший номер версии, редакцию и номер сборки, например 2.0.0.11. Переменная <codeph>SHORT_VERSION</codeph> включает только старший и младший номер версии, например 2.0. </p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoError/SHORT_VERSION"><linktext>Переменная SHORT_VERSION</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoError:code:get"><apiName>code</apiName><shortdesc>
         Код, соответствующий ошибке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
         Код, соответствующий ошибке. Код ошибки передается в конструктор.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:LayoutEvent"><apiName>LayoutEvent</apiName><shortdesc>
	 Событие, отправляемое при изменении размера или макета видеопроигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Событие, отправляемое при изменении размера или макета видеопроигрывателя. Есть два случая, при которых появляется событие layout.
	 <ul>
       <li>Если видеопроигрыватель изменяет размеры с помощью события <codeph>autoLayout</codeph> или вызова методов <codeph>setScale()</codeph> или <codeph>setSize()</codeph>, или изменением свойств <codeph>width</codeph>, <codeph>height</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph>.</li>
	   <li>Если есть два видеопроигрывателя с разными размерами или положениями и свойство <codeph>visibleVideoPlayerIndex</codeph> переключается с одно видеопроигрывателя на другой.</li>
	 </ul>  
	 
	 <p>Существует только один тип объекта LayoutEvent: <codeph>LayoutEvent.LAYOUT</codeph>.</p>
	 
     </apiDesc></apiClassifierDetail><related-links><link href="fl.video.xml#LayoutEvent/LAYOUT"><linktext>LAYOUT</linktext></link></related-links><adobeApiEvent id="fl.video:LayoutEvent:LAYOUT_layout"><apiName>layout</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:LayoutEvent:LAYOUT</apiEventType><adobeApiEventClassifier>fl.video:LayoutEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:layout"><linktext>Событие layout</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:LayoutEvent:LayoutEvent"><apiName>LayoutEvent</apiName><shortdesc>
         Создает объект Event, содержащий данные о событиях layout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события автоматического расположения: <codeph>LayoutEvent.LAYOUT</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>bubbles</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>oldBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Указывает значения свойств <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> и <codeph>height</codeph> целевого объекта перед отправкой события <codeph>layout</codeph>. Прослушиватели событий могут получать эту информацию через свойство <codeph>oldBounds</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>oldRegistrationBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>Указывает значения свойств <codeph>registrationX</codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph> целевого объекта перед отправкой события <codeph>layout</codeph>. Прослушиватели событий могут получать эту информацию через свойство <codeph>oldRegistrationBounds</codeph>.
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         Создает объект Event, содержащий данные о событиях <codeph>layout</codeph>. Объекты Event передаются прослушивателям событий в качестве параметров.
	 
         </apiDesc></apiConstructorDetail><related-links><link href="fl.video.xml#LayoutEvent/oldBounds"><linktext>oldBounds</linktext></link><link href="fl.video.xml#LayoutEvent/oldRegistrationBounds"><linktext>oldRegistrationBounds</linktext></link></related-links></apiConstructor><apiValue id="fl.video:LayoutEvent:LAYOUT"><apiName>LAYOUT</apiName><shortdesc>
         Задает значение свойства type для объекта события Layout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>layout</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Задает значение свойства <codeph>type</codeph> для объекта события <codeph>Layout</codeph>.
         
         <p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>oldBounds</codeph></entry><entry>Указывает значения свойств <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> и <codeph> height</codeph> целевого объекта перед отправкой события <codeph>layout</codeph>.</entry></row><row><entry><codeph>oldRegistrationBounds</codeph></entry><entry>Указывает значения свойств <codeph>registrationX </codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph> целевого объекта перед отправкой события <codeph>layout</codeph>.</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:layout"><linktext>Событие layout</linktext></link></related-links></apiValue><apiValue id="fl.video:LayoutEvent:oldBounds:get"><apiName>oldBounds</apiName><shortdesc>
		 Указывает значения свойств x, y, width и height целевого объекта перед отправкой события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
		 Указывает значения свойств <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> и <codeph>height</codeph> целевого объекта перед отправкой события.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:LayoutEvent:oldRegistrationBounds:get"><apiName>oldRegistrationBounds</apiName><shortdesc>
		 Указывает значения свойств registrationX, registrationY, registrationWidth и registrationHeight целевого объекта перед отправкой события.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
		 Указывает значения свойств <codeph>registrationX</codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph> целевого объекта перед отправкой события.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoScaleMode"><apiName>VideoScaleMode</apiName><shortdesc>
	 Класс VideoScaleMode содержит значения констант для использования со свойствами FLVPlayback.scaleMode и VideoPlayer.scaleMode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Класс VideoScaleMode содержит значения констант для использования свойствами <codeph>FLVPlayback.scaleMode</codeph> и <codeph>VideoPlayer.scaleMode</codeph>.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/scaleMode"><linktext>FLVPlayback.scaleMode</linktext></link><link href="fl.video.xml#VideoPlayer/scaleMode"><linktext>VideoPlayer.scaleMode</linktext></link></related-links><apiValue id="fl.video:VideoScaleMode:EXACT_FIT"><apiName>EXACT_FIT</apiName><shortdesc>
         Задает, что видеофрагмент будет отображаться с длиной и шириной окна, заданной в свойствах registrationHeight или height и registrationWidth или width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exactFit</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Указывает, что видео будет отображаться с длиной и шириной окна, заданного в свойствах <codeph>registrationHeight</codeph> или <codeph>height</codeph> и <codeph>registrationWidth</codeph> или <codeph>width</codeph>.
	 
	 <p>Например, если <codeph>registrationWidth = width = 100</codeph> и <codeph>registrationHeight = height = 100</codeph>, если <codeph>registrationX = 200</codeph> и <codeph>registrationY = 200</codeph> и если загружен FLV-файл со свойством <codeph>width</codeph> равным 648 и свойством <codeph>height</codeph> равным 480 (приблизительное соотношение сторон 4:3), и если <codeph>align = VideoAlign.CENTER</codeph> и <codeph>scaleMode = EXACT_FIT</codeph>, то получим <codeph>width = 100</codeph>, <codeph>height = 100</codeph>, <codeph>x = 200</codeph> и <codeph>y = 200</codeph>.</p>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoScaleMode:MAINTAIN_ASPECT_RATIO"><apiName>MAINTAIN_ASPECT_RATIO</apiName><shortdesc>
     Указывает, что видеофрагмент будет ограничен прямоугольником, заданным свойствами registrationX, registrationY, registrationWidth и registrationHeight, но исходные пропорции будут сохранены.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>maintainAspectRatio</apiData><apiType value="String"/></apiValueDef><apiDesc>
     Указывает, что видео будет ограничено прямоугольником, заданным значениями свойств <codeph>registrationX</codeph>, <codeph>registrationY</codeph>, <codeph>registrationWidth</codeph> и <codeph>registrationHeight</codeph>, но исходное соотношение сторон будет сохранено.
     
	 <p>Например, если <codeph>registrationWidth = 100</codeph> и <codeph>registrationHeight = 100</codeph>, если <codeph>registrationX = 200</codeph> и <codeph>registrationY = 200</codeph>, и если загружен FLV-файл с свойством <codeph>width</codeph> равным 648 и свойством <codeph>height</codeph> равным 480 (приблизительное соотношение сторон 4:3), и если <codeph>align = VideoAlign.CENTER</codeph> и <codeph>scaleMode = MAINTAIN_ASPECT_RATIO</codeph>, то получается <codeph>width = 100</codeph>, <codeph>height = (100 ~~ 480 / 648) = 74</codeph>, <codeph>x = 10</codeph> и <codeph>y = (10 + ((100 - 74) / 2)) = 23</codeph>.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoScaleMode:NO_SCALE"><apiName>NO_SCALE</apiName><shortdesc>
         Указывает, что исходное видео отображается с оригинальной высотой и шириной.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
         Указывает, что исходное видео отображается с оригинальной высотой и шириной.
	 
	 <p>Например, если <codeph>registrationWidth = 100</codeph> и <codeph>registrationHeight = 100</codeph>, если <codeph>registrationX = 200</codeph> и <codeph>registrationY = 200</codeph> и если загружен FLV-файл с свойством <codeph>width</codeph> равным 648 и свойством <codeph>height</codeph> равным 480 (приблизительное соотношение сторон 4:3), и если <codeph>align = VideoAlign.CENTER</codeph> и <codeph>scaleMode = NO_SCALE</codeph>, то получаем <codeph>width = 648</codeph>, <codeph>height = 480</codeph>, <codeph>x = (200 + ((100 - 648) / 2)) = -74</codeph> и <codeph>y = (200 + ((100 - 480) / 2)) = 10</codeph>.</p>
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoProgressEvent"><apiName>VideoProgressEvent</apiName><shortdesc>
     Проигрыватель Flash&amp;#xAE; Player отправляет объект VideoProgressEvent, когда пользователь создает запрос о количестве байт, полученных в ходе последовательной загрузки видео по протоколу HTTP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Класс VideoProgressEvent
     </apiTipText></apiTipTexts><apiBaseInterface>fl.video:IVPEvent</apiBaseInterface><apiBaseClassifier>flash.events:ProgressEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
     Проигрыватель Flash<sup>®</sup> Player отправляет объект VideoProgressEvent, когда пользователь создает запрос о количестве байт, полученных в ходе последовательной загрузки видео по протоколу HTTP. 
     
     </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.events.ProgressEvent.xml"><linktext>ProgressEvent</linktext></link></related-links><adobeApiEvent id="fl.video:VideoProgressEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier>fl.video:VideoProgressEvent</adobeApiEventClassifier><apiDefinedEvent/><apiTipTexts><apiTipText>Константа PROGRESS
         </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="fl.video:VideoProgressEvent:VideoProgressEvent"><apiName>VideoProgressEvent</apiName><shortdesc>
     Создает объект Event, содержащий данные о событиях в ходе работы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события progress: VideoProgressEvent.PROGRESS.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Прослушиватели событий могут получать эту информацию через унаследованное свойство bubbles.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство cancelable.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Число элементов или байтов, загруженных на момент обработки события прослушивателем.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Общее число элементов или байтов, которые будут получены в случае успешного завершения загрузки.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>vp</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Определяет индекс объекта VideoPlayer.
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Создает объект Event, содержащий данные о событиях в ходе работы. Объекты Event передаются прослушивателям событий в качестве параметров.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:VideoProgressEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
     Задает значение свойства type для объекта события progress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiType value="String"/><apiTipTexts><apiTipText>Константа PROGRESS
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     Задает значение свойства <codeph>type</codeph> для объекта события <codeph>progress</codeph>.
	 
	 <p>Это событие имеет следующие свойства:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     

	 <tgroup cols="2"><thead><row><entry>Свойство</entry><entry>Значение</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; поведение по умолчанию, подлежащее отмене, не определено.</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>Число элементов или байтов, загруженных на момент обработки события прослушивателем.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>Общее число элементов или байтов, которые будут получены в случае успешного завершения загрузки.</entry></row><row><entry><codeph>vp</codeph></entry><entry>Индекс объекта VideoPlayer.</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoProgressEvent:vp:get"><apiName>vp</apiName><shortdesc>
         Индекс объекта VideoPlayer, участвующего в этом событии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
         Индекс объекта VideoPlayer, участвующего в этом событии.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:INCManager"><apiName>INCManager</apiName><shortdesc>
     Интерфейс INCManager предназначен для классов, создающих объекты flash.net.NetConnection для класса VideoPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
     Интерфейс INCManager предназначен для классов, создающих объекты <codeph>flash.net.NetConnection</codeph> для класса VideoPlayer.  Класс NCManager является стандартной реализацией INCManager. При воспроизведении потока с Flash Media Server (FMS) используйте класс NCManagerNative. Также можно создать пользовательский класс, реализующий интерфейс INCManager, и затем использовать класс VideoPlayer для создания NetConnection.
     
     <p>Используйте следующий код для регистрации класса как реализацию INCManager, используемую объектом VideoPlayer. Замените <codeph>fl.video.NCManagerNative</codeph> пользовательским классом.</p>
     
     <codeblock>fl.video.VideoPlayer.iNCManagerClass = fl.video.NCManagerNative;</codeblock>
     
     </apiDesc></apiClassifierDetail><related-links><link href="fl.video.xml#VideoPlayer"><linktext>fl.video.VideoPlayer</linktext></link></related-links><apiOperation id="fl.video:INCManager:fl.video:INCManager:close"><apiName>close</apiName><shortdesc>
         Закрывает объект NetConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         Закрывает объект NetConnection.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:connectAgain"><apiName>connectAgain</apiName><shortdesc>
         Вызывается объектом VideoPlayer, если подключение успешно установлено, но поток не найден.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Если предпринимается попытка установить еще одно соединение, значение будет <codeph>true</codeph>. Если попытка уже предпринималась или если дополнительных попыток не было, значение будет <codeph>false</codeph>.
         
         </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
         Вызывается объектом VideoPlayer, если подключение успешно установлено, но поток не найден. Если возможны несколько альтернативных вариантов URL-адреса RTMP, то производится попытка подключения к другим URL-адресам, и возвращаются различные имена потоков.
         
         <p>Это необходимо в случае, если URL-адрес выглядит как rtmp://servername/path1/path2/path3. При передаче имени приложения или имени экземпляра откройте объект NetConnection с адресом rtmp://servername/path1/path2 или используйте стандартный экземпляр, то есть поток откроется с адресом path2/path3. В общем, это возможно когда имеется более двух частей для адреса и невозможно, если их всего две (не должно быть одной части).</p>
         
         </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/connectToURL()"><linktext>connectToURL()</linktext></link><link href="fl.video.xml#VideoPlayer/isRTMP"><linktext>VideoPlayer.isRTMP</linktext></link></related-links></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:connectDynamicStream"><apiName>connectDynamicStream</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dsi</apiItemName><apiType value=""/><apiDesc>  <xref href="http://www.adobe.com/go/fms_dynamicstreaming"/>
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/>
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:connectToURL"><apiName>connectToURL</apiName><shortdesc>
         Вызывается объектом VideoPlayer для запроса соединения с адресом URL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Если подключение производится синхронно, принимает значение <codeph>true</codeph>. Если предпринимается попытка асинхронного подключения, и вызывающая сторона ожидает наступления события "connected", значение будет <codeph>false</codeph>.
         
         </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiDesc>URL-адрес, к которому подключается объект VideoPlayer.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         Вызывается объектом VideoPlayer для запроса соединения с адресом URL. После успешного или неудачного соединения вызывается метод <codeph>VideoPlayer.ncConnected()</codeph>. При неудачном соединении перед вызовом установите свойство <codeph>nc = null</codeph>.
         
         </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/reconnect()"><linktext>reconnect()</linktext></link><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>VideoPlayer.ncConnected()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:getProperty"><apiName>getProperty</apiName><shortdesc>
         Определяет значения произвольных свойств, поддерживаемых классом, реализующим интерфейс INCManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значения свойств.
         
         </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="String"/><apiDesc>Имя свойства, вызываемого методом <codeph>getProperty</codeph>.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         Определяет значения произвольных свойств, поддерживаемых классом, реализующим интерфейс INCManager. Список поддерживаемых свойств смотрите в особой реализации класса. Вызов метода с неподдерживаемыми свойствами вызывает объект VideoError с ошибкой <codeph>VideoError.UNSUPPORTED_PROPERTY=1011</codeph>.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:helperDone"><apiName>helperDone</apiName><shortdesc>
         Вызывается любым вспомогательным объектом, выполняющим задачу для объекта NCManager, чтобы просигнализировать об успешном или неуспешном завершении задачи.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>helper</apiItemName><apiType value="Object"/><apiDesc>Вспомогательный объект.
         
         </apiDesc></apiParam><apiParam><apiItemName>success</apiItemName><apiType value="Boolean"/><apiDesc>Настройка вывода сигнала, если задача завершена. Если свойство <codeph>success</codeph> имеет значение <codeph>true</codeph>, то задача завершена успешно, иначе значение <codeph>false</codeph>.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         Вызывается любым вспомогательным объектом, выполняющим задачу для объекта NCManager, чтобы просигнализировать об успешном или неуспешном завершении задачи. Объект NCManager использует его с SMILManager.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:reconnect"><apiName>reconnect</apiName><shortdesc>
         Вызывается объектом VideoPlayer, чтобы запросить повторное подключение после потери подключения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         Вызывается объектом VideoPlayer, чтобы запросить повторное подключение после потери подключения. После успешного или неуспешного подключения вызывается метод <codeph>VideoPlayer.ncReconnected()</codeph>. После неуспешного соединения перед вызовом установите параметр <codeph>nc = null</codeph>.
         
         </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/idleTimeout"><linktext>VideoPlayer.idleTimeout</linktext></link><link href="fl.video.xml#VideoPlayer/ncReconnected()"><linktext>VideoPlayer.ncReconnected()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:setProperty"><apiName>setProperty</apiName><shortdesc>
         Задает значения произвольных свойств, поддерживаемых классом, реализующим интерфейс INCManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение свойства.
         
         </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="String"/><apiDesc>Имя свойства, вызываемого методом <codeph>setProperty</codeph>.
         
         </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>Значение свойства.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         Задает значения произвольных свойств, поддерживаемых классом, реализующим интерфейс INCManager. Список поддерживаемых свойств смотрите в особой реализации класса. Вызов метода с неподдерживаемыми свойствами вызывает объект VideoError с ошибкой <codeph>VideoError.UNSUPPORTED_PROPERTY=1011</codeph>.
         
         </apiDesc></apiOperationDetail></apiOperation><apiValue id="fl.video:INCManager:fl.video:INCManager:bitrate:get"><apiName>bitrate</apiName><shortdesc>
         Пропускная способность для нескольких потоков (бит в секунду).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
         Пропускная способность для нескольких потоков (бит в секунду).
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:isDynamicStream:get"><apiName>isDynamicStream</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:isRTMP:get"><apiName>isRTMP</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          <codeph/> Если поток является последовательной загрузкой с HTTP, локального или другого файла, то свойство имеет значение <codeph>false</codeph>.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:netConnection:get"><apiName>netConnection</apiName><shortdesc>
         Ссылка на объект NetConnection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc>
         Ссылка на объект NetConnection.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streamHeight:get"><apiName>streamHeight</apiName><shortdesc>
         Высота потока (пикселы).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
         Высота потока (пикселы). Если после вызова метода <codeph>VideoPlayer.ncConnected()</codeph> значение свойства <codeph>streamHeight</codeph> меньше 0, то это указывает объекту VideoPlayer, что информация о ширине потока отсутствует. Если для свойства <codeph>scaleMode</codeph> объекта VideoPlayer установлено значение <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> или <codeph>VideoScaleMode.NO_SCALE</codeph>, то будет использоваться данное значение и изменение размеров происходит немедленно без задержки.
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>VideoPlayer.ncConnected()</linktext></link><link href="fl.video.xml#VideoPlayer/scaleMode"><linktext>VideoPlayer.scaleMode</linktext></link></related-links></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streamLength:get"><apiName>streamLength</apiName><shortdesc>
         Длина потока (секунды).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
         Длина потока (секунды). Если после вызова метода <codeph>VideoPlayer.ncConnected()</codeph> возвращаемое значение не определено, равно <codeph>null</codeph> или меньше 0, то объект VideoPlayer знает, что здесь нет информации о длине потока. <codeph/><codeph/><codeph/>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>VideoPlayer.ncConnected()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>VideoPlayer.play()</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>VideoPlayer.load()</linktext></link></related-links></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streamName:get"><apiName>streamName</apiName><shortdesc>
         Имя потока, переданного в метод NetStream.play().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
         Имя потока, переданного в метод <codeph>NetStream.play()</codeph>.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streamWidth:get"><apiName>streamWidth</apiName><shortdesc>
         Ширина потока (пикселы).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
         Ширина потока (пикселы). Если после вызова метода <codeph>VideoPlayer.ncConnected()</codeph> значение свойства <codeph>streamWidth</codeph> меньше 0, то это указывает объекту VideoPlayer, что здесь нет информации о ширине потока. Если для свойства <codeph>scaleMode</codeph> объекта VideoPlayer установлено значение <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> или <codeph>VideoScaleMode.NO_SCALE</codeph>, то используется данное значение и изменение размеров происходит немедленно без задержки.
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>VideoPlayer.ncConnected()</linktext></link><link href="fl.video.xml#VideoPlayer/scaleMode"><linktext>VideoPlayer.scaleMode</linktext></link></related-links></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streams:get"><apiName>streams</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:timeout:get"><apiName>timeout</apiName><shortdesc>
         Промежуток времени, по истечении которого прекращаются попытки соединения (мс).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
         Промежуток времени, по истечении которого прекращаются попытки соединения (мс).
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:videoPlayer:get"><apiName>videoPlayer</apiName><shortdesc>
         Объект VideoPlayer, которому принадлежит этот объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>fl.video:VideoPlayer</apiValueClassifier></apiValueDef><apiDesc>
         Объект VideoPlayer, которому принадлежит этот объект.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoState"><apiName>VideoState</apiName><shortdesc>
	 Класс VideoAlign содержит значения констант для свойств FLVPlayback.state и VideoPlayer.state, доступных только для чтения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Класс VideoState содержит значения констант для свойств <codeph>FLVPlayback.state</codeph> и <codeph>VideoPlayer.state</codeph>, доступных только для чтения.
	 
     </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="fl.video.xml#VideoPlayer/state"><linktext>VideoPlayer.state</linktext></link></related-links><apiValue id="fl.video:VideoState:BUFFERING"><apiName>BUFFERING</apiName><shortdesc>
		 Видеопроигрыватель находится в состоянии буферизации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>buffering</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в состоянии буферизации. Он переходит в данное состояние сразу после вызова метода <codeph>play()</codeph> или <codeph>load()</codeph>. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Это управляемое состояние. </p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/buffering"><linktext>FLVPlayback.buffering</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:CONNECTION_ERROR"><apiName>CONNECTION_ERROR</apiName><shortdesc>
		 Видеопроигрыватель находится в состоянии ошибки подключения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connectionError</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в состоянии ошибки подключения. Он переходит в данное состояние при неудачной попытке загрузить видеопоток. Есть две возможных причины для появления ошибки: нет соединения с сервером или не найден поток. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Это неуправляемое состояние.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:DISCONNECTED"><apiName>DISCONNECTED</apiName><shortdesc>
		 Видеопроигрыватель находится в отключенном состоянии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disconnected</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в отключенном состоянии. Он переходит в это состояние при закрытии потока вызовом метода <codeph>closeVideoPlayer()</codeph> или при таймауте во время бездействия. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Пока не установлено свойство <codeph>FLVPlayback.source</codeph>, экземпляр FLVPlayback будет находиться в отключенном состоянии.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/closeVideoPlayer()"><linktext>FLVPlayback.closeVideoPlayer()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/idleTimeout"><linktext>FLVPlayback.idleTimeout</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/source"><linktext>FLVPlayback.source</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:LOADING"><apiName>LOADING</apiName><shortdesc>
		 Видеопроигрыватель находится в состоянии загрузки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в состоянии загрузки. Он переходит в данное состояние стразу после вызова метода <codeph>play()</codeph> или <codeph>load()</codeph>, или после установки свойства <codeph>FLVPlayback.source</codeph>. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Это неуправляемое состояние.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/load()"><linktext>FLVPlayback.load()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/play()"><linktext>FLVPlayback.play()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/source"><linktext>FLVPlayback.source</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:PAUSED"><apiName>PAUSED</apiName><shortdesc>
		 Видеопроигрыватель находится в приостановленном состоянии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paused</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в приостановленном состоянии. Он переходит в данное состояние, если FLV-файл загружен и воспроизведение приостановлено вызовом метода <codeph>pause()</codeph> или <codeph>load()</codeph>. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Это управляемое состояние. </p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/load()"><linktext>FLVPlayback.load()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/pause()"><linktext>FLVPlayback.pause()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/paused"><linktext>FLVPlayback.paused</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:PLAYING"><apiName>PLAYING</apiName><shortdesc>
		 Видеопроигрыватель находится в состоянии воспроизведения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playing</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в состоянии воспроизведения. Он переходит в это состояние, если FLV-файл загружен и воспроизводится. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Это управляемое состояние. </p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/playing"><linktext>FLVPlayback.playing</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/play()"><linktext>FLVPlayback.play()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:RESIZING"><apiName>RESIZING</apiName><shortdesc>
		 Видеопроигрыватель находится в состоянии изменения размера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в состоянии изменения размера. Он переходит в данное состояние во время автоматического изменения размеров видеопроигрывателя. Экземпляр <codeph>FLVPlayback</codeph> никогда не имеет данного значения константы состояния, только экземпляр <codeph>VideoPlayer</codeph> может его иметь. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>VideoPlayer.statе</codeph>.
		 
		 <p>Это неуправляемое состояние. </p>
		 
                 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/state"><linktext>VideoPlayer.state</linktext></link><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>VideoPlayer.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:REWINDING"><apiName>REWINDING</apiName><shortdesc>
		 Видеопроигрыватель находится в состоянии обратной перемотки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rewinding</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в состоянии обратной перемотки. Он переходит в данное состояние при автоматической перемотке видео. Видео автоматически перематывается после остановки, в случае нажатия на кнопку «стоп» или при окончании воспроизведения. После завершения перемотки проигрыватель переходит в остановленное состояние. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Это неуправляемое состояние.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/autoRewind"><linktext>FLVPlayback.autoRewind</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:SEEKING"><apiName>SEEKING</apiName><shortdesc>
		 Видеопроигрыватель находится в состоянии поиска.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>seeking</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в состоянии поиска. Он переходит в данное состояние после вызова метода <codeph>seek()</codeph>, а также во время перетаскивания бегунка по полосе воспроизведения. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Это неуправляемое состояние.</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/seek()"><linktext>FLVPlayback.seek()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:STOPPED"><apiName>STOPPED</apiName><shortdesc>
		 Видеопроигрыватель находится в остановленном состоянии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stopped</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Видеопроигрыватель находится в остановленном состоянии. Он переходит в это состояние, если FLV-файл загружен и воспроизведение остановлено вызовом метода <codeph>stop()</codeph> или если точка воспроизведения достигла конца потока. Для получения текущего состояния видеопроигрывателя используйте свойство <codeph>FLVPlayback.state</codeph>.
		 
		 <p>Это управляемое состояние. </p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stop()"><linktext>FLVPlayback.stop()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stopped"><linktext>FLVPlayback.stopped</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:FPMediaCapabilities"><apiName>FPMediaCapabilities</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="fl.video:FPMediaCapabilities:FPMediaCapabilities"><apiName>FPMediaCapabilities</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 <codeph/>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:FPMediaCapabilities:codecs:get"><apiName>codecs</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:dataStreamAccess:get"><apiName>dataStreamAccess</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:dynamicStreaming:get"><apiName>dynamicStreaming</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:qosSupport:get"><apiName>qosSupport</apiName><shortdesc>
		  
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:rtmfp:get"><apiName>rtmfp</apiName><shortdesc>
		  
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:rtmpe:get"><apiName>rtmpe</apiName><shortdesc>
		  
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:swfVerification:get"><apiName>swfVerification</apiName><shortdesc>
		  
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:version:get"><apiName>version</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>