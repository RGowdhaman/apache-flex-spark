<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components.supportClasses"><apiName>spark.components.supportClasses</apiName><apiDetail/><apiClassifier id="spark.components.supportClasses:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
  Basisklasse für skinfähige Containerkomponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Disabled-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  Normal-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Basisklasse für skinfähige Containerkomponenten.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:SkinnableContainerBase:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableContainerBase:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      Gibt den Namen des Status zurück, der auf die Skin anzuwenden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der den Namen des auf die Skin anzuwendenden Status angibt.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      Gibt den Namen des Status zurück, der auf die Skin anzuwenden ist. Eine Schaltflächenkomponente kann beispielsweise den String „Up“, „Down“, „Over“ oder „Disabled“ zurückgeben, um den Status anzugeben.
     
      <p>Eine Unterklasse der SkinnableComponent-Klasse muss diese Methode überschreiben, um einen Wert zurückzugeben.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableContainerBase:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Das Button-Steuerelement, das als Standardschaltfläche für den Container bestimmt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Button-Steuerelement, das als Standardschaltfläche für den Container bestimmt ist. Wenn Steuerelementen im Container der Fokus zugewiesen ist, entspricht das Drücken der Eingabetaste dem Klicken auf das Button-Steuerelement.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Range"><apiName>Range</apiName><shortdesc>
  Die Range-Klasse nimmt einen Wert und einen zulässigen Bereich für diesen Wert auf, der durch die minimum- und maximum-Eigenschaften definiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Range&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Range
    <strong>Properties</strong>
    maximum="100"
    minimum="0"
    snapInterval="1"
    stepSize="1"
    value="0"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Range-Klasse nimmt einen Wert und einen zulässigen Bereich für diesen Wert auf, der durch die <codeph>minimum</codeph>- und <codeph>maximum</codeph>-Eigenschaften definiert wird. Die <codeph>value</codeph>-Eigenschaft muss immer zwischen der aktuellen <codeph>minimum</codeph>- und <codeph>maximum</codeph>-Eigenschaft liegen und die <codeph>minimum</codeph>- und die <codeph>maximum</codeph>-Eigenschaft müssen immer einen korrekten numerischen Wert aufweisen, sodass <codeph>(minimum &lt;= Wert &lt;= maximum)</codeph> auf <codeph>true</codeph> eingestellt ist. Wenn der Wert der <codeph>snapInterval</codeph>-Eigenschaft nicht 0 ist, muss die <codeph>value</codeph>-Eigenschaft ebenfalls ein Vielfaches von <codeph>snapInterval</codeph> sein.
 
  <p>Die Range-Klasse ist eine Basisklasse für verschiedene Steuerelemente, für die Bereichsfunktionalität erforderlich ist, einschließlich TrackBase und Spinner.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#TrackBase"><linktext>spark.components.supportClasses.TrackBase</linktext></link><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Range:Range"><apiName>Range</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Range:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Erhöht oder senkt „value“ um stepSize.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn der Wert „true“ ist, wird <codeph>stepSize</codeph> zu <codeph>value</codeph> addiert, sonst wird dies subtrahiert. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erhöht oder senkt <codeph>value</codeph><codeph> um stepSize</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:nearestValidValue"><apiName>nearestValidValue</apiName><shortdesc>
      Gibt die Summe des Minimums als ganzzahliges Vielfaches des Intervalls, das „value“ am nächsten kommt, zurück, es sei denn, „value“ liegt näher am maximalen Grenzwert; in diesem Fall wird das Maximum zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Der gültige Wert, der am nächsten zur Eingabe ist.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Der Eingabewert.
      </apiDesc></apiParam><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>Der Wert von snapInterval oder ein Ganzzahlvielfaches von snapInterval.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Summe des Minimums als ganzzahliges Vielfaches des <codeph>interval</codeph>, das <codeph>value</codeph> am nächsten kommt, zurück, es sei denn, <codeph>value</codeph> liegt näher am maximalen Grenzwert; in diesem Fall wird das Maximum zurückgegeben.
     
      <p>Wenn <codeph>interval</codeph> gleich 0 ist, wird der Wert auf die Mindest- und Höchstwerte gekürzt.</p>
     
      <p>Die für einen Bereich gültigen Werte sind durch die Summe der <codeph>minimum</codeph>-Eigenschaft mit Vielfachen von <codeph>interval</codeph> definiert. Weiterhin sind sie als kleiner oder gleich der <codeph>maximum</codeph>-Eigenschaft definiert. Das Maximum braucht nicht notwendigerweise ein Vielfaches von <codeph>snapInterval</codeph> zu sein.</p>
     
      <p>Wenn beispielsweise <codeph>minimum</codeph> gleich 1, <codeph>maximum</codeph> gleich 6 und <codeph>snapInterval</codeph> gleich 3 ist, sind die gültigen Werte für den Bereich 1, 2, 5 und 6. Ebenso gilt: Wenn <codeph>minimum</codeph> gleich 2, <codeph>maximum</codeph> gleich 9 und <codeph>snapInterval</codeph> gleich 1,5 ist, sind die gültigen Werte für den Bereich 2, 3.5, 5, 6.5, 8 und 9.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Definiert den zugrunde liegenden Speicher für die value-Eigenschaft und löst ein valueCommit-Ereignis aus, wenn die Eigenschaft sich ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Der neue Wert der <codeph>value</codeph>-Eigenschaft.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Definiert den zugrunde liegenden Speicher für die <codeph>value</codeph>-Eigenschaft und löst ein <codeph>valueCommit</codeph>-Ereignis aus, wenn die Eigenschaft sich ändert.  
     
      <p>Alle Aktualisierungen der <codeph>value</codeph>-Eigenschaft führen zu einem Aufruf dieser Methode.</p>
     
      <p>Diese Methode geht davon aus, dass der Aufrufer bereits die <codeph>nearestValidValue()</codeph>-Methode zum Beschränken des value-Parameters verwendet hat.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:Range:maximum:get"><apiName>maximum</apiName><shortdesc>
      Der gültige Höchstwert („value“).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      </apiDefaultValue></apiValueDef><apiDesc>
      Der gültige Höchstwert (<codeph>value</codeph>).
     
      <p>Änderungen an der value-Eigenschaft sind von <codeph>commitProperties()</codeph> darauf beschränkt, bei der <codeph>nearestValidValue()</codeph>-Methode kleiner oder gleich dem Höchstwert zu sein.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:minimum:get"><apiName>minimum</apiName><shortdesc>
      Der gültige Mindestwert („value“).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Der gültige Mindestwert (<codeph>value</codeph>).
     
      <p>Änderungen an der value-Eigenschaft sind von <codeph>commitProperties()</codeph> darauf beschränkt, bei der <codeph>nearestValidValue()</codeph>-Methode größer oder gleich dem Mindestwert zu sein.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:snapInterval:get"><apiName>snapInterval</apiName><shortdesc>
      Die snapInterval-Eigenschaft steuert die gültigen Werte der value-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      Die snapInterval-Eigenschaft steuert die gültigen Werte der <codeph>value</codeph>-Eigenschaft. Wenn nicht null, sind gültige Werte die Summe des <codeph>minimum</codeph> und der ganzzahligen Vielfachen dieser Eigenschaft für alle Summen, die kleiner oder gleich dem <codeph>maximum</codeph> sind.
     
      <p>Beispiel: Wenn <codeph>minimum</codeph> 10, <codeph>maximum</codeph> 20 und die Eigenschaft 3 ist, sind die gültigen Werte dieses Bereichs 10, 13, 16, 19 und 20.</p>
      
      <p>Wenn der Wert dieser Eigenschaft null ist, müssen die gültigen Werte zwischen dem Mindest- und Höchstwert (einschließlich) liegen.</p>
     
      <p>Durch diese Eigenschaft werden auch gültige Werte für die <codeph>stepSize</codeph>-Eigenschaft beschränkt, wenn diese festgelegt ist. Ist diese Eigenschaft nicht ausdrücklich festgelegt, <codeph>stepSize</codeph> ist aber definiert, dann nimmt <codeph>snapInterval</codeph> standardmäßig den Wert von <codeph>stepSize</codeph> an.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      Um wie viel sich die value-Eigenschaft ändert, wenn die changeValueByStep()-Methode aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Um wie viel sich die <codeph>value</codeph>-Eigenschaft ändert, wenn die <codeph>changeValueByStep()</codeph>-Methode aufgerufen wird. Es muss sich um ein Mehrfaches von <codeph>snapInterval</codeph>, handeln, es sei denn <codeph>snapInterval</codeph> ist 0. Wenn <codeph>stepSize</codeph> kein Mehrfaches ist, wird es auf das nächste Mehrfache gerundet, das größer oder gleich <codeph>snapInterval</codeph> ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Range:value:get"><apiName>value</apiName><shortdesc>
      Der gültige Wert für diesen Bereich.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Der gültige Wert für diesen Bereich.
      
      <p>Änderungen an der value-Eigenschaft sind von <codeph>commitProperties()</codeph> beschränkt auf größer oder gleich der <codeph>minimum</codeph>-Eigenschaft, kleiner oder gleich der <codeph>maximum</codeph>-Eigenschaft und ein Vielfaches von <codeph>snapInterval</codeph> bei der <codeph>nearestValidValue()</codeph>-Methode.</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/setValue"><linktext>setValue</linktext></link><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
  Die ToggleButtonBase-Komponente entspricht der Basisklasse für die Spark-Button-Komponenten, die die selected-Eigenschaft unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Disabled-Status der Schaltfläche, wenn sie ausgewählt ist
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="downAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Down-Status der Schaltfläche, wenn sie ausgewählt ist
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="overAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Over-Status der Schaltfläche, wenn sie ausgewählt ist
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="upAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  Up-Status der Schaltfläche, wenn sie ausgewählt ist
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ToggleButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButtonBase
    <strong>Properties</strong>
    selected="false"
 
    <strong>events</strong>
    change="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ToggleButtonBase-Komponente entspricht der Basisklasse für die Spark-Button-Komponenten, die die <codeph>selected</codeph>-Eigenschaft unterstützen. „ToggleButton“, „CheckBox“ und „RadioButton“ sind Unterklassen der ToggleButtonBase-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ToggleButtonBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich die selected-Eigenschaft für das ToggleButtonBase-Steuerelement ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>selected</codeph>-Eigenschaft für das ToggleButtonBase-Steuerelement ändert. Dieses Ereignis wird nur ausgelöst, wenn der Benutzer mithilfe der Maus mit dem Steuerelement interagiert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ToggleButtonBase:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ToggleButtonBase:selected:get"><apiName>selected</apiName><shortdesc>
      Enthält „true“, wenn für die Schaltfläche der Down-Status aktiviert ist, und „false“, wenn der Up-Status aktiviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn für die Schaltfläche der Down-Status aktiviert ist, und <codeph>„false“</codeph>, wenn der Up-Status aktiviert ist.
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:OverlayDepth"><apiName>OverlayDepth</apiName><shortdesc>
  Die OverlayDepth-Klasse definiert die standardmäßigen Werte für die Tiefe verschiedener von Flex verwendeter Überlagerungselemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die OverlayDepth-Klasse definiert die standardmäßigen Werte für die Tiefe verschiedener von Flex verwendeter Überlagerungselemente.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiValue id="spark.components.supportClasses:OverlayDepth:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      Der Standardwert für die Tiefe unterhalb aller Überlagerungselemente in Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Der Standardwert für die Tiefe unterhalb aller Überlagerungselemente in Flex.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:DROP_INDICATOR"><apiName>DROP_INDICATOR</apiName><shortdesc>
	  Die Überlagerungstiefe für einen Dropindikator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Die Überlagerungstiefe für einen Dropindikator.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:FOCUS_PANE"><apiName>FOCUS_PANE</apiName><shortdesc>
	  Die Überlagerungstiefe für ein Fokusfenster.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Die Überlagerungstiefe für ein Fokusfenster.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:MASK"><apiName>MASK</apiName><shortdesc>
      Die Überlagerungstiefe für eine Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Die Überlagerungstiefe für eine Maske.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:TOP"><apiName>TOP</apiName><shortdesc>
	  Der Standardwert für die Tiefe oberhalb aller Überlagerungselemente in Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Der Standardwert für die Tiefe oberhalb aller Überlagerungselemente in Flex.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
  Die ItemRenderer-Klasse ist die Basisklasse für Spark-Elementrenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ItemRenderer
    <strong>Properties</strong>
    autoDrawBackground="true"
    selected="false"
    showsCaret="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:DataRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ItemRenderer-Klasse ist die Basisklasse für Spark-Elementrenderer.
 
  <p>Elementrenderer unterstützen optionale Anzeigestatus. Normalerweise werden Anzeigestatus in MXML-Elementrenderern verwendet, um das Aussehen eines Datenelements, basierend auf Benutzerinteraktion mit dem Element, zu steuern. Die ItemRenderer-Klasse unterstützt alle Anzeigestatus, sodass diese Elementrenderer mit listenbasierten Klassen verwendet werden können.</p>
 
  <p>Flex definiert die folgenden Anzeigestatus, die im Elementrenderer unterstützt werden können: </p>
  <ul>
    <li>normal – Das Datenelement hat keine Benutzerinteraktion.</li>
    <li>hovered – Die Maus befindet sich über dem Datenelement.</li>
    <li>selected – Das Datenelement ist ausgewählt.</li>
    <li>dragging – Das Datenelement wird gezogen.</li>
    <li>normalAndShowCaret – Das Datenelement befindet sich im Status „normal“ und hat den Fokus in der Elementliste.  </li>
    <li>hoveredAndShowCaret – Das Datenelement befindet sich im Status „hovered“ und hat den Fokus in der Elementliste. </li>
    <li>selectedAndShowCaret – Das Datenelement befindet sich im Status „normal“ und hat den Fokus in der Elementliste.</li>
  </ul>
 
  <p>Wenn der Benutzer mit einem Steuerelement interagiert, sodass der Anzeigestatus des Elementrenderers geändert wird, bestimmt Flex zuerst, ob der Renderer diesen Anzeigestatus definiert. Wenn der Elementrenderer den Anzeigestatus unterstützt, stellt Flex den Elementrenderer so ein, dass dieser Anzeigestatus verwendet wird. Wenn der Renderer den Anzeigestatus nicht unterstützt, führt Flex keine Aktion durch.</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ItemRenderer:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:getCurrentRendererState"><apiName>getCurrentRendererState</apiName><shortdesc>
      Gibt den Namen des Status zurück, der auf den Renderer anzuwenden ist</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein String, der den Namen des auf den Renderer anzuwendenden Status angibt. 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den Namen des Status zurück, der auf die Renderer anzuwenden ist Beispielsweise würde ein sehr einfacher Listenelementrenderer den String „normal“, „hovered“ oder „selected“ zurückgeben, um den Status des Renderers anzugeben. Wenn mit Berührungsinteraktionen (oder Mausbewegungen, wenn Auswahl ignoriert wird) gearbeitet wird, sind auch „down“ und „downAndSelected“ wichtige Status.
     
      <p>Eine Unterklasse von ItemRenderer muss diese Methode überschreiben, um einen Wert zurückzugeben, wenn das gewünschte Verhalten vom Standardverhalten abweicht.</p>
     
      <p>In Flex 4.0 waren die 3 Hauptstatus „normal“, „hovered“ und „selected“. Flex 4.5 hat zusätzlich „down“ und „downAndSelected“.</p>
     
      <p>Die folgenden Status werden unterstützt (nach Priorität sortiert): 
        <ul>
          <li>dragging</li>
          <li>downAndSelected</li>
          <li>selectedAndShowsCaret</li>
          <li>hoveredAndShowsCaret</li>
          <li>normalAndShowsCaret</li>
          <li>down</li>
          <li>selected</li>
          <li>hovered</li>
          <li>normal</li>
        </ul>
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:invalidateRendererState"><apiName>invalidateRendererState</apiName><shortdesc>
      Markiert den Status des Renderers als ungültig, sodass der neue Status bei einer späteren Bildschirmaktualisierung festgelegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Markiert den Status des Renderers als ungültig, sodass der neue Status bei einer späteren Bildschirmaktualisierung festgelegt wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      Optionale Elementrenderer-Beschriftungskomponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      Optionale Elementrenderer-Beschriftungskomponente. Mit dieser Komponente wird der Wert der <codeph>baselinePosition</codeph>-Eigenschaft in der Hostkomponente des Elementrenderers bestimmt. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:autoDrawBackground:get"><apiName>autoDrawBackground</apiName><shortdesc>
      Gibt an, ob der Elementrenderer den Hintergrund des Datenelements während der Benutzerinteraktion zeichnet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob der Elementrenderer den Hintergrund des Datenelements während der Benutzerinteraktion zeichnet. Interaktionen sind beispielsweise das Ziehen der Maus über das Objekt, das Auswählen des Objekts und das Verschieben des Einfügezeichens des Objekts.
     
      <p>Wenn <codeph>true</codeph>, wird der Hintergrund für den Elementrenderer automatisch gezeichnet. Dieser hängt von den festgelegten Stilen (<codeph>contentBackgroundColor</codeph>, <codeph>alternatingItemColor</codeph>, <codeph>rollOverColor</codeph>, <codeph>downColor</codeph>, <codeph>selectionColor</codeph>) und dem Status des Elementrenderers ab.</p>
     
      <p>Bei <codeph>false</codeph> zeichnet der Elementrenderer keinen Hintergrund. Ihr angepasster Elementrenderer ist für die Anzeige der Hintergrundfarben bei allen Benutzerinteraktionen zuständig.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      Ist „true“, wenn der Benutzer auf einen Elementrenderer klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ist <codeph>true</codeph>, wenn der Benutzer auf einen Elementrenderer klickt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      Enthält „true“, wenn der Elementrenderer gezogen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Enthält <codeph>true</codeph>, wenn der Elementrenderer gezogen wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Ist „true“, wenn der Benutzer mit der Maus auf den Elementrenderer zeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ist <codeph>true</codeph>, wenn der Benutzer mit der Maus auf den Elementrenderer zeigt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      Die Indexposition des Elements im Datenprovider der Hostkomponente des Elementrenderers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Die Indexposition des Elements im Datenprovider der Hostkomponente des Elementrenderers.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      Der String, der im Elementrenderer anzuzeigen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Der String, der im Elementrenderer anzuzeigen ist. 
     
      <p>Die Hostkomponente des Elementrenderers kann mithilfe der <codeph>itemToLabel()</codeph>-Methode das Datenelement in einen String konvertieren, der vom Elementrenderer angezeigt wird. </p>
     
      <p>Für Steuerelemente wie „List“ und „ButtonBar“ können Sie mithilfe der Eigenschaften <codeph>labelField</codeph> und <codeph>labelFunction</codeph> das Feld des Datenelements angeben, das den String enthält. Andernfalls verwendet die Hostkomponente die <codeph>toString()</codeph>-Methode, um das Datenelement in einen String zu konvertieren. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      Enthält „true“, wenn der Elementrenderer sich selbst als ausgewählt anzeigen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Enthält <codeph>true</codeph>, wenn der Elementrenderer sich selbst als ausgewählt anzeigen kann.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Enthält „true“, wenn der Elementrenderer im Fokus dargestellt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Enthält <codeph>true</codeph>, wenn der Elementrenderer im Fokus dargestellt werden kann. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:GroupBase"><apiName>GroupBase</apiName><shortdesc>
  Die GroupBase-Klasse definiert die Basisklasse für Komponenten, die visuelle Elemente anzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" type="Number">
<description>
  Bei eingestelltem Berührungsinteraktionsmodus die Anzahl der Millisekunden nach der Benutzerinteraktion, bis die Komponente in einem visuellen Down-Status angezeigt wird.
 
  <p>Der Grund für diese Verzögerung liegt darin, dass Komponenten nicht flackern sollen, wenn der Benutzer durch Berühren des Bildschirms eine Bildlaufaktion initiiert. Mit dieser angemessenen Verzögerung wird sichergestellt, dass beim Klicken auf eine Komponente noch eine Rückmeldung ausgegeben wird, aber diese Rückmeldung nicht so schnell erfolgt, dass sie während eines Bildlaufs angezeigt wird.</p>
  
  <p>Wenn das Mobile-Design angewendet wird, liegt der Standardwert für diesen Stil bei 100 ms für Komponenten innerhalb eines Scrollers und bei 0 ms für Komponenten außerhalb eines Scrollers.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Farbe eines beliebigen Symbols einer Komponente. Beispiele sind etwa das Häkchen eines Kontrollkästchens oder der Pfeil auf der Schaltfläche einer Bildlaufleiste..
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe der Hervorhebungen, wenn sich die Maus über einer Komponente befindet.
 
  <p>Dieser Stil ist nur im Maus-<codeph>interactionMode</codeph> anwendbar.</p>
 
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Farbe des Fokusrings, wenn eine Komponente im Fokus ist.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="uint">
<description>
  Farbe des Hintergrunds eines Elementrenderers, wenn auf ihn geklickt wird.
 
  <p>Wenn für <codeph>downColor</codeph> <codeph>undefined</codeph> festgelegt ist, wird <codeph>downColor</codeph> nicht verwendet.</p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>undefined</codeph>. Der Standardwert für das Mobile-Design ist <codeph>0xE0E0E0</codeph>.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Der Alphawert bei deaktiviertem Container.
   </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Farbe des Inhaltshintergrunds für diese Komponente.
 
  <p>Wenn in einer Liste <codeph>contentBackgroundColor</codeph> geändert wird, ändert sich die Inhaltshintergrundfarbe der Liste. Wenn der Elementrenderer aber undurchsichtig ist, erkennt der Benutzer möglicherweise keinen Unterschied. Die Farbe des Elementrenderers wird von <codeph>alternatingItemColors</codeph> beeinflusst. Im Spark-Design ist der Elementrenderer standardmäßig transparent (<codeph>alternatingItemColors = undefined</codeph>); im Mobile-Design hingegen sind Elementrenderer standardmäßig undurchsichtig (<codeph>alternatingItemColors = 0xFFFFFF</codeph>).</p>
  
  <p>Der Standardwert für das Spark-Design ist <codeph>0xFFFFFF</codeph>. Der Standardwert für das Mobile-Design ist <codeph>0xF0F0F0</codeph>.</p> 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Die Hauptfarbe für eine Komponente. 
   
  </description>
<default>0xCCCCCC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description>
  Die Farben, die für die Hintergründe der Elemente in der Liste zu verwenden sind. Der Wert ist ein Array von einer oder mehr Farben. Die Hintergründe der Listenelemente wechseln sich unter den Farben im Array ab. 
 
  <p>Der Standardwert für das Spark-Design ist <codeph>undefined</codeph>. Der Standardwert für das Mobile-Design ist <codeph>0xFFFFFF</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Von Komponentenskins verwendete Akzentfarbe. Die standardmäßige Schaltflächenskin verwendet diese Farbe als Hintergrundfarbton. Glanzfarben für Schiebereglerleisten verwenden diese Farbe. 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert, jedoch nicht im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente deaktiviert ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert und im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.5" type="Object">
<description>
  Legt den beim Blocksatz verwendeten Abstand zwischen Wörtern fest. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Blendet Leerraum aus oder behält ihn bei, wenn Text in einem TextFlow importiert wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt die Gradzahl zum Drehen dieses Texts.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Offset der ersten Textzeile links vom Container.
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textIndent“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Gibt die Tabulatoren an, die dem Absatz zugewiesen sind.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den der obere Absatzrand eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der vor dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der hinter dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den die obere Absatzrandkante eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Darstellung von Einträgen in Listen.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Platzierung von Markern relativ zum Listeneintrag.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Legt einen automatischen Einzug für den Beginn von Listenrändern fest, wenn der Auffüllwert der Liste auf dieser Seite <codeph>auto</codeph> ist.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Gibt das Zeilenabstandsmodell an, das eine Kombination aus Zeilenabstandsbasis und Zeilenabstandsrichtung ist.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Gibt die Grundlinienposition der ersten Linie im Container an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Steuert, wie der Text bei einem Float umbricht.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Steuert, an welcher Stelle Zeilen umbrochen werden können, wenn umbrochener Text in mehrere Zeilen umbrochen wird. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Gibt eine vertikale oder horizontale Abfolge der Zeilenplatzierung an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:GroupBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:GroupBase
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    horizontalScrollPosition="null"
    luminosityClip="false"
    luminosityInvert="false"
    layout="BasicLayout"
    mask=""
    maskType="clip"
    mouseEnabledWhereTransparent="true"
    resizeMode="noScale"
    verticalScrollPosition="no default"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors="undefined"
    baselineShift="0"
    blockProgression="tb"
    breakOpportunity="auto"
    cffHinting="horizontalStem"
    chromeColor="0xCCCCCC"
    color="0x000000"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    clearFloats="none"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    disabledAlpha="0.5"
    dominantBaseline="auto"
    firstBaselineOffset="auto"
    focusColor="0x70B2EE"
    focusedTextSelectionColor="A8C6EE"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="E8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="cff"
    rollOverColor="0xCEDBEF"
    symbolColor="0x000000"
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="interWord"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor="0xE8E8E8"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die GroupBase-Klasse definiert die Basisklasse für Komponenten, die visuelle Elemente anzeigen. Eine Gruppenkomponente steuert nicht das Layout der visuellen Elemente, die sie enthält. Stattdessen wird das Layout durch eine separate Layoutkomponente verarbeitet.
   </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:GroupBase:GroupBase"><apiName>GroupBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:GroupBase:containsElement"><apiName>containsElement</apiName><shortdesc>
      Bestimmt, ob das angegebene IVisualElement ein untergeordnetes Element der Container-Instanz oder die Instanz selbst ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn das Element dem Container untergeordnet ist
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Das zu prüfende untergeordnete Objekt
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bestimmt, ob das angegebene IVisualElement ein untergeordnetes Element der Container-Instanz oder die Instanz selbst ist. Die Suche ist tief, d. h. wenn das Element ein untergeordnetes Element des Containers und ein darunter untergeordnetes Element usw. ist. Dann wird „true“ zurückgegeben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc conref="mx.core.UIComponent:createChildren()">
      Wenn das Layoutobjekt noch nicht eingestellt wurde, weist createChildren() diesem Container ein Standardlayoutobjekt, BasicLayout, zu.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent:createChildren()">
      <p>Wenn das Layoutobjekt noch nicht eingestellt wurde, weist createChildren() diesem Container ein Standardlayoutobjekt, BasicLayout, zu.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Die Änderung an der horizontalen Bildlaufposition.
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Nimmt folgende Werte an: 
      <ul>
      <li> 
      <codeph>END</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect rechtsbündig am Inhaltsbereich ausrichtet.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect linksbündig am Inhaltsbereich ausrichtet.
      </li>
     
      <li> 
      <codeph>LEFT</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element linksbündig ausrichtet, das sich entweder über die linke Kante des scrollRect erstreckt oder sich links davon befindet.
      </li>
     
      <li>
      <codeph>PAGE_LEFT</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element rechtsbündig ausrichtet, das sich entweder über die linke Kante des scrollRect erstreckt oder sich links davon befindet.
      </li>
     
      <li> 
      <codeph>PAGE_RIGHT</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element linksbündig ausrichtet, das sich entweder über die rechte Kante des scrollRect erstreckt oder sich rechts davon befindet.
      </li>
     
      <li> 
      <codeph>RIGHT</codeph> – Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element rechtsbündig ausrichtet, das sich entweder über die rechte Kante des scrollRect erstreckt oder sich rechts davon befindet.
      </li>
           </ul>
     
      <p>Die Implementierung ruft <codeph>getElementBoundsLeftOfScrollRect()</codeph> und <codeph>getElementBoundsRightOfScrollRect()</codeph> auf, um die Grenzen der Elemente zu bestimmen. Layoutklassen überschreiben diese Methoden normalerweise anstelle der <codeph>getHorizontalScrollPositionDelta()</codeph>-Methode.</p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Die Änderung an der vertikalen Bildlaufposition.
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Nimmt folgende Werte an: 
      <ul>
      <li> 
      <codeph>DOWN</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element unten bündig ausrichtet, das sich entweder über die Unterkante des scrollRect erstreckt oder sich unterhalb davon befindet.
      </li>
     
      <li> 
      <codeph>END</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect unten bündig am Inhaltsbereich ausrichtet.
      </li>
      
      <li> 
      <codeph>HOME</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect oben bündig am Inhaltsbereich ausrichtet.
      </li>
     
      <li> 
      <codeph>PAGE_DOWN</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element oben bündig ausrichtet, das sich entweder über die Unterkante des scrollRect erstreckt oder sich unterhalb davon befindet.
      </li>
     
      <codeph>PAGE_UP</codeph>
      <li>
      Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element unten bündig ausrichtet, das sich entweder über die Oberkante des scrollRect erstreckt oder sich oberhalb davon befindet.
      </li>
           <li> 
      <codeph>UP</codeph> Gibt das Bildlaufdelta zurück, das das scrollRect am ersten Element oben bündig ausrichtet, das sich entweder über die Oberkante des scrollRect erstreckt oder sich oberhalb davon befindet.
      </li>
           </ul>
     
      <p>Die Implementierung ruft <codeph>getElementBoundsAboveScrollRect()</codeph> und <codeph>getElementBoundsBelowScrollRect()</codeph> auf, um die Grenzen der Elemente zu bestimmen. Layoutklassen überschreiben diese Methoden normalerweise anstelle der <codeph>getVerticalScrollPositionDelta()</codeph>-Methode. </p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVirtualElementAt"><apiName>getVirtualElementAt</apiName><shortdesc>
      Layouts, die das useVirtualLayout-Flag berücksichtigen, verwenden diese Methode zur updateDisplayList()-Zeit, um Layoutelemente abzurufen, die sich „in der Ansicht“ befinden. Das heißt:</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die validierten Elemente mit der angegebenen Indexposition.
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des abzurufenden Elements.
      </apiDesc></apiParam><apiParam><apiItemName>eltWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Wenn angegeben: die anfängliche Breite des neu erstellten oder recycelten Elements
      </apiDesc></apiParam><apiParam><apiItemName>eltHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Wenn angegeben: die anfängliche Höhe des neu erstellten oder recycelten Elements
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Layouts, die das <codeph>useVirtualLayout</codeph>-Flag berücksichtigen, rufen zur updateDisplayList()-Zeit mithilfe dieser Methode Layoutelemente ab, die sich „in der Ansicht“ befinden, d. h. sich mit der scrollRect der Gruppe überlappen.
     
      <p>Wenn das zurückzugebende Element nicht bereits ein sichtbares untergeordnetes Element war, d. h., wenn es erstellt oder recycelt wurde, und entweder eltWidth oder eltHeight angegeben wird, wird die anfängliche Größe des Elements vor der Überprüfung mit setLayoutBoundsSize() festgelegt. Dies ist für Komponenten wie Text wichtig, die nach Anpassung des Layouts an die Breite oder Höhe der Gruppe neu umbrochen werden.</p>
      
      <p>Das zurückgegebene Layoutelement ist validiert.</p>
     
      <p>Mit dieser Methode werden Layoutelemente bei Bedarf erstellt oder „recycelt“ und validiert. </p>
     
      <p>Diese Methode kann nicht direkt aufgerufen werden, sondern wird von Layouts aufgerufen, die die Virtualisierung unterstützen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:setContentSize"><apiName>setContentSize</apiName><shortdesc>
      Definiert die Eigenschaften „contentWidth“ und „contentHeight“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Der neue Wert der <codeph>contentWidth</codeph>-Eigenschaft.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Der neue Wert der <codeph>contentHeight</codeph>-Eigenschaft.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Definiert die Eigenschaften <codeph>contentWidth</codeph> und <codeph>contentHeight</codeph>. Diese Methode wurde für Entwickler von Layoutklassen konzipiert, die sie über die <codeph>updateDisplayList()</codeph>-Methoden aufrufen sollten.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:GroupBase:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      Bei „true“ werden Maße und Layout erstellt, wenn die Position oder Größe eines untergeordneten Elements geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, werden Messung und Layout durchgeführt, wenn die Position oder die Größe eines untergeordneten Elements geändert wird. Bei <codeph>false</codeph> werden Maße und Layout nur einmal erstellt, wenn untergeordnete Elemente zum Container hinzugefügt bzw. daraus entfernt werden.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:GroupBase:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentHeight:get"><apiName>contentHeight</apiName><shortdesc conref="spark.core.IViewport#contentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentWidth:get"><apiName>contentWidth</apiName><shortdesc conref="spark.core.IViewport#contentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:layout:get"><apiName>layout</apiName><shortdesc>
      Das Layoutobjekt für diesen Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>spark.layouts.BasicLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Das Layoutobjekt für diesen Container. Dieses Objekt ist verantwortlich für die Maße und das Layout der visuellen Elemente im Container.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      Eine Eigenschaft, die steuert, ob die Luminanzmaske den maskierten Inhalt beschneidet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Eigenschaft, die steuert, ob die Luminanzmaske den maskierten Inhalt beschneidet. Diese Eigenschaft kann sich nur auswirken, wenn auf das Grafikelement eine Maske des Typs MaskType.LUMINOSITY angewendet wird.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#GroupBase/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      Eine Eigenschaft, die die Berechnung des RGB-Farbwerts eines Grafikelements, das durch eine Luminanzmaske maskiert wird, steuert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Eigenschaft, die die Berechnung des RGB-Farbwerts eines Grafikelements, das durch eine Luminanzmaske maskiert wird, steuert. Bei „true“ wird der RGB-Farbwert der Pixel des Quellinhalts umgekehrt und mit dem entsprechenden Bereich der Maske multipliziert. Bei „false“ wird der RGB-Farbwert der Pixel des Quellinhalts direkt verwendet. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:maskType:get"><apiName>maskType</apiName><shortdesc>
      Der Maskentyp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP 
           </apiDefaultValue></apiValueDef><apiDesc>
      <p>Der Maskentyp. Mögliche Werte sind <codeph>MaskType.CLIP</codeph>, <codeph>MaskType.ALPHA</codeph> oder <codeph>MaskType.LUMINOSITY</codeph>.</p> 
           <p><b>Schnittmasken</b></p>
     
      <p>Beim Maskieren im Schnittmodus wird die Schnittmaske auf 1 Bit reduziert. Das bedeutet, dass die Maske die Deckkraft eines Pixels des Quellinhalts nicht beeinflusst. Entweder bleibt der Wert unverändert, wenn das entsprechende Pixel der Maske einen Alphawert ungleich null hat, oder es wird voll transparent, wenn der Wert des Maskenpixels einen Alphawert von null hat.</p>
     
      <p><b>Alphamasken</b></p>
     
      <p>Im Alphamodus wird die Deckkraft eines jeden Pixels des Quellinhalts mit der Deckkraft des entsprechenden Bereichs der Maske multipliziert. D. h., ein Pixel des Quellinhalts mit einer Deckkraft von 1, das mit einem Bereich mit der Deckkraft 5 maskiert ist, hat im Ergebnis eine Deckkraft von 5. Ein Quellpixel mit einer Deckkraft von 0,8, das mit einem Bereich mit der Deckkraft 0,5 maskiert ist, hat im Ergebnis eine Deckkraft von 0,4.</p>
     
      <p><b>Luminanzmasken</b></p>
     
      <p>Eine Luminanzmaske, manchmal digitale Maske genannt, funktioniert ganz ähnlich wie eine Alphamaske, außer dass sowohl die Deckkraft als auch der RGB-Farbwert der Pixel des Quellinhalts mit der Deckkraft und dem RGB-Farbwert des entsprechenden Bereichs der Maske multipliziert wird.</p>
     
      <p>Luminanzmasken stehen nicht originär in Flash zur Verfügung, sondern in Tools wie Adobe Illustrator und Adobe Photoshop. Um bei Inhalten, die in Flash wiedergegeben werden, die visuelle Wirkung einer Luminanzmaske zu erzielen, instanziieren Grafikelemente, die eine Luminanzmaske angeben, einen Shaderfilter, der das Aussehen einer Luminanzmaske in Adobe Creative Suite-Tools imitiert.</p>
     
      <p>Von Luminanzmasken maskierte Objekte können Eigenschaften zur Steuerung der RGB-Farbwerte und der Beschneidung der Maske festlegen. Weitere Informationen finden Sie bei den Attributen luminosityInvert und luminosityClip.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mask:get"><apiName>mask</apiName><shortdesc>
      Definiert die Maske.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Definiert die Maske. Die Maske wird zur Anzeigeliste hinzugefügt. Die Maske darf sich nicht bereits in einer Anzeigeliste oder im Elementearray befinden.  
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/mask"><linktext>flash.display.DisplayObject.mask</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mouseEnabledWhereTransparent:get"><apiName>mouseEnabledWhereTransparent</apiName><shortdesc>
      Bei „true“ stellt diese Eigenschaft sicher, dass sämtliche Grenzen der Gruppe auf alle Mausereignisse wie Klicken und Rollover reagieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> stellt diese Eigenschaft sicher, dass sämtliche Grenzen der Gruppe auf alle Mausereignisse wie Klicken und Rollover reagieren. Diese Eigenschaft wird nur wirksam, wenn dieser Instanz Maus-, Berührungs- oder Flash Player-Gestenereignisse hinzugefügt werden. Außerdem wird vorausgesetzt, dass die Aufrufe für addEventListener()/removeEventListener() nicht überflüssig sind.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:overlay:get"><apiName>overlay</apiName><shortdesc>
      Die Überlagerungsebene für diese Gruppe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:DisplayLayer</apiValueClassifier></apiValueDef><apiDesc>
      Die Überlagerungsebene für diese Gruppe. Alle Objekte der Überlagerungsebene werden über den Gruppenelementen wiedergegeben.
           <p><b>Hinweis:</b> Behalten Sie dieses Objekt nicht bei, da die Gruppe dieses bei Bedarf zerstört und erstellt.</p>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:resizeMode:get"><apiName>resizeMode</apiName><shortdesc>
      Der ResizeMode für diesen Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der ResizeMode für diesen Container. Wenn für den Modus zum Ändern der Größe <codeph>ResizeMode.NO_SCALE</codeph> festgelegt ist, erfolgt die Größenänderung durch das Erstellen des Layouts der untergeordneten Elemente mit der neuen Breite und Höhe. Wenn der Modus zum Ändern der Größe auf <codeph>ResizeMode.SCALE</codeph> eingestellt ist, behalten alle untergeordneten Elemente ihre nicht skalierte Breite und Höhe bei und alle untergeordneten Elemente werden skaliert, um die Größe zu ändern.
     
     <p>Der Standardwert ist <codeph>ResizeMode.NO_SCALE</codeph>, dies entspricht „noScale“.</p>
     
     </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
  Die SkinnableComponent-Klasse definiert die Basisklasse für skinfähige Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><Exclude kind="style" name="themeColor"/><styles><style name="skinClass" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Der Name der Skinklasse, die für diese Komponente zu verwenden ist. Die Skin muss eine Klasse sein, die UIComponent erweitert. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style name="errorSkin" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  Der Name der Skinklasse, die für diese Komponente verwendet werden soll, wenn ein Überprüfungsfehler auftritt. 
  
  </description>
<default>spark.skins.spark.ErrorSkin
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SkinnableComponent-Klasse definiert die Basisklasse für skinfähige Komponenten. Die Skins, die von einer SkinnableComponent-Klasse verwendet werden, sind normalerweise untergeordnete Klassen der Skin-Klasse.
 
  <p>Verknüpfen Sie eine Skinklasse mit einer Komponentenklasse, indem Sie die <codeph>skinClass</codeph>-Stileigenschaft der Komponentenklasse einstellen. Sie können die <codeph>skinClass</codeph>-Eigenschaft in CSS einstellen, wie im folgenden Beispiel gezeigt:</p>
 
  <pre>MyComponent
  {
    skinClass: ClassReference("my.skins.MyComponentSkin")
  }</pre>
 
  <p>Im folgenden Beispiel wird die <codeph>skinClass</codeph>-Eigenschaft in MXML eingestellt:</p>
 
  <pre>
  &lt;MyComponent skinClass="my.skins.MyComponentSkin"/></pre>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Skin"><linktext>spark.components.supportClasses.Skin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SkinnableComponent:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:attachSkin"><apiName>attachSkin</apiName><shortdesc>
      Erstellt die Skin für die Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt die Skin für die Komponente. Sie können diese Methode nicht direkt aufrufen. Sie wird in Flex automatisch aufgerufen, wenn die <codeph>createChildren()</codeph>- oder die <codeph>UIComponent.commitProperties()</codeph>-Methode aufgerufen wird. Eine Unterklasse der SkinnableComponent-Klasse überschreibt diese Methode normalerweise nicht.
     
      <p>Diese Methode instanziiert die Skin für die Komponente, fügt die Skin als untergeordnete Komponente der Komponente hinzu und löst alle Teilezuordnungen für die Skin auf</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:clearSkinParts"><apiName>clearSkinParts</apiName><shortdesc>
      Löscht Verweise auf Skinteile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Löscht Verweise auf Skinteile. Sie können diese Methode nicht direkt aufrufen. Sie wird in Flex automatisch aufgerufen, wenn die <codeph>detachSkin()</codeph>-Methode aufgerufen wird.
     
      <p>Unterklassen der SkinnableComponent-Klasse überschreiben diese Methode normalerweise nicht.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:createDynamicPartInstance"><apiName>createDynamicPartInstance</apiName><shortdesc>
      Erstellt eine Instanz eines dynamischen Skinteils.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Instanz des Teils oder null, wenn das Teil nicht erstellt werden kann.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt eine Instanz eines dynamischen Skinteils. Dynamische Skinteile sollten immer von dieser Methode instanziiert werden, statt direkt durch Aufrufen der <codeph>newInstance()</codeph>-Methode in dieser Factory. Diese Methode erstellt das Teil, fügt es jedoch nicht zur Anzeigeliste hinzu. Die Komponente muss die <codeph>Group.addElement()</codeph>-Methode oder die entsprechende Methode aufrufen, um den Skinteil zur Anzeigeliste hinzuzufügen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:detachSkin"><apiName>detachSkin</apiName><shortdesc>
      Vernichtet und entfernt die Skin für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Vernichtet und entfernt die Skin für diese Komponente. Sie können diese Methode nicht direkt aufrufen. Sie wird in Flex automatisch aufgerufen, wenn eine Skin zur Laufzeit geändert wird. Diese Methode entfernt die Skin und löst alle Teilezuordnungen auf.
     
      <p>Unterklassen der SkinnableComponent-Klasse überschreiben diese Methode normalerweise nicht.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:findSkinParts"><apiName>findSkinParts</apiName><shortdesc>
      Suchen Sie die Skinteile in der Skinklasse und weisen Sie sie den Eigenschaften der Komponente zu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Suchen Sie die Skinteile in der Skinklasse und weisen Sie sie den Eigenschaften der Komponente zu. Sie können diese Methode nicht direkt aufrufen. Sie wird in Flex automatisch aufgerufen, wenn die <codeph>attachSkin()</codeph>-Methode aufgerufen wird. Eine Unterklasse der SkinnableComponent-Klasse überschreibt diese Methode normalerweise nicht.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      Gibt den Namen des Status zurück, der auf die Skin anzuwenden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein String, der den Namen des auf die Skin anzuwendenden Status angibt.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den Namen des Status zurück, der auf die Skin anzuwenden ist. Eine Schaltflächenkomponente kann beispielsweise den String „Up“, „Down“, „Over“ oder „Disabled“ zurückgeben, um den Status anzugeben.
     
      <p>Eine Unterklasse der SkinnableComponent-Klasse muss diese Methode überschreiben, um einen Wert zurückzugeben.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getDynamicPartAt"><apiName>getDynamicPartAt</apiName><shortdesc>
      Gibt eine bestimmte Instanz eines dynamischen Teils zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Instanz des Teils oder null, wenn das Teil nicht existiert.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des dynamischen Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des dynamischen Teils.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt eine bestimmte Instanz eines dynamischen Teils zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:invalidateSkinState"><apiName>invalidateSkinState</apiName><shortdesc>
      Markiert die Komponente so, dass der neue Status der Skin während einer späteren Bildschirmaktualisierung eingestellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Markiert die Komponente so, dass der neue Status der Skin während einer späteren Bildschirmaktualisierung eingestellt wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:numDynamicParts"><apiName>numDynamicParts</apiName><shortdesc>
      Gibt die Anzahl der Instanzen eines dynamischen Teils zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Anzahl der Instanzen des dynamischen Teils.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des dynamischen Teils.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Anzahl der Instanzen eines dynamischen Teils zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      Wird aufgerufen, wenn ein Skinteil hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Die Instanz des Teils.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn ein Skinteil hinzugefügt wird. Sie können diese Methode nicht direkt aufrufen. Für statische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>attachSkin()</codeph>-Methode aufgerufen wird. Für dynamische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>createDynamicPartInstance()</codeph>-Methode aufgerufen wird. 
     
      <p>Überschreiben Sie diese Funktion, um dem Teil ein bestimmtes Verhalten zuzuweisen. Wenn Sie das Verhalten in Bezug auf einen Skinteil überschreiben möchten, das von einer Basisklasse vererbt wurde, rufen Sie nicht die <codeph>super.partAdded()</codeph>-Methode auf. Andernfalls sollten Sie immer die <codeph>super.partAdded()</codeph>-Methode aufrufen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      Wird aufgerufen, wenn eine Instanz eines Skinteils entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Die Instanz des Teils.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn eine Instanz eines Skinteils entfernt wird. Sie können diese Methode nicht direkt aufrufen. Für statische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>detachSkin()</codeph>-Methode aufgerufen wird. Für dynamische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>removeDynamicPartInstance()</codeph>-Methode aufgerufen wird. 
     
      <p>Überschreiben Sie diese Funktion, um das Verhalten vom Teil zu entfernen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:removeDynamicPartInstance"><apiName>removeDynamicPartInstance</apiName><shortdesc>
      Entfernen Sie eine Instanz eines dynamischen Teils.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Die Instanz des Teils.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernen Sie eine Instanz eines dynamischen Teils. Sie müssen diese Methode aufrufen, bevor ein dynamisches Teil gelöscht wird. Mit dieser Methode wird das Teil jedoch nicht aus der Anzeigeliste entfernt.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      Der Status, der beim Zuordnen von CSS-Pseudoselektoren zu verwenden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Status, der beim Zuordnen von CSS-Pseudoselektoren zu verwenden ist. Diese Überschreibung gibt den aktuellen Skinstatus und nicht den Komponentenstatus zurück.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:skin:get"><apiName>skin</apiName><shortdesc>
      Die Instanz der Skinklasse für diese Komponenteninstanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="skinChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:UIComponent"/></apiValueDef><apiDesc>
      Die Instanz der Skinklasse für diese Komponenteninstanz. Dies ist eine schreibgeschützte Eigenschaft, die automatisch eingestellt wird, wenn Flex die <codeph>attachSkin()</codeph>-Methode aufruft.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:suggestedFocusSkinExclusions:get"><apiName>suggestedFocusSkinExclusions</apiName><shortdesc>
      Listet die Skinteile auf, die von erfassten Bitmaps ausgeschlossen sind und für das Einblenden des Fokus verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Listet die Skinteile auf, die von erfassten Bitmaps ausgeschlossen sind und für das Einblenden des Fokus verwendet werden. Diese Liste wird nur dann verwendet, wenn die <codeph>focusSkinExclusions</codeph>-Eigenschaft <codeph>null</codeph> ist.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TextBase"><apiName>TextBase</apiName><shortdesc>
  Die Basisklasse für Spark-Text-Steuerelemente wie Label und RichText, die Text mithilfe der CSS-Stile für das Standardformat anzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe des Hintergrunds des gesamten Begrenzungsrechtecks dieser Komponente. Ist der Stil <codeph>undefined</codeph>, wird kein Hintergrund gezeichnet. Andernfalls wird diese RGB-Farbe mit einer durch den <codeph>backgroundAlpha</codeph>-Stil bestimmten Alphaebene gezeichnet.
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="Number">
<description>
  Die Alphaebene der Farbe, die durch den <codeph>backgroundColor</codeph>-Stil festgelegt wird. Die zulässigen Werte liegen zwischen 0,0 und 1,0.
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IDisplayText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Basisklasse für Spark-Text-Steuerelemente wie Label und RichText, die Text mithilfe der CSS-Stile für das Standardformat anzeigen.
 
  <p>Neben der <codeph>text</codeph>-Eigenschaft werden auch die <codeph>maxDisplayedLines</codeph>- und <codeph>isTruncated</codeph>-Eigenschaften hinzugefügt, um Kürzung zu unterstützen.</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:TextBase:TextBase"><apiName>TextBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:TextBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc>
	  Eine schreibgeschützte Eigenschaft, die angibt, ob der Text gekürzt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Eine schreibgeschützte Eigenschaft, die angibt, ob der Text gekürzt wurde.
	 
	  <p>Beim Kürzen von Text wird überlanger Text durch Kürzungszeichen ersetzt, wie z. B. „...“. Das verwendete Kürzungszeichen ist regionsabhängig. Es wird mit der „truncationIndicator“-Ressource in der „core“-Ressourcengruppe angegeben.</p>
	 
      <p>Wenn <codeph>maxDisplayedLines</codeph> 0 ist, tritt keine Kürzung auf. Stattdessen wird der Text einfach gekürzt, wenn er nicht in die Grenzen der Komponente passt.</p>
     
      <p>Wenn <codeph>maxDisplayedLines</codeph> eine positive Ganzzahl ist, wird falls erforderlich der Text gekürzt, um die Anzahl der Zeilen auf diese Ganzzahl zu reduzieren.</p>
     
      <p>Wenn <codeph>maxDisplayedLines</codeph> -1 ist, wird der Text so gekürzt, dass so viele Zeilen angezeigt werden, wie vollständig in die Höhe der Komponente passen.</p>
     
      <p>Es wird nur dann eine Kürzung ausgeführt, wenn der <codeph>lineBreak</codeph>-Stil <codeph>"toFit"</codeph> ist. Der Wert dieser Eigenschaft wird ignoriert, wenn <codeph>lineBreak</codeph> <codeph>"explicit"</codeph> ist.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc>
      Eine Ganzzahl, die bestimmt, ob und wo der Text gekürzt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Ganzzahl, die bestimmt, ob und wo der Text gekürzt wird.
	 
	  <p>Beim Kürzen von Text wird überlanger Text durch Kürzungszeichen ersetzt, wie z. B. „...“. Das verwendete Kürzungszeichen ist regionsabhängig. Es wird mit der „truncationIndicator“-Ressource in der „core“-Ressourcengruppe angegeben.</p>
     
      <p>Wenn der Wert 0 ist, erfolgt keine Kürzung. Stattdessen wird der Text einfach gekürzt, wenn er nicht in die Grenzen der Komponente passt.</p>
     
      <p>Wenn der Wert eine positive Ganzzahl ist, wird falls erforderlich der Text gekürzt, um die Anzahl der Zeilen auf diese Ganzzahl zu reduzieren.</p>
     
      <p>Wenn der Wert -1 ist, wird der Text so gekürzt, dass so viele Zeilen angezeigt werden, wie vollständig in die Höhe der Komponente passen.</p>
     
      <p>Es wird nur dann eine Kürzung ausgeführt, wenn der <codeph>lineBreak</codeph>-Stil <codeph>"toFit"</codeph> ist. Der Wert dieser Eigenschaft wird ignoriert, wenn <codeph>lineBreak</codeph> <codeph>"explicit"</codeph> ist.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:showTruncationTip:get"><apiName>showTruncationTip</apiName><shortdesc>
	  Eine Eigenschaft, die steuert, ob die Komponente eine QuickInfo einblenden soll, wenn der Text gekürzt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  Eine Eigenschaft, die steuert, ob die Komponente eine QuickInfo einblenden soll, wenn der Text gekürzt wurde.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:text:get"><apiName>text</apiName><shortdesc>
      Der von dieser Textkomponente angezeigte Text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der von dieser Textkomponente angezeigte Text.
	 
      <p>Die Formatierung dieses Texts wird von CSS-Stilen gesteuert. Die unterstützten Stile richten sich nach der Unterklasse.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
  Mithilfe der ScrollBarBase-Klasse können Sie steuern, welche Daten angezeigt werden, wenn zu viele Daten vorhanden sind und diese nicht in den Anzeigebereich passen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style inherit="no" name="smoothScrolling" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
 Dieser Stil bestimmt, ob die Bildlaufleiste beim Paging und beim Durchlaufen nahtlos animiert wird. Bei „false“ wird bei page- und step-Vorgängen direkt an die paged-/stepped-Position gesprungen. Bei „true“ werden die Bildlaufleiste und der Inhalt, der durchlaufen wird, bis zu dieser Position animiert.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  Zeit in Millisekunden zwischen den page-Ereignissen, wenn der Benutzer mit der Maustaste auf die Leiste klickt und die Maustaste gedrückt hält.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  Anzahl der Millisekunden nach dem ersten Seitenereignis bis zu den nächsten Seitenereignissen.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  Wenn der Wert auf „true“ (Standardwert) festgelegt ist, wird durch Ziehen des Bildlauffelds der Bildlaufleiste mit der Maus der Wert der Bildlaufleiste sofort aktualisiert. Wenn der Wert auf „false“ festgelegt ist, wird der Wert der Bildlaufleiste nur aktualisiert, wenn die Maustaste losgelassen wird.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="autoThumbVisibility" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  Bei „true“ (Standardeinstellung) wird die Sichtbarkeit der Schiebeleiste zurückgesetzt, wenn die Größe aktualisiert wird. Durch Überschreibungen von <codeph>updateSkinDisplayList</codeph> in <codeph>HScrollBar</codeph> und <codeph>VScrollBar</codeph> wird der Schieberegler sichtbar, wenn er kleiner ist als die Leiste, es sei denn, dieser Stil hat den Wert „false“. Setzt diesen Stil auf „false“, um die Sichtbarkeit des Schiebereglers direkt zu steuern.  
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fixedThumbSize" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  Bei „true“ weist das Bildlauffeld entlang der Achse der Bildlaufleiste die bevorzugte Größe auf.
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="inactive" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10">
<description>
  Der inaktive Status. Dies ist der Status, wenn kein Inhalt für den Bildlauf vorhanden ist. Das bedeutet: <codeph>maximum</codeph> &lt;= <codeph>minimum</codeph>.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="decrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein optionaler Skinteil, der eine Schaltfläche definiert, die bei Betätigung die Bildlaufleiste nach oben verschiebt. Dies entspricht dem Verringern der <codeph>value</codeph>-Eigenschaft.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar up.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein optionaler Skinteil, der eine Schaltfläche definiert, die bei Betätigung die Bildlaufleiste nach unten verschiebt. Dies entspricht dem Erhöhen der <codeph>value</codeph>-Eigenschaft.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar down.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ScrollBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ScrollBarBase
    <strong>Properties</strong>
    pageSize="20"
    snapInterval="1"
    viewport="null"
     <strong>Styles</strong>
    autoThumbVisibility="true"
    fixedThumbSize="false"
    repeatDelay="500"
    repeatInterval="35"
    smoothScrolling="true"
    symbolColor="0x000000"
  /&gt;
  </pre> 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe der ScrollBarBase-Klasse können Sie steuern, welche Daten angezeigt werden, wenn zu viele Daten vorhanden sind und diese nicht in den Anzeigebereich passen. Die ScrollBarBase-Klasse zeigt ein Bildlaufleistenpaar und einen Viewport an. Ein Viewport entspricht einer UI-Komponente (z. B. „Group“), die IViewport implementiert.
  
  <p>Dieses Steuerelement erweitert die TrackBase-Klasse und entspricht der Basisklasse für die Steuerelemente „HScrollBar“ und „VScrollBar“.</p> 
 
  <p>Eine Bildlaufleiste besteht aus einer Leiste, einem Bildlauffeld variabler Größe und zwei optionalen Pfeilschaltflächen. Die ScrollBarBase-Klasse verwendet vier Parameter, um den Anzeigestatus zu berechnen:</p>
   <ul>
    <li><codeph>minimum</codeph>: Der minimale Wert innerhalb des Bereichs.</li>
    <li><codeph>maximum</codeph>: Der maximale Wert innerhalb des Bereichs.</li>
    <li><codeph>value</codeph>: Aktuelle Position, die zwischen dem minimalen und dem maximalen Wert des Bereichs liegen muss.</li>
    <li>Anzeigengröße: Stellt die Anzahl der Elemente im Bereich dar, die gleichzeitig angezeigt werden können. Die Anzahl der Elemente muss entweder gleich oder kleiner sein als der Bereich und der Bereich ist der Satz an Werten, die zwischen dem minimalen und dem maximalen Wert liegen.</li>
  </ul>
    </apiDesc></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ScrollBarBase:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animatePaging"><apiName>animatePaging</apiName><shortdesc>
     Animiert den Vorgang der Bewegung zu newValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>Der endgültige Wert, bis zu dem die Bewegung erfolgt.
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiType value="Number"/><apiDesc>Um wie viel eine horizontale oder vertikale Verschiebung erforderlich ist. Dieser Wert wird verwendet, um mit dem <codeph>repeatInterval</codeph>-Stil die gesamte für das Verschieben bis zum neuen Wert benötigte Zeit zu berechnen. <codeph>pageSize</codeph> wird normalerweise von der Bildlaufleiste dynamisch auf den erforderlichen Wert festgelegt, damit Inhalte an einer logischen Inhaltsgrenze angezeigt werden können.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Animiert den Vorgang zum Verschieben auf <codeph>newValue</codeph>. Der <codeph>pageSize</codeph>-Parameter wird verwendet, um die zum Abrufen des Werts erforderliche Zeit zu berechnen. Die Zeit zum Animieren eines Pagingvorgangs entspricht ungefähr der der nicht animierten Version. Beide Vorgänge enden üblicherweise an der gleichen Position und zur gleichen Zeit.
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animateStepping"><apiName>animateStepping</apiName><shortdesc>
     Animiert den Vorgang für den Durchlauf zu newValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>Der endgültige Wert, bis zu dem der Durchlauf erfolgt.
     </apiDesc></apiParam><apiParam><apiItemName>stepSize</apiItemName><apiType value="Number"/><apiDesc>Der Umfang des Durchlaufs. Dieser Wert wird verwendet, um mit dem <codeph>repeatInterval</codeph>-Stil die Gesamtzeit für den Durchlauf zum neuen Wert zu berechnen. <codeph>stepSize</codeph> wird normalerweise von der Bildlaufleiste dynamisch auf den erforderlichen Wert festgelegt, damit Inhalte an einer logischen Inhaltsgrenze angezeigt werden können.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Animiert den Vorgang für den Durchlauf zum <codeph>newValue</codeph>. Der <codeph>stepSize</codeph>-Parameter wird verwendet, um die zum Abrufen des Werts erforderliche Zeit zu berechnen. Die Zeit zum Animieren eines Durchlaufvorgangs entspricht ungefähr der der nicht animierten Version. Beide Vorgänge enden üblicherweise an der gleichen Position und zur gleichen Zeit.
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonDownHandler"><apiName>button_buttonDownHandler</apiName><shortdesc>
      Verarbeitet ein Klicken auf die Schaltfläche zum Inkrementieren oder Dekrementieren auf der Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das Ereignisobjekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Verarbeitet ein Klicken auf die Schaltfläche zum Inkrementieren oder Dekrementieren auf der Bildlaufleiste. Dies sollte zu einem Durchlaufvorgang führen, der wiederholt wird, wenn die Maustaste gedrückt gehalten wird. Die Verzögerung bis zur Wiederholung des Vorgangs und die Verzögerung zwischen wiederholten Ereignissen werden durch die Stile <codeph>repeatDelay</codeph> und <codeph>repeatInterval</codeph> der zugrunde liegenden Button-Objekte bestimmt.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonUpHandler"><apiName>button_buttonUpHandler</apiName><shortdesc>
      Verarbeitet ein Loslassen der Schaltfläche zum Inkrementieren oder Dekrementieren der Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das Ereignisobjekt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Verarbeitet ein Loslassen der Schaltfläche zum Inkrementieren oder Dekrementieren der Bildlaufleiste. Dies beendet den Durchlaufvorgang, der durch das ursprüngliche Button-Down-Ereignis auf die Schaltfläche gestartet wurde.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Addiert bzw. subtrahiert „pageSize“ zu bzw. von „value“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Ob die paging-Aktion die <codeph>value</codeph>-Eigenschaft erhöht (<codeph>true</codeph>) bzw. verringert (<codeph>false</codeph>). 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Addiert bzw. subtrahiert <codeph>pageSize</codeph> zu bzw. von <codeph>value</codeph>. Bei einer Addition ist der neue Wert (<codeph>value</codeph>) das nächste Mehrfache von <codeph>pageSize</codeph>, das größer ist als der aktuelle Wert (<codeph>value</codeph>). Bei einer Subtraktion ist der neue Wert (<codeph>value</codeph>) das nächste Mehrfache von <codeph>pageSize</codeph>, das kleiner ist als der aktuelle Wert. Der minimale Wert von <codeph>value</codeph> lautet <codeph>pageSize</codeph>. 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ScrollBarBase:pageSize:get"><apiName>pageSize</apiName><shortdesc>
      Die Änderung im Wert der value-Eigenschaft, wenn Sie die changeValueByPage()-Methode aufrufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>20
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Änderung im Wert der <codeph>value</codeph>-Eigenschaft, wenn Sie die <codeph>changeValueByPage()</codeph>-Methode aufrufen.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      Der Wert, den die Bildlaufleiste erhält, wenn die Maustaste losgelassen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Wert, den die Bildlaufleiste erhält, wenn die Maustaste losgelassen wird. 
     
      <p>Ist der <codeph>liveDragging</codeph>-Stil „false“, wird der Wert der Bildlaufleiste nur festgelegt, wenn die Maustaste losgelassen wird. Der Wert wird beim Ziehen des Schiebereglers nicht aktualisiert.</p>
     
      <p>Diese Eigenschaft wird beim Bewegen der Bildlaufleiste aktualisiert, selbst wenn <codeph>liveDragging</codeph> „false“ ist.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:viewport:get"><apiName>viewport</apiName><shortdesc>
      Der Viewport, der durch diese Bildlaufleiste gesteuert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Viewport, der durch diese Bildlaufleiste gesteuert wird. Wenn ein Viewport angegeben ist, werden durch Änderung seiner tatsächlichen Größe, Inhaltsgröße und Bildlaufposition die entsprechenden ScrollBarBase-Methoden ausgeführt:
      <ul>
      <li><codeph>viewportResizeHandler()</codeph></li>
      <li><codeph>contentWidthChangeHandler()</codeph></li>
      <li><codeph>contentHeightChangeHandler()</codeph></li>
      <li><codeph>viewportVerticalScrollPositionChangeHandler()</codeph></li>
      <li><codeph>viewportHorizontalScrollPositionChangeHandler()</codeph></li>
      </ul>
     
      <p>Die VScrollBar- und HScrollBar-Klassen überschreiben diese Methoden, damit die zugehörigen <codeph>pageSize</codeph>-, <codeph>maximum</codeph>- und <codeph>value</codeph>-Eigenschaften synchron zum Viewport sind. In ähnlicher Weise werden die zugehörigen <codeph>changeValueByPage()</codeph>- und <codeph>changeValueByStep()</codeph>-Methoden überschrieben, um die <codeph>scrollPositionDelta</codeph>-Methoden des Viewports zum Berechnen der Offsets für Auslagerung und Durchlauf zu berechnen.</p>
        
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:snapInterval:set"><apiName>snapInterval</apiName><shortdesc>
      
      Die snapInterval-Eigenschaft steuert die gültigen Werte der value-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Die snapInterval-Eigenschaft steuert die gültigen Werte der <codeph>value</codeph>-Eigenschaft. Wenn nicht null, sind gültige Werte die Summe des <codeph>minimum</codeph> und der ganzzahligen Vielfachen dieser Eigenschaft für alle Summen, die kleiner oder gleich dem <codeph>maximum</codeph> sind.
     
      <p>Beispiel: Wenn <codeph>minimum</codeph> 10, <codeph>maximum</codeph> 20 und die Eigenschaft 3 ist, sind die gültigen Werte dieses Bereichs 10, 13, 16, 19 und 20.</p>
      
      <p>Wenn der Wert dieser Eigenschaft null ist, müssen die gültigen Werte zwischen dem Mindest- und Höchstwert (einschließlich) liegen.</p>
     
      <p>Durch diese Eigenschaft werden auch gültige Werte für die <codeph>stepSize</codeph>-Eigenschaft beschränkt, wenn diese festgelegt ist. Ist diese Eigenschaft nicht ausdrücklich festgelegt, <codeph>stepSize</codeph> ist aber definiert, dann nimmt <codeph>snapInterval</codeph> standardmäßig den Wert von <codeph>stepSize</codeph> an.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
  Die ButtonBase-Klasse ist die Basisklasse für alle Spark-Button-Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Disabled-Status der Schaltfläche
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="down" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Down-Status der Schaltfläche
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="over" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Over-Status der Schaltfläche
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="up" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  Up-Status der Schaltfläche
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" type="Number">
<description>
  Bei eingestelltem Berührungsinteraktionsmodus die Anzahl der Millisekunden nach der Benutzerinteraktion, bis die Komponente in einem visuellen Down-Status angezeigt wird.
 
  <p>Der Grund für diese Verzögerung liegt darin, dass Komponenten nicht flackern sollen, wenn der Benutzer durch Berühren des Bildschirms eine Bildlaufaktion initiiert. Mit dieser angemessenen Verzögerung wird sichergestellt, dass beim Klicken auf eine Komponente noch eine Rückmeldung ausgegeben wird, aber diese Rückmeldung nicht so schnell erfolgt, dass sie während eines Bildlaufs angezeigt wird.</p>
  
  <p>Wenn das Mobile-Design angewendet wird, liegt der Standardwert für diesen Stil bei 100 ms für Komponenten innerhalb eines Scrollers und bei 0 ms für Komponenten außerhalb eines Scrollers.</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Zeit in Millisekunden zwischen den <codeph>buttonDown event</codeph>-Ereignissen, wenn der Benutzer mit der Maustaste auf eine Schaltfläche klickt und die Maustaste gedrückt hält.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Zeit in Millisekunden, die nach dem ersten <codeph>buttonDown</codeph>-Ereignis gewartet werden soll, bevor <codeph>buttonDown</codeph>-Ereignisse bei jedem <codeph>repeatInterval</codeph> wiederholt werden.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="String">
<description>
  Richtung des Symbols in Relation zur Beschriftung. Gültige MXML-Werte sind <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> und <codeph>top</codeph>.
 
  <p>In ActionScript können Sie folgende Konstanten verwenden, um diese Eigenschaft festzulegen: <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> und <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Klasse oder Instanz, die als Standardsymbol verwendet werden soll. Das Symbol kann beispielsweise aus folgenden grafischen Quellen gerendert werden:  
  <ul>
   <li>Eine Bitmap- oder BitmapData-Instanz.</li>
   <li>Eine Klasse, die eine Unterklasse von DisplayObject darstellt. Die BitmapFill instanziiert die Klasse und erstellt auf deren Grundlage eine Bitmapdarstellung.</li>
   <li>Eine Instanz eines DisplayObject. Die BitmapFill kopiert das Objekt in eine Bitmap für die Füllung.</li>
   <li>Der Name einer externen Bilddatei. </li>
  </ul>
 
  </description>
<default>null 
 
  </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.primitives.BitmapImage.source.xml"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Fokusrings dieser Komponente.
 
  </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Der Radius der Ecken dieser Komponente.
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="iconDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" required="false" var_type="spark.primitives:BitmapImage">
<description>
      Ein Skinteil, der ein optionales Symbol für die Schaltfläche definiert. 
      
      </description>

<playerversion>AIR 2.0
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines an optional icon for the button.</shortdesc></SkinPart><SkinPart name="labelDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Ein Skinteil, der die Beschriftung der Schaltfläche definiert. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the label of the button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBase
    <strong>Properties</strong>
    autoRepeat="false"
    content="null"
    label=""
    stickyHighlighting="false"
  
    <strong>Events</strong>
    buttonDown="<i>No default</i>"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    cornerRadius="4"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    repeatDelay="500"
    repeatInterval="35"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
    wordSpacing="100%"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ButtonBase-Klasse ist die Basisklasse für alle Spark-Button-Komponenten. Die Button- und ToggleButtonBase-Klasse sind Unterklassen von ButtonBase. ToggleButton. Die Klassen „CheckBox“ und „RadioButton“ sind Unterklassen der ToggleButtonBase-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link><link href="spark.components.supportClasses.xml#ToggleButtonBase"><linktext>spark.components.supportClasses.ToggleButtonBase</linktext></link><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ButtonBase_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer auf das ButtonBase-Steuerelement klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer auf das ButtonBase-Steuerelement klickt. Ist die Eigenschaft <codeph>autoRepeat</codeph> auf <codeph>true</codeph> gesetzt, wird das Ereignis so lange ausgelöst, wie die Schaltfläche gedrückt bleibt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ButtonBase:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ButtonBase:protected:buttonReleased"><apiName>buttonReleased</apiName><shortdesc>
      Diese Methode wird aufgerufen, wenn ein MouseEvent.MOUSE_UP-Ereignis verarbeitet wird, wenn der Benutzer auf die Schaltfläche klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Diese Methode wird aufgerufen, wenn ein <codeph>MouseEvent.MOUSE_UP</codeph>-Ereignis verarbeitet wird, wenn der Benutzer auf die Schaltfläche klickt. Sie wird nur aufgerufen, wenn die Schaltfläche das Ziel ist und wenn <codeph>mouseCaptured</codeph> den Wert <codeph>true</codeph> hat. Sie ermöglicht, dass Unterklassen die Eigenschaften der Schaltfläche unmittelbar bei einem Klick aktualisieren, um zu vermeiden, dass sich die Schaltfläche zwischen MouseUp- und Klickereignissen in Übergangsstatus befindet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      Überschreiben Sie diese Methode in Unterklassen, um das Klickereignis zu verarbeiten, statt eine separate Prozedur hinzuzufügen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Das mit dem Ereignis verknüpfte Ereignisobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Überschreiben Sie diese Methode in Unterklassen, um das <codeph>click</codeph>-Ereignis zu verarbeiten, statt eine separate Prozedur hinzuzufügen. Diese Methode wird nicht aufgerufen, wenn die Schaltfläche deaktiviert ist. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:mouseEventHandler"><apiName>mouseEventHandler</apiName><shortdesc>
      Diese Methode verarbeitet die Mausereignisse, ruft ggf. die clickHandler-Methode auf und aktualisiert die hovered- und mouseCaptured-Eigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das mit dem Ereignis verknüpfte Ereignisobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Diese Methode verarbeitet die Mausereignisse, ruft ggf. die <codeph>clickHandler</codeph>-Methode auf und aktualisiert die <codeph>hovered</codeph>- und <codeph>mouseCaptured</codeph>-Eigenschaften.
     
      <p>Diese Methode wird aufgerufen, um <codeph>MouseEvent.ROLL_OVER</codeph>, <codeph>MouseEvent.ROLL_OUT</codeph>, <codeph>MouseEvent.MOUSE_DOWN</codeph>, <codeph>MouseEvent.MOUSE_UP</codeph>, und <codeph>MouseEvent.CLICK</codeph> zu verarbeiten.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ButtonBase:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      Gibt an, ob wiederholt buttonDown-Ereignisse ausgelöst werden, wenn der Benutzer die Maustaste gedrückt hält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob wiederholt <codeph>buttonDown</codeph>-Ereignisse ausgelöst werden, wenn der Benutzer die Maustaste gedrückt hält.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:content:get"><apiName>content</apiName><shortdesc>
      Mit der content-Eigenschaft können Sie ein beliebiges Objekt übergeben, das in einer benutzerdefinierten Skin der Schaltfläche verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Mit der <codeph>content</codeph>-Eigenschaft können Sie ein beliebiges Objekt übergeben, das in einer benutzerdefinierten Skin der Schaltfläche verwendet wird. Wenn eine Skin das optionale Teil <codeph>labelDisplay</codeph> definiert, wird eine Stringdarstellung von <codeph>content</codeph> nach unten auf die <codeph>text</codeph>-Eigenschaft dieses Teils verschoben. Die Standardskin stellt auf diese Weise den <codeph>content</codeph> als Schaltflächenbeschriftung dar.  
     
      <p>Die <codeph>label</codeph>-Eigenschaft ist eine Fassade dieser Eigenschaft vom Typ <codeph>String</codeph>. Diese Eigenschaft ist bindbar. Sie teilt das contentChange-Ereignis mit der <codeph>label</codeph>-Eigenschaft.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/label"><linktext>label</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      Gibt an, ob sich der Mauszeiger über der Schaltfläche befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob sich der Mauszeiger über der Schaltfläche befindet. Wird verwendet, um den Skinstatus zu bestimmen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:keyboardPressed:get"><apiName>keyboardPressed</apiName><shortdesc>
      Gibt an, ob eine Tastaturtaste gedrückt wird, während die Schaltfläche im Fokus ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob eine Tastaturtaste gedrückt wird, während die Schaltfläche im Fokus ist. Wird verwendet, um den Skinstatus zu bestimmen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:mouseCaptured:get"><apiName>mouseCaptured</apiName><shortdesc>
      Gibt an, ob eine Maustaste gedrückt wurde, während sich der Mauszeiger über der Schaltfläche befunden hat, als MouseEvent.MOUSE_DOWN zum ersten Mal ausgelöst wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob eine Maustaste gedrückt wurde, während sich der Mauszeiger über der Schaltfläche befunden hat, als <codeph>MouseEvent.MOUSE_DOWN</codeph> zum ersten Mal ausgelöst wurde. Wird verwendet, um den Skinstatus zu bestimmen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:stickyHighlighting:get"><apiName>stickyHighlighting</apiName><shortdesc>
      Bei „false“ zeigt die Schaltfläche ihre Down-Skin an, sobald der Benutzer sie drückt, aber wechselt zur Over-Skin, sobald der Benutzer den Mauszeiger von ihr herunterbewegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>false</codeph> zeigt die Schaltfläche ihre Down-Skin an, sobald der Benutzer sie drückt, aber sie wechselt zur Over-Skin, sobald der Benutzer die Maus von ihr herunterbewegt. Bei <codeph>true</codeph> zeigt die Schaltfläche ihre Down-Skin an, sobald der Benutzer sie drückt. Sie zeigt diese Skin jedoch auch weiterhin an, wenn der Benutzer die Maus von ihr herunterbewegt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:label:set"><apiName>label</apiName><shortdesc>
      Text, der auf dem ButtonBase-Steuerelement angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue></apiValueDef><apiDesc>
      Text, der auf dem ButtonBase-Steuerelement angezeigt werden soll.
     
      <p>Wenn die Beschriftung breiter als das ButtonBase-Steuerelement ist, wird sie gekürzt und endet mit einer Ellipse (...). Die vollständige Beschriftung erscheint als QuickInfo, sobald der Benutzer den Mauszeiger über das Steuerelement bewegt. Wenn Sie mit der <codeph>tooltip</codeph>-Eigenschaft zusätzlich eine QuickInfo festgelegt haben, wird diese anstatt des Beschriftungstexts angezeigt.</p>
     
      <p>Dies ist die standardmäßige ButtonBase-Eigenschaft.</p>
     
      <p>Diese Eigenschaft ist eine Fassade der <codeph>content</codeph>-Eigenschaft vom Typ <codeph>String</codeph>. Diese Eigenschaft ist bindbar. Sie teilt das Auslösen des contentChange-Ereignisses mit der <codeph>content</codeph>-Eigenschaft.</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/content"><linktext>Inhalt</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TrackBase"><apiName>TrackBase</apiName><shortdesc>
  Die TrackBase-Klasse ist eine Basisklasse für Komponenten wie „Slider“ und „ScrollBar“ mit einer Leiste und einem oder mehreren Schiebereglern/Bildlauffeldern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Time" inherit="no" name="slideDuration" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" type="Number">
<description>
  Dauer in Millisekunden für die Schieberegler-/Bildlauffeldanimation, wenn Sie auf die Leiste klicken, um den Schieberegler/das Bildlauffeld zu verschieben. Dieser Stil wird für Schiebereglerleisten und Bildlaufleisten verwendet. Bei Schiebereglerleisten führt jeder Klick auf die Leiste zu einer Animation mit diesem Stil, während der Schieberegler an die Klickposition verschoben wird. Bei Bildlaufleisten wird dieser Stil nur verwendet, wenn beim Klicken auf die Leiste die Umschalttaste gedrückt gehalten wird, wodurch das Bildlauffeld an die Klickposition verschoben wird. Wird die Umschalttaste beim Klicken nicht gedrückt gehalten, führt dies stattdessen zu Paging-Verhalten. Der <codeph>smoothScrolling</codeph>-Stil muss ebenfalls für die Bildlaufleiste eingestellt sein, damit das Verhalten animiert ist, wenn bei gedrückter Umschalttaste geklickt wird.
  
 <p>Die Animation erstreckt sich über die gesamte Länge der Leiste, für kürzere Strecken wird eine proportional kürzere Dauer verwendet.</p>
 
  </description>
<default>300
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Disabled-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  Normal-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="thumb" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein Skinteil, der eine Schaltfläche definiert, die entlang der Leiste gezogen werden kann, um die <codeph>value</codeph>-Eigenschaft zu erhöhen bzw. zu verringern. Änderungen an der <codeph>value</codeph>-Eigenschaft aktualisieren automatisch die Position des Bildlauffelds/des Schiebereglers in Bezug auf die Leiste.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that can be dragged along the track to increase or
      decrease the value property.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein Skinteil, der eine Schaltfläche definiert, die bei Betätigung die <codeph>value</codeph>-Eigenschaft auf einen Wert einstellt, der der aktuellen Position der Schaltfläche auf der Leiste entspricht.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that, when  pressed, sets the value property
      to the value corresponding with the current button position on the track.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TrackBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TrackBase
    <strong>Styles</strong>
    slideDuration="300"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"
    thumbDrag="<i>No default</i>"
    thumbPress="<i>No default</i>"
    thumbRelease="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die TrackBase-Klasse ist eine Basisklasse für Komponenten wie „Slider“ und „ScrollBar“ mit einer Leiste und einem oder mehreren Schiebereglern/Bildlauffeldern. Sie deklariert zwei erforderliche Skinteile: <codeph>thumb</codeph> und <codeph>track</codeph>. Die TrackBase-Klasse stellt auch den Code zum Verschieben des Schiebereglers bzw. Bildlauffelds bereit, das von der Slider- und ScrollBar-Klasse gemeinsam verwendet wird.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.supportClasses.Slider.xml"><linktext>spark.components.supportClasses.Slider</linktext></link><link href="" invalidHref="spark.components.supportClasses.ScrollBar.xml"><linktext>spark.components.supportClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_RELEASE_thumbRelease"><apiName>thumbRelease</apiName><shortdesc>
  Wird ausgelöst, wenn der Schieberegler bzw. das Bildlauffeld losgelassen wird, also wenn der Benutzer die Maustaste nach einem thumbPress-Ereignis loslässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_RELEASE</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Schieberegler bzw. das Bildlauffeld losgelassen wird, d. h. wenn der Benutzer die Maustaste nach einem <codeph>thumbPress</codeph>-Ereignis loslässt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_PRESS_thumbPress"><apiName>thumbPress</apiName><shortdesc>
  Wird ausgelöst, wenn auf den Schieberegler geklickt wird, d. h. wenn der Benutzer mit der Maustaste auf den Schieberegler klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_PRESS</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn auf den Schieberegler geklickt wird, d. h. wenn der Benutzer mit der Maustaste auf den Schieberegler klickt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_DRAG_thumbDrag"><apiName>thumbDrag</apiName><shortdesc>
  Wird ausgelöst, wenn auf den Schieberegler bzw. das Bildlauffeld geklickt und dieser/dieses dann mit der Maus verschoben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_DRAG</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn auf den Schieberegler bzw. das Bildlauffeld geklickt und dieser/dieses dann mit der Maus verschoben wird. Vor diesem Ereignis wird immer ein <codeph>thumbPress</codeph>-Ereignis ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_START_changeStart"><apiName>changeStart</apiName><shortdesc>
  Wird beim Start einer Benutzerinteraktion oder Animation ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird beim Start einer Benutzerinteraktion oder Animation ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_END_changeEnd"><apiName>changeEnd</apiName><shortdesc>
  Wird am Ende einer Benutzerinteraktion oder Animation ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird am Ende einer Benutzerinteraktion oder Animation ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich der Wert des Steuerelements durch Bedienvorgänge des Benutzers ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der Wert des Steuerelements durch Bedienvorgänge des Benutzers ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:TrackBase:TrackBase"><apiName>TrackBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:TrackBase:protected:pointToValue"><apiName>pointToValue</apiName><shortdesc>
      Konvertiert eine der Spur entsprechende x-, y-Pixelposition in einen Wert zwischen Mindest- und Höchstwert (einschließlich beider Grenzwerte).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Ein Wert zwischen Mindest- und Höchstwert (einschließlich beider Grenzwerte).
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate der Position, die sich relativ zum Ursprung der Leiste befindet.
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate der Position, die sich relativ zum Ursprung der Leiste befindet.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Konvertiert eine der Spur entsprechende x-, y-Pixelposition in einen Wert zwischen Mindest- und Höchstwert (einschließlich beider Grenzwerte).  
     
      <p>TrackBase-Unterklassen müssen diese Methode überschreiben und Konvertierungen unter Berücksichtigung der eigenen Geometrie durchführen. Beispielsweise könnte eine vertikale Schiebereglerleiste folgendermaßen einen Wert berechnen:
      <pre>
      return (y / track.height) (maximum - minimum);
      </pre>
      </p>
     
      <p>Durch diese Methode wird standardmäßig <codeph>minimum</codeph> zurückgegeben.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      Definiert die Grenzen von Skinteilen (normalerweise des Schiebereglers/Bildlauffelds), deren Geometrie nicht vollständig durch das Skinlayout festgelegt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Definiert die Grenzen von Skinteilen (normalerweise des Schiebereglers/Bildlauffelds), deren Geometrie nicht vollständig durch das Skinlayout festgelegt ist.
     
      <p>Die meisten Unterklassen überschreiben diese Methode, um die Größe, Position und Sichtbarkeit des Schiebereglers bzw. des Bildlauffelds zu aktualisieren, basierend auf den <codeph>minimum</codeph>-, <codeph>maximum</codeph> und <codeph>value</codeph>-Eigenschaften. </p>
     
      <p>Der Aufruf dieser Methode hat standardmäßig keine Auswirkungen.</p> 
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components.supportClasses:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
      Eine DisplayLayer-Klasse pflegt eine geordnete Liste von DisplayObjects, nach Tiefe sortiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      Eine DisplayLayer-Klasse pflegt eine geordnete Liste von DisplayObjects, nach Tiefe sortiert. Sie instanziieren diese Klasse nicht, sondern verwenden die <codeph>overlay</codeph>-Eigenschaft von <codeph>Group</codeph> und <codeph>DataGroup</codeph>.
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DisplayLayer:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
          Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Konstruktor. 
         
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DisplayLayer:addDisplayObject"><apiName>addDisplayObject</apiName><shortdesc>
          Fügt ein displayObject mit der angegebenen Tiefe zur angeordneten Liste hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Index des Objekts.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das hinzuzufügende Objekt.
         
          </apiDesc></apiParam><apiParam><apiItemName>depth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Die Tiefe des Objekts.   
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Fügt ein <codeph>displayObject</codeph> mit der angegebenen Tiefe zur angeordneten Liste hinzu. Die Position des <codeph>displayObject</codeph> in den sortierten Listen basiert auf seiner Tiefe. Das Objekt wird nach allen anderen Objekten mit einem kleineren oder gleichen <codeph>depth</codeph>-Wert eingefügt.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectAt"><apiName>getDisplayObjectAt</apiName><shortdesc>
          Gibt das DisplayObject mit der angegebenen Indexposition zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Objekt.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index des Objekts.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Gibt das DisplayObject mit der angegebenen Indexposition zurück. 
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectDepth"><apiName>getDisplayObjectDepth</apiName><shortdesc>
          Gibt die Tiefe für das angegebene DisplayObject zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Tiefe des Objekts.
         
          </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das Objekt.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Gibt die Tiefe für das angegebene DisplayObject zurück.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:removeDisplayObject"><apiName>removeDisplayObject</apiName><shortdesc>
          Entfernt das angegebene displayObject aus der sortierten Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Objekt, das entfernt wurde.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das Objekt.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Entfernt das angegebene <codeph>displayObject</codeph> aus der sortierten Liste.
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DisplayLayer:numDisplayObjects:get"><apiName>numDisplayObjects</apiName><shortdesc>
          Anzahl der Objekte im DisplayLayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          Anzahl der Objekte im DisplayLayer. 
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SliderBase"><apiName>SliderBase</apiName><shortdesc>
  Mit der SliderBase-Klasse können Benutzer einen Wert auswählen, indem sie einen Schieberegler zwischen den beiden Endpunkten der Schiebereglerleiste bewegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="fontWeight"/><Exclude kind="style" name="fontSize"/><Exclude kind="style" name="color"/><styles><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description>
  Bei <codeph>true</codeph> wird der Wert des Schiebereglers übernommen, während er entlang der Leiste gezogen wird anstatt erst beim Loslassen.
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Fokusrings dieser Komponente.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontStyle“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontStyle“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataTip" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" required="false" type="mx.core.IDataRenderer" var_type="mx.core:IFactory">
<description>
      Ein Skinteil, der einen dataTip definiert, der eine formatierte Version des aktuellen Werts anzeigt. Der dataTip wird angezeigt, während der Schieberegler gezogen wird. Dies ist ein dynamischer Skinteil, der den Typ „IFactory“ aufweisen muss.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a dataTip that displays a formatted version of 
      the current value.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SliderBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SliderBase
    <strong>Properties</strong>
    dataTipFormatFunction="20"
    dataTipPrecision="2"
    maximum="10"
    showDataTip="true"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlph="0.55"
    focusColor="0xFFFFFF"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    liveDragging="true"
    local="en"
    renderingMode="CFF"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit der SliderBase-Klasse können Benutzer einen Wert auswählen, indem sie einen Schieberegler zwischen den beiden Endpunkten der Schiebereglerleiste bewegen. Der aktuelle Wert der Schiebereglerleiste wird von der relativen Position des Schiebereglers zwischen den Endpunkten der Schiebereglerleiste bestimmt, die dem Mindest- und Höchstwert der Schiebereglerleiste entsprechen. Die SliderBase-Klasse ist eine Basisklasse für HSlider und VSlider.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SliderBase:SliderBase"><apiName>SliderBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SliderBase:protected:updateDataTip"><apiName>updateDataTip</apiName><shortdesc>
      Wird verwendet, um den ggf. angezeigten Datentipp zu platzieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dataTipInstance</apiItemName><apiType value="mx.core:IDataRenderer"/><apiDesc>Die <codeph>dataTip</codeph>-Instanz für Update und Position.
      </apiDesc></apiParam><apiParam><apiItemName>initialPosition</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Die anfängliche Position des <codeph>dataTip</codeph> in der Skin.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird verwendet, um den ggf. angezeigten Datentipp zu platzieren. Unterklassen müssen diese Funktion implementieren. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SliderBase:dataTipPrecision"><apiName>dataTipPrecision</apiName><shortdesc>
      Die Anzahl von Dezimalstellen für den Datentipptext. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>2</apiData><apiType value="int"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Anzahl von Dezimalstellen für den Datentipptext. Der Wert 0 bedeutet, dass alle Werte auf eine ganze Zahl gerundet werden. Dieser Wert wird ignoriert, wenn <codeph>dataTipFormatFunction</codeph> definiert ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:showDataTip"><apiName>showDataTip</apiName><shortdesc>
      Wenn auf „true“ gesetzt, wird ein Datentipp mit dem aktuellen Wert der Schiebereglerleiste angezeigt, während der Benutzer das Steuerelement verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn auf <codeph>true</codeph> gesetzt, wird ein Datentipp mit dem aktuellen Wert der Schiebereglerleiste angezeigt, während der Benutzer das Steuerelement verwendet. Darüber hinaus muss das <codeph>dataTip</codeph>-Skinteil in der Skin definiert sein, damit ein Datentipp angezeigt wird. 
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:dataTipFormatFunction:get"><apiName>dataTipFormatFunction</apiName><shortdesc>
      Rückruffunktion, die den Datentipptext formatiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Rückruffunktion, die den Datentipptext formatiert. Die Funktion übernimmt eine einzige Zahl als Argument und gibt einen formatierten String zurück.
     
      <p>Die Funktion hat folgende Signatur:</p>
      <pre>
      funcName(value:Number):Object
      </pre>
     
      <p>Im folgenden Beispiel wird dem Datentipptext ein Dollarzeichen vorangestellt und der Text wird mit <codeph>dataTipPrecision</codeph> eines SliderBase-Steuerelements namens „slide“ formatiert: </p>
     
      <pre>
      import mx.formatters.NumberBase;
      function myDataTipFormatter(value:Number):Object { 
          var dataFormatter:NumberBase = new NumberBase(".", ",", ".", ""); 
          return   "$ " + dataFormatter.formatPrecision(String(value), slide.dataTipPrecision); 
      }
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:maximum:get"><apiName>maximum</apiName><shortdesc>
      Zahl, die den maximalen Wert angibt, der für „value“ möglich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die den maximalen Wert angibt, der für <codeph>value</codeph> möglich ist. Wenn die Werte für <codeph>minimum</codeph> und <codeph>value</codeph> größer sind als der Wert für <codeph>maximum</codeph>, werden sie auf den neuen Wert für <codeph>maximum</codeph> geändert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      Der Wert, den die Schiebereglerleiste erhält, wenn die Maustaste losgelassen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Wert, den die Schiebereglerleiste erhält, wenn die Maustaste losgelassen wird. Außerdem behält diese Eigenschaft die während einer Animation des Schiebereglers festgelegten temporären Werte bei, wenn der <codeph>liveDragging</codeph>-Stil „true“ ist. Der wirkliche Wert wird erst festgelegt, wenn die Animation beendet ist.
     
      <p>Ist der <codeph>liveDragging</codeph>-Stil „false“, wird der Wert des Schiebereglers nur festgelegt, wenn die Maustaste losgelassen wird. Der Wert wird beim Ziehen des Schiebereglers nicht aktualisiert.</p>
     
      <p>Diese Eigenschaft wird beim Bewegen des Schiebereglers aktualisiert, selbst wenn <codeph>liveDragging</codeph> „false“ ist.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Skin"><apiName>Skin</apiName><shortdesc>
  Die Skinklasse definiert die Basisklasse für alle Skins, die von skinfähigen Komponenten verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.skins:IHighlightBitmapCaptureClient</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Skinklasse definiert die Basisklasse für alle Skins, die von skinfähigen Komponenten verwendet werden. Die SkinnableComponent-Klasse definiert die Basisklasse für skinfähige Komponenten.
 
  <p>Sie schreiben Skinklassen normalerweise in MXML, wie im folgenden Beispiel gezeigt: </p>
 
  <pre>  &lt;?xml version="1.0"?>
  &lt;Skin xmlns="http://ns.adobe.com/mxml/2009">
  
  &lt;Metadata>
          &lt;!-- Specify the component that uses this skin class. -->
          [HostComponent("my.component.MyComponent")]
      &lt;/Metadata> 
      
      &lt;states>
          &lt;!-- Specify the states controlled by this skin. -->
      &lt;/states>
          
      &lt;!-- Define skin. -->
  
  &lt;/Skin></pre>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.SkinnableComponent.xml"><linktext>mx.core.SkinnableComponent</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Skin:Skin"><apiName>Skin</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Skin:beginHighlightBitmapCapture"><apiName>beginHighlightBitmapCapture</apiName><shortdesc>
      Wird aufgerufen, bevor eine Bitmaperfassung für diese Skin durchgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die Komponente neu gezeichnet werden muss. Andernfalls wird <codeph>false</codeph> zurückgegeben.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Wird aufgerufen, bevor eine Bitmaperfassung für diese Skin durchgeführt wird. Die Standardimplementierung schließt die Elemente im <codeph>focusSkinExclusions</codeph>-Array aus.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Skin:endHighlightBitmapCapture"><apiName>endHighlightBitmapCapture</apiName><shortdesc>
      Wird aufgerufen, nachdem eine Bitmaperfassung für diese Skin durchgeführt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die Komponente neu gezeichnet werden muss. Andernfalls wird <codeph>false</codeph> zurückgegeben.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Wird aufgerufen, nachdem eine Bitmaperfassung für diese Skin durchgeführt wurde. Die Standardimplementierung stellt die Elemente im <codeph>focusSkinExclusions</codeph>-Array wieder her.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:Skin:focusSkinExclusions:get"><apiName>focusSkinExclusions</apiName><shortdesc>
      Liste von IDs der Elemente, die auszuschließen sind, wenn der Fokusring wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Liste von IDs der Elemente, die auszuschließen sind, wenn der Fokusring wiedergegeben wird. Nur Elemente vom Typ DisplayObject oder GraphicElement sollten ausgeschlossen werden. Elemente anderer Typen werden ignoriert.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownController"><apiName>DropDownController</apiName><shortdesc>
  Die DropDownController-Klasse verarbeitet die Interaktionen von Maus, Tastatur und Fokus für eine Ankerschaltfläche und die zugehörige Dropdownkomponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DropDownController-Klasse verarbeitet die Interaktionen von Maus, Tastatur und Fokus für eine Ankerschaltfläche und die zugehörige Dropdownkomponente. Diese Klasse wird von den Dropdownkomponenten (wie DropDownList) verwendet, um das Öffnen und Schließen der Dropdownkomponente aufgrund von Benutzerinteraktionen zu verarbeiten.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DropDownController:DropDownController"><apiName>DropDownController</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownController:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Schließt die Dropdownkomponente und löst ein DropDownEvent.CLOSE-Ereignis aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>Wenn der Wert <codeph>true</codeph> entspricht, wird das ausgewählte Datenelement übernommen. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Schließt die Dropdownkomponente und löst ein <codeph>DropDownEvent.CLOSE</codeph>-Ereignis aus.  
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Öffnet die Dropdownkomponente und löst ein DropdownEvent.OPEN-Ereignis aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Öffnet die Dropdownkomponente und löst ein <codeph>DropdownEvent.OPEN</codeph>-Ereignis aus. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processFocusOut"><apiName>processFocusOut</apiName><shortdesc>
      Schließt die Dropdownkomponente, wenn sie nicht mehr im Fokus ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Das Ereignisobjekt für das <codeph>FOCUS_OUT</codeph>-Ereignis.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Schließt die Dropdownkomponente, wenn sie nicht mehr im Fokus ist.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processKeyDown"><apiName>processKeyDown</apiName><shortdesc>
      Verarbeitet die Benutzerinteraktionen auf der Tastatur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn der <codeph>keyCode</codeph> erkannt und verarbeitet wurde.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Das Ereignisobjekt aus dem Tastaturereignis.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Verarbeitet die Benutzerinteraktionen auf der Tastatur.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownController:hitAreaAdditions"><apiName>hitAreaAdditions</apiName><shortdesc>
      Eine Liste von Anzeigeobjekten, die als Teil des aktiven Bereichs der Dropdownliste betrachtet werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Vector$flash.display:DisplayObject"/></apiValueDef><apiDesc>
      Eine Liste von Anzeigeobjekten, die als Teil des aktiven Bereichs der Dropdownliste betrachtet werden sollen. Durch Mausklicks auf als eingeschlossen aufgelisteten Komponenten wird die Dropdownliste nicht automatisch geschlossen.
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:closeOnResize:get"><apiName>closeOnResize</apiName><shortdesc>
      Bei „true“ wird die Dropdownliste geschlossen, wenn die Größe des Systemmanagers geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> wird die Dropdownliste geschlossen, wenn die Größe des Systemmanagers geändert wird. Bei Mobilanwendungen können Sie diese Eigenschaft auf <codeph>false</codeph> festlegen, sodass die Dropdownliste geöffnet bleibt, wenn die Seitenausrichtung geändert wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      Enthält „true“, wenn die Dropdownkomponente geöffnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn die Dropdownkomponente geöffnet ist.   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:rollOverOpenDelay:get"><apiName>rollOverOpenDelay</apiName><shortdesc>
      Gibt die Verzögerung in Millisekunden vor dem Öffnen der Dropdownkomponente an, wenn Rollover über die Ankerschaltfläche erfolgte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
             
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die Verzögerung in Millisekunden vor dem Öffnen der Dropdownkomponente an, wenn Rollover über die Ankerschaltfläche erfolgte. Bei der Einstellung <codeph>NaN</codeph> wird die Dropdownkomponente durch ein Klicken und nicht Rollover geöffnet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:openButton:set"><apiName>openButton</apiName><shortdesc>
      Ein Verweis auf den openButton-Skinteil der Dropdownkomponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:ButtonBase</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf den <codeph>openButton</codeph>-Skinteil der Dropdownkomponente. 
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:systemManager:set"><apiName>systemManager</apiName><shortdesc>
      Ein Verweis auf den zur Mausverfolgung verwendeten SystemManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.managers:ISystemManager"/></apiValueDef><apiDesc>
      Ein Verweis auf den zur Mausverfolgung verwendeten <codeph>SystemManager</codeph>. Wenn keiner angegeben wird, verwendet die Steuerung den mit dem openButton verknüpften systemManager.
             
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
  Die ButtonBarHorizontalLayout-Klasse ist ein Layout, das speziell für Spark-ButtonBar-Skins konzipiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ButtonBarHorizontalLayout-Klasse ist ein Layout, das speziell für Spark-ButtonBar-Skins konzipiert wurde. Das Layout ordnet die untergeordneten Elemente horizontal von links nach rechts an.
  
  <p>Das Layout versucht, alle untergeordneten Elemente in ihrer bevorzugten Größe zu erstellen. Wenn genug Platz vorhanden ist, wird jedes untergeordnete Element auf die bevorzugte Größe geändert und überschüssiger Platz gleichmäßig auf die untergeordneten Elemente verteilt.</p>
 
  <p>Wenn nicht genug Platz vorhanden ist, alle untergeordneten Elemente auf die bevorzugte Größe zu ändern, wird den untergeordneten Elementen, die kleiner als die durchschnittliche Breite sind, die bevorzugte Größe zugewiesen und werden die anderen Elemente entsprechend verkleinert.</p>
 
  <p>Alle untergeordneten Elemente werden auf die Höhe des übergeordneten Elements gesetzt.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ButtonBarHorizontalLayout:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarHorizontalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      Der horizontale Raum zwischen Layoutelementen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der horizontale Raum zwischen Layoutelementen. Beachten Sie, dass die Lücke nur zwischen Layoutelementen angewendet wird. Wenn also nur ein Element vorhanden ist, wirkt sich die Lücke nicht auf das Layout aus.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
  Die ListItemDragProxy-Klasse definiert den Standard-Ziehproxy, der beim Ziehen aus einem Spark-List-basierten Steuerelement verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ListItemDragProxy-Klasse definiert den Standard-Ziehproxy, der beim Ziehen aus einem Spark-List-basierten Steuerelement verwendet wird.
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ListItemDragProxy:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionState"><apiName>InteractionState</apiName><shortdesc>
      Werte für die state-Eigenschaft der InteractionStateDetector-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Werte für die <codeph>state</codeph>-Eigenschaft der InteractionStateDetector-Klasse.
           </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionStateDetector"><linktext>spark.components.supportClasses.InteractionStateDetector</linktext></link></related-links><apiValue id="spark.components.supportClasses:InteractionState:DOWN"><apiName>DOWN</apiName><shortdesc>
          Die Komponente muss sich im down-Status befinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Die Komponente muss sich im down-Status befinden.
          
          <p>Der Benutzer klickt zurzeit auf diese Komponente.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:OVER"><apiName>OVER</apiName><shortdesc>
          Die Komponente muss sich im over-Status befinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>over</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Die Komponente muss sich im over-Status befinden.
          
          <p>Der Benutzer zeigt zurzeit mit der Maus auf diese Komponente.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:UP"><apiName>UP</apiName><shortdesc>
          Die Komponente muss sich im up-Status befinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Die Komponente muss sich im up-Status befinden.
          
          <p>Es wird keine Interaktion für diese Komponente ausgeführt.</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
  Die ButtonBarBase-Klasse definiert das gewöhnliche Verhalten von ButtonBar, TabBar und ähnlichen Unterklassen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBarBase" playerVersion="Flash10" type="String">
<description>
  Richtung des Symbols in Relation zur Beschriftung. Gültige MXML-Werte sind <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> und <codeph>top</codeph>.
 
  <p>In ActionScript können Sie folgende Konstanten verwenden, um diese Eigenschaft festzulegen: <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> und <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBarBase/&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ButtonBarBase-Klasse definiert das gewöhnliche Verhalten von ButtonBar, TabBar und ähnlichen Unterklassen. Diese Klasse fügt keine neue API hinzu, verbessert jedoch das Auswahl-, Tastaturfokus- und Tastaturnavigationsverhalten der Elementrendererelemente des Steuerelements. Diese Klasse ist nicht zur direkten Instanziierung vorgesehen.
 
  <p>Durch Klicken auf einen Elementrenderer wird dieser ausgewählt. Dies geschieht durch Festlegen der Eigenschaften <codeph>selectedIndex</codeph> und <codeph>caretIndex</codeph>. Wenn <codeph>requireSelection</codeph> den Wert <codeph>false</codeph> hat, wird die Auswahl durch erneutes Klicken wieder aufgehoben. Wenn der Datenprovider ein <codeph>ISelectableList</codeph>-Objekt ist, wird auch sein <codeph>selectedIndex</codeph> festgelegt.</p> 
 
  <p>Pfeiltastenereignisse werden durch Einstellen von <codeph>caretIndex</codeph> verarbeitet. Wenn <codeph>arrowKeysWrapFocus</codeph> <codeph>true</codeph> ist, wird der <codeph>caretIndex</codeph> umbrochen. Durch Drücken der Leertaste wird der ItemRenderer am <codeph>caretIndex</codeph> ausgewählt.</p>
 
  <p>Die <codeph>showsCaret</codeph>-Eigenschaft des ItemRenderer am <codeph>caretIndex</codeph> wird auf <codeph>true</codeph> gesetzt, wenn das ButtonBarBase-Objekt den Fokus hat und <codeph>caretIndex</codeph> aufgrund einer Tastatureingabe erreicht wurde. Wurde <codeph>caretIndex</codeph> als Nebeneffekt der Reaktion auf einen Mausklick gesetzt, dann wird <codeph>showsCaret</codeph> nicht gesetzt.</p>
 
  <p>Die <codeph>allowDeselection</codeph>-Eigenschaft der <codeph>ButtonBarButton</codeph>-Elementrenderer wird auf <codeph>!requireSelection</codeph> gesetzt.</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarBase:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      <p>Initialisiert die Tabulatortastenverarbeitung: Diese Komponente erhält den Fokus, wenn sie mit der Tabulatortaste angesteuert wird, nicht jedoch, wenn mit der Maus auf sie geklickt wird. Das Ansteuern untergeordneter Elemente mit der Tabulatortaste ist deaktiviert.</p> 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarBase:iconField:get"><apiName>iconField</apiName><shortdesc>
      Der Name des Felds in den Datenproviderelementen zur Anzeige des Symbols.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds in den Datenproviderelementen zur Anzeige des Symbols. Die <codeph>iconFunction</codeph>-Eigenschaft überschreibt diese Eigenschaft.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBarBase:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seines Symbols ausgeführt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seines Symbols ausgeführt werden soll. Die <codeph>iconFunction</codeph>-Eigenschaft überschreibt die <codeph>iconField</codeph>-Eigenschaft.
     
      <p>Sie können eine <codeph>iconFunction</codeph> verwenden, die die entsprechenden Felder sucht und ein anzeigbares Symbol zurückgibt. </p>
     
      <p>Die Symbolfunktion übernimmt ein einzelnes Argument, nämlich das Element im Datenprovider, und gibt eine gültige BitmapImage-Quelle zurück.</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListBase"><apiName>ListBase</apiName><shortdesc>
  Die ListBase-Klasse ist die Basisklasse für alle Komponenten, die die Auswahl unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ListBase
 
    <strong>Properties</strong>
    arrowKeysWrapFocus="false"
    labelField="label"
    labelFunction="null"
    requireSelection="false"
    selectedIndex="-1"
    selectedItem="undefined"
    useVirtualLayout="false"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    change="<i>No default</i>"
    changing="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableDataContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ListBase-Klasse ist die Basisklasse für alle Komponenten, die die Auswahl unterstützen. 
 
  <p><b>Hinweis:</b> Die listenbasierten Spark-Steuerelemente (die Spark ListBase-Klasse und ihre Unterklassen wie ButtonBar, ComboBox, DropDownList, List und TabBar) unterstützen nicht die Verwendung der BasicLayout-Klasse als Wert der <codeph>layout</codeph>-Eigenschaft. Verwenden Sie BasicLayout nicht für listenbasierte Spark-Steuerelemente.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Wird ausgelöst, nachdem sich der Fokus geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem sich der Fokus geändert hat.  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, nachdem sich die Auswahl geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem sich die Auswahl geändert hat. Dieses Ereignis wird ausgelöst, wenn der Benutzer mit dem Steuerelement interagiert.
 
  <p>Wenn Sie den Wert der <codeph>selectedIndex</codeph>- oder <codeph>selectedItem</codeph>-Eigenschaften programmgesteuert ändern, löst das Steuerelement das <codeph>change</codeph>-Ereignis nicht aus. Stattdessen löst es das <codeph>valueCommit</codeph>-Ereignis aus.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Auswahl ändern wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die Auswahl ändern wird. Das Aufrufen der <codeph>preventDefault()</codeph>-Methode im Ereignis verhindert, dass sich die Auswahl ändert.
  
  <p>Dieses Ereignis wird ausgelöst, wenn der Benutzer mit dem Steuerelement interagiert. Wenn Sie den Wert der <codeph>selectedIndex</codeph>- oder <codeph>selectedItem</codeph>-Eigenschaften programmgesteuert ändern, löst das Steuerelement das <codeph>changing</codeph>-Ereignis nicht aus. Stattdessen löst es das <codeph>valueCommit</codeph>-Ereignis aus.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  Wird bei Rollout aus einem Element des Steuerelements ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird bei Rollout aus einem Element des Steuerelements ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  Wird bei Rollover über ein Element des Steuerelements ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird bei Rollover über ein Element des Steuerelements ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ListBase:ListBase"><apiName>ListBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ListBase:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      Passt die ausgewählte Indexposition so an, dass Elemente berücksichtigt werden, die zu dieser Komponente hinzugefügt bzw. daraus entfernt wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Die neue Indexposition.
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph>, wenn ein Element der Komponente hinzugefügt wurde, und <codeph>false</codeph>, wenn ein Element entfernt wurde.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die ausgewählte Indexposition so an, dass Elemente berücksichtigt werden, die zu dieser Komponente hinzugefügt bzw. daraus entfernt wurden. Durch diese Methode wird der ausgewählte Indexpositionswert angepasst und ein <codeph>valueCommit</codeph>-Ereignis ausgelöst. Sie löst kein <codeph>change</codeph>-Ereignis aus, da die Änderung als direktes Ergebnis der Benutzerinteraktion aufgetreten ist. Weiterhin wird kein <codeph>changing</codeph>-Ereignis ausgelöst und keine Aufhebung der Auswahl ermöglicht. Sie ruft auch nicht die <codeph>itemSelected()</codeph>-Methode auf, da dasselbe Element ausgewählt ist; es hat sich nur die Indexposition des Elements geändert.
     
      <p>Ein <codeph>valueCommit</codeph>-Ereignis wird beim nächsten Aufruf der <codeph>commitProperties()</codeph>-Methode ausgelöst.</p>
     
      <p>Das <codeph>change</codeph>- und <codeph>changing</codeph>-Ereignis wird nicht gesendet, wenn der <codeph>selectedIndex</codeph> angepasst wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemAdded"><apiName>itemAdded</apiName><shortdesc>
      Wird aufgerufen, wenn ein Element zu dieser Komponente hinzugefügt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des hinzugefügten Elements. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn ein Element zu dieser Komponente hinzugefügt wurde. Eigenschaften für Auswahl und Einfügezeichen werden entsprechend angepasst. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemRemoved"><apiName>itemRemoved</apiName><shortdesc>
      Wird aufgerufen, wenn ein Element von dieser Komponente entfernt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des entfernten Elements. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn ein Element von dieser Komponente entfernt wurde. Eigenschaften für Auswahl und Einfügezeichen werden entsprechend angepasst. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemSelected"><apiName>itemSelected</apiName><shortdesc>
      Wird aufgerufen, wenn ein Element ausgewählt bzw. nicht ausgewählt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Elementindexposition, die ausgewählt wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn ein Element ausgewählt ist, und <codeph>false</codeph>, wenn es nicht ausgewählt ist.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn ein Element ausgewählt bzw. nicht ausgewählt ist. Unterklassen müssen diese Methode überschreiben, um die Auswahl anzuzeigen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemShowingCaret"><apiName>itemShowingCaret</apiName><shortdesc>
      Wird aufgerufen, wenn sich ein Element im Einfügezeichenstatus bzw. nicht in diesem Status befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Elementindexposition, die in den Einfügezeichenstatus versetzt wurde. 
     
      </apiDesc></apiParam><apiParam><apiItemName>showsCaret</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn sich das Element im Einfügezeichenstatus befindet, andernfalls <codeph>false</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn sich ein Element im Einfügezeichenstatus bzw. nicht in diesem Status befindet. Unterklassen müssen diese Methode überschreiben, um das Einfügezeichen anzuzeigen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Bei einem Datenelement wird der richtige von einem Renderer anzuzeigende Text angezeigt, wobei die labelField- und labelFunction-Eigenschaften berücksichtigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>String, der den anzuzeigenden Text für das Datenelement im Renderer darstellt. 
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Ein Datenelement 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bei einem Datenelement wird der richtige von einem Renderer anzuzeigende Text angezeigt, wobei die <codeph>labelField</codeph>- und <codeph>labelFunction</codeph>-Eigenschaften berücksichtigt werden. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ListBase:NO_SELECTION"><apiName>NO_SELECTION</apiName><shortdesc>
      Statistische Konstante, die dem Wert „Keine Auswahl“ entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Statistische Konstante, die dem Wert „Keine Auswahl“ entspricht.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:arrowKeysWrapFocus"><apiName>arrowKeysWrapFocus</apiName><shortdesc>
      Beim Wert „true“ ist durch die Pfeiltasten ein Navigieren innerhalb der Komponentenumbrüche möglich, wenn eines der Enden erreicht ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Beim Wert <codeph>true</codeph> ist durch die Pfeiltasten ein Navigieren innerhalb der Komponentenumbrüche möglich, wenn eines der Enden erreicht ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      Das Element, das derzeit im Fokus ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Element, das derzeit im Fokus ist. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelField:get"><apiName>labelField</apiName><shortdesc>
      Der Name des Felds im Datenproviderelement, das als Beschriftung angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label" 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds im Datenproviderelement, das als Beschriftung angezeigt werden soll. Wenn labelField auf einen leeren String ("") festgelegt wurde, stellt kein Feld im Datenprovider Beschriftung dar. Die <codeph>labelFunction</codeph>-Eigenschaft überschreibt diese Eigenschaft.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Eine vom Benutzer definierte Funktion zur Bestimmung der Bezeichnungen einzelner Elemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine vom Benutzer bereitgestellte Funktion, die für jedes Element zum Bestimmen seiner Bezeichnung ausgeführt werden soll. Die <codeph>labelFunction</codeph>-Eigenschaft überschreibt die <codeph>labelField</codeph>-Eigenschaft.
     
      <p>Sie können eine <codeph>labelFunction</codeph> verwenden, die die entsprechenden Felder findet und einen anzeigbaren String zurückgibt. Die <codeph>labelFunction</codeph> ist für die Verarbeitung von Formatierungen und lokalisierten Texten sinnvoll. </p>
     
      <p>Die „labelFunction“ übernimmt ein einzelnes Argument, nämlich das Element im Datenprovider, und gibt einen String zurück.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      Wenn der Wert „true“ ist, muss ein Datenelement immer im Steuerelement ausgewählt sein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn der Wert <codeph>true</codeph> ist, muss ein Datenelement immer im Steuerelement ausgewählt sein. Wenn der Wert <codeph>true</codeph> ist, wird die <codeph>selectedIndex</codeph>-Eigenschaft immer auf einen Wert zwischen 0 und (<codeph>dataProvider.length</codeph> - 1) eingestellt.
     
     <p>Der Standardwert ist für die meisten Unterklassen <codeph>false</codeph> außer für TabBar. In diesem Fall ist der Standardwert <codeph>true</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Die 0-basierte Indexposition des ausgewählten Elements oder -1, wenn kein Element ausgewählt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die 0-basierte Indexposition des ausgewählten Elements oder -1, wenn kein Element ausgewählt ist. Durch Festlegen der <codeph>selectedIndex</codeph>-Eigenschaft wird die Auswahl des derzeit ausgewählten Elements aufgehoben und das Datenelement an der angegebenen Indexposition ausgewählt.
     
      <p>Der Wert liegt immer zwischen -1 und (<codeph>dataProvider.length</codeph> - 1). Wenn Elemente an einer niedrigeren Indexposition als <codeph>selectedIndex</codeph> aus der Komponente entfernt werden, wird die ausgewählte Indexposition entsprechend nach unten angepasst.</p>
     
      <p>Wenn das ausgewählte Element entfernt wird, wird die ausgewählte Indexposition auf Folgendes gesetzt:</p>
     
      <ul>
        <li>Wert -1, wenn <codeph>requireSelection</codeph> = <codeph>false</codeph> oder keine Elemente mehr übrig sind.</li>
        <li>Wert 0, wenn <codeph>requireSelection</codeph> = <codeph>true</codeph> und noch mindestens ein Element übrig ist.</li>
      </ul>
     
      <p>Wenn der Benutzer die <codeph>selectedIndex</codeph>-Eigenschaft durch Interaktion mit dem Steuerelement ändert, löst dieses die <codeph>change</codeph>- und <codeph>changing</codeph>-Ereignisse aus. Wenn Sie den Wert der <codeph>selectedIndex</codeph>-Eigenschaft programmgesteuert ändern, löst sie das <codeph>valueCommit</codeph>-Ereignis aus.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Das Element, das aktuell ausgewählt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Element, das aktuell ausgewählt ist. Durch Einstellen dieser Eigenschaft wird die Auswahl des aktuell ausgewählten Elements aufgehoben und ein neu angegebenes Element ausgewählt.
     
      <p>Das Einstellen von <codeph>selectedItem</codeph> für ein Element, das sich nicht in dieser Komponente befindet, führt zu keiner Auswahl sowie dazu, dass <codeph>selectedItem</codeph> auf <codeph>undefined</codeph> eingestellt wird.</p>
     
      <p>Wenn das ausgewählte Element entfernt wird, wird das ausgewählte Element auf Folgendes eingestellt:</p>
     
      <ul>
        <li>Wert <codeph>undefined</codeph>, wenn <codeph>requireSelection</codeph> = <codeph>false</codeph> oder keine Elemente mehr übrig sind.</li>
        <li>Das erste Element, wenn <codeph>requireSelection</codeph> = <codeph>true</codeph> und mindestens noch ein Element übrig ist.</li>
      </ul>
     
      <p>Wenn der Benutzer die <codeph>selectedItem</codeph>-Eigenschaft durch Interaktion mit dem Steuerelement ändert, löst dieses die <codeph>change</codeph>- und <codeph>changing</codeph>-Ereignisse aus. Wenn Sie den Wert der <codeph>selectedItem</codeph>-Eigenschaft programmgesteuert ändern, löst sie das <codeph>valueCommit</codeph>-Ereignis aus.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      Definiert den Wert der useVirtualLayout-Eigenschaft des Layouts, das mit diesem Steuerelement verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert den Wert der <codeph>useVirtualLayout</codeph>-Eigenschaft des Layouts, das mit diesem Steuerelement verknüpft ist. Wenn das Layout anschließend ersetzt wird und der Wert dieser Eigenschaft <codeph>true</codeph> ist, wird die <codeph>useVirtualLayout</codeph>-Eigenschaft des neuen Layouts auf <codeph>true</codeph> gesetzt.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
  Eine helper-Klasse für Komponenten, die verwendet wird, um zu bestimmen, ob sie im Status „up“, „over“ oder „down“ sein müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine helper-Klasse für Komponenten, die verwendet wird, um zu bestimmen, ob sie im Status „up“, „over“ oder „down“ sein müssen.
 
  <p>Status ändert sich, wenn der Übergang die playTransitions wiedergibt.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionState"><linktext>spark.components.supportClasses.InteractionState</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:InteractionStateDetector_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird nach einer Änderung des Status ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einer Änderung des Status ausgelöst.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:InteractionStateDetector:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
      Konstruktor
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>component</apiItemName><apiType value="mx.core:UIComponent"/><apiDesc> Die UIComponent, in der der up/over/down-Status erkannt wird. Die Ereignislistener sind mit diesem Objekt verbunden.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:InteractionStateDetector:state:get"><apiName>state</apiName><shortdesc>
      Gibt den Status der Komponente zurück. Mögliche Werte sind: InteractionState.UP, InteractionState.DOWN, InteractionState.OVER.
        
      
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Gibt den Status der Komponente zurück.
     
      <p>Folgende Werte sind möglich:
        <ul>
          <li>InteractionState.UP</li>
          <li>InteractionState.DOWN</li>
          <li>InteractionState.OVER</li>
        </ul>
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.InteractionState;.xml"><linktext>spark.components.supportClasses.InteractionState;</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
  Das DropDownListBase-Steuerelement umfasst eine Dropdownliste, aus welcher der Benutzer einen einzelnen Wert auswählen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="selectedItems"/><Exclude kind="property" name="selectedIndices"/><Exclude kind="property" name="dropEnabled"/><Exclude kind="property" name="dragMoveEnabled"/><Exclude kind="property" name="dragEnabled"/><Exclude kind="property" name="allowMultipleSelection"/><skinStates><SkinState name="open" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10">
<description>
  Skinstatus für den geöffneten Status des DropDownListBase-Steuerelements.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Schlagschattens für diese Komponente.
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Der Radius der Ecken dieser Komponente.
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropDown" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      Ein Skinteil, der den Dropdownlisten-Bereich definiert. Bei geöffneter DropDownListBase wird durch Klicken auf eine beliebige Stelle außerhalb des dropDown-Skinteils die Dropdownliste geschlossen. 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down list area.</shortdesc></SkinPart><SkinPart name="openButton" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="true" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Ein Skinteil, der die Ankerschaltfläche definiert.  
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the anchor button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;s:DropDownListBase 
    <strong>Styles</strong>
    cornerRadius="4"
    dropShadowVisible="true"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das DropDownListBase-Steuerelement umfasst eine Dropdownliste, aus welcher der Benutzer einen einzelnen Wert auswählen kann. Seine Funktion ist der des SELECT-Elements in HTML sehr ähnlich.
 
  <p>Das DropDownListBase-Steuerelement besteht aus der Ankerschaltfläche sowie der Dropdownliste. Verwenden Sie die Ankerschaltfläche zum Öffnen und Schließen der Dropdownliste. 
  </p>
 
  <p>Bei geöffneter Dropdownliste:</p>
  <ul>
    <li>Durch Klicken auf die Ankerschaltfläche wird die Dropdownliste geschlossen und das derzeit ausgewählte Datenelement übernommen.</li>
    <li>Durch Klicken auf eine Stelle außerhalb der Dropdownliste wird die Dropdownliste geschlossen und das derzeit ausgewählte Datenelement übernommen.</li>
    <li>Durch Klicken auf ein Datenelement wird dieses Element ausgewählt und die Dropdownliste geschlossen.</li>
    <li>Wenn die <codeph>requireSelection</codeph>-Eigenschaft den Wert <codeph>false</codeph> aufweist, wird durch Klicken auf ein Datenelement bei gedrückter Strg-Taste die Auswahl des Elements aufgehoben und die Dropdownliste geschlossen.</li>
  </ul>
 
  </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer auf die Ankerschaltfläche klickt, um die Dropdownliste einzublenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer auf die Ankerschaltfläche klickt, um die Dropdownliste einzublenden. Außerdem wird es ausgelöst, wenn der Benutzer gleichzeitig die Strg- und Nach-unten-Taste drückt, um das dropDown zu öffnen.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Wird ausgelöst, wenn die Dropdownliste aus einem beliebigen Grund geschlossen wird. Beispiele: Der Benutzer wählt ein Element in der Dropdownliste aus. Der Benutzer klickt außerhalb der Dropdownliste. Der Benutzer klickt auf die Ankerschaltfläche, während die Dropdownliste angezeigt wird.
  
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Dropdownliste aus einem beliebigen Grund geschlossen wird. Beispiele:
  <ul>
      <li>Der Benutzer wählt ein Element in der Dropdownliste aus.</li>
      <li>Der Benutzer klickt außerhalb der Dropdownliste. </li>
      <li>Der Benutzer klickt auf die Ankerschaltfläche, während die Dropdownliste angezeigt wird.</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:DropDownListBase:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownListBase:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      Schließt die Dropdownliste und löst ein DropDownEvent.CLOSE-Ereignis aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>Wenn der Wert <codeph>true</codeph> entspricht, wird das ausgewählte Datenelement übernommen. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Schließt die Dropdownliste und löst ein <codeph>DropDownEvent.CLOSE</codeph>-Ereignis aus. 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownListBase:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      Öffnet die Dropdownliste und löst ein DropdownEvent.OPEN-Ereignis aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Öffnet die Dropdownliste und löst ein <codeph>DropdownEvent.OPEN</codeph>-Ereignis aus.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownListBase:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      Instanz der DropDownController-Klasse, das alle Benutzerinteraktionen mit Maus, Tastatur und Fokus verarbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:DropDownController</apiValueClassifier></apiValueDef><apiDesc>
      Instanz der DropDownController-Klasse, das alle Benutzerinteraktionen mit Maus, Tastatur und Fokus verarbeitet. Flex ruft die <codeph>initializeDropDownController()</codeph>-Methode auf, nachdem die DropDownController-Instanz im Konstruktor erstellt wurde.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownListBase:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
  Die Basisklasse für skinfähige Komponenten, wie etwa Spark TextInput und TextArea, die eine Instanz von IEditableText in ihrer Skin enthalten, um die Anzeige von Text, Bildlauf, Auswahl und Bearbeitung zu ermöglichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  Disabled-Status mit Eingabeaufforderung.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  Normal-Status mit Eingabeaufforderung.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  Disabled-Status.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  Normal-Status.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="yes" name="showPromptWhenFocused" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2" theme="mobile" type="Boolean">
<description>
  Steuert die Sichtbarkeit der Eingabeaufforderung für diese Komponente, wenn sie leer und im Fokus ist.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Fokusrings dieser Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Rahmens dieser Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Die Farbe des Rahmens dieser Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Rahmens für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert, jedoch nicht im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente deaktiviert ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert und im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.5" type="Object">
<description>
  Legt den beim Blocksatz verwendeten Abstand zwischen Wörtern fest. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Blendet Leerraum aus oder behält ihn bei, wenn Text in einem TextFlow importiert wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt die Gradzahl zum Drehen dieses Texts.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Offset der ersten Textzeile links vom Container.
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textIndent“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Gibt die Tabulatoren an, die dem Absatz zugewiesen sind.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den der obere Absatzrand eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der vor dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der hinter dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den die obere Absatzrandkante eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Darstellung von Einträgen in Listen.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Platzierung von Markern relativ zum Listeneintrag.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Legt einen automatischen Einzug für den Beginn von Listenrändern fest, wenn der Auffüllwert der Liste auf dieser Seite <codeph>auto</codeph> ist.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Gibt das Zeilenabstandsmodell an, das eine Kombination aus Zeilenabstandsbasis und Zeilenabstandsrichtung ist.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Gibt die Grundlinienposition der ersten Linie im Container an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Steuert, wie der Text bei einem Float umbricht.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Steuert, an welcher Stelle Zeilen umbrochen werden können, wenn umbrochener Text in mehrere Zeilen umbrochen wird. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Gibt eine vertikale oder horizontale Abfolge der Zeilenplatzierung an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Vertikale Ausrichtung oder Abstände.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Der obere Versatz in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Der rechte Einzug in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Der linke Einzug in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  Der untere Versatz in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  Steuert den Zeilenumbruch innerhalb des Containers.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style></styles><skinParts><SkinPart name="promptDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Label oder anderer IDisplayText, der in allen Skins vorhanden sein kann, die dieser Komponente zugewiesen sind.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The Label or other IDisplayText that might be present
      in any skin assigned to this component.</shortdesc></SkinPart><SkinPart name="textDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IEditableText">
<description>
      Der IEditableText, der in allen Skins verfügbar sein kann, die dieser Komponente zugewiesen sind. Dieser ist RichEditableText für das Spark-Design und StyleableStageText für das Mobile-Design.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The IEditableText that may be present
      in any skin assigned to this component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:SkinnableTextBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnableTextBase
    autoCapitalize="none"  <b>[Mobile theme only]</b>
    autoCorrect="true"  <b>[Mobile theme only]</b>
    displayAsPassword="false"
    editable="true"
    imeMode="null"  <b>[Spark theme only]</b>
    maxChars="0"
    prompt="null"
    restrict="null"
    returnLabelKey="default"  <b>[Mobile theme only]</b>
    selectable="true"
    selectionHighlighting="whenFocused"  <b>[Spark theme only]</b>
    softKeyBoardType="default"  <b>[Mobile theme only]</b>
    text=""
    typicalText="null"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    contentBackgroundAlpha="1.0" 
    contentBackgroundColor="0xFFFFFF"
    focusAlpha="0.55"
    focusColor="0x70B2EE"
    showPromptWhenFocused="true"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"  <b>[Spark theme only]</b>
    selectionChange="<i>No default</i>"  <b>[Spark theme only]</b>
    textInput="<i>No default</i>"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>spark.core:ISoftKeyboardHintClient</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Basisklasse für skinfähige Komponenten, wie etwa Spark TextInput und TextArea, die eine Instanz von IEditableText in ihrer Skin enthalten, um die Anzeige von Text, Bildlauf, Auswahl und Bearbeitung zu ermöglichen. Standardmäßig ist IEditableText für das Spark-Design RichEditableText und für das Mobile-Design StyleableStageText. StyleableTextField ist auch für das Mobile-Design verfügbar.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  Wird ausgelöst, wenn ein Tastenanschlag für die Komponente ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Tastenanschlag für die Komponente ausgeführt wird.
   <p><b>Für das Mobile-Design wird es nicht ausgelöst.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, nachdem ein Bearbeitungsvorgang eines Benutzers abgeschlossen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem ein Bearbeitungsvorgang eines Benutzers abgeschlossen ist.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  Wird ausgelöst, bevor ein Bearbeitungsvorgang eines Benutzers auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, bevor ein Bearbeitungsvorgang eines Benutzers auftritt. Sie können den Vorgang ändern oder das Ereignis abbrechen, damit der Vorgang nicht verarbeitet wird.
   <p><b>Für das Mobile-Design wird es nicht ausgelöst.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  Wird ausgelöst, nachdem sich die Eigenschaften „selectionAnchorPosition“ und/oder „selectionActivePosition“ geändert haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem sich die Eigenschaften <codeph>selectionAnchorPosition</codeph> und/oder <codeph>selectionActivePosition</codeph> geändert haben.
   <p><b>Für das Mobile-Design wird es nicht ausgelöst.</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:SkinnableTextBase:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableTextBase:appendText"><apiName>appendText</apiName><shortdesc conref="spark.core.IEditableText#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Der anzuhängende Text.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#appendText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/appendText()"><linktext>spark.components.RichEditableText.appendText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/appendText()"><linktext>spark.components.supportClasses.StyleableStageText.appendText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:insertText"><apiName>insertText</apiName><shortdesc conref="spark.core.IEditableText#insertText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Der einzufügende Text.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#insertText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/insertText()"><linktext>spark.components.RichEditableText.insertText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/insertText()"><linktext>spark.components.supportClasses.StyleableStageText.insertText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.core.IEditableText#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectAll()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectAll()"><linktext>spark.components.RichEditableText.selectAll()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectAll()"><linktext>spark.components.supportClasses.StyleableStageText.selectAll()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectRange"><apiName>selectRange</apiName><shortdesc conref="spark.core.IEditableText#selectRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>Die Zeichenposition, die das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl erweitert wird.
           </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>Die Zeichenposition, die das Ende der Auswahl angibt. Wird verschoben, wenn die Auswahl erweitert wird.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectRange()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectRange()"><linktext>spark.components.RichEditableText.selectRange()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectRange()"><linktext>spark.components.supportClasses.StyleableStageText.selectRange()</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCapitalize:get"><apiName>autoCapitalize</apiName><shortdesc>
      Hinweis darauf, welches Großschreibungsverhalten virtuelle Tastaturen verwenden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Hinweis darauf, welches Großschreibungsverhalten virtuelle Tastaturen verwenden sollen. 
           <p>Unterstützte Werte sind definiert in flash.text.AutoCapitalize:</p>
     
      <ul>
          <li><codeph>"none"</codeph> – keine automatische Großschreibung</li>
          <li><codeph>"word"</codeph> – Großschreibung des ersten Buchstaben nach einem Leer- oder Satzzeichen</li>
          <li><codeph>"sentence"</codeph> – Großschreibung des ersten Buchstabens nach einem Punkt</li>
          <li><codeph>"all"</codeph> – Großschreibung aller Buchstaben</li>
      </ul>
           <p><b>Dies wird im Spark-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AutoCapitalize.xml"><linktext>flash.text.AutoCapitalize</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCorrect:get"><apiName>autoCorrect</apiName><shortdesc>
      Hinweis darauf,ob eine virtuelle Tastatur die Auto-Korrektur verwenden soll, wenn verfügbar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hinweis darauf,ob eine virtuelle Tastatur die Auto-Korrektur verwenden soll, wenn verfügbar.
      <p><b>Dies wird im Spark-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:editable:get"><apiName>editable</apiName><shortdesc>
      Gibt an, ob der Text bearbeitbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob der Text bearbeitbar ist.
     
      <p><b>Spark-Design: siehe spark.components.RichEditableText.editable</b></p>
           <p><b>Mobile-Design: siehe spark.components.supportClasses.StyleableTextField.letterSpacing</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/editable"><linktext>spark.components.RichEditableText.editable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/editable"><linktext>spark.components.supportClasses.StyleableStageText.editable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.
     
      <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/enableIME"><linktext>spark.components.RichEditableText.enableIME</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Gibt den Modus des Eingabemethodeneditors (IME) an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt den Modus des Eingabemethodeneditors (IME) an.
     
      <p><b>Spark-Design: siehe spark.components.RichEditableText.imeMode</b></p>
           <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/imeMode"><linktext>spark.components.RichEditableText.imeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:prompt:get"><apiName>prompt</apiName><shortdesc>
      Anzuzeigender Text, wenn die eigentliche Texteigenschaft ein leerer String ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Anzuzeigender Text, wenn die eigentliche Texteigenschaft ein leerer String ist.
     
      <p>Text für die Eingabeaufforderung erscheint, wenn das Text-Steuerelement zuerst erstellt wird. Text für die Eingabeaufforderung wird ausgeblendet, wenn das Steuerelement den Fokus erhält oder wenn die<codeph>text</codeph>-Eigenschaft des Steuerelements ein nicht-leerer String ist. Text für die Eingabeaufforderung wird wieder eingeblendet, wenn das Steuerelement den Fokus verliert, aber nur, wenn kein Text eingegeben wurde (wenn der Wert des Textfelds ein leerer String ist).</p>
      
      <p>Wenn der Benutzer Text eingibt, aber ihn später wieder löscht, wird bei den Steuerelementen der Text für die Eingabeaufforderung wieder eingeblendet, wenn das Steuerelement den Fokus verliert. Sie können des Weiteren Text für die Eingabeaufforderung programmgesteuert wieder einblenden, indem Sie die Texteigenschaft des Text-Steuerelements auf den leeren String einstellen.</p>
      
      <p>Sie können den Stil des Texts für die Eingabeaufforderung mit CSS ändern. Wenn das Steuerelement Text für die Eingabeaufforderung enthält und nicht deaktiviert ist, wird der Stil durch den <codeph>normalWithPrompt</codeph>-Pseudoselektor definiert. Wenn das Steuerelement deaktiviert ist, werden die von dem <codeph>disabledWithPrompt</codeph>-Pseudoselektor definierten Stile verwendet.</p>
      
      <p>Das folgende Beispiel-CSS ändert die Farbe des Texts der Eingabeaufforderung in Steuerelementen, denen SkinnableTextBase untergeordnet ist (das schließt Spark-TextInput und TextArea-Steuerelemente ein):
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|SkinnableTextBase:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:returnKeyLabel:get"><apiName>returnKeyLabel</apiName><shortdesc>
      Hinweis darauf, welche Beschriftung für die Eingabetaste auf der virtuellen Tastatur angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hinweis darauf, welche Beschriftung für die Eingabetaste auf der virtuellen Tastatur angezeigt werden soll.
           <p>Unterstützte Werte sind definiert in flash.text.AutoCapitalize:</p>
     
      <ul>
          <li><codeph>"default"</codeph> – Standardsymbol oder -beschriftungstext</li>
          <li><codeph>"done"</codeph> – Symbol oder Beschriftungstext gibt eine abgeschlossene Texteingabe an</li>
          <li><codeph>"go"</codeph> – Symbol oder Beschriftungstext gibt an, dass eine Aktion gestartet werden soll</li>
          <li><codeph>"next"</codeph> – Symbol oder Beschriftungstext gibt einen Wechsel zum nächsten Feld an</li>
          <li><codeph>"search"</codeph> – Symbol oder Beschriftungstext gibt an, dass der eingegebene Text gesucht werden soll</li>
      </ul>
           <p><b>Dies wird im Spark-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.ReturnKeyLabel.xml"><linktext>flash.text.ReturnKeyLabel</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectable:get"><apiName>selectable</apiName><shortdesc>
      Ein Flag, das anzeigt, ob der Inhalt auswählbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, das anzeigt, ob der Inhalt auswählbar ist. Auf einem Desktop kann ein Benutzer mit der Maus oder der Tastatur Inhalte auswählen, wenn das Steuerelement Tastaturfokus hat. Auf einem Multitouchgerät kann ein Benutzer mit den Fingern Text auswählen, sobald er sich im Auswahlmodus für die Textkomponente befindet.
     
      <p><b>Spark-Design: siehe spark.components.RichEditableText.selectable</b></p>
           <p><b>Mobile-Design: siehe spark.components.supportClasses.StyleableStageText.selectable</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectable"><linktext>spark.components.supportClasses.StyleableStageText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      Eine Zeichenposition, die relativ zum Anfang des Textstrings ist und das Auswahlende angibt, das verschoben wird, wenn die Auswahl mit den Pfeiltasten erweitert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Eine Zeichenposition, die relativ zum Anfang des <codeph>text</codeph>-Strings ist und das Auswahlende angibt, das verschoben wird, wenn die Auswahl mit den Pfeiltasten erweitert wird.
     
      <p><b>Spark-Design: siehe spark.components.RichEditableText.selectionActivePosition</b></p>
           <p><b>Mobile-Desigen: siehe spark.components.supportClasses.StyleableStageText.selectionActivePosition</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionActivePosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      Eine Zeichenposition, die relativ zum Anfang des Textstrings ist und das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl mit den Pfeiltasten erweitert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Eine Zeichenposition, die relativ zum Anfang des <codeph>text</codeph>-Strings ist und das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl mit den Pfeiltasten erweitert wird.
     
      <p><b>Spark-Design: siehe spark.components.RichEditableText.selectionAnchorPosition</b></p>
           <p><b>Mobile-Design: siehe spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionAnchorPosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
      Bestimmt, wann die Textauswahl hervorgehoben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Bestimmt, wann die Textauswahl hervorgehoben wird.
     
      <p><b>Spark-Design: siehe spark.components.RichEditableText.selectionHighlighting</b></p>
           <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionHighlighting"><linktext>spark.components.RichEditableText.selectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:softKeyboardType:get"><apiName>softKeyboardType</apiName><shortdesc>
      Hinweis darauf, welche Art von virtueller Tastatur für diese Komponente angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Hinweis darauf, welche Art von virtueller Tastatur für diese Komponente angezeigt werden soll.
           <p>Unterstützte Werte sind definiert in flash.text.SoftKeyboardType:</p>
     
      <ul>
          <li><codeph>"default"</codeph> – die Standardtastatur</li>
          <li><codeph>"punctuation"</codeph> – versetzt die Tastatur in den Interpunktions-/Symboleingabemodus</li>
          <li><codeph>"url"</codeph> – zeigt virtuelle Tasten für die URL-Eingabe an, z. B. eine eigene Taste für die Eingabe von „.com“.</li>
          <li><codeph>"number"</codeph> – versetzt die Tastatur in den Modus für den numerischen Ziffernblock</li>
          <li><codeph>"contact"</codeph> – versetzt die Tastatur in einen Modus, der für die Eingabe von Kontaktinformationen geeignet ist</li>
          <li><codeph>"email"</codeph> – versetzt die Tastatur in den Eingabemodus für E-Mail-Adressen, in dem es einfacher ist, das at-Zeichen oder „.com“ einzugeben.</li>
      </ul>
           <p><b>Dies wird im Spark-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.SoftKeyboardType.xml"><linktext>flash.text.SoftKeyboardType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:text:get"><apiName>text</apiName><shortdesc>
      Der von dieser Textkomponente angezeigte Text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der von dieser Textkomponente angezeigte Text.
     
      <p><b>Spark-Design: siehe spark.components.RichEditableText.text</b></p>
           <p><b>Mobile-Design: siehe spark.components.supportClasses.StyleableStageText#text</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/text"><linktext>spark.components.supportClasses.StyleableStageText.text</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:typicalText:get"><apiName>typicalText</apiName><shortdesc>
      Text zum Bestimmen der Standardbreite und -höhe des Steuerelements, ohne dass er angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Text zum Bestimmen der Standardbreite und -höhe des Steuerelements, ohne dass er angezeigt wird.
     
      <p><b>Spark-Design: siehe spark.components.RichEditableText.typicalText</b></p>
           <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/typicalText"><linktext>spark.components.RichEditableText.typicalText</linktext></link></related-links></apiValue></apiClassifier></apiPackage>