<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.globalization.supportClasses"><apiName>spark.globalization.supportClasses</apiName><apiDetail/><apiClassifier id="spark.globalization.supportClasses:CollatorBase"><apiName>CollatorBase</apiName><shortdesc>
     CollatorBase ist eine Basisklasse für die SortingCollator-Klasse und die MatchingCollator-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.globalization.supportClasses:GlobalizationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
     <codeph>CollatorBase</codeph> ist eine Basisklasse für die SortingCollator-Klasse und die MatchingCollator-Klasse.
          <p>Diese Klasse ist eine Wrapper-Klasse um die <codeph>flash.globalization.Collator</codeph>-Klasse. Deshalb wird der gebietsschemaspezifische Stringvergleich durch die <codeph>flash.globalization.Collator</codeph>-Klasse bereitgestellt. Durch Verwenden dieser Klasse als Basisklasse können die <codeph>SortingCollator</codeph>- und die <codeph>MatchingCollator</codeph>-Klasse in MXML-Deklarationen verwendet werden. In diesen Klassen wird der <codeph>locale</codeph>-Stil verwendet für die angeforderte Locale ID und hat Methoden und Eigenschaften, die bindbar sind.
     </p>
          <p>Die flash.globalization.Collator-Klasse verwendet das zugrundeliegende Betriebssystem für die Formatierungsfunktion und für das Bereitstellen der gebietsschemaspezifischen Daten. In einigen Betriebssystemen werden die flash.globalization-Klassen nicht unterstützt. In diesen Systemen stellt die Wrapper-Klasse Ersatzfunktionen für Stringvergleich bereit.</p>
          </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.globalization.Collator.xml"><linktext>flash.globalization.Collator</linktext></link></related-links><apiConstructor id="spark.globalization.supportClasses:CollatorBase:CollatorBase"><apiName>CollatorBase</apiName><shortdesc>
          Konstruiert ein neues CollatorBase-Objekt, um Stringvergleiche entsprechend den Konventionen eines angegebenen Gebietsschemas bereitzustellen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialMode</apiItemName><apiType value="String"/><apiDesc>Legt die anfänglichen Suchoptionen für zwei Verwendungsbeispiele fest: Sortieren und Übereinstimmen.
                   </apiDesc></apiParam></apiConstructorDef><apiDesc>
          Konstruiert ein neues CollatorBase-Objekt, um Stringvergleiche entsprechend den Konventionen eines angegebenen Gebietsschemas bereitzustellen.
                   <p>Der <codeph>initialMode</codeph>-Parameter legt die anfänglichen Suchoptionen für zwei Verwendungsbeispiele fest: Sortieren und Übereinstimmen. Er kann auf einen der beiden folgenden Werte festgelegt werden:</p>
                   <ul>
           <li><codeph>CollatorMode.SORTING</codeph>: legt Sortieroptionen für allgemeine linguistische Sortiervorgänge fest, zum Beispiel für das Sortieren einer Liste mit Textstrings, die einem Endbenutzer angezeigt werden. In diesem Modus werden Unterschiede in der Groß- und Kleinschreibung, Zeichen mit Akzent und andere gebietsschemaspezifische Unterschiede bei Stringvergleichen berücksichtigt.</li>
           <li><codeph>CollatorMode.MATCHING</codeph>: legt Sortieroptionen für allgemeine Zwecke fest, zum Beispiel, um festzustellen, ob zwei Strings gleich sind. In diesem Modus werden Unterschiede in der Groß- und Kleinschreibung, Zeichen mit Akzent usw. bei Stringvergleichen nicht berücksichtigt.</li>
          </ul>
                   <p>Weitere Informationen und Beispiele für die Verwendung dieser beiden Modi finden Sie in der Dokumentation für die <codeph>flash.globalization.Collator</codeph>-Klasse.</p>
                   <p>Das Gebietsschema für diese Klasse wird vom <codeph>Gebietsschema</codeph>-Stil bereitgestellt. Der <codeph>Gebietsschema</codeph>-Stil kann auf verschiedene Arten festgelegt werden:</p>
                   <ul>
              <li>Übernehmen des Stils von einer <codeph>UIComponent</codeph> durch Aufrufen der <codeph>addStyleClient</codeph>-Methode mit einer Instanz dieses Objekts als Parameter.</li>
              <li>Durch Verwenden der Klasse in einer MXML-Deklaration und Übernehmen des <codeph>Gebietsschemas</codeph> aus dem Dokument, das die Deklaration enthält.
          <pre>
          &lt;fx:Declarations>
                 &lt;s:SortingCollator id="collator" />
          &lt;/fx:Declarations>
          </pre>
          </li>
              <li>Durch Verwenden einer MXML-Deklaration und Festlegen des <codeph>locale</codeph>-Werts in der Liste mit Zuweisungen.
          <pre>
          &lt;fx:Declarations>
              &lt;s:SortingCollator id="collator_german" locale="de-DE" />
          &lt;/fx:Declarations>
          </pre>
          </li>
              <li>setStyle-Methode, z. B. <codeph>collator.setStyle("locale", "de-DE")</codeph> aufrufen</li>
          </ul>
                   <p>Wenn der <codeph>locale</codeph>-Stil nicht durch eine der obigen Techniken festgelegt wurde, legen die Methoden dieser Klasse, die vom <codeph>locale</codeph><codeph> abhängig sind, die lastOperationStatus-Eigenschaft auf spark.globalization.LastOperationStatus.LOCALE_UNDEFINED_ERROR fest</codeph>.</p>
                   </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.globalization.Collator.xml"><linktext>flash.globalization.Collator</linktext></link><link href="spark.globalization.xml#LastOperationStatus"><linktext>spark.globalization.LastOperationStatus</linktext></link></related-links></apiConstructor><apiOperation id="spark.globalization.supportClasses:CollatorBase:compare"><apiName>compare</apiName><shortdesc>
          Vergleicht zwei Strings und gibt einen Ganzzahlwert zurück, der angibt, ob der erste String kleiner, gleich oder größer als der zweite String ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Ganzzahlwert, der angibt, ob der erste String kleiner, gleich oder größer als der zweite String ist.
                 <ul>
                     <li>Ist der Rückgabewert negativ, so ist <codeph>string1</codeph> kleiner als <codeph>string2</codeph> oder <codeph>string2</codeph> ist gleich <codeph>null</codeph>.</li>
                     <li>Wenn der Rückgabewert null ist, ist <codeph>string1</codeph> gleich <codeph>string2</codeph>.</li>
                     <li>Ist der Rückgabewert positiv, so ist <codeph>string1</codeph> größer als <codeph>string2</codeph> oder <codeph>string1</codeph> ist gleich <codeph>null</codeph>.</li>
                 </ul>
                   </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>string1</apiItemName><apiType value="String"/><apiDesc>Erster Vergleichsstring.
          </apiDesc></apiParam><apiParam><apiItemName>string2</apiItemName><apiType value="String"/><apiDesc>Zweiter Vergleichsstring.
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Vergleicht zwei Strings und gibt einen Ganzzahlwert zurück, der angibt, ob der erste String kleiner, gleich oder größer als der zweite String ist. Der Vergleich verwendet die Sortierregeln für den <codeph>locale</codeph>-Stil, der gültig ist, wenn die Vergleichsmethode aufgerufen wird.
                   </apiDesc></apiOperationDetail><related-links><link href="spark.globalization.supportClasses.xml#CollatorBase/CollatorBase()"><linktext>CollatorBase()</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/equals()"><linktext>equals()</linktext></link></related-links></apiOperation><apiOperation id="spark.globalization.supportClasses:CollatorBase:equals"><apiName>equals</apiName><shortdesc>
          Vergleicht zwei Strings und gibt einen booleschen Wert zurück, der angibt, ob die Strings gleich sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein boolescher Wert, der angibt, ob die Strings gleich sind (<codeph>true</codeph>) oder ungleich sind (<codeph>false</codeph>).
                   </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>string1</apiItemName><apiType value="String"/><apiDesc>Erster Vergleichsstring.
          </apiDesc></apiParam><apiParam><apiItemName>string2</apiItemName><apiType value="String"/><apiDesc>Zweiter Vergleichsstring.
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Vergleicht zwei Strings und gibt einen booleschen Wert zurück, der angibt, ob die Strings gleich sind. Der Vergleich verwendet die Sortierregeln für die Gebietsschema-ID, die im<codeph>CollatorBase()</codeph>-Konstruktor angegeben wurde.
                   </apiDesc></apiOperationDetail><related-links><link href="spark.globalization.supportClasses.xml#CollatorBase/CollatorBase()"><linktext>CollatorBase()</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/compare"><linktext>compare</linktext></link></related-links></apiOperation><apiOperation id="spark.globalization.supportClasses:CollatorBase:getAvailableLocaleIDNames"><apiName>getAvailableLocaleIDNames</apiName><shortdesc>
          Listet alle Gebietsschema-ID-Namen auf, die von dieser Klasse unterstützt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Vektor von Strings, der alle von dieser Klasse und diesem Betriebssystem unterstützten Gebietsschema-ID-Namen enthält.
                   </apiDesc><apiType value="Vector$String"/></apiReturn></apiOperationDef><apiDesc>
          Listet alle Gebietsschema-ID-Namen auf, die von dieser Klasse unterstützt werden.
                   </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.globalization.supportClasses:CollatorBase:actualLocaleIDName:get"><apiName>actualLocaleIDName</apiName><shortdesc>
          
      Der Name der Gebietsschema-ID, die von diesem Klassenobjekt verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
          
      Der Name der Gebietsschema-ID, die von diesem Klassenobjekt verwendet wird. Dies ist das Gebietsschema, das verwendet wird, um auf Formatierungsdaten und Funktionen vom Betriebssystem aus zuzugreifen.
     
      <p>Wenn das vom <codeph>locale</codeph>-Stil festgelegte Gebietsschema nicht verfügbar ist, sind der Wert des <codeph>actualLocaleIDName</codeph> und der Wert des <codeph>locale</codeph>-Stils unterschiedlich. Er gibt das Ersatzgebietsschema an, das verwendet wird. Wenn für den locale-Stil <codeph>LocaleID.DEFAULT</codeph> festgelegt wurde, wird der Name des vom Betriebssystem des Benutzers festgelegten Gebietsschemas verwendet.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.globalization.Collator.actualLocaleIDName.xml"><linktext>flash.globalization.Collator.actualLocaleIDName</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/CollatorBase()"><linktext>CollatorBase()</linktext></link></related-links></apiValue><apiValue id="spark.globalization.supportClasses:CollatorBase:ignoreCase:get"><apiName>ignoreCase</apiName><shortdesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden identische Strings und Strings, die sich nur in der Groß- und Kleinschreibung der Buchstaben unterscheiden, als gleich bewertet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden identische Strings und Strings, die sich nur in der Groß- und Kleinschreibung der Buchstaben unterscheiden, als gleich bewertet.
                   <p>Der Standardwert ist <codeph>"true"</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.MATCHING</codeph> festgelegt ist. <codeph>"false"</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.SORTING</codeph> festgelegt ist.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.globalization.supportClasses.xml#CollatorBase/compare()"><linktext>compare()</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/equals()"><linktext>equals()</linktext></link></related-links></apiValue><apiValue id="spark.globalization.supportClasses:CollatorBase:ignoreCharacterWidth:get"><apiName>ignoreCharacterWidth</apiName><shortdesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden Formen voller Breite und halber Breite bei bestimmten chinesischen und japanischen Zeichen als gleich bewertet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden Formen voller Breite und halber Breite bei bestimmten chinesischen und japanischen Zeichen als gleich bewertet.
                   <p>Für die Kompatibilität mit vorhandenen Standards für chinesische und japanische Zeichensätze stellt Unicode Zeichencodes sowohl für Zeichen voller Breite als auch halber Breite bereit. Wenn zum Beispiel die <codeph>ignoreCharacterWidth</codeph>-Eigenschaft auf <codeph>true</codeph> gesetzt ist, gibt <codeph>compare("Ａｱ", "Aア")</codeph> den Wert <codeph> true</codeph> zurück.</p>
                   <p>Wenn die <codeph>ignoreCharacterWidth</codeph>-Eigenschaft auf <codeph>false</codeph> gesetzt ist, werden Zeichen voller Breite und halber Breite nicht als gleich angesehen.</p>
                   <p>Der Standardwert ist <codeph>true</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.MATCHING</codeph> festgelegt ist. <codeph>"false"</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.SORTING</codeph> festgelegt ist.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.globalization.supportClasses.xml#CollatorBase/compare()"><linktext>compare()</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/equals()"><linktext>equals()</linktext></link></related-links></apiValue><apiValue id="spark.globalization.supportClasses:CollatorBase:ignoreDiacritics:get"><apiName>ignoreDiacritics</apiName><shortdesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden Strings mit denselben Grundzeichen aber unterschiedlichen Akzenten oder anderen diakritischen Zeichen als gleich bewertet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden Strings mit denselben Grundzeichen aber unterschiedlichen Akzenten oder anderen diakritischen Zeichen als gleich bewertet. Zum Beispiel gibt <codeph>compare("coté", "côte")</codeph> den Wert <codeph>true</codeph> zurück, wenn die <codeph>ignoreDiacritics</codeph>-Eigenschaft den Wert <codeph>true</codeph> hat.
                   <p>Wenn die <codeph>ignoreDiacritics</codeph>-Eigenschaft den Wert <codeph>false</codeph> hat, werden Basiszeichen mit diakritischen Zeichen oder Akzenten nicht als gleich angesehen.</p>
                            <p>Der Standardwert ist <codeph>true</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.MATCHING</codeph> festgelegt ist. <codeph>"false"</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.SORTING</codeph> festgelegt ist.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.globalization.supportClasses.xml#CollatorBase/compare()"><linktext>compare()</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/equals()"><linktext>equals()</linktext></link></related-links></apiValue><apiValue id="spark.globalization.supportClasses:CollatorBase:ignoreKanaType:get"><apiName>ignoreKanaType</apiName><shortdesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden Strings, die sich nur durch die Art der verwendeten kana-Zeichen unterscheiden, als gleich bewertet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden Strings, die sich nur durch die Art der verwendeten kana-Zeichen unterscheiden, als gleich bewertet. Zum Beispiel gibt <codeph>compare("カナ", "かな")</codeph> den Wert <codeph>true</codeph> zurück, wenn die <codeph>ignoreKanaType</codeph>-Eigenschaft den Wert <codeph>true</codeph> hat.
                   <p>Wenn die <codeph>ignoreKanaType</codeph>-Eigenschaft auf <codeph>false</codeph> gesetzt ist, werden Hiragana- und Katakana-Zeichen, die sich auf dieselbe Silbe beziehen, nicht als gleich angesehen.</p>
                   <p>Der Standardwert ist <codeph>true</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.MATCHING</codeph> festgelegt ist. <codeph>"false"</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.SORTING</codeph> festgelegt ist.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.globalization.supportClasses.xml#CollatorBase/compare()"><linktext>compare()</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/equals()"><linktext>equals()</linktext></link></related-links></apiValue><apiValue id="spark.globalization.supportClasses:CollatorBase:ignoreSymbols:get"><apiName>ignoreSymbols</apiName><shortdesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden Symbolzeichen wie Leerzeichen, Währungssymbole, mathematische Symbole und andere Arten von Symbolen beim Sortieren oder Überprüfen ignoriert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Wenn diese Eigenschaft auf „true“ gesetzt ist, werden Symbolzeichen wie Leerzeichen, Währungssymbole, mathematische Symbole und andere Arten von Symbolen beim Sortieren oder Überprüfen ignoriert. Zum Beispiel werden die Strings "OBrian", "O'Brian" und "O Brian" als gleich angesehen, wenn die <codeph>ignoreSymbols</codeph>-Eigenschaft den Wert <codeph>true</codeph> hat.
                   <p>Der Standardwert ist <codeph>true</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.MATCHING</codeph> festgelegt ist. <codeph>"false"</codeph>, wenn für den zum <codeph>CollatorBase()</codeph>-Konstruktor gehörenden <codeph>initialMode</codeph>-Parameter <codeph>Collator.SORTING</codeph> festgelegt ist.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.globalization.supportClasses.xml#CollatorBase/compare()"><linktext>compare()</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/equals()"><linktext>equals()</linktext></link></related-links></apiValue><apiValue id="spark.globalization.supportClasses:CollatorBase:lastOperationStatus:get"><apiName>lastOperationStatus</apiName><shortdesc>
          
      Der Status der letzten Operation, die dieses Klassenobjekt ausgeführt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
          
      Der Status der letzten Operation, die dieses Klassenobjekt ausgeführt hat. Die <codeph>lastOperationStatus</codeph>-Eigenschaft wird immer festgelegt, wenn der Konstruktor oder eine Methode dieser Klasse aufgerufen oder eine Eigenschaft festgelegt wird. Die möglichen Werte sind in der Beschreibung der einzelnen Methoden aufgeführt.
     
     </apiDesc></apiValueDetail><related-links><link href="spark.globalization.xml#LastOperationStatus"><linktext>spark.globalization.LastOperationStatus</linktext></link></related-links></apiValue><apiValue id="spark.globalization.supportClasses:CollatorBase:numericComparison:get"><apiName>numericComparison</apiName><shortdesc>
          Regelt, wie numerische Werte, die in Strings eingebettet sind, bei Stringvergleichen behandelt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>&lt;code>false&lt;/code>
                   </apiDefaultValue></apiValueDef><apiDesc>
          Regelt, wie numerische Werte, die in Strings eingebettet sind, bei Stringvergleichen behandelt werden.
                   <p>Wenn die <codeph>numericComparison</codeph>-Eigenschaft den Wert <codeph>true</codeph> hat, konvertiert die Vergleichsmethode Zahlen, die im String vorkommen, zum Vergleich in numerische Werte.</p>
                   <p>Wenn diese Eigenschaft den Wert <codeph>false</codeph><codeph> hat, behandelt der Vergleich Zahlen als Zeichencodes und sortiert sie entsprechend der Regeln zum Sortieren von Zeichen im angegebenen Gebietsschema</codeph>.</p>
                   <p>Wenn diese Eigenschaft zum Beispiel für das Gebietsschema "en-US" den Wert „true“ hat, werden die Strings "version1", "version10" und "version2" in dieser Reihenfolge sortiert: version1 &lt; version2 &lt; version10.</p>
                   <p>Wenn diese Eigenschaft für das Gebietsschema "en-US" den Wert „false“ hat, werden dieselben Strings in dieser Reihenfolge sortiert: version1 &lt; version10 &lt; version2.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.globalization.supportClasses.xml#CollatorBase/compare()"><linktext>compare()</linktext></link><link href="spark.globalization.supportClasses.xml#CollatorBase/equals()"><linktext>equals()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.globalization.supportClasses:GlobalizationBase"><apiName>GlobalizationBase</apiName><shortdesc>
  Dies ist eine Basisklasse, die für Wrapper-Klassen verwendet wird, die die flash.globalization-Klassen für sprach- und regionsspezifische Formatierungen von Daten, Uhrzeiten, Zahlen und Währungsbeträgen, Stringsuche und die Umwandlung von Groß- und Kleinbuchstaben verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="yes" name="locale" owner="spark.globalization.supportClasses:GlobalizationBase" playerVersion="Flash10.1" type="String">
<description>
  Die Gebietsschema-ID, die die Tags und Schlüssel für Sprache, Region und Skript sowie optional weitere entsprechende Tags und Schlüssel angibt. Die Syntax dieser ID muss der Syntax folgen, die durch den Unicode Technical Standard #35 (z. B. en-US, de-DE, zh-Hans-CN) definiert wurde.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.styles:AdvancedStyleClient</apiBaseClassifier></apiClassifierDef><apiDesc>
  Dies ist eine Basisklasse, die für Wrapper-Klassen verwendet wird, die die flash.globalization-Klassen für sprach- und regionsspezifische Formatierungen von Daten, Uhrzeiten, Zahlen und Währungsbeträgen, Stringsuche und die Umwandlung von Groß- und Kleinbuchstaben verwenden.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.formatters.xml#CurrencyFormatter"><linktext>spark.formatters.CurrencyFormatter</linktext></link><link href="spark.formatters.xml#DateTimeFormatter"><linktext>spark.formatters.DateTimeFormatter</linktext></link><link href="spark.formatters.xml#NumberFormatter"><linktext>spark.formatters.NumberFormatter</linktext></link><link href="spark.globalization.xml#MatchingCollator"><linktext>spark.globalization.MatchingCollator</linktext></link><link href="spark.globalization.xml#SortingCollator"><linktext>spark.globalization.SortingCollator</linktext></link><link href="spark.globalization.xml#StringTools"><linktext>spark.globalization.StringTools</linktext></link></related-links><adobeApiEvent id="spark.globalization.supportClasses:GlobalizationBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Das Änderungsereignis wird immer dann generiert, wenn der Gebietsschemastil geändert oder eine andere Eigenschaft festgelegt wird, die zur Änderung des Zahlenformats oder zu Updates der anderen durch diese Klasse bereitgestellten Werte führen würde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Das Änderungsereignis wird immer dann generiert, wenn der <codeph>locale</codeph>-Stil geändert oder eine andere Eigenschaft festgelegt wird, die zur Änderung des Zahlenformats oder zu Updates der anderen durch diese Klasse bereitgestellten Werte führen würde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.globalization.supportClasses:GlobalizationBase:GlobalizationBase"><apiName>GlobalizationBase</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.globalization.supportClasses:GlobalizationBase:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UIComponent#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.globalization.supportClasses:GlobalizationBase:actualLocaleIDName:get"><apiName>actualLocaleIDName</apiName><shortdesc>
      Der Name der Gebietsschema-ID, die von diesem Klassenobjekt verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Name der Gebietsschema-ID, die von diesem Klassenobjekt verwendet wird. Dies ist das Gebietsschema, das verwendet wird, um auf Formatierungsdaten und Funktionen vom Betriebssystem aus zuzugreifen.
     
      <p>Wenn das vom <codeph>locale</codeph>-Stil festgelegte Gebietsschema nicht verfügbar ist, sind der Wert des <codeph>actualLocaleIDName</codeph> und der Wert des <codeph>locale</codeph>-Stils unterschiedlich. Er gibt das Ersatzgebietsschema an, das verwendet wird. Wenn für den locale-Stil <codeph>LocaleID.DEFAULT</codeph> festgelegt wurde, wird der Name des vom Betriebssystem des Benutzers festgelegten Gebietsschemas verwendet.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.globalization.supportClasses:GlobalizationBase:lastOperationStatus:get"><apiName>lastOperationStatus</apiName><shortdesc>
      Der Status der letzten Operation, die dieses Klassenobjekt ausgeführt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Status der letzten Operation, die dieses Klassenobjekt ausgeführt hat. Die <codeph>lastOperationStatus</codeph>-Eigenschaft wird immer festgelegt, wenn der Konstruktor oder eine Methode dieser Klasse aufgerufen oder eine Eigenschaft festgelegt wird. Die möglichen Werte sind in der Beschreibung der einzelnen Methoden aufgeführt.
     
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.globalization.LastOperationStatus.xml"><linktext>flash.globalization.LastOperationStatus</linktext></link></related-links></apiValue></apiClassifier></apiPackage>