<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
  Die DataRenderer-Klasse ist die Basisklasse für Datenkomponenten in Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:DataRenderer
    <strong>Properties</strong>
    data=""
  
    <strong>Events</strong>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DataRenderer-Klasse ist die Basisklasse für Datenkomponenten in Spark. 
 
  <p><b>Hinweis:</b> Diese Klasse wird in einer späteren Version möglicherweise entfernt.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:DataRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Data-Eigenschaft verändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>data</codeph>-Eigenschaft verändert
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataRenderer:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DataRenderer:data:get"><apiName>data</apiName><shortdesc>
      Die Implementierung der data-Eigenschaft gemäß der IDataRenderer-Schnittstelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Implementierung der <codeph>data</codeph>-Eigenschaft gemäß der IDataRenderer-Schnittstelle.
      
      <p>Diese Eigenschaft ist bindbar; sie löst dataChange-Ereignisse aus.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer.</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TextArea"><apiName>TextArea</apiName><shortdesc>
  Textbereich ist eine Texteingabe-Steuerung, die dem Benutzer die Eingabe und Bearbeitung mehrerer formatierter Textzeilen ermöglicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:verticalScrollPolicy">
  Gibt an, unter welchen Bedingungen die vertikale Bildlaufleiste angezeigt wird.
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:horizontalScrollPolicy">
  Gibt an, unter welchen Bedingungen die horizontale Bildlaufleiste angezeigt wird.
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:TextArea" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="scroller" owner="spark.components:TextArea" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Der optionale Scroller in der Skin. Wird für den Bildlauf im RichEditableText verwendet.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller in the skin,
      used to scroll the RichEditableText.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextArea&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextArea
    <strong>Properties</strong>
    heightInLines="<i>Calculated default</i>"  <b>[Spark theme only]</b>
    textFlow="<i>TextFlow</i>"  <b>[Spark theme only]</b>
    typicalText=null  <b>[Spark theme only]</b>
    widthInChars="<i>Calculated default</i>"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    horizontalScrollPolicy="auto"  <b>[Spark theme only]</b>
    symbolColor=""
    verticalScrollPolicy="auto"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Textbereich ist eine Texteingabe-Steuerung, die dem Benutzer die Eingabe und Bearbeitung mehrerer formatierter Textzeilen ermöglicht.
   <p><b>Die Skin für das Spark-Design verwendet die RichEditableText-Klasse. Das bedeutet, dass das Spark-TextArea-Steuerelement die Text Layout Framework(TLF)-Bibliothek unterstützt, die auf der Flash Text Engine (FTE) aufbaut.</b> In Kombination ermöglichen diese Ebenen die Bearbeitung von Text mit hochwertigen internationalen Typografie- und Layoutfunktionen. Diese Skin beinhaltet einen Scroller, mit dem horizontale und vertikale Bildlaufleisten für Bildläufe in Texten angezeigt werden können. Außerdem werden vertikale Bildläufe mit dem Mausrad unterstützt. Zugriff auf RichEditableText erhalten Sie über <codeph>textDisplay</codeph> und auf den Scroller über <codeph>scroller</codeph>.</p>
  
  <p><b>Die Skin für das Mobile-Design verwendet die Klasse StyleableStageText.</b> Da StyleableStageText native Textfelder verwendet, ermöglicht es eine bessere Texteingabe und Manipulation auf Mobilgeräten, jedoch gibt es <xref href="supportClasses/StyleableStageText.html">Grenzen und Unterschiede</xref>, die zu berücksichtigen sind. Weil StageText keinen Text messen kann, muss dem Textbereich explizit eine prozent- oder einschränkungsbasierte <codeph>Breite</codeph> und <codeph>Höhe</codeph> zugeordnet werden. StyleableStageText kann als <codeph>textDisplay</codeph> aufgerufen werden. Wenn Sie die TextField-basierte Skin anstelle der StageText-basierten Skin verwenden möchten, weisen Sie der Eigenschaft <codeph>skinClass</codeph> den Wert <codeph>spark.skins.mobile.TextAreaSkin</codeph> zu.</p>
   <p>Mithilfe der <codeph>text</codeph>-Eigenschaft können Sie den anzuzeigenden Text einstellen oder den vom Benutzer eingegebenen Text abrufen.</p>
   <p>Der Text wird mithilfe von CSS-Stilen wie beispielsweise <codeph>fontFamily</codeph> und <codeph>fontSize</codeph> formatiert.</p>
   <p>Für das Spark-Design können Sie mithilfe der Eigenschaften <codeph>widthInChars</codeph> und <codeph>heightInLines</codeph> Breite und Höhe des Textbereichs so eingeben, dass sie sich der Schriftgröße anpassen. Alternativ können Sie auch die Eigenschaft <codeph>typicalText</codeph> verwenden. Beachten Sie, dass beim Verwenden von <codeph>typicalText</codeph> die Eigenschaften <codeph>widthInChars</codeph> und <codeph>heightInLines</codeph> ignoriert werden. Für alle Designs können Sie außerdem eine explizite Breite oder Höhe in Pixeln angeben, eine prozentuale Breite oder Höhe angeben oder Beschränkungen wie <codeph>left</codeph> und <codeph>right</codeph> oder <codeph>top</codeph> und <codeph>bottom</codeph> festlegen.</p>
   <p>Mit der <codeph>maxChars</codeph>-Eigenschaft beschränken Sie die Anzahl der Zeichen, die der Benutzer eingeben kann. Mit <codeph>restrict</codeph> legen Sie fest, welche Zeichen eingegeben werden dürfen. Sie können dieses Steuerelement für die Kennworteingabe verwenden, indem Sie die <codeph>displayAsPassword</codeph>-Eigenschaft auf <codeph>true</codeph> setzen.</p>
   <p>Für das Mobile-Design legen die Software-Tastatur-spezifischen Eigenschaften, die Eigenschaften <codeph>autoCapitalize</codeph>, <codeph>autoCorrect</codeph>, <codeph>returnKeyLabel</codeph> und <codeph>softKeyboardType</codeph> Tastaturtipps fest. Wenn eine Software-Tastatur vorhanden ist, aber nicht die durch den Tipp dargestellte Funktion unterstützt, wird der Tipp ignoriert. In mobilen Umgebungen, die nur über Hardware-Tastaturen verfügen, werden diese Tipps ignoriert. 
  </p>
  
  <p><b>Textbereich für das Spark-Design</b></p>
 
  <p>Es folgen Beschreibungen der wichtigsten Unterschiede zwischen Spark TextArea und dem MX TextArea-Steuerelement:
  <ul>
    <li>Spark TextArea bietet bessere Typografie, bessere Unterstützung für Sprachen und besseres Textlayout.</li>
    <li>Spark TextArea verfügt über ein objektorientiertes Modell von Rich Text, die MX-Version nicht.</li>
    <li>Spark TextArea bietet bessere Unterstützung für das Anzeigen umfangreicher Texte.</li>
    <li>Bei Spark TextArea müssen Schriftarten anders eingebettet werden als in der MX-Version. Weitere Informationen zur Verwendung des <codeph>embedAsCFF</codeph>-Attributs beim Einbetten von Schriftarten finden Sie in der Dokumentation zur Schriftart.</li>
  </ul></p>
   <p>Beim Spark-TextArea-Steuerelement kommt das objektorientierte TLF-Modell von Rich Text zum Einsatz. Hierbei werden Textlayoutelemente wie Unterteilungen, Absätze, Spannen, Hyperlinks und Bilder zur Laufzeit durch ActionScript-Objekte dargestellt. Sie können auf diese Objekte programmgesteuert zugreifen und sie bearbeiten. Das zentrale Objekt in TLF zur Darstellung von Rich Text ist ein TextFlow. Geben Sie Rich Text für ein TextArea-Steuerelement an, indem Sie seine <codeph>textFlow</codeph>-Eigenschaft auf eine TextFlow-Instanz setzen.</p>
 
  <p>Wenn Sie bei der Anzeige von Text auf die Darstellung unterschiedlicher Formatierungen verzichten können, legen Sie die TextArea-<codeph>text</codeph>-Eigenschaft als String mit unformatiertem Text fest. Informationen zur Interaktion zwischen den <codeph>text</codeph>- und <codeph>textFlow</codeph>-Eigenschaften finden Sie in den jeweiligen Beschreibungen. Beispielsweise können Sie eine einstellen und die andere abrufen.</p>
   <p>Beim Kompilieren können Sie TLF-Markup-Tags in das TextArea-Tag einfügen. Gehen Sie dazu wie im folgenden Beispiel vor:
  <pre>
  &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:TextArea>
  </pre>
  In diesem Beispiel legt der MXML-Compiler die TextArea <codeph>content</codeph>-Eigenschaft fest, wodurch ein TextFlow-Objekt aufgrund der angegebenen FlowElements erstellt wird.</p>
   <p>Das TextArea-Steuerelement bietet keine Benutzeroberfläche zum Ändern der Textformatierung, enthält jedoch APIs, mit denen Sie Text programmgesteuert formatieren können. Beispielsweise ist es möglich, eine Schaltfläche zu erstellen, auf die Sie klicken können, um den gewählten Text fett zu formatieren.</p>
   <p>Die Standardtextformatierung wird mithilfe von CSS-Stilen wie beispielsweise <xref href="supportClasses/SkinnableTextBase.html#style:fontFamily">fontFamily</xref> und <xref href="supportClasses/SkinnableTextBase.html#style:fontSize">fontSize</xref> bestimmt. Formatierungsinformationen innerhalb des TextFlow-Objekts führen zum Überschreiben der Standardformatierung, die von den CSS-Stilen bereitgestellt wird.</p>
   <p>Sie können viele Merkmale von TextArea-Inhalten mit Stilen steuern. Im Folgenden werden einige häufig verwendete Stile erläutert:</p>
   <ul><li>Mit dem <codeph>lineHeight</codeph>-Stil steuern Sie den Abstand zwischen den Zeilen.</li>
  <li>Den Abstand zwischen Absätzen bestimmen Sie mit den <codeph>paragraphSpaceBefore</codeph>- und <codeph>paragraphSpaceAfter</codeph>-Stilen.</li>
  <li>Mit den <codeph>textAlign</codeph>- und <codeph>textAlignLast</codeph>-Stilen richten Sie Text aus.</li>
  <li>Mit den <codeph>paddingLeft</codeph>-, <codeph>paddingTop</codeph>-, <codeph>paddingRight</codeph>- und <codeph>paddingBottom</codeph>-Stilen können Sie Text von der Rahmenlinie des Steuerelements aus einrücken.</li>
  </ul>
   <p>Standardmäßig wird Text an der rechten Kante des Steuerelements umbrochen. Wenn mehr Text vorhanden ist als in TextArea passt, wird automatisch eine vertikale Bildlaufleiste angezeigt. Wenn Sie den <codeph>lineBreak</codeph>-Stil auf <codeph>explicit</codeph> festlegen, werden neue Zeilen nur bei ausdrücklichen Zeilenumbrüchen begonnen. Das hat denselben Effekt wie die Verwendung von CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) oder CR+LF (<codeph>\r\n</codeph>) in <codeph>text</codeph> oder von <codeph>&lt;p></codeph> und <codeph>&lt;br/></codeph> in TLF-Markup. In solchen Fällen wird automatisch eine horizontale Bildlaufleiste angezeigt, wenn Textzeilen breiter sind als das Steuerelement.</p>
    <p>Mit Spark TextArea können Sie Texte anzeigen, die sowohl von links nach rechts (z. B. Französisch) als auch von rechts nach links (z. B. Arabisch) verlaufen. Auch die Anzeige von Text mit zwei Richtungen wird unterstützt. Sie können also einen Satz auf Französisch in einem arabischen Text anzeigen. Läuft der Text vorwiegend von rechts nach links, stellen Sie den <codeph>direction</codeph>-Stil auf <codeph>rtl</codeph> ein. Der <codeph>textAlign</codeph>-Stil ist standardmäßig <codeph>start</codeph>, sodass der Text linksbündig ist, wenn <codeph>direction</codeph> <codeph>ltr</codeph> ist, und rechtsbündig, wenn <codeph>direction</codeph> <codeph>rtl</codeph> ist. Setzen Sie <codeph>textAlign</codeph> auf <codeph>end</codeph>, um die umgekehrte Ausrichtung zu verwenden.</p>
   <p>Die Spark-TextArea unterstützt eine unbegrenzte Anzahl von Schritten, die während einer Bearbeitungssitzung rückgängig gemacht und wiederhergestellt werden können. Eine Bearbeitungssitzung beginnt, wenn das Steuerelement den Tastaturfokus erhält und endet, wenn das Steuerelement den Fokus verliert.</p>
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
   <p>Für das Spark-Design verfügt die Textbereich-Steuerung über folgende Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>188 Pixel breit und 149 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>36 Pixel breit und 36 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.TextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>Für das Mobile-Design verfügt die Textbereich-Steuerung über folgende Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.mobile.StageTextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea/text"><linktext>text</linktext></link><link href="spark.components.xml#TextArea/textFlow"><linktext>textFlow</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextAreaSkin.xml"><linktext>spark.skins.mobile.StageTextAreaSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextAreaSkin.xml"><linktext>spark.skins.mobile.TextAreaSkin</linktext></link><link href="spark.skins.spark.xml#TextAreaSkin"><linktext>spark.skins.spark.TextAreaSkin</linktext></link></related-links><apiConstructor id="spark.components:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TextArea:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>Ein TextLayoutFormat-Objekt.
          
          </apiDesc></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>Ein Vektor von Strings mit den Namen der angeforderten Formate oder <codeph>null</codeph>, um alle Formate anzufordern.
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Eine Zeichenposition, die das feste Ende der Auswahl angibt.
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Eine Zeichenposition, die das feste Ende der Auswahl angibt.
                   </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="spark.components.RichEditableText#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>Das auf die Auswahl anzuwendende TextLayoutFormat.
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Eine Zeichenposition, die relativ zum Anfang des Textstrings ist und das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl mit den Pfeiltasten erweitert wird.
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Eine Zeichenposition, die relativ zum Anfang des Textstrings ist und das Auswahlende angibt, das verschoben wird, wenn die Auswahl mit den Pfeiltasten erweitert wird. 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TextArea:content:get"><apiName>content</apiName><shortdesc>
      Diese Eigenschaft ist für die Verwendung in MXML bei der Kompilierung vorgesehen. Um Rich Text-Inhalt zur Laufzeit abzurufen oder einzustellen, verwenden Sie stattdessen die textFlow-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Diese Eigenschaft ist für die Verwendung in MXML bei der Kompilierung vorgesehen. Um Rich Text-Inhalt zur Laufzeit abzurufen oder einzustellen, verwenden Sie stattdessen die <codeph>textFlow</codeph>-Eigenschaft. Wenn Sie Rich Text-Inhalte zur Laufzeit abrufen und einstellen möchten, empfiehlt Adobe, die <codeph>textFlow</codeph>-Eigenschaft zu verwenden, da ihr Typ ausdrücklich als TextFlow statt als Objekt festgelegt ist. Ein TextFlow ist die standardmäßige visuelle Darstellungsmethode von Rich Text-Inhalten im Text Layout Framework.
           <p>Die <codeph>content</codeph>-Eigenschaft ist die Standardeigenschaft für TextArea, sodass Sie MXML-Code wie im folgenden Beispiel schreiben können:
      <pre>
      &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World&lt;/s:span>&lt;/s:TextArea>
      </pre>
      In diesem Beispiel können Sie den String und das SpanElement, die Sie als Inhalt angeben, zur Erstellung eines TextFlow nutzen.</p>
           <p>Diese Eigenschaft hat den Typ „Object“, da Sie sie als String, FlowElement oder ein Array von Strings und FlowElements festlegen können. Im obigen Beispiel ist der Inhalt ein Array mit zwei Elementen. Das erste Arrayelement ist der String „Hello“. Das zweite Arrayelement ist ein SpanElement-Objekt mit dem Text „World“ in Fettdruck.</p>
     
      <p>Unabhängig davon, wie Sie den Inhalt angeben, wird er in ein TextFlow-Objekt konvertiert. Wenn Sie den Wert dieser Eigenschaft abrufen, erhalten Sie das resultierende TextFlow-Objekt.</p>
     
      <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
      Die Standardhöhe des Steuerelements in Zeilen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Standardhöhe des Steuerelements in Zeilen.
           <p>Spark-Design: siehe <b>spark.components.RichEditableText.heightInLines</b></p>
           <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/heightInLines"><linktext>spark.components.RichEditableText.heightInLines</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      Der TextFlow, der den Rich Text darstellt, der von dieser Komponente angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der TextFlow, der den Rich Text darstellt, der von dieser Komponente angezeigt wird.
           <p>Spark-Design: siehe <b>spark.components.RichEditableText.textFlow</b></p>
           <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      Die Standardbreite des Steuerelements in em-Einheiten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Standardbreite des Steuerelements in em-Einheiten.
           <p>Spark-Design: siehe <b>spark.components.RichEditableText.widthInChars</b></p>
           <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Grid"><apiName>Grid</apiName><shortdesc>
  Das Grid-Steuerelement zeigt eine Liste mit Datenelementen an, die von seinem Datenprovider in einer bildlauffähigen Tabelle (oder „Raster“) mit einem Element pro Zeile aufgerufen werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Grid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Grid 
    <strong>Properties</strong>
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das Grid-Steuerelement zeigt eine Liste mit Datenelementen an, die von seinem <i>Datenprovider</i> in einer bildlauffähigen Tabelle (oder „Raster“) mit einem Element pro Zeile aufgerufen werden. Jede durch ein GridColumn-Objekt definierte Spalte des Rasters zeigt einen Wert an, der auf dem Element für die entsprechende Zeile basiert. Der Datenprovider des Rasters ist änderbar, d. h., seine Elemente können hinzugefügt, entfernt oder geändert werden. Auf ähnliche Weise kann die Liste der Spalten geändert werden werden.
 
  <p>Die Grid-Komponente soll als DataGrid-Skinteil oder als Element anderer benutzerdefinierter Composite-Komponenten verwendet werden. Daher ist sie als solche nicht skinfähig, enthält keinen Scroller bzw. keine Bildlaufleisten und bietet keine standardmäßige Ereignisprozedur für Maus oder Tastatur.</p>
 
  <p>Jede sichtbare Grid-<i>Zelle</i> wird durch eine GridItemRenderer-Instanz angezeigt, die mithilfe der <codeph>itemRenderer</codeph>-Eigenschaft erstellt wurde. Gibt einen Elementrenderer für jede Spalte an. Vor der Anzeige wird jede Elementrendererinstanz mit dem Wert des Datenproviderelements für diese Zeile konfiguriert. Elementrenderer werden bei Bedarf erstellt und anschließend zusammengelegt bzw. wiederverwendet („recycled“), um den Erstellungsaufwand minimal zu halten.</p>
 
  <p>Das Grid-Steuerlement unterstützt die Auswahl entsprechend der <codeph>selectionMode</codeph>-Eigenschaft. Der Satz ausgewählter Zeilen- oder Zellenindexpositionen kann mithilfe der Auswahlmethoden wie beispielsweise <codeph>setSelectedIndex</codeph> oder <codeph>selectionContainsIndex()</codeph> geändert oder programmgesteuert abgefragt werden.</p>
 
  <p>Das Grid-Steuerelement zeigt hover-, Einfügezeichen- und Auswahlindikatoren basierend auf der <codeph>selectionMode</codeph>-Eigenschaft und den entsprechenden Zeilenindexpositions- und Spaltenindexpositionseigenschaften wie <codeph>hoverRowIndex</codeph> und <codeph>columnRowIndex</codeph> an. Beim Indikator kann es sich um jedes visuelle Element handeln. Indikatoren, die das IGridVisualElement implementieren, können sich entsprechend der Zeile und Spalte, in denen sie verwendet werden, selbst konfigurieren.</p>
 
  <p>Das Grid-Steuerelement unterstützt einen flüssigen Bildlauf (Smooth Scrolling). Ihre vertikalen und horizontalen Bildlaufpositionen definieren den Pixelursprung des sichtbaren Teils des Rasters und dessen Layout zeigt nur so viele Zellelementrenderer an, wie zum Ausfüllen des verfügbaren Raumes erforderlich sind.   </p>
 
  <p>Das Grid-Steuerelement unterstützt Zeilen mit variabler Höhe, die ihre Höhe basierend auf den Inhalten der Elementrenderer automatisch berechnen. Diese Unterstützung wird <i>Virtualisierung</i> des Rasters genannt, weil die Zuordnung von (Pixel-)Bildlaufpositionen zu Zeilen- und Spaltenindexpositionen normalerweise auf unvollständigen Informationen über die bevorzugten Größen der Rasterzellen basiert. Das Raster führt eine Zwischenspeicherung der berechneten Höhen der Zeilen durch, die per Bildlauf in die Ansicht geholt wurden, und schätzt den Rest auf der Basis eines einzigen <codeph>typicalItem</codeph>-Werts.</p>
 
  <p>Übergänge in DataGrid-Elementrenderern werden nicht unterstützt. Die GridItemRenderer-Klasse hat ihre <codeph>transitions</codeph>-Eigenschaft deaktiviert, d. h. ihr Einstellen bewirkt nichts.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links><adobeApiEvent id="spark.components:Grid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Wird ausgelöst, nachdem das Einfügezeichen geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem das Einfügezeichen geändert wurde.  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Wird ausgelöst, wenn ein Doppelklick über einer Zelle erfolgt.
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Doppelklick über einer Zelle erfolgt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Wird ausgelöst, wenn ein Mausklick über einer Zelle erfolgt.
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Mausklick über einer Zelle erfolgt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Wird ausgelöst, wenn die Maus eine Rasterzelle verlässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Maus eine Rasterzelle verlässt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Wird ausgelöst, wenn die Maus in eine Rasterzelle hineinbewegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Maus in eine Rasterzelle hineinbewegt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Wird ausgelöst, wenn die Maustaste über einer Grid-Zelle losgelassen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Maustaste über einer Grid-Zelle losgelassen wird. Wird außerdem während eines Ziehvorgangs ausgelöst, wenn nach einem <codeph>gridMouseDown</codeph>-Ereignis die Maustaste losgelassen wird, selbst wenn sich die Maus nicht mehr im Grid befindet.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Wird nach einem gridMouseDown-Ereignis ausgelöst, wenn die Maus vor dem Loslassen der Taste bewegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einem <codeph>gridMouseDown</codeph>-Ereignis ausgelöst, wenn die Maus vor dem Loslassen der Taste bewegt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Wird ausgelöst, wenn die Maustaste über einer Rasterzelle gedrückt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Maustaste über einer Rasterzelle gedrückt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Grid:Grid"><apiName>Grid</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Grid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.SINGLE_CELL oder GridSelectionMode.MULTIPLE_CELLS lautet, wird die Zelle der Auswahl hinzugefügt und die Position des Einfügezeichens auf die Zelle festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>rowIndex</codeph> oder <codeph>columnIndex</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, wird die Zelle der Auswahl hinzugefügt und die Position des Einfügezeichens auf die Zelle festgelegt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Der <codeph>rowIndex</codeph> entspricht der Indexposition im Datenprovider des Elements, das die ausgewählte Zelle enthält. Der <codeph>columnIndex</codeph> entspricht der Indexposition in <codeph>columns</codeph> der Spalte, die die ausgewählte Zelle enthält.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.MULTIPLE_ROWS lautet, wird diese Zeile der Auswahl hinzugefügt und die Position des Einfügezeichens auf diese Zeile festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>index</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird diese Zeile der Auswahl hinzugefügt und die Position des Einfügezeichens auf diese Zeile festgelegt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Der <codeph>rowIndex</codeph> entspricht der Indexposition im Datenprovider des Elements, das die ausgewählte Zelle enthält.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:clearSelection"><apiName>clearSelection</apiName><shortdesc>
      Entfernt alle ausgewählten Zeilen und Zellen, wenn der selectionMode nicht GridSelectionMode.NONE lautet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn sich die Auswahl geändert hat. <codeph>false</codeph>, wenn nichts zuvor ausgewählt wurde.
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Entfernt alle ausgewählten Zeilen und Zellen, wenn <codeph>selectionMode</codeph> nicht <codeph>GridSelectionMode.NONE</codeph> lautet. Entfernt das Einfügezeichen und legt den Anker auf das Ausgangselement fest.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc>
      Falls erforderlich, legen Sie die verticalScrollPosition- und horizontalScrollPosition-Eigenschaften so fest, dass die angegebene Zelle komplett sichtbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Die auf null basierende Zeilenindexposition der Zelle des Elementrenderers oder „-1“, um eine Spalte anzugeben.
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Die auf null basierende Spaltenindexposition der Zelle des Elementrenderers oder „-1“, um eine Zeile anzugeben.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Falls erforderlich, legen Sie die <codeph>verticalScrollPosition</codeph>- und <codeph>horizontalScrollPosition</codeph>-Eigenschaften so fest, dass die angegebene Zelle komplett sichtbar ist. Wenn <codeph>rowIndex</codeph> „-1“ ist und <codeph>columnIndex</codeph> festgelegt ist, passen Sie einfach die <codeph>horizontalScrollPosition</codeph> so an, dass die angegebene Spalte sichtbar ist. Wenn <codeph>columnIndex</codeph> „-1“ ist und <codeph>rowIndex</codeph> festgelegt ist, passen Sie die <codeph>verticalScrollPosition</codeph> so an, dass die angegebene Zeile sichtbar ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellAt"><apiName>getCellAt</apiName><shortdesc>
      Gibt die Zeilen- und Spaltenindexpositionen der Zelle an, die das Pixel an der angegebenen Rasterkoordinate überlappt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Zellenposition oder „null“. 
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:CellPosition</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate des Pixels bezogen auf das Raster.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate des Pixels bezogen auf das Raster.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Zeilen- und Spaltenindexpositionen der Zelle an, die das Pixel an der angegebenen Rasterkoordinate überlappt. Wenn keine solche Zelle vorhanden ist, wird „null“ zurückgegeben.
     
      <p>Die Beispielfunktion unten verwendet diese Methode zur Berechnung des <codeph>dataField</codeph>-Werts einer Rasterzelle.</p> 
      <pre>
      function getCellData(x:Number, y:Number):Object
      {
          var cell:CellPosition = getCellAt(x, y);
          if (!cell)
              return null;
          var GridColumn:column = grid.columns.getItemAt(cell.columnIndex);
          return grid.dataProvider.getItemAt(cell.rowIndex)[column.dataField];
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellBounds"><apiName>getCellBounds</apiName><shortdesc>
      Gibt die aktuellen Pixelgrenzen der angegebenen Zelle oder „null“ zurück, wenn keine solche Zelle vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein <codeph>Rectangle</codeph>, das die Pixelgrenzen der Zelle oder „null“ repräsentiert.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Zeile.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Spalte. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die aktuellen Pixelgrenzen der angegebenen Zelle oder „null“ zurück, wenn keine solche Zelle vorhanden ist. Die Zellgrenzen werden in Rasterkoordinaten ausgegeben.
     
      <p>Wenn noch keine Spalten der angegebenen Zeile und der ihr vorangehenden Zeilen per Bildlauf in die Ansicht geholt wurden, können die zurückgegebenen Grenzen nur eine Annäherung entsprechend der jeweiligen <codeph>typicalItem</codeph>s aller Spalten sein.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellX"><apiName>getCellX</apiName><shortdesc>
      Gibt die x-Koordinate des angegebenen Ursprungs der Zelle zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die x-Koordinate des Ursprungs der angegebenen Zelle.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Zeile.
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Spalte. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die x-Koordinate des angegebenen Ursprungs der Zelle zurück. Wenn die Grenzen der Zelle nicht benötigt werden, ist diese Methode effizienter als <codeph>getCellBounds().x</codeph>.
     
      <p>Wenn noch keine Spalten der angegebenen Zeile und der ihr vorangehenden Zeilen per Bildlauf in die Ansicht geholt wurden, kann der zurückgegebene Wert nur eine Annäherung entsprechend der jeweiligen <codeph>typicalItem</codeph>s aller Spalten sein.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellY"><apiName>getCellY</apiName><shortdesc>
      Gibt die y-Koordinate des angegebenen Ursprungs der Zelle zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die y-Koordinate des Ursprungs der angegebenen Zelle.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Zeile.
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Spalte. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die y-Koordinate des angegebenen Ursprungs der Zelle zurück. Wenn die Grenzen der Zelle nicht benötigt werden, ist diese Methode effizienter als <codeph>getCellBounds().y</codeph>.
     
      <p>Wenn noch keine Spalten der angegebenen Zeile und der ihr vorangehenden Zeilen per Bildlauf in die Ansicht geholt wurden, kann der zurückgegebene Wert nur eine Annäherung entsprechend der jeweiligen <codeph>typicalItem</codeph>s aller Spalten sein.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellsAt"><apiName>getCellsAt</apiName><shortdesc>
      Gibt einen Vektor von CellPosition-Objekten zurück, deren rowIndex- und columnIndex-Eigenschaften die Zeilen- und Spaltenindexpositionen der Zellen angeben, die den angegebenen Rasterbereich überlappen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Vektor von Objekten wie beispielsweise <codeph>Vector.&lt;Object>([{rowIndex:0, columnIndex:0}, ...])</codeph>. 
      
      </apiDesc><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate des Pixels am Ursprung des Bereichs bezogen auf das Raster.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate des Pixels am Ursprung des Bereichs bezogen auf das Raster. 
     
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Die Breite des Bereichs in Pixeln. 
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Die Höhe des Bereichs in Pixeln. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt einen Vektor von CellPosition-Objekten zurück, deren <codeph>rowIndex</codeph>- und <codeph>columnIndex</codeph>-Eigenschaften die Zeilen- und Spaltenindexpositionen der Zellen angeben, die den angegebenen Rasterbereich überlappen. Wenn keine solchen Zellen vorhanden sind, wird ein leerer Vektor zurückgegeben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnBounds"><apiName>getColumnBounds</apiName><shortdesc>
      Gibt die aktuellen Pixelgrenzen der angegebenen Spalte oder „null“ zurück, wenn keine solche Spalte vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein <codeph>Rectangle</codeph>, das die Pixelgrenzen der Spalte oder „null“ repräsentiert.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Spalte. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die aktuellen Pixelgrenzen der angegebenen Spalte oder „null“ zurück, wenn keine solche Spalte vorhanden ist. Die Spaltengrenzen werden in Rasterkoordinaten ausgegeben.
     
      <p>Wenn noch keine Zellen der angegebenen Spalte per Bildlauf in die Ansicht geholt wurden, können die zurückgegebenen Grenzen nur eine Annäherung entsprechend des <codeph>typicalItem</codeph> der Spalte sein.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnIndexAt"><apiName>getColumnIndexAt</apiName><shortdesc>
      Gibt die Spaltenindexposition entsprechend der angegebenen Koordinaten oder „-1“ zurück, wenn die Koordinaten außerhalb der Grenzen liegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition der Spalte oder „-1“, wenn die Koordinaten außerhalb der Grenzen liegen. 
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate des Pixels bezogen auf das Raster.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate des Pixels bezogen auf das Raster.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Spaltenindexposition entsprechend der angegebenen Koordinaten oder „-1“ zurück, wenn die Koordinaten außerhalb der Grenzen liegen. Die Koordinaten werden in Bezug auf das Raster aufgelöst.
     
      <p>Wenn noch keine Spalten oder Zeilen des Rasters per Bildlauf in die Ansicht geholt wurden, kann die zurückgegebene Indexposition nur eine Annäherung entsprechend der jeweiligen <codeph>typicalItem</codeph>s der Spalten sein.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnWidth"><apiName>getColumnWidth</apiName><shortdesc>
      Gibt die Breite der angegebenen Spalte zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Breite der angegebenen Spalte.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Spalte. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Breite der angegebenen Spalte zurück. Wenn die Grenzen der Zelle nicht benötigt werden, ist diese Methode effizienter als <codeph>getColumnBounds().width</codeph>.
     
      <p>Wenn die width-Eigenschaft der angegebenen Spalte nicht definiert ist, kann der zurückgegebene Wert nur eine Annäherung sein. Die tatsächliche Spaltenbreite wird erst berechnet, nachdem die Spalte per Bildlauf in die Ansicht geholt wurde.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getItemRendererAt"><apiName>getItemRendererAt</apiName><shortdesc>
      Gibt einen Verweis auf den zurzeit in der angegebenen Zelle angezeigten Elementrenderer zurück, wenn der angeforderte Elementrenderer sichtbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Elementrenderer oder „null“, wenn die Zellenindexposition ungültig ist.
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle des Elementrenderers.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle des Elementrenderers.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt einen Verweis auf den zurzeit in der angegebenen Zelle angezeigten Elementrenderer zurück, wenn der angeforderte Elementrenderer sichtbar ist. Beachten Sie, dass der zurückgegebene Elementrenderer wiederverwendet werden kann und seine Eigenschaften zurückgesetzt werden, sobald er nicht mehr sichtbar ist.  
     
      <p>Wenn der angeforderte Elementrenderer nicht sichtbar ist, wird bei jedem Aufrufen dieser Methode ein neuer Elementrenderer erstellt. Der neue Elementrenderer ist nicht sichtbar</p>
     
      <p>Wenn die angegebene Spalte keine explizite Breite aufweist, basiert die Breite dieser Zelle auf dem <codeph>typicalItem</codeph>. Wenn kein <codeph>typicalItem</codeph> angegeben oder dieses noch nicht gemessen wurde, wird für die Breite des Elementrenderers der Standardwert <codeph>150</codeph> verwendet.</p>
     
      <p>Wenn die Rastereigenschaft <codeph>variableRowHeight</codeph> den Wert <codeph>true</codeph> (Standardeinstellung) hat und für die angegebene Zeile keine allgemeine Zeilenhöhe zwischengespeichert wurde, basiert die Höhe des Elementrenderers auf dem <codeph>typicalItem</codeph>. Wenn kein <codeph>typicalItem</codeph> angegeben oder dieses noch nicht gemessen wurde, wird für die Höhe des Elementrenderers standardmäßig die bevorzugte Höhe verwendet.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowBounds"><apiName>getRowBounds</apiName><shortdesc>
      Gibt die aktuellen Pixelgrenzen der angegebenen Zeile oder „null“ zurück, wenn keine solche Zeile vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein <codeph>Rectangle</codeph>, das die Pixelgrenzen der Zeile oder „null“ repräsentiert.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Zeile.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die aktuellen Pixelgrenzen der angegebenen Zeile oder „null“ zurück, wenn keine solche Zeile vorhanden ist. Die Zeilengrenzen werden in Rasterkoordinaten ausgegeben.
     
      <p>Wenn noch keine Spalten der angegebenen Zeile und der ihr vorangehenden Zeilen per Bildlauf in die Ansicht geholt wurden, können die zurückgegebenen Grenzen nur eine Annäherung entsprechend der jeweiligen <codeph>typicalItem</codeph>s aller Spalten sein.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowIndexAt"><apiName>getRowIndexAt</apiName><shortdesc>
      Gibt die Zeilenindexposition entsprechend der angegebenen Koordinaten oder „-1“ zurück, wenn die Koordinaten außerhalb der Grenzen liegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Zeilenindexposition entsprechend der angegebenen Koordinaten.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Zeilenindexposition entsprechend der angegebenen Koordinaten oder „-1“ zurück, wenn die Koordinaten außerhalb der Grenzen liegen. Die Koordinaten werden in Bezug auf das Raster aufgelöst.
     
      <p>Wenn noch keine Spalten oder Zeilen des Rasters per Bildlauf in die Ansicht geholt wurden, kann die zurückgegebene Indexposition nur eine Annäherung entsprechend der jeweiligen <codeph>typicalItem</codeph>s der Spalten sein.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleColumnIndices"><apiName>getVisibleColumnIndices</apiName><shortdesc>
      Gibt die Indexpositionen der derzeit sichtbaren Spalten zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Vektor der sichtbaren Spaltenindexpositionen.
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Indexpositionen der derzeit sichtbaren Spalten zurück. Beachten Sie, dass die Elementrenderer für die ersten und letzten Spalten möglicherweise nur teilweise sichtbar sind. Die Inhalte des zurückgegebenen Vektors sind in der angezeigten Reihenfolge angeordnet.
     
      <p>Die folgende Beispielfunktion verwendet diese Methode zur Berechnung eines Vektors sichtbarer GridColumn-Objekte.</p>
      <pre>
      function getVisibleColumns():Vector.&lt;GridColumn>
      {
          var visibleColumns = new Vector.&lt;GridColumn>;
          for each (var columnIndex:int in grid.getVisibleColumnIndices())
              visibleColumns.push(grid.columns.getItemAt(columnIndex));
          return visibleColumns;
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleRowIndices"><apiName>getVisibleRowIndices</apiName><shortdesc>
      Gibt die Indexpositionen des Datenproviders und der Auffüllung der zurzeit sichtbaren Zeilen an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Vektor der sichtbaren Zeilenindexpositionen.
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Indexpositionen des Datenproviders und der Auffüllung der zurzeit sichtbaren Zeilen an. Indexpositionen, die größer oder gleich der <codeph>dataProvider</codeph>-Länge sind, stellen ausgefüllte Zeilen dar. Beachten Sie, dass die Elementrenderer für die ersten und letzten Zeilen möglicherweise nur teilweise sichtbar sind. Die Inhalte des zurückgegebenen Vektors sind in der angezeigten Reihenfolge angeordnet.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc>
      Wenn die angegebene Zelle sichtbar ist, wird sie neu angezeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle, die geändert wurde, oder -1.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle, die geändert wurde, oder „-1“.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn die angegebene Zelle sichtbar ist, wird sie neu angezeigt. Wenn <codeph>variableRowHeight=true</codeph>, kann dabei die Höhe der entsprechenden Zeile geändert werden.
     
      <p>Wenn columnIndex „-1“ ist, wird die gesamte Zeile ungültig gemacht. Entsprechend wird bei einem Wert von „-1“ für <codeph>rowIndex</codeph> die gesamte Spalte ungültig gemacht.</p>
     
      <p>Diese Methode muss aufgerufen werden, wenn eine Änderung an einem Aspekt des Datenprovider-Elements an <codeph>rowIndex</codeph> vorgenommen wurde, die sich auf die Anzeige der angegebenen Zelle auswirken könnte. Das Aufrufen dieser Methode ähnelt dem Aufrufen der <codeph>dataProvider.itemUpdated()</codeph>-Methode. Hierbei wird das Grid darüber informiert, dass alle das angegebene Element anzeigende Zeilen neu angezeigt werden sollen. Die Verwendung dieser Methode ist relativ effizient, da der Bereich der Änderung auf eine einzige Zelle eingeschränkt wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc>
      Löscht Daten zur Spaltenbreite im Zwischenspeicher, die auf der typicalItem-Eigenschaft basiert wurden, und fordert eine neue Layoutübertragung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Löscht Daten zur Spaltenbreite im Zwischenspeicher, die auf der <codeph>typicalItem</codeph>-Eigenschaft basiert wurden, und fordert eine neue Layoutübertragung an. Rufen Sie diese Methode auf, wenn ein Aspekt des <codeph>typicalItem</codeph> geändert wurde, der vom Layout des Grid widergespiegelt werden soll.  
     
      <p>Diese Methode wird bei einer direkten Änderung des <codeph>typicalItem</codeph> automatisch aufgerufen. D. h., wenn die Eigenschaft auf einen neuen Wert gesetzt wird, der dem aktuellen Wert nicht entspricht („==“).</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:isCellVisible"><apiName>isCellVisible</apiName><shortdesc>
      Gibt „true“ zurück, wenn die angegebene Zelle zumindest teilweise sichtbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„True“, wenn die angegebene Zelle (oder Zeile, wenn „columnIndex == -1“) zumindest teilweise sichtbar ist.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Die auf null basierende Zeilenindexposition der Zelle des Elementrenderers.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Die auf null basierende Spaltenindexposition der Zelle des Elementrenderers.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt <codeph>true</codeph> zurück, wenn die angegebene Zelle zumindest teilweise sichtbar ist. Wenn <codeph>columnIndex == -1</codeph>, wird <codeph>true</codeph> zurückgegeben, sofern die angegebene Zeile zumindest teilweise sichtbar ist. Wenn <codeph>rowIndex == -1</codeph>, wird <codeph>true</codeph> zurückgegeben, sofern die angegebene Spalte zumindest teilweise sichtbar ist. Wenn sowohl <codeph>columnIndex</codeph> als auch <codeph>rowIndex</codeph> „-1“ sind, wird <codeph>false</codeph> zurückgegeben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.SINGLE_CELL oder GridSelectionMode.MULTIPLE_CELLS lautet, wird die Zelle aus der Auswahl entfernt und die Position des Einfügezeichens auf die Zelle festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>rowIndex</codeph> oder <codeph>columnIndex</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, wird die Zelle aus der Auswahl entfernt und die Position des Einfügezeichens auf die Zelle festgelegt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Der <codeph>rowIndex</codeph> entspricht der Indexposition im Datenprovider des Elements, das die ausgewählte Zelle enthält. Der <codeph>columnIndex</codeph> entspricht der Indexposition in <codeph>columns</codeph> der Spalte, die die ausgewählte Zelle enthält.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet, wird diese Zeile aus der Auswahl entfernt und die Position des Einfügezeichens auf diese Zeile festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>index</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist. 
           
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird diese Zeile aus der Auswahl entfernt und die Position des Einfügezeichens auf diese Zeile festgelegt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Der <codeph>rowIndex</codeph> entspricht der Indexposition im Datenprovider des Elements, das die ausgewählte Zelle enthält.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectAll"><apiName>selectAll</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.MULTIPLE_ROWS lautet, werden alle Zeilen ausgewählt und das Einfügezeichen entfernt. Wenn der selectionMode GridSelectionMode.MULTIPLE_CELLS lautet, werden alle Zellen ausgewählt und das Einfügezeichen entfernt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>True</codeph>, wenn die Auswahl geändert wurde.
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, werden alle Zeilen ausgewählt und das Einfügezeichen entfernt. Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, werden alle Zellen ausgewählt und das Einfügezeichen entfernt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Wenn dem <codeph>dataProvider</codeph> Elemente hinzugefügt werden oder <codeph>columns</codeph> nach dem Aufrufen dieser Methode hinzugefügt werden, werden die neuen Zeilen oder Zellen in der neuen Spalte ausgewählt.</p>
     
      <p>Dieser implizite „selectAll“-Modus wird beendet, wenn eines der folgenden Ereignisse auftritt:
      <ul>
        <li>Auswahl wird mit <codeph>clearSelection</codeph> gelöscht.</li>
        <li>Auswahl wird mit <codeph>setSelectedCell</codeph>, <codeph>setSelectedCells</codeph>, <codeph>setSelectedIndex</codeph> oder <codeph>selectIndices</codeph> zurückgesetzt.</li>
        <li><codeph>dataProvider</codeph> wird aktualisiert und <codeph>preserveSelection</codeph> ist „false“.</li>
        <li><codeph>dataProvider</codeph> wird zurückgesetzt.</li>
        <li><codeph>columns</codeph> wird aktualisiert, <codeph>preserveSelection</codeph> ist <codeph>false</codeph> und <codeph>selectionMode</codeph> lautet <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>.</li>
        <li><codeph>columns</codeph> wird zurückgesetzt und <codeph>selectionMode</codeph> lautet <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>.</li> 
      </ul></p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/clearSelection"><linktext>spark.components.Grid.clearSelection</linktext></link><link href="spark.components.xml#Grid/selectIndices"><linktext>spark.components.Grid.selectIndices</linktext></link><link href="spark.components.xml#Grid/setSelectedCell"><linktext>spark.components.Grid.setSelectedCell</linktext></link><link href="spark.components.xml#Grid/setSelectedCells"><linktext>spark.components.Grid.setSelectedCells</linktext></link><link href="spark.components.xml#Grid/setSelectedIndex"><linktext>spark.components.Grid.setSelectedIndex</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc> 
      Wenn der selectionMode GridSelectionMode.MULTIPLE_CELLS lautet, wird die Auswahl auf alle Zellen im Zellbereich und die Position des Einfügezeichens auf die letzte Zelle im Zellbereich festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn der Zellbereich oder der <codeph>selectionMode</codeph> ungültig ist.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition des Ursprungs des Zellbereichs.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition des Ursprungs des Zellbereichs.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc>Die Anzahl der Zeilen beginnend mit <codeph>rowIndex</codeph>, die im Zellbereich enthalten sein sollen.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc>Die Anzahl der Spalten beginnend mit <codeph>columnIndex</codeph>, die im Zellbereich enthalten sein sollen.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, wird die Auswahl auf alle Zellen im Zellbereich und die Position des Einfügezeichens auf die letzte Zelle im Zellbereich festgelegt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Der <codeph>rowIndex</codeph> entspricht der Indexposition im Datenprovider des Elements, das den Ursprung des Zellbereichs enthält. Der <codeph>columnIndex</codeph> entspricht der Indexposition in <codeph>columns</codeph> der Spalte, die den Ursprung des Zellbereichs enthält.</p>
     
      <p>Diese Methode hat keine Auswirkungen, wenn der Zellbereich nicht komplett innerhalb des Rasters enthalten ist.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectIndices"><apiName>selectIndices</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.MULTIPLE_ROWS lautet, wird die Auswahl auf die angegebenen Zeilen und die Position des Einfügezeichens auf endRowIndex festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn eine Indexposition ungültig ist, <codeph>startRowIndex</codeph> nicht kleiner oder gleich <codeph>endRowIndex</codeph> ist oder der <codeph>selectionMode</codeph> ungültig ist. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der ersten Zeile in der Auswahl.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der Zeilen in der Auswahl.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird die Auswahl auf die angegebenen Zeilen und die Position des Einfügezeichens auf <codeph>endRowIndex</codeph> festgelegt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Jede Indexposition stellt ein Element im Datenprovider dar, das in der Auswahl enthalten sein soll.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.MULTIPLE_CELLS lautet, wird „true“ festgelegt, wenn sich die Zellen im Zellbereich in der aktuellen Auswahl befinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die aktuelle Auswahl alle Zellen im Zellbereich enthält.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der Zeilen beginnend mit <codeph>rowIndex</codeph>, die im Zellbereich enthalten sein sollen.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der Spalten beginnend mit <codeph>columnIndex</codeph>, die im Zellbereich enthalten sein sollen.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, wird <codeph>true</codeph> zurückgegeben, wenn sich die Zellen im Zellbereich in der aktuellen Auswahl befinden.
     
      <p>Der <codeph>rowIndex</codeph> muss zwischen 0 und der Länge des Dataproviders liegen. Der <codeph>columnIndex</codeph> muss zwischen 0 und der Länge von <codeph>columns</codeph> liegen. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc>
      Wenn selectionMode entweder GridSelectionMode.SINGLE_CELL oder GridSelectionMode.MULTIPLE_CELLS lautet, wird „true“ zurückgegeben, wenn die Zelle in der aktuellen Auswahl ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die aktuelle Auswahl die Zelle enthält.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, wird <codeph>true</codeph> zurückgegeben, wenn die Zelle in der aktuellen Auswahl ist.
     
      <p>Der <codeph>rowIndex</codeph> muss zwischen 0 und der Länge des Dataproviders liegen. Der <codeph>columnIndex</codeph> muss zwischen 0 und der Länge von <codeph>columns</codeph> liegen. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc>
      Wenn selectionMode GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet, wird „true“ zurückgegeben, sofern die Zeile an der Indexposition in der aktuellen Auswahl ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die Auswahl die Zeile enthält.
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zeile.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird <codeph>true</codeph> zurückgegeben, sofern die Zeile an der <codeph>Indexposition</codeph> in der aktuellen Auswahl ist.
     
      <p>Der <codeph>rowIndex</codeph> entspricht der Indexposition im Datenprovider des Elements, das die ausgewählte Zelle enthält.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.MULTIPLE_ROWS lautet, wird „true“ zurückgegeben, wenn sich die Zeilen an den Indexpositionen in der aktuellen Auswahl befinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die aktuelle Auswahl diese Zeilen enthält.
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Vektor von auf null basierenden Zeilenindexpositionen, die in der Auswahl enthalten sein sollen. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>lautet, wird <codeph>true</codeph> zurückgegeben, wenn sich die Zeilen an <codeph>indices</codeph> in der aktuellen Auswahl befinden.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.SINGLE_CELL oder GridSelectionMode.MULTIPLE_CELLS lautet, werden die Auswahl und die Position des Einfügezeichens auf diese Zelle festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true </codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>rowIndex</codeph> oder <codeph>columnIndex</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, werden die Auswahl und die Position des Einfügezeichens auf diese Zelle festgelegt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Der <codeph>rowIndex</codeph> entspricht der Indexposition im Datenprovider des Elements, das die ausgewählte Zelle enthält. Der <codeph>columnIndex</codeph> entspricht der Indexposition in <codeph>columns</codeph> der Spalte, die die ausgewählte Zelle enthält.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet, werden die Auswahl und die Position des Einfügezeichens auf diese Zeile festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true </codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>index</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist. 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, werden die Auswahl und die Position des Einfügezeichens auf diese Zeile festgelegt. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Der <codeph>rowIndex</codeph> entspricht der Indexposition im Datenprovider des Elements, das die ausgewählte Zelle enthält.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiValue id="spark.components:Grid:anchorColumnIndex:get"><apiName>anchorColumnIndex</apiName><shortdesc>
      Die Spaltenindexposition des Ankers für die nächste Auswahl mit der Umschalttaste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Spaltenindexposition des <i>anchor</i> für die nächste Auswahl mit der Umschalttaste. Der Anker ist das zuletzt ausgewählte Element. Er definiert das Ankerelement, wenn mehrere Elemente im Raster ausgewählt werden. Wenn Sie mehrere Elemente auswählen, reicht die Gruppe der Elemente vom Anker- bis zum Einfügezeichenelement.
     
      <p>Rasterereignisprozeduren müssen mit dieser Eigenschaft die Position des aktuellsten Mouse-Down- oder Tastaturereignisses (ohne Betätigen der Umschalttaste) aufzeichnen, das ein Ende der nächsten möglichen Auswahl mit der Umschalttaste definiert. Die Indexposition des Einfügezeichens definiert das andere Ende.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:anchorRowIndex:get"><apiName>anchorRowIndex</apiName><shortdesc>
      Die Zeilenindexposition des Ankers für die nächste Auswahl mit der Umschalttaste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Zeilenindexposition des <i>anchor</i> für die nächste Auswahl mit der Umschalttaste. Der Anker ist das zuletzt ausgewählte Element. Er definiert das Ankerelement, wenn mehrere Elemente im Raster ausgewählt werden. Wenn Sie mehrere Elemente auswählen, reicht die Gruppe der Elemente vom Anker- bis zum Einfügezeichenelement.
     
      <p>Rasterereignisprozeduren müssen mit dieser Eigenschaft die Position des aktuellsten Mouse-Down- oder Tastaturereignisses (ohne Betätigen der Umschalttaste) aufzeichnen, das ein Ende der nächsten möglichen Auswahl mit der Umschalttaste definiert. Die Indexposition des Einfügezeichens definiert das andere Ende.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:caretColumnIndex:get"><apiName>caretColumnIndex</apiName><shortdesc>
      Die Spaltenindexposition des caretIndicator, wenn showCaretIndicator „true“ ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Spaltenindexposition des <codeph>caretIndicator</codeph>, wenn<codeph>caretIndicator</codeph> <codeph>true</codeph> ist.
     
      <p>Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, beansprucht der Indikator die gesamte Zeile und <codeph>caretColumnIndex</codeph> wird ignoriert. Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, beansprucht der <codeph>caretIndicator</codeph> die angegebene Zeile.</p>
     
      <p>Das Festlegen von <codeph>caretColumnIndex</codeph> auf „-1“ bedeutet, dass die Spaltenindexposition nicht definiert und ein Zelleinfügezeichen nicht angezeigt wird. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretIndicator:get"><apiName>caretIndicator</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet: ein einzelnes für eine Einfügezeichenzeile angezeigtes visuelles Element. Wenn der selectionMode GridSelectionMode.SINGLE_CELL oder GridSelectionMode.MULTIPLE_CELLS lautet: das für die Einfügezeichenzelle angezeigte visuelle Element. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet: ein einzelnes für eine Einfügezeichenzeile angezeigtes visuelles Element. Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet: das für die Einfügezeichenzelle angezeigte visuelle Element.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretRowIndex:get"><apiName>caretRowIndex</apiName><shortdesc>
      Die Zeilenindexposition des caretIndicator, wenn showCaretIndicator „true“ ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Zeilenindexposition des <codeph>caretIndicator</codeph>, wenn <codeph>showCaretIndicator</codeph> <codeph>true</codeph> lautet. Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, beansprucht der Indikator die gesamte Zeile und die <codeph>caretColumnIndex</codeph>-Eigenschaft wird ignoriert. Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, beansprucht der <codeph>caretIndicator</codeph> die angegebene Zeile.
     
      <p>Das Festlegen von <codeph>caretRowIndex</codeph> auf „-1“ bedeutet, dass die Zeilenindexposition nicht definiert ist und das Einfügezeichen nicht angezeigt wird.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      Ein visuelles Element, das zwischen allen Spalten angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein visuelles Element, das zwischen allen Spalten angezeigt wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columns:get"><apiName>columns</apiName><shortdesc>
      Die von diesem Raster angezeigte Liste der GridColumn-Objekte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die von diesem Raster angezeigte Liste der GridColumn-Objekte. Jede Spalte wählt verschiedene anzuzeigende Eigenschaften des Datenproviderelements. 
      
      <p>GridColumn-Objekte können nur in den <codeph>columns</codeph> für ein einziges Grid-Steuerelement angezeigt werden.</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      Das DataGrid-Steuerelement, für das dieses Grid als Skinteil des Rasters verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Das DataGrid-Steuerelement, für das dieses Grid als Skinteil des Rasters verwendet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Eine Liste von Datenelementen, die den Zeilen im Raster entsprechen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Liste von Datenelementen, die den Zeilen im Raster entsprechen. Jede Rasterspalte ist mit einer Eigenschaft der Datenelemente verknüpft, um diese Eigenschaft in den Raster<i>zellen</i> anzuzeigen.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      Gibt die Spaltenindexposition des hoverIndicator an, wenn showHoverIndicator „true“ ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die Spaltenindexposition des <codeph>hoverIndicator</codeph> an, wenn <codeph>showHoverIndicator</codeph> <codeph>true</codeph> ist. Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, beansprucht der Indikator die gesamte Zeile und <codeph>hoverColumnIndex</codeph> wird ignoriert. Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, beansprucht der <codeph>hoverIndicator</codeph> die angegebene Zelle.
      
      <p>Das Festlegen von <codeph>hoverColumnIndex</codeph> auf „-1“ (Standardeinstellung) bedeutet, dass die Spaltenindexposition nicht definiert ist und ein hover-Indikator für die Zelle nicht angezeigt wird.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverIndicator:get"><apiName>hoverIndicator</apiName><shortdesc>
      Wenn selectionMode GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet. Ein einzelnes visuelles Element, das für die Zeile, auf die mit der Maus gezeigt wird, angezeigt wird. Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, das visuelle Element für die Zelle.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverRowIndex:get"><apiName>hoverRowIndex</apiName><shortdesc>
      Gibt die Spaltenindexposition des hoverIndicator an, wenn showHoverIndicator „true“ ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die Spaltenindexposition des <codeph>hoverIndicator</codeph> an, wenn <codeph>showHoverIndicator</codeph> <codeph>true</codeph> ist. Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, beansprucht der Indikator die gesamte Zeile und <codeph>hoverColumnIndex</codeph> wird ignoriert. Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, beansprucht der <codeph>hoverIndicator</codeph> die angegebene Zelle.
     
      <p>Das Festlegen von <codeph>hoverRowIndex</codeph> auf „-1“ (Standardeinstellung) bedeutet, dass die Zeilenindexposition nicht definiert ist und ein hover-Indikator nicht angezeigt wird.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      Der Elementrenderer, der für Spalten verwendet wird, die keine(n) angeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Elementrenderer, der für Spalten verwendet wird, die keine(n) angeben.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc>
      Wenn „true“, wird die Auswahl beibehalten, wenn der Datenprovider seine Sammlung aktualisiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, wird die Auswahl beibehalten, wenn der Datenprovider seine Sammlung aktualisiert. Da diese Aktualisierung jedoch das Speichern jedes Elements in der Auswahl erforderlich macht, ist diese Aktion nicht ratsam, wenn die Auswahl zu groß ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc>
      Die gemessene Breite dieses Rasters ist breit genug, um die ersten requestedColumnCount Spalten anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die gemessene Breite dieses Rasters ist breit genug, um die ersten <codeph>requestedColumnCount</codeph> Spalten anzuzeigen. Wenn <codeph>requestedColumnCount</codeph> auf „-1“ eingestellt ist, ist die gemessene Breite für alle Spalten groß genug.
     
      <p>Wenn die Originalgröße des Rasters explizit festgelegt wurde, hat diese Eigenschaft keine Auswirkungen.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc>
      Die gemessene Höhe des Rasters ist groß genug, um höchstens requestedMaxRowCount Zeilen anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die gemessene Höhe des Rasters ist groß genug, um höchstens <codeph>requestedMaxRowCount</codeph> Zeilen anzuzeigen.
     
      <p>Die Eigenschaft hat keine Auswirkungen, wenn einer der folgenden Werte „true“ lautet;
      <ul>
          <li><codeph>requestedRowCount</codeph> ist festgelegt.</li>
          <li>Die tatsächliche Größe des Rasters wurde explizit festgelegt.</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc>
      Die gemessene Breite dieses Rasters ist breit genug, um mindestens requestedMinColumnCount Spalten anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die gemessene Breite dieses Rasters ist breit genug, um mindestens <codeph>requestedMinColumnCount</codeph> Spalten anzuzeigen.
     
      <p>Die Eigenschaft hat keine Auswirkungen, wenn einer der folgenden Werte „true“ lautet;
      <ul>
          <li><codeph>requestedColumnCount</codeph> ist festgelegt..</li>
          <li>Die tatsächliche Größe des Rasters wurde explizit festgelegt.</li>
          <li>Das Raster befindet sich in einer Scroller-Komponente.</li>
      </ul>
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc>
      Die gemessene Höhe dieses Rasters ist groß genug, um mindestens requestedMinRowCount Zeilen anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die gemessene Höhe dieses Rasters ist groß genug, um mindestens <codeph>requestedMinRowCount</codeph> Zeilen anzuzeigen.
     
      <p>Die Eigenschaft hat keine Auswirkungen, wenn einer der folgenden Werte „true“ lautet;
      <ul>
          <li><codeph>requestedRowCount</codeph> ist festgelegt.</li>
          <li>Die tatsächliche Größe des Rasters wurde explizit festgelegt.</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc>
      Die gemessene Höhe dieses Rasters ist groß genug, um die ersten requestedRowCount Zeilen anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die gemessene Höhe dieses Rasters ist groß genug, um die ersten <codeph>requestedRowCount</codeph> Zeilen anzuzeigen. 
     
      <p>Wenn <codeph>requestedRowCount</codeph> auf „-1“ eingestellt ist, ist die gemessene Größe groß genug für alle Layoutelemente. </p>
     
      <p>Wenn die Originalgröße des Rasters explizit festgelegt wurde, hat diese Eigenschaft keine Auswirkungen.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      Wenn der Wert „true“ ist und die selectionMode-Eigenschaft nicht GridSelectionMode.NONE lautet, muss im Raster immer ein Element ausgewählt sein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn der Wert <codeph>true</codeph> ist und die <codeph>selectionMode</codeph>-Eigenschaft nicht <codeph>GridSelectionMode.NONE</codeph> lautet, muss im Raster immer ein Element ausgewählt sein.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc>
      Gibt an, ob die Größe der Spalten vom Benutzer geändert werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
        
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die Größe der Spalten vom Benutzer geändert werden kann. Ist der Wert <codeph>true</codeph>, kann der Benutzer die Spalten des DataGrid-Steuerelements vergrößern oder verkleinern, indem er die Rasterlinien zwischen den Kopfzellen zieht. Ist der Wert <codeph>true</codeph>, müssen auch die <codeph>resizeable</codeph>-Eigenschaften einzelner Spalten auf <codeph>false</codeph> gesetzt sein, damit der Benutzer nicht die Größe einer bestimmten Spalte ändert.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:rowBackground:get"><apiName>rowBackground</apiName><shortdesc>
      Ein visuelles Element, das den Hintergrund für jede Zeile anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowBackgroundChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein visuelles Element, das den Hintergrund für jede Zeile anzeigt.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc>
      Wenn variableRowHeight den Wert „false“ hat, gibt diese Eigenschaft die tatsächliche Höhe jeder Zeile in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Wenn <codeph>variableRowHeight</codeph> den Wert <codeph>false</codeph> hat, gibt diese Eigenschaft die tatsächliche Höhe jeder Zeile in Pixeln an.
     
      <p>Wenn <codeph>variableRowHeight</codeph> <codeph>true</codeph> lautet, wird der Wert dieser Eigenschaft als geschätzte Höhe für Zeilen festgelegt, die noch nicht angezeigt werden, und nicht die gewünschte Höhe der mit dem <codeph>typicalItem</codeph> konfigurierten Renderer. Entsprechend legt diese Eigenschaft die Höhe der leeren Zeilen fest, wenn das Grid die Anzeige mit leeren Zeilen auffüllt.</p>
     
      <p>Wenn <codeph>variableRowHeight</codeph> den Wert <codeph>false</codeph> hat, ist der Standardwert für diese Eigenschaft die bevorzugte Maximalhöhe der für <codeph>typicalItem</codeph> erstellten spaltenspezifischen Renderer.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowSeparator:get"><apiName>rowSeparator</apiName><shortdesc>
      Ein visuelles Element, das zwischen allen Zeilen angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein visuelles Element, das zwischen allen Zeilen angezeigt wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc>
      Wenn selectionMode￼ GridSelectionMode.SINGLE_CELL￼ oder ￼GridSelectionMode.MULTIPLE_CELLS￼ lautet, wird die erste ausgewählte Zelle, beginnend bei Zeile 0, Spalte 0, zurückgegeben, und es werden alle Spalten einer Zeile durchlaufen, bevor mit der nächsten Zeile fortgefahren wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, wird die erste ausgewählte Zelle, beginnend bei Zeile 0, Spalte 0, zurückgegeben, und es werden alle Spalten einer Zeile durchlaufen, bevor mit der nächsten Zeile fortgefahren wird.
     
      <p>Wenn der Benutzer die Auswahl durch Interaktion mit dem Steuerelement ändert, löst dieses das <codeph>selectionChange</codeph>-Ereignis aus. Wenn der Benutzer die Auswahl programmgesteuert ändert, löst das Steuerelement das <codeph>valueCommit</codeph>-Ereignis aus.</p>
     
      <p> Mit dieser Eigenschaft wird die Auswahl im MXML-Markup initialisiert oder gebunden. Die <codeph>setSelectedCell()</codeph>-Methode sollte für programmgesteuerte Auswahlupdates verwendet werden, z. B. beim Schreiben einer Tastatur- oder Mausereignisprozedur. </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc>
      Wenn der selectionMode entweder GridSelectionMode.SINGLE_CELL oder GridSelectionMode.MULTIPLE_CELLS lautet, wird ein Vektor von CellPosition-Objekten zurückgegeben, die die Positionen der ausgewählten Zellen im Raster darstellen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, wird ein Vektor von CellPosition-Objekten zurückgegeben, die die Positionen der ausgewählten Zellen im Raster darstellen.
     
      <p>Wenn der Benutzer die Auswahl durch Interaktion mit dem Steuerelement ändert, löst dieses das <codeph>selectionChange</codeph>-Ereignis aus. Wenn der Benutzer die Auswahl programmgesteuert ändert, löst das Steuerelement das <codeph>valueCommit</codeph>-Ereignis aus.</p>
     
      <p> Mit dieser Eigenschaft wird die Auswahl im MXML-Markup initialisiert oder gebunden. Die <codeph>setSelectedCell()</codeph>-Methode sollte für programmgesteuerte Auswahlupdates verwendet werden, z. B. beim Schreiben einer Tastatur- oder Mausereignisprozedur. </p> 
     
      <p>Der Standardwert ist ein leerer <codeph>Vector.&lt;CellPosition></codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Wenn der selectionMode entweder GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet, wird der rowIndex der ersten ausgewählten Zeile zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird der rowIndex der ersten ausgewählten Zeile zurückgegeben. 
     
      <p>Wenn der Benutzer die Auswahl durch Interaktion mit dem Steuerelement ändert, löst dieses das <codeph>selectionChange</codeph>-Ereignis aus. Wenn der Benutzer die Auswahl programmgesteuert ändert, löst das Steuerelement das <codeph>valueCommit</codeph>-Ereignis aus.</p>
     
      <p> Mit dieser Eigenschaft wird die Auswahl im MXML-Markup initialisiert oder gebunden. Die <codeph>setSelectedCell()</codeph>-Methode sollte für programmgesteuerte Auswahlupdates verwendet werden, z. B. beim Schreiben einer Tastatur- oder Mausereignisprozedur. </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      Wenn der selectionMode entweder GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet, wird ein Vektor der Indexpositionen der ausgewählten Zeilen zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird ein Vektor der Indexpositionen der ausgewählten Zeilen zurückgegeben. Auf alle anderen Auswahlmodi hat diese Methode keine Auswirkung.
     
      <p>Wenn der Benutzer die Auswahl durch Interaktion mit dem Steuerelement ändert, löst dieses das <codeph>selectionChange</codeph>-Ereignis aus. Wenn der Benutzer die Auswahl programmgesteuert ändert, löst das Steuerelement das <codeph>valueCommit</codeph>-Ereignis aus.</p>
     
      <p> Mit dieser Eigenschaft wird die Auswahl im MXML-Markup initialisiert oder gebunden. Die setSelectedCell()-Methode sollte für programmgesteuerte Auswahlupdates verwendet werden, z. B. beim Schreiben einer Tastatur- oder Mausereignisprozedur. </p> > 
     
      <p>Der Standardwert ist ein leerer <codeph>Vector.&lt;int></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet, wird das Element im Datenprovider, das derzeit ausgewählt ist, oder undefined (nicht definiert) zurückgegeben, wenn keine Zeilen ausgewählt wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird das Element im Datenprovider, das derzeit ausgewählt oder <codeph>undefined</codeph> (nicht definiert) ist, zurückgegeben, wenn keine Zeilen ausgewählt wurden.   
     
      <p>Wenn der Benutzer die Auswahl durch Interaktion mit dem Steuerelement ändert, löst dieses das <codeph>selectionChange</codeph>-Ereignis aus. Wenn der Benutzer die Auswahl programmgesteuert ändert, löst das Steuerelement das <codeph>valueCommit</codeph>-Ereignis aus.</p>
     
      <p> Mit dieser Eigenschaft wird die Auswahl im MXML-Markup initialisiert oder gebunden. Die <codeph>setSelectedCell()</codeph>-Methode sollte für programmgesteuerte Auswahlupdates verwendet werden, z. B. beim Schreiben einer Tastatur- oder Mausereignisprozedur. </p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      Wenn der selectionMode entweder GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet, wird ein Vektor der derzeit ausgewählten dataProvider-Elemente zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird ein Vektor der derzeit ausgewählten dataProvider-Elemente zurückgegeben.
     
      <p>Wenn der Benutzer die Auswahl durch Interaktion mit dem Steuerelement ändert, löst dieses das <codeph>selectionChange</codeph>-Ereignis aus. Wenn der Benutzer die Auswahl programmgesteuert ändert, löst das Steuerelement das <codeph>valueCommit</codeph>-Ereignis aus.</p>
     
      <p> Mit dieser Eigenschaft wird die Auswahl im MXML-Markup initialisiert oder gebunden. Die setSelectedCell()-Methode sollte für programmgesteuerte Auswahlupdates verwendet werden, z. B. beim Schreiben einer Tastatur- oder Mausereignisprozedur. </p> 
      
      <p>Der Standardwert ist ein leerer <codeph>Vector.&lt;Object></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectionIndicator:get"><apiName>selectionIndicator</apiName><shortdesc>
      Wenn der selectionMode GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet: ein für jede ausgewählte Zeile angezeigtes visuelles Element. Wenn der selectionMode GridSelectionMode.SINGLE_CELL oder GridSelectionMode.MULTIPLE_CELLS lautet: ein für jede ausgewählte Zelle angezeigtes visuelles Element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet: ein für jede ausgewählte Zeile angezeigtes visuelles Element. Wenn der <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELL</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet: ein für jede ausgewählte Zelle angezeigtes visuelles Element. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc>
      Wenn der selectionMode entweder GridSelectionMode.SINGLE_ROW oder GridSelectionMode.MULTIPLE_ROWS lautet, wird die Anzahl der ausgewählten Zeilen zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_ROW</codeph> oder <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> lautet, wird die Anzahl der ausgewählten Zeilen zurückgegeben. Wenn <codeph>selectionMode</codeph> <codeph>GridSelectionMode.SINGLE_CELLS</codeph> oder <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> lautet, wird die Anzahl der ausgewählten Zellen zurückgegeben.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc>
      Der Auswahlmodus des Steuerelements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Auswahlmodus des Steuerelements. Mögliche Werte sind: <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>, <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>, <codeph>GridSelectionMode.NONE</codeph>, <codeph>GridSelectionMode.SINGLE_CELL</codeph>, und <codeph>GridSelectionMode.SINGLE_ROW</codeph>.
     
      <p>Durch Ändern des selectionMode wird die aktuelle Auswahl gelöscht und der caretRowIndex und caretColumnIndex auf „-1“ zurückgesetzt.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      Wenn „true“, wird ein dataTip für alle sichtbaren Zellen angezeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, wird ein dataTip für alle sichtbaren Zellen angezeigt. Wenn <codeph>false</codeph> (Standardeinstellung), wird ein dataTip nur angezeigt, wenn die <codeph>showDataTips</codeph>-Eigenschaft der Spalte <codeph>true</codeph> lautet. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      Durch das Layout des Rasters wird sichergestellt, dass Spalten, deren Breite nicht angegeben wurde, breit genug sind, um einen Elementrenderer für dieses Datenprovider-Standardelement anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Durch das Layout des Rasters wird sichergestellt, dass Spalten, deren Breite nicht angegeben wurde, breit genug sind, um einen Elementrenderer für dieses Datenprovider-Standardelement anzuzeigen. Wenn kein typisches Element angegeben wurde, wird das erste Datenprovider-Element verwendet.
     
      <p>Einschränkung: Wenn das <codeph>typicalItem</codeph> ein IVisualItem ist, darf es nicht gleichzeitig ein Mitglied des Datenproviders sein.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc>
      Wenn der Wert „true“ ist, stellt die Höhe jeder Zeile das Maximum der bevorzugten Höhen der bisher angezeigten Zellen dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn der Wert <codeph>true</codeph> ist, stellt die Höhe jeder Zeile das Maximum der bevorzugten Höhen der bisher angezeigten Zellen dar.
     
      <p>Wenn der Wert <codeph>false</codeph> ist, entspricht die Höhe jeder Zeile dem Wert der <codeph>rowHeight</codeph>-Eigenschaft. Wenn <codeph>rowHeight</codeph> nicht festgelegt ist, wird die Höhe aller Zeilen von der <codeph>typicalItem</codeph>-Eigenschaft definiert.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Application"><apiName>Application</apiName><shortdesc>
  Flex definiert einen Standard- oder Application-Container, mit dem Sie mit dem Hinzufügen von Inhalten zu Ihrer Anwendung beginnen können, ohne explizit einen anderen Container definieren zu müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="direction"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Application" playerVersion="Flash10" type="uint">
<description>
  Die Hintergrundfarbe der Anwendung. Diese Farbe wird als Bühnenfarbe für die Anwendung und als Hintergrundfarbe für das HTML-Einbettungs-Tag verwendet.
   </description>
<default>0x464646
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Application" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Der Skinteil, der das Aussehen des Steuerleistenbereichs des Containers definiert. Standardmäßig bestimmt die ApplicationSkin-Klasse, dass der Steuerleistenbereich am oberen Rand des Inhaltsbereichs des Anwendungscontainers und mit einem grauen Hintergrund angezeigt wird.
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Application&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Application
    <strong>Properties</strong>
    applicationDPI=<i>Device dependent</i>"
    backgroundColor="0xFFFFFF"
    colorCorrection="default"
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    frameRate="24"
    pageTitle""
    preloader="<i>No default</i>"
    preloaderChromeColor="<i>No default</i>"
    resizeForSoftKeyboard=true"
    runtimeDPIProvider="RuntimeDPIProvider"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    splashScreenImage=""
    splashScreenMinimumDisplayTime="1000"
    splashScreenScaleMode="none"
    usePreloader="true"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
     <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex definiert einen Standard- oder Application-Container, mit dem Sie mit dem Hinzufügen von Inhalten zu Ihrer Anwendung beginnen können, ohne explizit einen anderen Container definieren zu müssen.
   <p>Der Application-Container weist folgende Standardmerkmale auf:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>375 Pixel hoch und 500 Pixel breit im eigenständigen Flash Player und der gesamte verfügbare Platz im Browser</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>0 Pixel breit und 0 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>Keine Beschränkung</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.ApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ApplicationContainerExample.mxml"><swfblock conref="examples/ApplicationContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Application_flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR_uncaughtError"><apiName>uncaughtError</apiName><shortdesc>
  Wird ausgelöst, wenn ein nicht erfasster Fehler durch die globale Ausnahmeprozedur erfasst wird.
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR</apiEventType><adobeApiEventClassifier>flash.events.UncaughtErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein nicht erfasster Fehler durch die globale Ausnahmeprozedur erfasst wird.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  Wird ausgelöst, wenn ein HTTPService-Aufruf fehlschlägt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein HTTPService-Aufruf fehlschlägt.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Wird ausgelöst, nachdem die Anwendung initialisiert und vom LayoutManager verarbeitet sowie der Anzeigeliste zugeordnet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem die Anwendung initialisiert und vom LayoutManager verarbeitet sowie der Anzeigeliste zugeordnet wurde.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Application:Application"><apiName>Application</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        Gibt die Bildrate der Anwendung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
           </apiDefaultValue></apiValueDef><apiDesc>
        Gibt die Bildrate der Anwendung an.
             <p><b>Hinweis:</b> Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden. </p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        Legt einen String fest, der in der Titelleiste des Browsers angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
        Gibt einen String an, der in der Titelleiste des Browsers angezeigt wird. Diese Eigenschaft stellt dieselben Funktionen bereit wie das HTML-Tag <codeph>&lt;title></codeph>.
             <p><b>Hinweis:</b> Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden. Der in MXML-Code eingestellte Code ist für die Verwendung mit einem Werkzeug konzipiert, das die mit SDK verfügbaren HTML-Vorlagen aktualisiert.</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
      Gibt die für die standardmäßige Preloader-Komponente verwendete Chromfarbe an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
      Gibt die für die standardmäßige Preloader-Komponente verwendete Chromfarbe an. Diese Eigenschaft hat denselben Effekt wie der von den Spark-Skins verwendete <codeph>chromeColor</codeph>-Stil. Diese Eigenschaft sollte normalerweise auf denselben Wert wie die <codeph>chromeColor</codeph>-Stileigenschaft des Anwendungscontainers eingestellt sein.
           <p>Hinweis: Diese Eigenschaft kann nicht mit ActionScript-Code eingestellt werden; sie muss in MXML-Code eingestellt werden.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloader"><apiName>preloader</apiName><shortdesc>
      Der Anwendungscontainer unterstützt einen Anwendungs-Preloader, der anhand einer Anzeige den Download- und Initialisierungsfortschritt der SWF-Anwendungsdatei angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Der Anwendungscontainer unterstützt einen Anwendungs-Preloader, der anhand einer Anzeige den Download- und Initialisierungsfortschritt der SWF-Anwendungsdatei angibt. Standardmäßig ist der Anwendungs-Preloader aktiviert. Der Preloader verfolgt, wie viele Byte heruntergeladen wurden und aktualisiert die Fortschrittanzeige laufend. 
           <p>Verwenden Sie diese Eigenschaft, um den Pfad einer Komponente anzugeben, die eine benutzerdefinierte Fortschrittanzeige definiert. Zum Erstellen einer benutzerdefinierten Fortschrittsanzeige erstellen Sie normalerweise eine Unterklasse der Klasse „SparkDownloadProgressBar“ oder „DownloadProgressBar“, oder Sie erstellen eine Unterklasse der Klasse „flash.display.Sprite“, die die Schnittstelle „mx.preloaders.IPreloaderDisplay“ implementiert. </p>
           <p><b>Hinweis:</b> Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden. </p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.preloaders.SparkDownloadProgressBar.xml"><linktext>mx.preloaders.SparkDownloadProgressBar</linktext></link><link href="" invalidHref="mx.preloaders.DownloadProgressBar.xml"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="" invalidHref="flash.display.Sprite.xml"><linktext>flash.display.Sprite</linktext></link><link href="" invalidHref="mx.preloaders.IPreloaderDisplay.xml"><linktext>mx.preloaders.IPreloaderDisplay</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Gibt die maximale Tiefe von Flash Player- oder AIR-Call-Stack an, bevor der Player angehalten wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
           </apiDefaultValue></apiValueDef><apiDesc>
        Gibt die maximale Tiefe des Flash Player- oder AIR-Aufrufstapels an, bevor der Player angehalten wird. Dies ist im Wesentlichen die Stapelüberlaufsgrenze.
             <p><b>Hinweis:</b> Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden. </p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        Gibt die maximale Dauer in Sekunden an, während der eine ActionScript-Ereignisprozedur ausgeführt werden kann, bevor Flash Player oder AIR davon ausgehen, dass sie nicht mehr reagiert und sie abbricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
           </apiDefaultValue></apiValueDef><apiDesc>
        Gibt die maximale Dauer in Sekunden an, die eine ActionScript-Ereignisprozedur ausgeführt werden kann, bevor Flash Player oder AIR annimmt, dass die Anwendung abgestürzt ist und sie abgebrochen wird. Der maximal zulässige Wert, den Sie einstellen können, beträgt 60 Sekunden.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:splashScreenMinimumDisplayTime"><apiName>splashScreenMinimumDisplayTime</apiName><shortdesc>
      Mindestzeitraum, bis der Begrüßungsbildschirm angezeigt wird, in Millisekunden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1000
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Mindestzeitraum, bis der Begrüßungsbildschirm angezeigt wird, in Millisekunden. Legen Sie den Begrüßungsbildschirm mit der <codeph>splashScreenImage</codeph>-Eigenschaft fest.
           <p><b>Hinweis:</b> Die Eigenschaft hat nur Auswirkungen, wenn die <codeph>splashScreenImage</codeph>-Eigenschaft festgelegt ist und die <codeph>Preloader</codeph>-Eigenschaft auf „spark.preloaders.SplashScreen“ gesetzt ist. Die spark.preloaders.SplashScreen-Klasse ist der standardmäßige Preloader für Mobile-Flex-Anwendungen. Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden.</p>
           <p><b>Hinweis:</b> Die frameworks\libs\mobile\mobilecomponents.swc-Datei muss dem Bibliothekspfad der Anwendung hinzugefügt werden, um den Begrüßungsbildschirm in einer Desktop-Anwendung zu unterstützen.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenScaleMode"><apiName>splashScreenScaleMode</apiName><shortdesc>
      Der Skalierungsmodus für den Begrüßungsbildschirm: Der Wert „none“ bedeutet, dass die Bildgröße so festgelegt ist, dass sie der eigenen Größe des Bilds entspricht. Der Wert „stretch“ legt die Breite und Höhe des Bilds auf die Bühnenbreite und -höhe fest und ändert dabei möglicherweise das Seitenverhältnis. Der Wert „letterbox“ legt die Breite und Höhe des Bilds so nah wie möglich an der Bühnenbreite und -höhe fest und wahrt dabei das Seitenverhältnis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"none"
      </apiDefaultValue></apiValueDef><apiDesc>
      Skalierungsmodus für den Begrüßungsbildschirm:
      
      <ul>
          <li>Der Wert <codeph>none</codeph> bedeutet, dass die Bildgröße so festgelegt ist, dass sie der eigenen Größe entspricht.</li>
               <li>Der Wert <codeph>stretch</codeph> legt die Breite und Höhe des Bilds auf die Bühnenbreite und -höhe fest und ändert dabei möglicherweise das Seitenverhältnis.</li>
               <li>Der Wert <codeph>letterbox</codeph> legt die Breite und Höhe des Bilds so nah wie möglich an der Bühnenbreite und -höhe fest und wahrt dabei das Seitenverhältnis. Das Bild wird auf den Höchstwert der Bühnengrenzen gestreckt. Dabei werden bei Bedarf innerhalb der Bühne Abstände eingefügt, um das Seitenverhältnis beizubehalten.</li>
               <li>Der Wert <codeph>zoom</codeph> ähnelt <codeph>letterbox</codeph>, allerdings streckt <codeph>zoom</codeph> das Bild über die Grenzen der Bühne hinaus, um die zur Beibehaltung des Seitenverhältnisses erforderlichen Abstände zu entfernen. Diese Einstellung wirkt sich so aus, dass die Grenzen der Bühne voll ausgenutzt werden, jedoch werden Teile des Bilds dadurch möglicherweise abgeschnitten.</li>
      </ul>
           <p>Für den Teil der Bühne, der nicht vom Bild verdeckt ist, wird die <codeph>backgroundColor</codeph> des Anwendungscontainers verwendet.</p>
           <p><b>Hinweis:</b> Die Eigenschaft hat nur Auswirkungen, wenn die <codeph>splashScreenImage</codeph>-Eigenschaft festgelegt ist und die <codeph>Preloader</codeph>-Eigenschaft auf „spark.preloaders.SplashScreen“ gesetzt ist. Die spark.preloaders.SplashScreen-Klasse ist der standardmäßige Preloader für Mobile-Flex-Anwendungen. Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden.</p>
           <p><b>Hinweis:</b> Die frameworks\libs\mobile\mobilecomponents.swc-Datei muss dem Bibliothekspfad der Anwendung hinzugefügt werden, um den Begrüßungsbildschirm in einer Desktop-Anwendung zu unterstützen.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        Mit „true“ wird angegeben, dass der Anwendungs-Preloader angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
        Legt, wenn <codeph>true</codeph>, fest, dass der Anwendung-Preloader angezeigt wird.
             <p><b>Hinweis:</b> Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden. </p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      DPI der Anwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      DPI der Anwendung. Standardmäßig ist dies die DPI des Geräts, auf dem die Anwendung derzeit ausgeführt wird. Bei Einstellung auf MXML skaliert Flex die Application, damit ihre DPI der <codeph>runtimeDPI</codeph> entspricht. Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:aspectRatio:get"><apiName>aspectRatio</apiName><shortdesc>
      Gibt das Seitenverhältnis der Bühne auf oberster Ebene basierend auf Breite und Höhe zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Gibt das Seitenverhältnis der Bühne auf oberster Ebene basierend auf Breite und Höhe zurück. Wenn die Breite der Bühne größer als die Höhe ist, wird die Bühne im Querformat angezeigt. Anderenfalls wird das Hochformat zurückgegeben.
      
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:colorCorrection:get"><apiName>colorCorrection</apiName><shortdesc>
     Der Wert der colorCorrection-Eigenschaft der Bühne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ColorCorrection.DEFAULT
         </apiDefaultValue></apiValueDef><apiDesc>
     Der Wert der <codeph>colorCorrection</codeph>-Eigenschaft der Bühne. Wenn die Anwendung keinen Zugriff auf die <codeph>colorCorrection</codeph>-Eigenschaft der Bühne hat, ist der Wert der <codeph>colorCorrection</codeph>-Eigenschaft auf <codeph>null</codeph> eingestellt.
         <p>Nur die Hauptanwendung kann die <codeph>colorCorrection</codeph>-Eigenschaft einstellen. Wenn eine verschachtelte Anwendung die colorCorrection-Eigenschaft einstellen muss, muss sie sie durch Verweis auf die Hauptanwendung einstellen.</p>
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.ColorCorrection.xml"><linktext>flash.display.ColorCorrection</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Der Satz von Komponenten, die im Steuerleistenbereich des Anwendungscontainers enthalten sein sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Der Satz von Komponenten, die im Steuerleistenbereich des Anwendungscontainers enthalten sein sollen. Die Position und das Aussehen des Steuerleistenbereichs des Anwendungscontainers wird von der spark.skins.spark.ApplicationSkin-Klasse bestimmt. Standardmäßig bestimmt die ApplicationSkin-Klasse, dass der Steuerleistenbereich am oberen Rand des Inhaltsbereichs des Anwendungscontainers und mit einem grauen Hintergrund angezeigt wird. Erstellen Sie eine benutzerdefinierte Skin, um das Standardaussehen der Steuerleiste zu ändern.
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      Definiert das Layout des Steuerleistenbereichs des Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      Definiert das Layout des Steuerleistenbereichs des Containers.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      Bei „true“ ist die Steuerleiste sichtbar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> ist die Steuerleiste sichtbar. Das Flag hat keine Auswirkung, wenn für die <codeph>controlBarContent</codeph>-Eigenschaft kein Wert festgelegt wurde.
           <p><b>Hinweis:</b> Der Application-Container überwacht die <codeph>controlBarGroup</codeph>-Eigenschaft nicht. Wenn er durch sonstigen Code unsichtbar gemacht wird, wird der Application-Container gegebenenfalls nicht korrekt aktualisiert.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      Ein Objekt, das Name/Wert-Paare enthält und die in dieser Anwendung verfügbaren Parameter darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Objekt, das Name/Wert-Paare enthält und die in dieser Anwendung verfügbaren Parameter darstellt.
           <p>Sie können eine for-in-Schleife verwenden, um alle Namen und Werte aus dem parameters-Objekt zu extrahieren.</p>
           <p>Es sind zwei Parameterquellen verfügbar: der Abfragestring der Anwendungs-URL und der Wert des FlashVars-HTML-Parameters (dies betrifft nur die Hauptanwendung).</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      Einige Geräte unterstützen keine Hardwaretastatur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      Einige Geräte unterstützen keine Hardwaretastatur. Stattdessen verwenden diese Geräte eine Tastatur, die bei Bedarf auf dem Bildschirm geöffnet wird. Diese Bildschirmtastatur, oder auch Softwaretastatur oder virtuelle Tastatur, wird geschlossen, nachdem der Benutzer die Informationen eingegeben hat oder wenn er den Vorgang abbricht. Wenn der Wert <codeph>true</codeph> lautet, wird die Größe der Anwendung beim Öffnen und Schließen der Bildschirmtastatur geändert.  
           <p>Hierzu muss das <codeph>&lt;softKeyboardBehavior></codeph>-Attribut in der Deskriptor-XML-Datei der Anwendung auf <codeph>none</codeph> gesetzt sein.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:runtimeDPIProvider:get"><apiName>runtimeDPIProvider</apiName><shortdesc>
      Eine Klasse, die RuntimeDPIProvider erweitert und die standardmäßigen Flex-Berechnungen für runtimeDPI überschreibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>spark.components.RuntimeDPIProvider
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Klasse, die RuntimeDPIProvider erweitert und die standardmäßigen Flex-Berechnungen für <codeph>runtimeDPI</codeph> überschreibt.
     
      <p>Die Standardzuordnungen von Flex lauten wie folgt:
         <adobetable class="innertable">
            
            
            
         <tgroup cols="2"><tbody><row><entry>160 DPI</entry><entry>&lt;200 DPI</entry></row><row><entry>240 DPI</entry><entry>>=200 DPI und &lt;280 DPI</entry></row><row><entry>320 DPI</entry><entry>>=280 DPI</entry></row></tbody></tgroup></adobetable>
      </p>
     
      Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link><link href="" invalidHref="mx.core.RuntimeDPIProvider.xml"><linktext>mx.core.RuntimeDPIProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:runtimeDPI:get"><apiName>runtimeDPI</apiName><shortdesc>
      Die DPI des Geräts, auf dem die Anwendung derzeit ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die DPI des Geräts, auf dem die Anwendung derzeit ausgeführt wird. Flex rundet den Wert auf eine der <codeph>DPIClassification</codeph>-Möglichkeiten. 
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenImage:get"><apiName>splashScreenImage</apiName><shortdesc>
      Die Bildklasse für den SplashScreen-Preloader.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc>
      Die Bildklasse für den SplashScreen-Preloader. Normalerweise wird diese Eigenschaft entweder auf eine eingebettete Ressource oder auf den Namen einer <codeph>SplashScreenImage</codeph>-Klasse, die in einer separaten MXML-Datei definiert ist, festgelegt. Beispiel für die Festlegung von „splashScreenImage“ für ein eingebettetes Bild:
           <pre>splashScreenImage="@Embed('Default.png')"</pre>
           <p><b>Hinweis:</b> Diese Eigenschaft hat nur Auswirkungen, wenn die <codeph>preloader</codeph>-Eigenschaft auf spark.preloaders.SplashScreen gesetzt ist. Die spark.preloaders.SplashScreen-Klasse ist der standardmäßige Preloader für Mobile-Flex-Anwendungen. Diese Eigenschaft kann nicht mithilfe von ActionScript-Code festgelegt werden. Sie muss in MXML-Code festgelegt werden.</p>
           <p><b>Hinweis:</b> Die frameworks\libs\mobile\mobilecomponents.swc-Datei muss dem Bibliothekspfad der Anwendung hinzugefügt werden, um den Begrüßungsbildschirm in einer Desktop-Anwendung zu unterstützen.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.preloaders.SplashScreen.xml"><linktext>spark.preloaders.SplashScreen</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:url:get"><apiName>url</apiName><shortdesc>
      Der URL-Speicherort, von dem die SWF-Datei der Anwendung geladen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der URL-Speicherort, von dem die SWF-Datei der Anwendung geladen wurde.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      URL-Speicherort, über den die Anwendungsquelle angezeigt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      URL-Speicherort, über den die Anwendungsquelle angezeigt werden kann. Durch Einstellen dieser Eigenschaft wird das Menüelement „View Source“ in das Standardkontextmenü der Anwendung eingefügt. Durch Auswählen dieses Menüelements wird die <codeph>viewSourceURL</codeph> in einem neuen Fenster geöffnet.
           <p>Sie müssen die <codeph>viewSourceURL</codeph>-Eigenschaft mithilfe von MXML, und nicht von ActionScript, einstellen, wie in folgendem Beispiel zu sehen:</p>
           <pre>
        &lt;Application viewSourceURL="http://path/to/source">
          ...
        &lt;/Application></pre>
                </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Button"><apiName>Button</apiName><shortdesc>
  Die Button-Komponente ist eine häufig verwendete rechteckige Schaltfläche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Alpha von Textschatten.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Farbe von Textschatten.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:Button" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Die auf die Schaltfläche angewendete Farbe, wenn das emphasized-Flag den Wert „true“ hat. 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Button&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Button 
    <strong>Properties</strong>
    emphasized="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Button-Komponente ist eine häufig verwendete rechteckige Schaltfläche. Auf die Button-Komponente kann geklickt werden. Die standardmäßige Skin verfügt über eine Textbeschriftung. Definieren Sie eine benutzerdefinierte Skinklasse, um dem Steuerelement ein Bild hinzuzufügen.
 
  <p>Schaltflächen verwenden normalerweise Ereignis-Listener, um Aktionen auszuführen, wenn der Benutzer ein Steuerelement auswählt. Wenn ein Benutzer mit der Maus auf ein Button-Steuerelement klickt und das Button-Steuerelement aktiviert wird, werden ein <codeph>click</codeph>-Ereignis und ein <codeph>buttonDown</codeph>-Ereignis ausgelöst. Eine Schaltfläche (aktiviert oder deaktiviert) löst immer Ereignisse aus, z. B. <codeph>mouseMove</codeph>-, <codeph>mouseOver</codeph>-, <codeph>mouseOut</codeph>-, <codeph>rollOver</codeph>-, <codeph>rollOut</codeph>-, <codeph>mouseDown</codeph>- und <codeph>mouseUp</codeph>-Ereignisse.</p>
 
  <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
 
  <p>Das Button-Steuerelement hat die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Breit genug für die Beschriftung des Steuerelements.</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>21 Pixel breit und 21 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.ButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonSkin"><linktext>spark.skins.spark.ButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:Button:Button"><apiName>Button</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
     Gibt die Standardschaltfläche an, wie vom Fokusmanager angefordert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="emphasizedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
     Gibt die Standardschaltfläche an, wie vom Fokusmanager angefordert. Diese Eigenschaft wird normalerweise vom Fokusmanager eingestellt, wenn eine Schaltfläche als Standardschaltfläche in einem Container oder einem Formular dient. Bei „true“ wird der <codeph>emphasized</codeph>-Stil an die <codeph>styleName</codeph>-Eigenschaft der Schaltfläche angehängt.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.managers.FocusManager.defaultButton.xml"><linktext>mx.managers.FocusManager.defaultButton</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  Die CheckBox-Komponente besteht aus einer optionalen Beschriftung und einem kleinen Kästchen, in dem ein Häkchen angezeigt wird oder nicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:CheckBox" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:CheckBox" playerVersion="Flash10" theme="mobile" type="String">
<description>
  Richtung des Symbols in Relation zur Beschriftung. Gültige MXML-Werte sind <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> und <codeph>top</codeph>.
 
  <p>In ActionScript können Sie folgende Konstanten verwenden, um diese Eigenschaft festzulegen: <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> und <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:CheckBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
  <pre>
  &lt;s:CheckBox
    <strong>Properties</strong>
    symbolColor="0x000000"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die CheckBox-Komponente besteht aus einer optionalen Beschriftung und einem kleinen Kästchen, in dem ein Häkchen angezeigt wird oder nicht. 
 
  <p>Wenn ein Benutzer auf eine CheckBox-Komponente oder den damit verknüpften Text klickt, stellt die CheckBox-Komponente selbst die <codeph>selected</codeph>-Eigenschaft auf <codeph>true</codeph> für aktiviert und <codeph>false</codeph> für nicht aktiviert ein.</p>
 
  <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
 
  <p>Das CheckBox-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Breit genug für die Beschriftung des Steuerelements.</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>18 Pixel breit und 18 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.CheckBoxSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#CheckBoxSkin"><linktext>spark.skins.spark.CheckBoxSkin</linktext></link></related-links><apiConstructor id="spark.components:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Group"><apiName>Group</apiName><shortdesc>
  Die Group-Klasse ist die Basiscontainerklasse für visuelle Elemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="mxmlContent"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Alpha von Textschatten.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Farbe von Textschatten.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Group&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Group
    <strong>Properties</strong>
    blendMode="auto"
    mxmlContent="null"
    scaleGridBottom="null"
    scaleGridLeft="null"
    scaleGridRight="null"
    scaleGridTop="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Group-Klasse ist die Basiscontainerklasse für visuelle Elemente. Der Group-Container nimmt als untergeordnete Elemente alle Komponenten auf, die die IUIComponent-Schnittstelle implementieren, sowie alle Komponenten, die die IGraphicElement-Schnittstelle implementieren. Verwenden Sie diesen Container, wenn Sie visuelle Kinder sowie visuelle und grafische Komponenten verwalten möchten. 
 
  <p>Um die Leistung zu verbessern und die Anwendungsgröße zu minimieren, kann dem Group-Container keine Skin zugewiesen werden. Wenn Sie eine Skin anwenden möchten, verwenden Sie stattdessen den SkinnableContainer.</p>
 
  <p><b>Hinweis:</b> Das Skalierungsraster funktioniert möglicherweise nicht ordnungsgemäß, wenn untergeordnete DisplayObject-Elemente innerhalb der Gruppe vorhanden sind, beispielsweise als Komponente oder andere Gruppe. Wenn die untergeordneten Elemente GraphicElement-Objekte sind, die alle das DisplayObject der Gruppe gemeinsam nutzen, dann funktioniert das Skalierungsraster ordnungsgemäß.</p> 
 
  <p>Für das Festlegen einer der folgenden Eigenschaften auf einem untergeordneten GraphicElement ist es erforderlich, dass dieses GraphicElement ein eigenes DisplayObject erstellt, sodass die Skalierungsrastereigenschaften in der Gruppe ignoriert werden.</p>  
 
  <pre>
  alpha
  blendMode other than BlendMode.NORMAL or "auto"
  colorTransform
  filters
  mask
  matrix
  rotation
  scaling
  3D properties
  bounds outside the extent of the Group
  </pre>
 
  <p>Der Group-Container hat die folgenden Standardmerkmale:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="GroupExample.mxml"><swfblock conref="examples/GroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  Wird ausgelöst, wenn ein visuelles Element aus dem Inhalt entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein visuelles Element aus dem Inhalt entfernt wird. <codeph>event.element</codeph> ist das visuelle Element, das entfernt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  Wird ausgelöst, wenn ein visuelles Element zu einem Inhalt hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein visuelles Element zu einem Inhalt hinzugefügt wird. <codeph>event.element</codeph> ist das visuelle Element, das hinzugefügt wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Group:Group"><apiName>Group</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Group:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      Benachrichtigen Sie die Hostkomponente, dass ein Element geändert wurde und neu gezeichnet werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Das Element, das geändert wurde.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigen Sie die Hostkomponente, dass ein Element geändert wurde und neu gezeichnet werden muss. Group ruft die <codeph>validateDisplayList()</codeph>-Methode für das IGraphicElement auf, damit es neu gezeichnet werden kann.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      Benachrichtigen Sie die Hostkomponente, dass ein Element geändert wurde und die Eigenschaften überprüft werden müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Das Element, das geändert wurde.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigen Sie die Hostkomponente, dass ein Element geändert wurde und die Eigenschaften überprüft werden müssen. Group ruft die <codeph>validateProperties()</codeph>-Methode für das IGraphicElement auf, damit dessen Eigenschaften übernommen werden können.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      Benachrichtigen Sie den Host, dass eine Elementebene geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Das Element, dessen Größe sich geändert hat.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigen Sie den Host, dass eine Elementebene geändert wurde. Group bewertet die Sequenzen von Elementen mit gemeinsamen DisplayObjects neu und kann die DisplayObjects neu zuweisen und die Sequenzen daraufhin neu zeichnen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      Benachrichtigen Sie die Hostkomponente, dass sich die Größe eines Elements geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>Das Element, dessen Größe sich geändert hat.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Benachrichtigen Sie die Hostkomponente, dass sich die Größe eines Elements geändert hat. Group ruft die <codeph>validateSize()</codeph>-Methode für das IGraphicElement auf, damit dessen Größe überprüft werden kann.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:Group:baselinePositionElement:get"><apiName>baselinePositionElement</apiName><shortdesc>
      Das Element zum Berechnen der baselinePosition der GroupBase 
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      Das Element zum Berechnen der baselinePosition der GroupBase 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:blendMode:get"><apiName>blendMode</apiName><shortdesc>
      Ein Wert aus der BlendMode-Klasse, mit dem angegeben wird, welche Füllmethode verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Wert aus der BlendMode-Klasse, mit dem angegeben wird, welcher Mischmodus verwendet werden soll. Eine Bitmap kann intern auf zweierlei Weise gezeichnet werden. Wenn Sie einen Mischmodus oder eine externe Zuschneidemaske aktiviert haben, wird die Bitmap gezeichnet, indem dem Vektorrenderer ein Quadrat hinzugefügt wird. Wenn Sie versuchen, diese Eigenschaft auf einen ungültigen Wert einzustellen, wird der Wert von Flash Player oder Adobe AIR auf <codeph>BlendMode.NORMAL</codeph> eingestellt. 
     
      <p>Der Wert „auto“ (die Standardeinstellung) bezieht sich speziell auf die Verwendung von blendMode durch die Gruppe. Er gibt als zugrunde liegenden blendMode <codeph>BlendMode.NORMAL</codeph> an, außer wenn <codeph>alpha</codeph> ungleich 0 oder 1 ist. In diesem Fall wird der Wert „auto“ als <codeph>BlendMode.LAYER</codeph> festgelegt. Durch dieses Verhalten wird sichergestellt, dass die Grafikobjekte von durchscheinenden Gruppen korrekt zusammengesetzt werden.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/blendMode"><linktext>flash.display.DisplayObject.blendMode</linktext></link><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Group:scaleGridBottom:get"><apiName>scaleGridBottom</apiName><shortdesc>
      Gibt die untere Koordinate des Skalierungsrasters an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt die untere Koordinate des Skalierungsrasters an.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridLeft:get"><apiName>scaleGridLeft</apiName><shortdesc>
     Gibt die linke Koordinate des Skalierungsrasters an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Gibt die linke Koordinate des Skalierungsrasters an.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridRight:get"><apiName>scaleGridRight</apiName><shortdesc>
     Gibt die rechte Koordinate des Skalierungsrasters an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Gibt die rechte Koordinate des Skalierungsrasters an.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridTop:get"><apiName>scaleGridTop</apiName><shortdesc>
     Gibt die obere Koordinate des Skalierungsrasters an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Gibt die obere Koordinate des Skalierungsrasters an.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc>
      Die untergeordneten Elemente des visuellen Inhalts für diese Gruppe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die untergeordneten Elemente des visuellen Inhalts für diese Gruppe. Diese Methode wird intern von Flex verwendet und ist nicht zur direkten Verwendung durch die Entwickler gedacht.
     
      <p>Die Inhaltselemente sollten nur IVisualElement-Objekte sein. Ein <codeph>mxmlContent</codeph>-Array darf nicht von mehreren Group-Containern gemeinsam verwendet werden, da visuelle Elemente gleichzeitig nicht in mehreren Containern vorhanden sein können.</p>
     
      <p>Wenn der Inhalt ein Array ist, ändern Sie das Array nicht direkt. Verwenden Sie stattdessen die von der Group-Klasse definierten Methoden.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconPlacement"><apiName>IconPlacement</apiName><shortdesc>
      Die IconPlacement-Klasse definiert die Konstanten für die zugelassenen Werte des iconPlacement-Stils von Button, CheckBox, RadioButton oder ToggleButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Die IconPlacement-Klasse definiert die Konstanten für die zugelassenen Werte des <codeph>iconPlacement</codeph>-Stils von Button, CheckBox, RadioButton oder ToggleButton.
      
      </apiDesc></apiClassifierDetail><apiValue id="spark.components:IconPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
          Legt fest, dass das Symbol unter der Beschriftung angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Legt fest, dass das Symbol unter der Beschriftung angezeigt wird.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
          Legt fest, dass das Symbol links neben der Beschriftung angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Legt fest, dass das Symbol links neben der Beschriftung angezeigt wird.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
          Legt fest, dass das Symbol rechts neben der Beschriftung angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Legt fest, dass das Symbol rechts neben der Beschriftung angezeigt wird.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:TOP"><apiName>TOP</apiName><shortdesc>
          Legt fest, dass das Symbol über der Beschriftung angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Legt fest, dass das Symbol über der Beschriftung angezeigt wird.
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextInput"><apiName>TextInput</apiName><shortdesc>
  TextInput ist ein Steuerelement zur Texteingabe, das Benutzern die Eingabe und Bearbeitung einer einzelnen Zeile von einheitlich formatiertem Text ermöglicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="lineBreak"/><Exclude kind="style" name="verticalAlign"/><DefaultProperty name="text"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextInput&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextInput
    <strong>Properties</strong>
    widthInChars="<i>Calculated default</i>"  <b>[applies to Spark theme]</b>
  
    <strong>Events</strong>
    enter="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextInput ist ein Steuerelement zur Texteingabe, das Benutzern die Eingabe und Bearbeitung einer einzelnen Zeile von einheitlich formatiertem Text ermöglicht.
   <p><b>Die TextInput-Skin für das Spark-Design verwendet die RichEditableText-Klasse. Das bedeutet, dass das Spark-TextInput-Steuerelement die Text Layout Framework(TLF)-Bibliothek unterstützt, die auf der Flash Text Engine (FTE) aufbaut.</b> In Kombination ermöglichen diese Ebenen die Bearbeitung von Text mit hochwertigen internationalen Typografie- und Layoutfunktionen.</p>
 
  <p><b>Die TextInput-Skin für das Mobile-Design verwendet die Klasse StyleableStageText anstelle von RichEditableText.</b> Da StyleableStageText native Textfelder verwendet, ermöglicht es eine bessere Texteingabe und Manipulation auf Mobilgeräten, jedoch gibt es <xref href="supportClasses/StyleableStageText.html">Grenzen und Unterschiede</xref>, die zu berücksichtigen sind. Die von StageText verwendeten nativen Textsteuerungen verwenden verschiedene Textumgebungen. Um einen vertikalen Bildlauf zu vermeiden, versucht die StageText-basierte TextInput-Skin diese Umgebung zu bewerten und zu kompensieren. Wegen dieser und anderer Unterschiede in der Behandlung von Text durch native Textsteuerungen hat die TextInput-Steuerung mit StageText-basierter Skin eine andere Standardhöhe als mit TextField-basierter TextInput-Skin.
 </p>
   <p>Mithilfe der <codeph>text</codeph>-Eigenschaft können Sie den anzuzeigenden Text einstellen oder den vom Benutzer eingegebenen Text abrufen. Bei dieser Eigenschaft handelt es sich um einen String. Gibt der Benutzer einen numerischen Wert ein, wird die Eingabe beispielsweise nicht als 123,45, sondern als "123,45" gemeldet.</p>
   <p>Der Text wird mithilfe von CSS-Stilen wie beispielsweise <codeph>fontFamily</codeph> und <codeph>fontSize</codeph> formatiert.</p>
   <p>Für das Spark-Design können Sie die Breite der Steuerung mithilfe der Eigenschaft <codeph>widthInChars</codeph> angeben, mit der Sie die Breite bequem so angeben können, dass sich der Schriftgröße anpasst. Alternativ können Sie auch die Eigenschaft <codeph>typicalText</codeph> verwenden. Beachten Sie, dass beim Verwenden von <codeph>typicalText</codeph> die Eigenschaft <codeph>widthInChars</codeph> ignoriert wird. Für alle Designs können Sie auch eine explizite Breite in Pixeln bzw. einen Prozentwert angeben oder Beschränkungen wie <codeph>links</codeph> und <codeph>rechts</codeph> verwenden. Normalerweise brauchen Sie die Höhe nicht anzugeben. Die Standardhöhe des Steuerelements reicht aus, um eine Zeile Text anzuzeigen.
  </p>
   <p>Mit der <codeph>maxChars</codeph>-Eigenschaft beschränken Sie die Anzahl der Zeichen, die der Benutzer eingeben kann. Mit <codeph>restrict</codeph> legen Sie fest, welche Zeichen eingegeben werden dürfen. Sie können dieses Steuerelement für die Kennworteingabe verwenden, indem Sie die <codeph>displayAsPassword</codeph>-Eigenschaft auf <codeph>true</codeph> setzen.</p>
   <p>Für das Mobile-Design legen die Software-Tastatur-spezifischen Eigenschaften, die Eigenschaften <codeph>autoCapitalize</codeph>, <codeph>autoCorrect</codeph>, <codeph>returnKeyLabel</codeph> und <codeph>softKeyboardType</codeph> Tastaturtipps fest. Wenn eine Software-Tastatur vorhanden ist, aber nicht die durch den Tipp dargestellte Funktion unterstützt, wird der Tipp ignoriert. In mobilen Umgebungen, die nur über Hardware-Tastaturen verfügen, werden diese Tipps ignoriert. 
  </p>
  
  <p>Dieses Steuerelement löst ein <codeph>FlexEvent.ENTER</codeph>-Ereignis aus, wenn der Benutzer die Eingabetaste drückt, anstatt einen Zeilenumbruch einzufügen, weil die Eingabe mehrerer Textzeilen von diesem Steuerelement nicht unterstützt wird. Standardmäßig hat dieses Steuerelement ausdrückliche Zeilenumbrüche.</p>
   <p>Diese Steuerung ist eine skinfähige Steuerung, deren Standard-Skin entweder eine RichEditableText-Instanz für das Spark-Design oder eine StyleableStageText-Instanz für das Mobile-Design enthält. Sie ist für das Anzeigen und Bearbeiten des Texts zuständig. (Die Skin verarbeitet auch das Zeichnen des Rahmens und des Hintergrunds.) Diese RichEditableText- oder StyleableStageText-Instanz kann als <codeph>textDisplay</codeph>-Objekt aufgerufen werden. Wenn Sie für das Mobile-Design die TextField-basierte Skin anstelle der StageText-basierten Skin verwenden möchten, weisen Sie der Eigenschaft <codeph>skinClass</codeph> den Wert <codeph>spark.skins.mobile.TextInputSkin</codeph> zu.</p>
   <p>Für das Spark-Design unterstützt die Spark-TextInput-Steuerung als Ergebnis von RichEditableText mit TLF die Anzeige von LTR-Text (links nach rechts), z. B. Französisch, RTL-Text (rechts nach links), z. B. Arabisch, und bidirektionalem Text, z. B. ein französischer Abschnitt innerhalb eines arabischen Textes. Läuft der Text vorwiegend von rechts nach links, stellen Sie den <codeph>direction</codeph>-Stil auf <codeph>rtl</codeph> ein. Der <codeph>textAlign</codeph>-Stil ist standardmäßig <codeph>start</codeph>, sodass der Text linksbündig ist, wenn <codeph>direction</codeph> <codeph>ltr</codeph> ist, und rechtsbündig, wenn <codeph>direction</codeph> <codeph>rtl</codeph> ist. Setzen Sie <codeph>textAlign</codeph> auf <codeph>end</codeph>, um die umgekehrte Ausrichtung zu verwenden.</p>
   <p>Infolge der Verwendung von TLF unterstützt der Spark-TextInput eine unbegrenzte Anzahl von Schritten, die während einer Bearbeitungssitzung rückgängig gemacht und wiederhergestellt werden können. Eine Bearbeitungssitzung beginnt, wenn das Steuerelement den Tastaturfokus erhält und endet, wenn das Steuerelement den Fokus verliert.</p>
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
   <p>Für das Spark-Design verfügt die Texteingabe-Steuerung über folgende Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>128 Pixel breit und 22 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.TextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>Für das Mobile-Design verfügt die Texteingabe-Steuerung über folgende Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.mobile.StageTextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextInputSkin.xml"><linktext>spark.skins.mobile.StageTextInputSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextInputSkin.xml"><linktext>spark.skins.mobile.TextInputSkin</linktext></link><link href="spark.skins.spark.xml#TextInputSkin"><linktext>spark.skins.spark.TextInputSkin</linktext></link><link href="spark.components.xml#TextArea"><linktext>TextArea</linktext></link></related-links><adobeApiEvent id="spark.components:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer die Eingabetaste drückt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer die Eingabetaste drückt.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TextInput:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      Die Standardbreite des Steuerelements in em-Einheiten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
           </apiDefaultValue></apiValueDef><apiDesc>
      Die Standardbreite des Steuerelements in em-Einheiten.
           <p>Ein em ist eine typografische Maßeinheit und entspricht der Punktgröße. Ein em hat nicht unbedingt genau die Breite des Zeichens „M“, aber in vielen Schriftarten ist das „M“ ungefähr ein em breit. Der <codeph>fontSize</codeph>-Stil des Steuerelements wird zur Berechnung der em-Einheit in Pixeln verwendet.</p>
           <p>Beispielsweise würden Sie für diese Eigenschaft den Wert „20“ einstellen, wenn Sie festlegen möchten, dass die Breite von TextInput ausreichen soll, um 20 Textzeichen einzugeben.</p>
           <p>Diese Eigenschaft wird ignoriert, wenn Sie eine ausdrückliche Breite, eine prozentuale Breite oder sowohl <codeph>left</codeph>- als auch <codeph>right</codeph>-Beschränkungen angeben.</p>
           <p>Diese Eigenschaft wird auch ignoriert, wenn die <codeph>typicalText</codeph>-Eigenschaft festgelegt ist.</p>
     
      <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
          
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Form"><apiName>Form</apiName><shortdesc>
  Mit dem Spark-Form-Container können Sie das Layout eines Formulars steuern, Formularfelder als erforderlich oder optional markieren, Fehlermeldungen verarbeiten und Ihre Formulardaten an das Flex-Datenmodell binden, um die Prüfung und Überprüfung von Daten vorzunehmen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Form">
<description>
  Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Form&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:Form&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/s:Form&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit dem Spark-Form-Container können Sie das Layout eines Formulars steuern, Formularfelder als erforderlich oder optional markieren, Fehlermeldungen verarbeiten und Ihre Formulardaten an das Flex-Datenmodell binden, um die Prüfung und Überprüfung von Daten vorzunehmen. Sie können dabei auch Stylesheets verwenden, um die Darstellung Ihrer Formulare zu konfigurieren.
 
  <p>Die folgende Tabelle beschreibt die Komponenten, die Sie für die Erstellung von Formularen in Flex verwenden:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="3"><thead><row><entry>Komponente</entry><entry>Tag</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Form</entry>
           <entry><codeph>&lt;s:Form></codeph></entry>
           <entry>Definiert den Container für das gesamte Formular, einschließlich des allgemeinen Formularlayouts. Verwenden Sie das FormHeading-Steuerelement und das FormItem-Steuerelement, um den Inhalt zu definieren. Sie können auch andere Arten von Komponenten in einen Form-Container einfügen.</entry>
        </row><row>
           <entry>FormHeading</entry>
           <entry><codeph>&lt;s:FormHeading></codeph></entry>
           <entry>Definiert eine Überschrift in Ihrem Formular. </entry>
        </row><row>
           <entry>FormItem</entry>
           <entry><codeph>&lt;s:FormItem></codeph></entry>
           <entry>Enthält mindestens ein horizontal oder vertikal angeordnetes untergeordnetes Formularobjekt. Untergeordnete Objekte können Steuerelemente oder andere Container sein. Ein einzelner Form-Container kann mehrere FormItem-Container enthalten.</entry>
        </row><row>
           <entry>FormLayout</entry>
           <entry><codeph>&lt;s:FormLayout></codeph></entry>
           <entry>Definiert das Standardlayout für Spark-Form-Skins.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example><example conref="StackedFormSkinExample.mxml"><swfblock conref="examples/StackedFormSkinExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormSkin"><linktext>spark.skins.spark.FormSkin</linktext></link></related-links><apiConstructor id="spark.components:Form:Form"><apiName>Form</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Form:invalidElements:get"><apiName>invalidElements</apiName><shortdesc>
      Ein sortiertes Array untergeordneter Elemente, die sich im Status „invalid“ befinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein sortiertes Array untergeordneter Elemente, die sich im Status „invalid“ befinden. Die Elemente im Array sind Objekte mit den folgenden Eigenschaften:
     
      <ul>
        <li>element:UIComponent – das ungültige untergeordnete Element</li>
     
        <li>position:Vector.&lt;int> – ein Vektor von Ganzzahlen, die die Position des Elements in der Baumstruktur der Anzeigeliste darstellen. Diese Eigenschaft wird zum Sortieren des Array verwendet.</li>  
      </ul>
     
      <p>Wenn ein untergeordnetes Element aus dem Formular entfernt wurde, wird das Wörterbuch nicht aktualisiert.</p> 
         
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  Mit dem NumericStepper-Steuerelement können Sie eine Zahl aus einer geordneten Menge auswählen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:NumericStepper">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
   </description>
<default>1
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Rahmens dieser Komponente.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Die Farbe des Rahmens dieser Komponente.
   </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Rahmens für diese Komponente.
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert, jedoch nicht im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente deaktiviert ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert und im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.5" type="Object">
<description>
  Legt den beim Blocksatz verwendeten Abstand zwischen Wörtern fest. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Blendet Leerraum aus oder behält ihn bei, wenn Text in einem TextFlow importiert wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Bestimmt die Gradzahl zum Drehen dieses Texts.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Offset der ersten Textzeile links vom Container.
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textIndent“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Gibt die Tabulatoren an, die dem Absatz zugewiesen sind.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den der obere Absatzrand eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der vor dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der hinter dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den die obere Absatzrandkante eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Darstellung von Einträgen in Listen.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Platzierung von Markern relativ zum Listeneintrag.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Legt einen automatischen Einzug für den Beginn von Listenrändern fest, wenn der Auffüllwert der Liste auf dieser Seite <codeph>auto</codeph> ist.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Gibt das Zeilenabstandsmodell an, das eine Kombination aus Zeilenabstandsbasis und Zeilenabstandsrichtung ist.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Gibt die Grundlinienposition der ersten Linie im Container an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Steuert, wie der Text bei einem Float umbricht.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Steuert, an welcher Stelle Zeilen umbrochen werden können, wenn umbrochener Text in mehrere Zeilen umbrochen wird. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Gibt eine vertikale oder horizontale Abfolge der Zeilenplatzierung an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#NumericStepper/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#NumericStepper/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components:NumericStepper" playerVersion="Flash10" required="true" var_type="spark.components:TextInput">
<description>
      Ein Skinteil, der ein TextInput-Steuerelement definiert, das dem Benutzer ermöglicht, den Wert der NumericStepper-Komponente zu bearbeiten. Der Wert wird gerundet und übernommen, wenn der Benutzer die Eingabetaste drückt. Daraufhin wird der Fokus von der NumericStepper-Komponente entfernt oder die NumericStepper-Komponente schrittweise weitergeführt.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a TextInput control 
      which allows a user to edit the value of
      the NumericStepper component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:NumericStepper&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:NumericStepper
     <strong>Properties</strong>
    imeMode="null"
    maxChars="0"
    maximum="10"
    valueFormatFunction=""
    valueParseFunction=""
     <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
   baselineShift="0.0"
   blockProgression="TB"
   borderAlpha="0.5"
   borderColor="0x000000"
   borderVisible="true"
   breakOpportunity="AUTO"
   cffHinting="HORIZONTAL_STEM"
   color="0"
   contentBackgroundAlpha="1.0"
   contentBackgroundColor="0xFFFFFF"
   clearFloats="none"
   digitCase="DEFAULT"
   digitWidth="DEFAULT"
   direction="LTR"
   dominantBaseline="AUTO"
   firstBaselineOffset="AUTO"
   focusedTextSelectionColor=""
   fontFamily="Arial"
   fontLookup="DEVICE"
   fontSize="12"
   fontStyle="NORMAL"
   fontWeight="NORMAL"
   inactiveTextSelection=""
   justificationRule="AUTO"
   justificationStyle="AUTO"
   kerning="AUTO"
   leadingModel="AUTO"
   ligatureLevel="COMMON"
   lineHeight="120%"
   lineThrough="false"
   listAutoPadding="40"
   listStylePosition="outside"
   listStyleType="disc"
   locale="en"
   paragraphEndIndent="0"
   paragraphSpaceAfter="0"
   paragraphSpaceBefore="0"
   paragraphStartIndent="0"
   renderingMode="CFF"
   tabStops="null"
   textAlign="START"
   textAlignLast="START"
   textAlpha="1"
   textDecoration="NONE"
   textIndent="0"
   textJustify="INTER_WORD"
   textRotation="AUTO"
   trackingLeft="0"
   trackingRight="0"
   typographicCase="DEFAULT"
   unfocusedTextSelectionColor=""
   whiteSpaceCollapse="COLLAPSE"
   wordSpacing="100%,50%,150%"
 /&gt;
 </pre>
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components:Spinner</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit dem NumericStepper-Steuerelement können Sie eine Zahl aus einer geordneten Menge auswählen. Die NumericStepper-Komponente bietet denselben Funktionsumfang wie die Spinner-Komponente, fügt jedoch ein TextInput-Steuerelement so hinzu, dass Sie den Wert der Komponente direkt bearbeiten können, anstatt die Pfeilschaltflächen des Steuerelements hierfür zu verwenden.
   <p>Das NumericStepper-Steuerelement besteht aus einem einzeiligen Eingabetextfeld und zwei Bildlaufpfeilen, mit denen die möglichen Werte durchlaufen werden können. Mit der Nach-Oben-Taste, der Nach-Unten-Taste und dem Mausrad können Sie sich ebenfalls durch die Werte bewegen. Ein Eingabewert wird übernommen, wenn der Benutzer die Eingabetaste drückt, den Fokus von der Komponente entfernt oder den NumericStepper durch Drücken einer Pfeiltaste oder Aufrufen der <codeph>changeValueByStep()</codeph>-Methode verwendet.</p>
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
   <p>Das NumericStepper-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>53 Pixel breit und 23 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>40 Pixel breit und 40 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklassen</entry>
           <entry>spark.skins.spark.NumericStepperSkin
              <p>spark.skins.spark.NumericStepperTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#NumericStepperSkin"><linktext>spark.skins.spark.NumericStepperSkin</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      Konstruktor
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Gibt den Modus des Eingabemethodeneditors (IME) an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt den Modus des Eingabemethodeneditors (IME) an. Mithilfe des Eingabemethodeneditors können chinesische, japanische und koreanische Schriftzeichen eingegeben werden. Flex stellt den festgelegten IME-Modus ein, wenn das Steuerelement den Fokus erhält, und setzt ihn auf den vorherigen Wert zurück, wenn das Steuerelement den Fokus verliert.
          <p>Die flash.system.IMEConversionMode-Klasse definiert Konstanten für gültige Werte dieser Eigenschaft. Sie können auch <codeph>null</codeph> festlegen, um keinen IME festzulegen.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      Die maximale Anzahl an Zeichen, die in das Feld eingegeben werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die maximale Anzahl an Zeichen, die in das Feld eingegeben werden kann. Der Wert 0 bedeutet, dass eine beliebige Anzahl an Zeichen eingegeben werde kann.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueFormatFunction:get"><apiName>valueFormatFunction</apiName><shortdesc>
      Rückruffunktion, die den Wert formatiert, der in der textDisplay-Eigenschaft der Skin angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Rückruffunktion, die den Wert formatiert, der in der <codeph>textDisplay</codeph>-Eigenschaft der Skin angezeigt wird. Die Funktion übernimmt eine einzige Zahl als Argument und gibt einen formatierten String zurück.
           <p>Die Funktion hat folgende Signatur:</p>
      <pre>
      funcName(value:Number):String
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueParseFunction:get"><apiName>valueParseFunction</apiName><shortdesc>
      Rückruffunktion, die den numerischen Wert aus dem angezeigten Wert im textDisplay-Feld der Skin extrahiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Rückruffunktion, die den numerischen Wert aus dem angezeigten Wert im <codeph>textDisplay</codeph>-Feld der Skin extrahiert. Die Funktion übernimmt einen einzelnen String als Argument und gibt eine Zahl zurück.
           <p>Die Funktion hat folgende Signatur:</p>
      <pre>
      funcName(value:String):Number
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:maximum:set"><apiName>maximum</apiName><shortdesc>
      Zahl, die den maximalen Wert angibt, der für „value“ möglich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die den maximalen Wert angibt, der für <codeph>value</codeph> möglich ist. Wenn die Werte für <codeph>minimum</codeph> und <codeph>value</codeph> größer sind als der Wert für <codeph>maximum</codeph>, werden sie auf den neuen Wert für <codeph>maximum</codeph> geändert.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Spinner"><apiName>Spinner</apiName><shortdesc>
  Eine Spinner-Komponente wählt einen Wert aus einer geordneten Menge aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Spinner">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabled" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  Disabled-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  Normal-Status
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Fokusrings dieser Komponente.
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Der Radius der Ecken dieser Komponente.
   </description>
<default>2
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="decrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein Skinteil, der die Schaltfläche definiert, die bei Betätigung die <codeph>value</codeph>-Eigenschaft um <codeph>stepSize</codeph> verringert.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, decrements the value property
      by stepSize.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      Ein Skinteil, der die Schaltfläche definiert, die bei Betätigung die <codeph>value</codeph>-Eigenschaft um <codeph>stepSize</codeph> erhöht.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, increments the value property
      by stepSize.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Spinner&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Spinner
    <strong>Properties</strong>
    allowValueWrap="false"
  
    <strong>Events</strong>
    change="<i>No default</i>"
     <strong>Styles</strong>
    cornerRadius="2"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
      
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine Spinner-Komponente wählt einen Wert aus einer geordneten Menge aus. Sie verfügt über zwei Schaltflächen, die den aktuellen Wert auf Grundlage des aktuellen Werts der <codeph>stepSize</codeph>-Eigenschaft erhöhen bzw. verringern.
  
  <p>Eine Spinner-Komponente verfügt über zwei erforderliche Schaltflächen zum Erhöhen bzw. Verringern des aktuellen Werts. Mit der Nach-oben-Taste und der Nach-unten-Taste und dem Mausrad können Sie sich ebenfalls durch die Werte bewegen. Ein Eingabewert wird übernommen, wenn der Benutzer die Eingabetaste drückt und den Fokus von der Komponente entfernt oder durch Drücken einer Pfeiltaste bzw. Aufrufen der <codeph>changeValueByStep()</codeph>-Methode den Spinner durchläuft.</p>
   <p>Die Skalierung einer Spinner-Komponente entspricht der Menge an zulässigen Werten für die <codeph>value</codeph>-Eigenschaft. Die zulässigen Werte sind die Summe des Minimums mit ganzzahligen Vielfachen der<codeph>snapInterval</codeph>-Eigenschaft, die kleiner oder gleich dem <codeph>maximum</codeph>-Wert sind. Beispiel:</p>
  
  <ul>
    <li><codeph>minimum</codeph> = -1</li>
    <li><codeph>maximum</codeph> = 10</li>
    <li><codeph>snapInterval</codeph> = 3</li>
  </ul>
  
  Die Skalierung lautet {-1,2,5,8,10}.
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
   <p>Das Spinner-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>19 Pixel breit und 23 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>12 Pixel breit und 12 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.SpinnerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="SpinnerExample.mxml"><swfblock conref="examples/SpinnerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#SpinnerSkin"><linktext>spark.skins.spark.SpinnerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Spinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich der Wert des Spinner-Steuerelements durch Bedienvorgänge des Benutzers ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der Wert des Spinner-Steuerelements durch Benutzerinteraktion  ändert.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Spinner:Spinner"><apiName>Spinner</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Spinner:allowValueWrap:get"><apiName>allowValueWrap</apiName><shortdesc>
      Bestimmt das Verhalten des Steuerelements für einen Schritt, wenn der aktuelle Wert entweder dem maximalen oder dem minimalen Wert entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bestimmt das Verhalten des Steuerelements für einen Schritt, wenn der aktuelle Wert von <codeph>value</codeph> entweder dem <codeph>maximum</codeph>- oder <codeph>minimum</codeph>-Wert entspricht. Wenn <codeph>allowValueWrap</codeph> den Wert <codeph>true</codeph> aufweist, reicht die <codeph>value</codeph>-Eigenschaft vom <codeph>maximum</codeph>- bis <codeph>minimum</codeph>-Wert oder vom <codeph>minimum</codeph>- zum <codeph>maximum</codeph>-Wert.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ResizeMode"><apiName>ResizeMode</apiName><shortdesc>
  Die ResizeMode-Klasse definiert eine Zusammenfassung der Modi, die von einer Komponente verwendet werden, um die Größe der untergeordneten Elemente innerhalb der vom Layoutsystem angegebenen Abmessungen zu ändern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ResizeMode-Klasse definiert eine Zusammenfassung der Modi, die von einer Komponente verwendet werden, um die Größe der untergeordneten Elemente innerhalb der vom Layoutsystem angegebenen Abmessungen zu ändern.
 
  <p>Die Komponente kann ihre eigenen Abmessungen (<codeph>width</codeph> und <codeph>height</codeph>) ändern und ihre untergeordneten Elemente entsprechend neu anordnen (dies ist der Standardmodus zum Ändern der Größe).</p>
 
  <p>Eine alternative Option für die Komponente besteht darin, den Maßstab zu ändern. In diesem Fall müssen die untergeordneten Elemente überhaupt nicht geändert werden. Diese Option wird von <codeph>Group</codeph> unterstützt.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ResizeMode:NO_SCALE"><apiName>NO_SCALE</apiName><shortdesc>
      Die Größe wird durch Ändern der Breite und Höhe geändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Die Größe wird durch Ändern von <codeph>width</codeph> und <codeph>height</codeph> geändert.
     
      <p>Die Komponente ändert ihre Größe immer selbst und ordnet ihre untergeordneten Elemente anschließend in der Originalgröße an, die vom Layout oder Benutzer angegeben wurde.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ResizeMode:SCALE"><apiName>SCALE</apiName><shortdesc>
      Ändert die Größe durch Einstellen der scaleX- und scaleY-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Ändert die Größe durch Einstellen der <codeph>scaleX</codeph>- und <codeph>scaleY</codeph>-Eigenschaft.
     
      <p>Die Komponente ändert ihre Größe immer selbst und ordnet anschließend die untergeordneten Elemente in der gemessenen Größe an. Der Maßstab wird an die durch das Layout oder den Benutzer angegebene Größe angepasst.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
  Die NavigatorContent-Klasse definiert einen Spark-Container, der in einem MX-Navigatorcontainer verwendet werden kann, z. B. im ViewStack-, TabNavigator- und Accordion-Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NavigatorContent&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NavigatorContent
    <strong>Properties</strong>
    icon="null"
    label=""
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die NavigatorContent-Klasse definiert einen Spark-Container, der in einem MX-Navigatorcontainer verwendet werden kann, z. B. im ViewStack-, TabNavigator- und Accordion-Container.
 
  <p>Verwenden Sie keinen NavigatorContent-Container außerhalb eines MX-Navigator-Containers.</p>
 
  <p>Die Erstellungsrichtlinie des NavigatorContent-Containers basiert auf der Erstellungsrichtlinie seines übergeordneten Navigatorcontainers: </p>
 
  <ul>
    <li>Wenn die Erstellungsrichtlinie des übergeordneten Navigatorcontainers „none“ ist, ist die Erstellungsrichtlinie des NavigatorContent „none“.</li>
    <li>Wenn die Erstellungsrichtlinie des übergeordneten Containers „all“ ist, ist die Erstellungsrichtlinie des NavigatorContent „all“.</li>
    <li>Wenn die Erstellungsrichtlinie des übergeordneten Containers „auto“ ist, ist die Erstellungsrichtlinie des NavigatorContent „none“.</li>
  </ul>
 
  <p>Der NavigatorContent-Container unterstützt keine Warteschlangen für Erstellungsrichtlinien.</p>
 
  <p>Der NavigatorContent-Container weist folgende Standardmerkmale auf:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NavigatorContentExample.mxml"><swfblock conref="examples/NavigatorContentExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiConstructor id="spark.components:NavigatorContent:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      Die Klasse des von manchen Navigatorcontainern angezeigten Symbols zur Darstellung dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Klasse des von manchen Navigatorcontainern angezeigten Symbols zur Darstellung dieses Containers.
     
      <p>Beispiel: Wenn dieser Container ein untergeordnetes Element eines TabNavigator ist, wird dieses Symbol auf der entsprechenden Registerkarte angezeigt. Ist dieser Container ein untergeordnetes Element eines Accordion, wird dieses Symbol im entsprechenden Header angezeigt.</p>
     
      <p>Verwenden Sie zum Einbetten des Symbols in der SWF-Datei die @Embed()-Anweisung des MXML-Compilers:</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>Das Bild kann eine Datei in den Formaten JPEG, GIF, PNG, SVG oder SWF sein.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      Der von manchen Navigatorcontainern angezeigte Text, der diesen Container repräsentieren soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der von manchen Navigatorcontainern angezeigte Text, der diesen Container repräsentieren soll.
     
      <p>Beispiel: Wenn dieser Container ein untergeordnetes Element eines TabNavigator ist, wird dieser String auf der entsprechenden Registerkarte angezeigt. Ist dieser Container ein untergeordnetes Element eines Accordion, wird dieser String im entsprechenden Header angezeigt.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VSlider"><apiName>VSlider</apiName><shortdesc>
  Mithilfe des Steuerelements VSlider (vertikale Schiebereglerleiste) können Benutzer einen Wert auswählen, indem sie einen Schieberegler zwischen den beiden Endpunkten der Schiebereglerleiste bewegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VSlider">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:VSlider/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe des Steuerelements VSlider (vertikale Schiebereglerleiste) können Benutzer einen Wert auswählen, indem sie einen Schieberegler zwischen den beiden Endpunkten der Schiebereglerleiste bewegen. Die Schiebereglerleiste verläuft von unten nach oben. Der aktuelle Wert der Schiebereglerleiste wird von der relativen Position des Schiebereglers zwischen den Endpunkten der Schiebereglerleiste bestimmt, die dem Mindest- und Höchstwert der Schiebereglerleiste entsprechen.
 
  <p>Die Schiebereglerleiste ermöglicht einen fortlaufenden Wertebereich zwischen dem Mindest- und dem Höchstwert; Werte können auch durch bestimmte Intervalle zwischen Mindest- und Höchstwert beschränkt werden. Der aktuelle Wert wird eventuell mithilfe eines Datentipps angezeigt.</p>
   <p>Das VSlider-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>11 Pixel breit und 100 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>11 Pixel breit und 11 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklassen</entry>
           <entry>spark.skins.spark.VSliderSkin
              <p>spark.skins.spark.VSliderThumbSkin</p>
              <p>spark.skins.spark.VSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VSliderExample.mxml"><swfblock conref="examples/VSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VSliderSkin"><linktext>spark.skins.spark.VSliderSkin</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
  Die ToggleButton-Komponente definiert eine Schaltfläche mit Umschaltfunktion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ToggleButton">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ToggleButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButton/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ToggleButton-Komponente definiert eine Schaltfläche mit Umschaltfunktion. Durch Klicken auf die Schaltfläche wird zwischen dem Up- und dem Down-Status umgeschaltet. Wenn Sie auf die Schaltfläche klicken, während der Up-Status aktiviert ist, wird sie in den Down-Status umgeschaltet. Sie müssen erneut auf die Schaltfläche klicken, um zurück in den Up-Status umzuschalten.
 
  <p>Sie können diesen Status programmgesteuert mithilfe der Eigenschaft <codeph>selected</codeph> abrufen oder festlegen.</p>
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
   <p>Das ToggleButton-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Breit genug für die Beschriftung des Steuerelements.</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>21 Pixel breit und 21 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.ToggleButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ToggleButtonExample.mxml"><swfblock conref="examples/ToggleButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ToggleButtonSkin"><linktext>spark.skins.spark.ToggleButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleButton:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:FormHeading"><apiName>FormHeading</apiName><shortdesc>
  Der Spark-FormHeading-Container zeigt eine Überschrift für eine Gruppe mit Steuerelementen in einem Spark-Form-Container an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:FormHeading">
<description>
  Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Hintergrundfarbe der Komponente.
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alphaebene des Inhaltshintergrunds für diese Komponente. Die zulässigen Werte liegen zwischen 0,0 und 1,0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.5" type="Object">
<description>
  Legt den beim Blocksatz verwendeten Abstand zwischen Wörtern fest. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Blendet Leerraum aus oder behält ihn bei, wenn Text in einem TextFlow importiert wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Bestimmt die Gradzahl zum Drehen dieses Texts.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Offset der ersten Textzeile links vom Container.
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textIndent“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Gibt die Tabulatoren an, die dem Absatz zugewiesen sind.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den der obere Absatzrand eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der vor dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der hinter dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den die obere Absatzrandkante eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Darstellung von Einträgen in Listen.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Platzierung von Markern relativ zum Listeneintrag.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Legt einen automatischen Einzug für den Beginn von Listenrändern fest, wenn der Auffüllwert der Liste auf dieser Seite <codeph>auto</codeph> ist.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Gibt das Zeilenabstandsmodell an, das eine Kombination aus Zeilenabstandsbasis und Zeilenabstandsrichtung ist.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Gibt die Grundlinienposition der ersten Linie im Container an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Steuert, wie der Text bei einem Float umbricht.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Steuert, an welcher Stelle Zeilen umbrochen werden können, wenn umbrochener Text in mehrere Zeilen umbrochen wird. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Gibt eine vertikale oder horizontale Abfolge der Zeilenplatzierung an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:FormHeading" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#FormHeading/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#FormHeading/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#FormHeading/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#FormHeading/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:FormHeading" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormHeading" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Ein Verweis auf das visuelle Element, das diese Beschriftung des FormItem anzeigt.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormHeading&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormHeading
    <strong>Properties</strong>
    label=""
  
    <strong>Common Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der Spark-FormHeading-Container zeigt eine Überschrift für eine Gruppe mit Steuerelementen in einem Spark-Form-Container an. Sie können mehrere FormHeading-Container in einen Form-Container einschließen.
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormHeadingSkin"><linktext>spark.skins.spark.FormHeadingSkin</linktext></link></related-links><apiConstructor id="spark.components:FormHeading:FormHeading"><apiName>FormHeading</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:FormHeading:label:get"><apiName>label</apiName><shortdesc>
      In der FormHeading-Komponente anzuzeigender Text</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      In der FormHeading-Komponente anzuzeigender Text
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  Mithilfe des HScrollBar-Steuerelements (horizontale Bildlaufleiste) können Sie steuern, welche Daten angezeigt werden, wenn zu viele Daten vorhanden sind und diese nicht horizontal in den Anzeigebereich passen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:HScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:HScrollBar
     <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe des HScrollBar-Steuerelements (horizontale Bildlaufleiste) können Sie steuern, welche Daten angezeigt werden, wenn zu viele Daten vorhanden sind und diese nicht horizontal in den Anzeigebereich passen.
 
  <p>Obwohl das HScrollBar-Steuerelement auch als allein stehendes Steuerelement verwendet werden kann, wird es üblicherweise zusammen mit anderen Elementen in einer Komponentengruppe für die Bildlauffunktion verwendet.</p>
   <p>Das HScrollBar-Steuerelement hat die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>85 Pixel breit und 15 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>35 Pixel breit und 35 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklassen</entry>
           <entry>spark.skins.spark.HScrollBarSkin
              <p>spark.skins.spark.HScrollBarThumbSkin</p>
              <p>spark.skins.spark.HScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="HScrollBarExample.mxml"><swfblock conref="examples/HScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HScrollBarSkin"><linktext>spark.skins.spark.HScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:HScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Wird ausgelöst, wenn sich die horizontalScrollPosition aufgrund eines mouseWheel-Ereignisses ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>horizontalScrollPosition</codeph> aufgrund eines <codeph>mouseWheel</codeph>-Ereignisses ändert.
 
  <p>Der Bildlauf erfolgt in horizontaler Richtung gemäß der für dieses Ereignis standardmäßig festgelegten <codeph>delta</codeph>-Anzahl von „Schritten“. Die <codeph>getHorizontalScrollPositionDelta</codeph>-Methode des Viewports, die abhängig von der Bildlaufrichtung entweder<codeph>LEFT</codeph> oder <codeph>RIGHT</codeph> verwendet, legt die Breite des Schritts fest.</p>
 
  <p>Das Aufrufen der <codeph>preventDefault()</codeph>-Methode im Ereignis verhindet, dass sich die horizontale Bildlaufposition ändert. Wenn Sie die <codeph>delta</codeph>-Eigenschaft des Ereignisses modifizieren, wird dieser Wert als die Anzahl horizontaler „Schritte“ verwendet.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:HScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Wert um eine Seite inkrementieren, wenn „increase“ den Wert „true“ hat, oder Wert um eine Seite dekrementieren, wenn „increase“ den Wert „false“ hat</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Ob Inkrementieren (<codeph>true</codeph>) oder Dekrementieren (<codeph>false</codeph>) von <codeph>value</codeph> erfolgen soll. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>value</codeph> um eine Seite inkrementieren, wenn <codeph>increase</codeph> den Wert <codeph>true</codeph> hat, oder <codeph>value</codeph>um eine Seite dekrementieren, wenn <codeph>increase</codeph> den Wert <codeph>false</codeph> hat Durch Erhöhen des <codeph>value</codeph> der Bildlaufleiste wird ein Bildlauf im Viewport nach rechts durchgeführt. Durch Verringern des <codeph>value</codeph> erfolgt ein Bildlauf im Viewport nach links.
      
      <p>Ist die <codeph>viewport</codeph>-Eigenschaft festgelegt, dann wird mit ihrer <codeph>getHorizontalScrollPositionDelta()</codeph>-Methode die Größe der Seiteninkrementierung berechnet. Wenn <codeph>viewport</codeph> den Wert „null“ hat, wird die <codeph>pageSize</codeph>-Eigenschaft der Bildlaufleiste verwendet.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Wenn „viewport“ nicht gleich null ist, wird die horizontale Bildlaufposition für einen Zeilenwechsel nach oben oder unten im Viewport geändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Ob der Zeilenbildlauf nach oben (<codeph>true)</codeph> oder nach unten (<codeph>false</codeph>) erfolgt. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>viewport</codeph> nicht gleich null ist, wird die horizontale Bildlaufposition für einen Zeilenwechsel nach oben oder unten im Viewport geändert. Diese Methode berechnet den Umfang des Bildlaufs, indem sie die <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph>-Methode mit <codeph>flash.ui.Keyboard.RIGHT</codeph> oder <codeph>flash.ui.Keyboard.LEFT</codeph> aufruft. Anschließend ruft sie die <codeph>setValue()</codeph>-Methode auf, um die <codeph>IViewport.horizontalScrollPosition</codeph>-Eigenschaft auf den entsprechenden Wert einzustellen.
           <p>Wenn <codeph>viewport</codeph> gleich null ist, ändert sich durch Aufrufen dieser Methode die Bildlaufposition bei einem Zeilenwechsel nach oben oder unten, indem die <codeph>changeValueByPage()</codeph>-Methode aufgerufen wird.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Aktualisiert die value-Eigenschaft. Wenn Viewport nicht null ist, wird die zugehörige horizontalScrollPosition auf „value“ gesetzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Der neue Wert der <codeph>value</codeph>-Eigenschaft. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Aktualisiert die <codeph>value</codeph>-Eigenschaft. Wenn Viewport nicht null ist, wird die zugehörige <codeph>horizontalScrollPosition</codeph> auf <codeph>value</codeph> gesetzt.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#HScrollBar/viewport"><linktext>viewport</linktext></link></related-links></apiOperation><apiValue id="spark.components:HScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      Der Viewport, der durch diese Bildlaufleiste gesteuert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Der Viewport, der durch diese Bildlaufleiste gesteuert wird.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ScrollSnappingMode"><apiName>ScrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List/scrollSnappingMode"><linktext/></link><link href="spark.components.xml#Scroller/scrollSnappingMode"><linktext/></link></related-links><apiValue id="spark.components:ScrollSnappingMode:CENTER"><apiName>CENTER</apiName><shortdesc>
          Die Elemente springen in die Mitte des Darstellungsfeldes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Die Elemente springen in die Mitte des Darstellungsfeldes.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:LEADING_EDGE"><apiName>LEADING_EDGE</apiName><shortdesc>
          Die Elemente springen an die linke (horizontal) oder obere (vertikal) Kante des Darstellungsfeldes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>leadingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Die Elemente springen an die linke (horizontal) oder obere (vertikal) Kante des Darstellungsfeldes.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:NONE"><apiName>NONE</apiName><shortdesc>
          Der Bildlaufsprung ist deaktiviert..</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
          
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:TRAILING_EDGE"><apiName>TRAILING_EDGE</apiName><shortdesc>
          Die Elemente springen an die rechte (horizontal) oder untere (vertikal) Kante des Darstellungsfeldes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>trailingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Die Elemente springen an die rechte (horizontal) oder untere (vertikal) Kante des Darstellungsfeldes.
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
  Die SkinnablePopUpContainer-Klasse ist ein SkinnableContainer, der auch als Popup funktioniert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="closed" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash10">
<description>
  Der Closed-Status.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="no" name="softKeyboardEffectDuration" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash11" type="Number">
<description>
  
 
  </description>
<default>150
  
  </default>

<playerversion>AIR 3.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SkinnablePopUpContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnablePopUpContainer 
    <strong>Events</strong>
    close="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SkinnablePopUpContainer-Klasse ist ein SkinnableContainer, der auch als Popup funktioniert. Mit dem SkinnablePopUpContainer-Container kann zum Beispiel ein einfaches Fenster (z. B. ein Benachrichtigungsfenster) in einer Anwendung geöffnet werden, um anzuzeigen, dass eine Aktion durch den Benutzer erforderlich ist.
   <p>Sie erstellen kein SkinnablePopUpContainer-Container als Teil des normalen Layouts des übergeordneten Containers. Stattdessen wird er als Popup-Fenster über dem übergeordneten Element angezeigt. Daher erstellen Sie ihn nicht direkt im MXML-Code der Anwendung.</p>
   <p>Stattdessen erstellen Sie ihn als MXML-Komponente, häufig in einer separaten MXML-Datei. Erstellen Sie zum Anzeigen der Komponente eine Instanz der MXML-Komponente und rufen Sie die <codeph>open()</codeph>-Methode auf. Sie können auch die Größe und Position der Komponente festlegen, wenn Sie sie öffnen.</p>  
   <p>Rufen Sie zum Schließen der Komponente die <codeph>close()</codeph>-Methode auf. Wenn das Popup Daten an eine Prozedur zurückgeben muss, können Sie einen Ereignis-Listener für das <codeph>PopUp.CLOSE</codeph>-Ereignis hinzufügen und die zurückgegebenen Daten in der <codeph>close()</codeph>-Methode festlegen.</p>
   <p>Der SkinnablePopUpContainer befindet sich zu Beginn im <codeph>closed</codeph>-Skinstatus. Wenn er geöffnet wird, fügt er sich selbst als Popup dem PopUpManager hinzu und nimmt den <codeph>normal</codeph>-Skinstatus ein. Verwenden Sie zum Definieren von offenen und geschlossenen Animationen eine benutzerdefinierte Skin mit Übergängen zwischen den <codeph>closed</codeph>- und <codeph>normal</codeph>-Status.</p>
 
  <p>Der SkinnablePopUpContainer-Container weist folgende Standardmerkmale auf:</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row><row><entry>Standardskinklasse</entry><entry>spark.skins.spark.SkinnablePopUpContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#SkinnablePopUpContainerSkin"><linktext>spark.skins.spark.SkinnablePopUpContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Wird ausgelöst, wenn der Container geschlossen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Container geschlossen wird.
 
  <p>Dieses Ereignis wird ausgelöst, wenn der Container vom <codeph>normal</codeph>-Status in den <codeph>closed</codeph>-Status wechselt und der Übergang zu diesem Status abgeschlossen ist.</p>
 
  <p>Das Ereignis stellt einen Mechanismus zum Übergeben von commit-Informationen vom Container an einen Ereignis-Listener bereit. Ein typisches Verwendungsszenario ist das Erstellen eines Dialogfelds mit mehreren Optionen und einer Schaltfläche zum Abbrechen. Wenn eine gültige Option ausgewählt wurde, schließen Sie das Popup, indem Sie die <codeph>close()()</codeph>-Methode aufrufen und damit <codeph>true</codeph> an den <codeph>commit</codeph>-Parameter sowie optional alle relevanten Daten übergeben. Wenn der SkinnablePopUpContainer vollständig geschlossen wurde, wird dieses Ereignis ausgelöst. Anschließend können Sie im Ereignis-Listener die <codeph>commit</codeph>-Eigenschaft überprüfen und die entsprechende Aktion ausführen.  </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Wird ausgelöst, wenn der Container geöffnet wurde und vom Benutzer verwendet werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Container geöffnet wurde und vom Benutzer verwendet werden kann.
 
  <p>Dieses Ereignis wird ausgelöst, wenn der Container vom <codeph>closed</codeph>-Status in den <codeph>normal</codeph>-Status wechselt und der Übergang zu diesem Status abgeschlossen ist.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnablePopUpContainer:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnablePopUpContainer:close"><apiName>close</apiName><shortdesc>
      Ändert den aktuellen Skinstatus in „closed“, wartet, bis alle Statusübergänge wiedergegeben wurden, löst ein PopUpEvent.CLOSE-Ereignis aus und entfernt den Container aus dem PopUpManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Legt fest, ob die zurückgegebenen Daten von der Anwendung übernommen werden sollen. Der Wert dieses Arguments wird in die <codeph>commit</codeph>-Eigenschaft des <codeph>PopUpEvent</codeph>-Ereignisobjekts geschrieben.
     
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>Legt die an die Anwendung zurückgegebenen Daten fest. Der Wert dieses Arguments wird in die <codeph>data</codeph>-Eigenschaft des <codeph>PopUpEvent</codeph>-Ereignisobjekts geschrieben.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ändert den aktuellen Skinstatus in <codeph>closed</codeph>, wartet, bis alle Statusübergänge wiedergegeben wurden, löst ein <codeph>PopUpEvent.CLOSE</codeph>-Ereignis aus und entfernt den Container aus dem PopUpManager.
           <p>Verwenden Sie die <codeph>close()</codeph>-Methode des SkinnablePopUpContainer-Containers, um Daten aus dem Popup zurück an die Hauptanwendung zu übergeben. Ein typisches Verwendungsszenario ist das Erstellen eines Dialogfelds mit einer Schaltfläche zum Abbrechen. Wenn im Dialogfeld eine gültige Option ausgewählt wurde, schließen Sie dieses, indem Sie die <codeph>close()</codeph>-Methode aufrufen und damit <codeph>true</codeph> an den <codeph>commit</codeph>-Parameter sowie optional alle relevanten Daten übergeben. Wenn der SkinnablePopUpContainer geschlossen wurde, wird das <codeph>close</codeph>-Ereignis ausgelöst. Im Ereignis-Listener für das <codeph>close</codeph>-Ereignis können Sie den <codeph>commit</codeph>-Parameter überprüfen und die entsprechenden Aktionen ausführen.  </p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>open</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:protected:createSoftKeyboardEffect"><apiName>createSoftKeyboardEffect</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc> 
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn><apiParam><apiItemName>yTo</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>heightTo</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
        
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:open"><apiName>open</apiName><shortdesc>
      Öffnet den Container als Popup und ändert den Skinstatus „closed“ in „normal“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Der Eigentümer des Containers. Das Popup wird über diesen Container angezeigt.
           </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Ob der Container modal sein soll. Ein modaler Container übernimmt alle Tastatur- und Mauseingaben, bis er geschlossen wird. Ein nichtmodaler Container ermöglicht es anderen Komponenten, Eingaben zu übernehmen, während das Popup-Fenster geöffnet ist.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Öffnet den Container als Popup und ändert den Skinstatus <codeph>closed</codeph> in <codeph>normal</codeph>. Nachdem die Wiedergabe von Übergängen abgeschlossen ist, wird das <codeph>FlexEvent.OPEN</codeph>-Ereignis ausgelöst.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>close</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:updatePopUpPosition"><apiName>updatePopUpPosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnablePopUpContainer:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      Enthält „true“, wenn der Container geöffnet ist und aktuell als Popup angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn der Container geöffnet ist und aktuell als Popup angezeigt wird.  
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>open</linktext></link><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>close</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:moveForSoftKeyboard:get"><apiName>moveForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownList"><apiName>DropDownList</apiName><shortdesc>
  Das DropDownList-Steuerelement umfasst eine Dropdownliste, aus welcher der Benutzer einen einzelnen Wert auswählen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DropDownList">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:DropDownList" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Ein optionaler Skinteil, der die Eingabeaufforderung oder den Text des ausgewählten Elements enthält. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that holds the prompt or the text of the selected item.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownList&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DropDownList 
    <strong>Properties</strong>
    prompt=""
    typicalItem="null"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das DropDownList-Steuerelement umfasst eine Dropdownliste, aus welcher der Benutzer einen einzelnen Wert auswählen kann. Seine Funktion ist der des SELECT-Elements in HTML sehr ähnlich.
   <p>Das DropDownList-Steuerelement besteht aus der Ankerschaltfläche, Eingabeaufforderungsbereich und Dropdownliste. Verwenden Sie die Ankerschaltfläche, um die Dropdownliste zu öffnen und zu schließen. Im Eingabeaufforderungsbereich wird ein String für die Eingabeaufforderung oder das ausgewählte Element in der Dropdownliste angezeigt.</p>
   <p>Bei geöffneter Dropdownliste:</p>
  <ul>
    <li>Durch Klicken auf die Ankerschaltfläche wird die Dropdownliste geschlossen und das derzeit ausgewählte Datenelement übernommen.</li>
    <li>Durch Klicken auf eine Stelle außerhalb der Dropdownliste wird die Dropdownliste geschlossen und das derzeit ausgewählte Datenelement übernommen.</li>
    <li>Durch Klicken auf ein Datenelement wird dieses Element ausgewählt und die Dropdownliste geschlossen.</li>
    <li>Wenn die <codeph>requireSelection</codeph>-Eigenschaft den Wert <codeph>false</codeph> aufweist, wird durch Klicken auf ein Datenelement bei gedrückter Strg-Taste die Auswahl des Elements aufgehoben und die Dropdownliste geschlossen.</li>
  </ul>
   <p><b>Hinweis:</b> Die listenbasierten Spark-Steuerelemente (die Spark ListBase-Klasse und ihre Unterklassen wie ButtonBar, ComboBox, DropDownList, List und TabBar) unterstützen nicht die Verwendung der BasicLayout-Klasse als Wert der <codeph>layout</codeph>-Eigenschaft. Verwenden Sie BasicLayout nicht für listenbasierte Spark-Steuerelemente.</p>
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
  
  <p>Das DropDownList-Steuerelement hat die folgenden Standardmerkmale:</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>112 Pixel breit und 21 Pixel hoch</entry></row><row><entry>Minimale Größe</entry><entry>112 Pixel breit und 21 Pixel hoch</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row><row><entry>Standardskinklasse</entry><entry>spark.skins.spark.DropDownListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><apiConstructor id="spark.components:DropDownList:DropDownList"><apiName>DropDownList</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DropDownList:prompt:get"><apiName>prompt</apiName><shortdesc>
      Die Eingabeaufforderung für das DropDownList-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Eingabeaufforderung für das DropDownList-Steuerelement. Die Eingabeaufforderung ist ein String, der in der DropDownList angezeigt wird, wenn <codeph>selectedIndex</codeph> = -1. Normalerweise handelt es sich um einen String mit einem Text ähnlich dem folgenden: „Wählen Sie ...“. Durch Auswahl eines Elements in der Dropdownliste wird die Eingabeaufforderung durch den Text aus dem ausgewählten Element ersetzt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DropDownList:typicalItem:set"><apiName>typicalItem</apiName><shortdesc>
      In Layouts wird die bevorzugte Größe von typicalItem verwendet, wenn eine feste Zeilen- oder Spaltengröße erforderlich ist, jedoch kein rowHeight- oder columnWidth-Wert eingestellt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      In Layouts wird die bevorzugte Größe von <codeph>typicalItem</codeph> verwendet, wenn eine feste Zeilen- oder Spaltengröße erforderlich ist, jedoch kein <codeph>rowHeight</codeph>- oder <codeph>columnWidth</codeph>-Wert eingestellt ist. Auf ähnliche Weise verwenden virtuelle Layouts dieses Element, um die Größe der Layoutelemente zu definieren, die sich nicht in der Ansicht befinden.
           <p>Der Container verwendet das typische Datenelement und den damit verknüpften Elementrenderer, um die Standardgröße der untergeordneten Elemente des Containers zu bestimmen. Durch die Definition des typischen Elements muss der Container nicht die Größe von jedem untergeordneten Element festlegen, das auf dem Bildschirm gezeichnet wird.</p>
           <p>Durch Festlegen dieser Eigenschaft wird die <codeph>tyicalLayoutElement</codeph>-Eigenschaft des Layouts definiert.</p>
     
      <p>Einschränkung: Wenn das <codeph>typicalItem</codeph> ein IVisualItem ist, darf es nicht gleichzeitig ein Mitglied des Datenproviders sein.</p>
     
      <p>Hinweis: Durch Festlegen von <codeph>typicalItem</codeph> werden explizite Breiten- und Höheneinstellungen des <codeph>labelDisplay</codeph>-Skinteils überschrieben. </p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
  Die GridColumnHeaderGroup-Klasse zeigt eine Zeile mit Spaltenüberschriften und Trennzeichen an, die am Rasterlayout ausgerichtet sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Oberer Versatz in Pixeln für alle Spaltenüberschriftsrenderer. 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Rechter Einzug in Pixeln für den letzten Spaltenüberschriftsrenderer. 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Linker Einzug in Pixeln für den ersten Spaltenüberschriftsrenderer. 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Unterer Versatz in Pixeln für alle Spaltenüberschriftsrenderer. 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="separatorAffordance" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  Horizontaler Raum auf jeder Seite eines Spaltentrennzeichens, der als Teil des Trennzeichens für das Auslösen von Mausereignissen angesehen wird.
 
  <p>Trennzeichen sind häufig nur ein Pixel breit, was die Interaktion mit diesen schwierig gestaltet. Dieser Wert wird von <codeph>getSeparatorIndexAt()</codeph> verwendet, um Trennzeichen mehr Raum zu geben, sodass Trennzeichenereignisse ausgelöst werden, wenn sich die Maus näher als<codeph>separatorMouseWidth</codeph> am horizontalen Mittelpunkt eines Trennzeichens befindet.</p> 
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
</productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:GridColumnHeaderGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:GridColumnHeaderGroup 
    <strong>Properties</strong>
    columnSeperator="null"
    dataGrid="null"  
    downColumnIndex="-1"  
    headerRenderer="null"  
    hoverColumnIndex="-1"  
    visibleSortIndicatorIndices="<i>empty Vector.&lt;int&gt<i>"
 
    <strong>Styles</strong>
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    separatorAffordance="5" 
 
    <strong>Events</strong>
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    separatorClick="<i>No default</i>"
    separatorDoubleClick="<i>No default</i>"
    separatorMouseDrag="<i>No default</i>"
    separatorMouseUp="<i>No default</i>"
    separatorMouseRollOut="<i>No default</i>"
    separatorMouseRollOver="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die GridColumnHeaderGroup-Klasse zeigt eine Zeile mit Spaltenüberschriften und Trennzeichen an, die am Rasterlayout ausgerichtet sind.  
 
  <p>Überschriften werden von der durch die <codeph>headerRenderer</codeph>-Eigenschaft festgelegte Klasse gerendert. Trennzeichen werden von der durch die <codeph>columnSeparator</codeph>-Eigenschaft festgelegten Klasse gerendert. Das Layout, das nicht geändert werden kann, ist virtuell: Renderer und Trennzeichen, die nicht mehr angezeigt werden, werden wiederverwendet.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>Grid</linktext></link></related-links><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK_separatorDoubleClick"><apiName>separatorDoubleClick</apiName><shortdesc>
  Wird ausgelöst, wenn mit der Maus auf ein Trennzeichen für Spaltenüberschriften doppelgeklickt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn mit der Maus auf ein Trennzeichen für Spaltenüberschriften doppelgeklickt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_CLICK_separatorClick"><apiName>separatorClick</apiName><shortdesc>
  Wird ausgelöst, wenn mit der Maus auf ein Trennzeichen für Spaltenüberschriften geklickt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn mit der Maus auf ein Trennzeichen für Spaltenüberschriften geklickt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OUT_separatorRollOut"><apiName>separatorRollOut</apiName><shortdesc>
  Wird ausgelöst, wenn die Maus den Bereich, der durch ein Spaltentrennzeichen und separatorMouseWidth definiert ist, verlässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Maus den Bereich, der durch ein Spaltentrennzeichen und <codeph>separatorMouseWidth</codeph> definiert ist, verlässt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OVER_separatorRollOver"><apiName>separatorRollOver</apiName><shortdesc>
  Wird ausgelöst, wenn mit der Maus in den Bereich, der durch ein Spaltentrennzeichen und separatorMouseWidth definiert ist, gezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn mit der Maus in den Bereich, der durch ein Spaltentrennzeichen und <codeph>separatorMouseWidth</codeph> definiert ist, gezeigt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_UP_separatorMouseUp"><apiName>separatorMouseUp</apiName><shortdesc>
  Wird nach einem separatorMouseDown-Ereignis ausgelöst, wenn die Maustaste losgelassen wird, selbst wenn sich die Maus nicht mehr innerhalb des Trennzeichenbereichs befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einem <codeph>separatorMouseDown</codeph>-Ereignis ausgelöst, wenn die Maustaste losgelassen wird, selbst wenn sich die Maus nicht mehr innerhalb des Trennzeichenbereichs befindet.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_DRAG_separatorMouseDrag"><apiName>separatorMouseDrag</apiName><shortdesc>
  Wird nach einem separatorMouseDown-Ereignis ausgelöst, wenn die Maus vor dem Loslassen der Taste bewegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einem <codeph>separatorMouseDown</codeph>-Ereignis ausgelöst, wenn die Maus vor dem Loslassen der Taste bewegt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Wird ausgelöst, wenn ein Doppelklick über einer Spaltenüberschrift erfolgt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Doppelklick über einer Spaltenüberschrift erfolgt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Wird ausgelöst, wenn ein Mausklick über einer Spaltenüberschrift erfolgt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Mausklick über einer Spaltenüberschrift erfolgt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Wird ausgelöst, wenn die Maus eine Spaltenüberschrift verlässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Maus eine Spaltenüberschrift verlässt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Wird ausgelöst, wenn die Maus in eine Spaltenüberschrift hineinbewegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Maus in eine Spaltenüberschrift hineinbewegt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Wird nach einem gridMouseDown-Ereignis ausgelöst, wenn die Maustaste losgelassen wird, selbst wenn sich die Maus nicht mehr innerhalb der GridColumnHeaderGroup befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einem <codeph>gridMouseDown</codeph>-Ereignis ausgelöst, wenn die Maustaste losgelassen wird, selbst wenn sich die Maus nicht mehr innerhalb der GridColumnHeaderGroup befindet.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Wird nach einem gridMouseDown-Ereignis ausgelöst, wenn die Maus vor dem Loslassen der Taste bewegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einem <codeph>gridMouseDown</codeph>-Ereignis ausgelöst, wenn die Maus vor dem Loslassen der Taste bewegt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Wird ausgelöst, wenn die Maustaste über einer Spaltenüberschrift gedrückt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Maustaste über einer Spaltenüberschrift gedrückt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:GridColumnHeaderGroup:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderBounds"><apiName>getHeaderBounds</apiName><shortdesc>
      Gibt die aktuellen Pixelgrenzen der angegebenen Spaltenüberschrift (Renderer) zurück oder „null“, wenn keine solche Spalte vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein <codeph>Rectangle</codeph>, das die Pixelgrenzen der Spaltenüberschrift oder „null“ repräsentiert.
     
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Spalte. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die aktuellen Pixelgrenzen der angegebenen Spaltenüberschrift (Renderer) zurück oder „null“, wenn keine solche Spalte vorhanden ist. Grenzen von Spaltenüberschriften werden in GridColumnHeaderGroup-Koordinaten ausgegeben.
     
      <p>Wenn noch keine sichtbaren Spalten vor der angegebenen Spalte per Bildlauf in die Ansicht geholt wurden, können die zurückgegebenen Grenzen nur eine Annäherung entsprechend allen <codeph>typicalItem</codeph>s des Grid sein.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderIndexAt"><apiName>getHeaderIndexAt</apiName><shortdesc>
      Gibt die Spaltenindexposition entsprechend der angegebenen Koordinaten oder „-1“ zurück, wenn die Koordinaten außerhalb der Grenzen liegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt die Indexposition der Spalte oder „-1“ zurück, wenn die Koordinaten außerhalb der Grenzen liegen. 
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate des Pixels relativ zur <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate des Pixels relativ zur <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Spaltenindexposition entsprechend der angegebenen Koordinaten oder „-1“ zurück, wenn die Koordinaten außerhalb der Grenzen liegen. Die Koordinaten werden unter Berücksichtigung des Layoutziels der GridColumnHeaderGroup aufgelöst.
     
      <p>Wenn noch keine Spalten oder Zeilen des Rasters per Bildlauf in die Ansicht geholt wurden, kann die zurückgegebene Indexposition nur eine Annäherung entsprechend dem <codeph>typicalItem</codeph> aller Spalten sein.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderRendererAt"><apiName>getHeaderRendererAt</apiName><shortdesc>
      Gibt einen Verweis auf den zurzeit für die angegebene Spalte angezeigten Spaltenüberschriftsrenderer zurück, wenn der angeforderte Spaltenüberschriftsrenderer sichtbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Elementrenderer oder „null“, wenn die Spaltenindexposition ungültig ist.
     
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Spalte des Spaltenüberschriftsrenderers.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt einen Verweis auf den zurzeit für die angegebene Spalte angezeigten Spaltenüberschriftsrenderer zurück, wenn der angeforderte Spaltenüberschriftsrenderer sichtbar ist. Beachten Sie, dass der zurückgegebene Spaltenüberschriftsrenderer wiederverwendet werden kann und seine Eigenschaften zurückgesetzt werden, sobald er nicht mehr sichtbar ist.  
     
      <p>Wenn der angeforderte Spaltenüberschriftsrenderer nicht sichtbar ist, wird bei jedem Aufruf dieser Methode ein neuer Spaltenüberschriftsrenderer erstellt. Der neue Elementrenderer ist nicht sichtbar</p>
     
      <p>Die Breite des zurückgegebenen Renderers entspricht der von Elementrenderern, die von DataGrid/getItemRendererAt() zurückgegeben wurden.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getSeparatorIndexAt"><apiName>getSeparatorIndexAt</apiName><shortdesc>
      Gibt die Indexposition des Spaltentrennzeichens entsprechend den angegebenen Koordinaten zurück oder -1, wenn die Koordinaten kein Trennzeichen überlappen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition der Spalte oder „-1“, wenn die Koordinaten kein Trennzeichen überlappen.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate des Pixels relativ zur <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate des Pixels relativ zur <codeph>columnHeaderGroup</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Indexposition des Spaltentrennzeichens entsprechend den angegebenen Koordinaten zurück oder -1, wenn die Koordinaten kein Trennzeichen überlappen. Die Koordinaten werden unter Berücksichtigung des Layoutziels der GridColumnHeaderGroup aufgelöst.
     
      <p>Ein Trennzeichen „überlappt“ die angegebene Position, wenn die x-Koordinate innerhalb der <codeph>separatorMouseWidth</codeph> des horizontalen Mittelpunkts des Trennzeichens liegt.</p>
      
      <p>Die Indexposition des Trennzeichens entspricht der Indexposition der Spalte links, vorausgesetzt, dass die <codeph>layoutDirection</codeph> der Komponente <codeph>"ltr"</codeph> ist. Das bedeutet, dass alle Spaltenüberschriften von zwei Trennzeichen umgeben sind, mit Ausnahme der ersten sichtbaren Spalte, an deren rechter Seite sich ein Trennzeichen befindet, und der letzten sichtbaren Spalte, an deren linker Seite sich ein Trennzeichen befindet.</p>
     
      <p>Wenn noch keine Spalten oder Zeilen des Rasters per Bildlauf in die Ansicht geholt wurden, kann die zurückgegebene Indexposition nur eine Annäherung entsprechend dem <codeph>typicalItem</codeph> aller Spalten sein.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:isSortIndicatorVisible"><apiName>isSortIndicatorVisible</apiName><shortdesc>
      Gibt „true“ zurück, wenn der Sortierindikator für die angegebene Spalte sichtbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn der Sortierindikator für die angegebene Spalte sichtbar ist.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Spalte des Spaltenüberschriftsrenderers.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt <codeph>true</codeph> zurück, wenn der Sortierindikator für die angegebene Spalte sichtbar ist. Dies ist lediglich eine effizientere Version von 
      <pre>
          visibleSortIndicatorIndices.indexOf(columnIndex) != -1</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:GridColumnHeaderGroup:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      Ein visuelles Element, das zwischen allen Spalten angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein visuelles Element, das zwischen allen Spalten angezeigt wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      Das DataGrid-Steuerelement, das das Spaltenlayout und die horizontale Bildlaufposition für diese Komponente definiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Das DataGrid-Steuerelement, das das Spaltenlayout und die horizontale Bildlaufposition für diese Komponente definiert. Diese Eigenschaft wird vom DataGrid-Steuerelement festgelegt, nachdem der <codeph>grid</codeph>-Skinteil hinzugefügt wurde.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:downColumnIndex:get"><apiName>downColumnIndex</apiName><shortdesc>
      Legt die Spaltenindexposition des Spaltenüberschriftsrenderers fest, auf den der Benutzer derzeit klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt die Spaltenindexposition des Spaltenüberschriftsrenderers fest, auf den der Benutzer derzeit klickt.
      
      <p>Wenn <codeph>downColumnIndex</codeph> auf „-1“ gesetzt wird (Standardeinstellung), ist die Spaltenindexposition nicht definiert und die <codeph>down</codeph>-Eigenschaft des Spaltenüberschriftsrenderers wird auf <codeph>false</codeph> gesetzt.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:headerRenderer:get"><apiName>headerRenderer</apiName><shortdesc>
      Die IGridItemRenderer-Klasse, die zur Darstellung aller Spaltenüberschriften verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="headerRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die IGridItemRenderer-Klasse, die zur Darstellung aller Spaltenüberschriften verwendet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      Legt die Spaltenindexposition des Spaltenüberschriftsrenderers fest, auf den der Benutzer derzeit mit der Maus zeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt die Spaltenindexposition des Spaltenüberschriftsrenderers fest, auf den der Benutzer derzeit mit der Maus zeigt.
      
      <p>Wenn <codeph>hoverColumnIndex</codeph> auf „-1“ gesetzt wird (Standardeinstellung), ist die Spaltenindexposition nicht definiert und die <codeph>hovered</codeph>-Eigenschaft des Spaltenüberschriftsrenderers wird auf <codeph>false</codeph> gesetzt.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:visibleSortIndicatorIndices:get"><apiName>visibleSortIndicatorIndices</apiName><shortdesc>
      Ein Vektor von Spaltenindexpositionen, der zu Spaltenüberschriftsrenderern gehört, deren Sortierindikator zurzeit sichtbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="visibleSortIndicatorIndicesChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>an empty Vector.&amp;lt;int&amp;gt;
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Vektor von Spaltenindexpositionen, der zu Spaltenüberschriftsrenderern gehört, deren Sortierindikator zurzeit sichtbar sind.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
  Mit der PopUpAnchor-Komponente können Sie im Layout ein Popup- oder Dropdownsteuerelement platzieren, wie z. B. eine DropDownList-Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="popUp"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:PopUpAnchor&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:PopUpAnchor
 
    <strong>Properties</strong>
    displayPopUp="false"
    popUp=""
    popUpHeightMatchesAnchorHeight="false"
    popUpPosition="topLeft"
    popUpWidthMatchesAnchorWidth="false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit der PopUpAnchor-Komponente können Sie im Layout ein Popup- oder Dropdownsteuerelement platzieren, wie z. B. eine DropDownList-Komponente. Da ein Popup- oder Dropdownsteuerelement vom PopUpManager zur Anzeigeliste hinzugefügt wird, ist es normalerweise nicht am Layout beteiligt. Bei der PopUpAnchor-Komponente handelt es sich um eine UIComponent, die zu einem Container hinzugefügt und angeordnet wird. Anschließend ist sie für das Ändern der Größe und das Platzieren des Popup- oder Dropdownsteuerelements relativ zu sich selbst zuständig. Sie verfügt über keine visuelle Darstellung.
   <p>Das PopUpAnchor-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>0</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>0</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="PopUpAnchorExample.mxml"><swfblock conref="examples/PopUpAnchorExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.components:PopUpAnchor:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
      Konstruktor
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:PopUpAnchor:protected:calculatePopUpPosition"><apiName>calculatePopUpPosition</apiName><shortdesc>
      Wird aufgerufen, wenn das popUp-Steuerelement platziert oder angezeigt oder wenn die updatePopUpTransform()-Methode aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die absolute Position des <codeph>popUp</codeph>-Steuerelements im globalen Koordinatensystem.  
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn das <codeph>popUp</codeph>-Steuerelement platziert oder angezeigt oder wenn die <codeph>updatePopUpTransform()</codeph>-Methode aufgerufen wird. Überschreiben Sie diese Funktion, um die Position des <codeph>popUp</codeph>-Steuerelements zu ändern.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:PopUpAnchor:updatePopUpTransform"><apiName>updatePopUpTransform</apiName><shortdesc>
      Aktualisiert die Transformationsmatrix des popUp-Steuerelements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Aktualisiert die Transformationsmatrix des <codeph>popUp</codeph>-Steuerelements. Normalerweise rufen Sie diese Funktion auf, während Sie einen Effekt auf dem PopUpAnchor ausführen. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:PopUpAnchor:popUpPosition:set"><apiName>popUpPosition</apiName><shortdesc>
      Die Position des popUp-Steuerelements, wenn es geöffnet wird, relativ zur PopUpAnchor-Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>PopUpPosition.TOP_LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Position des <codeph>popUp</codeph>-Steuerelements, wenn es geöffnet wird, relativ zur PopUpAnchor-Komponente. Mögliche Werte sind <codeph>"left", "right", "above", "below", "center"</codeph> und <codeph>"topLeft"</codeph>.
     
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#PopUpPosition"><linktext>spark.components.PopUpPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:PopUpAnchor:displayPopUp:set"><apiName>displayPopUp</apiName><shortdesc>
      Bei „true“ wird das popUp-Steuerelement zum PopUpManager hinzugefügt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> wird das <codeph>popUp</codeph>-Steuerelement zum PopUpManager hinzugefügt. Bei <codeph>„false“</codeph> wird das Steuerelement entfernt.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpHeightMatchesAnchorHeight:set"><apiName>popUpHeightMatchesAnchorHeight</apiName><shortdesc>
      Bei „true“ wird die Höhe des popUp-Steuerelements auf den Wert der Höhe von PopUpAnchor eingestellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> wird die Höhe des <codeph>popUp</codeph>-Steuerelements auf den Wert der Höhe von PopUpAnchor eingestellt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpWidthMatchesAnchorWidth:set"><apiName>popUpWidthMatchesAnchorWidth</apiName><shortdesc>
      Bei „true“ wird die Breite des popUp-Steuerelements auf den Wert der Breite von PopUpAnchor eingestellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> wird die Breite des <codeph>popUp</codeph>-Steuerelements auf den Wert der Breite von PopUpAnchor eingestellt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUp:set"><apiName>popUp</apiName><shortdesc>
      IFlexDisplayObject, das zum PopUpManager hinzugefügt werden soll, wenn PopUpAnchor geöffnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="popUpChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      IFlexDisplayObject, das zum PopUpManager hinzugefügt werden soll, wenn PopUpAnchor geöffnet ist. Wenn das <codeph>popUp</codeph>-Steuerelement IFocusManagerContainer implementiert, erhält das <codeph>popUp</codeph>-Steuerelement einen eigenen FocusManager. Wenn der Benutzer mit der Tabulatortaste zwischen Steuerelementen wechselt, wird ausschließlich auf die Steuerelemente im <codeph>popUp</codeph>-Steuerelement zugegriffen. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:List"><apiName>List</apiName><shortdesc>
  Das List-Steuerelement zeigt eine vertikale Elementliste an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  Gibt an, unter welchen Bedingungen die vertikale Bildlaufleiste angezeigt wird.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> („on“) – Die Bildlaufleiste wird immer angezeigt.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> („off“) – Die Bildlaufleiste wird niemals angezeigt. Der Viewport kann immer noch programmgesteuert durch Festlegen der verticalScrollPosition-Eigenschaft durchlaufen werden.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> („auto“) – Die Bildlaufleiste wird angezeigt, wenn die contentHeight des Viewports größer als dessen Höhe ist.
  </li>
  </ul>
 
  <p>
  Die Bildlaufrichtlinie wirkt sich auf die gemessene Größe des Scroller-Skinteils aus. Dieser Stil deckt lediglich die verticalScrollPolicy des Scroller-Skinteils ab. Dies ist kein erbender Stil, daher wirkt er sich beispielsweise nicht auf Elementrenderer aus.
  </p>
   <p>Bei Verwendung eines horizontalen List-Steuerelements in einer Mobilanwendung setzen Sie <codeph>horizontalScrollPolicy</codeph> auf <codeph>on</codeph> und <codeph>verticalScrollPolicy</codeph> auf <codeph>auto</codeph>, um die horizontalen Rückfedereffekte zu aktivieren. Andernfalls verwendet das Steuerelement die vertikalen Rückfedereffekte.</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:List" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Die Farbe des Hintergrunds eines Renderers, wenn der Benutzer ihn auswählt.
   <p>Der Standardwert für das Halo-Design ist <codeph>0x7FCEFF</codeph>. Der Standardwert für das Spark-Design ist <codeph>0xA8C6EE</codeph>. Der Standardwert für das Mobile-Design ist <codeph>0xE0E0E0</codeph>.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  Gibt an, unter welchen Bedingungen die horizontale Bildlaufleiste angezeigt wird.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> („on“) – Die Bildlaufleiste wird immer angezeigt.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> („off“) – Die Bildlaufleiste wird niemals angezeigt. Der Viewport kann immer noch programmgesteuert durch Festlegen der horizontalScrollPosition-Eigenschaft durchlaufen werden.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> („auto“) – Die Bildlaufleiste wird angezeigt, wenn die contentWidth des Viewports größer als dessen Breite ist.
  </li>
  </ul>
 
  <p>Die Bildlaufrichtlinie wirkt sich auf die gemessene Größe des Scroller-Skinteils aus. Dieser Stil deckt lediglich die horizontalScrollPolicy des Scroller-Skinteils ab. Dies ist kein erbender Stil, daher wirkt er sich beispielsweise nicht auf Elementrenderer aus.</p>
   <p>Bei Verwendung eines horizontalen List-Steuerelements in einer Mobilanwendung setzen Sie <codeph>horizontalScrollPolicy</codeph> auf <codeph>on</codeph> und <codeph>verticalScrollPolicy</codeph> auf <codeph>auto</codeph>, um die horizontalen Rückfedereffekte zu aktivieren. Andernfalls verwendet das Steuerelement die vertikalen Rückfedereffekte.</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="dropIndicatorSkin" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  Wenn in der List-Skin kein <codeph>dropIndicator</codeph>-Skinteil angegeben ist, wird eine Instanz dieser Klasse erstellt. Diese wird dann bei Drag &amp; Drop-Vorgängen mit „List“ als potenziellem Ablageziel für den Standard-Dropindikator verwendet.
   </description>
<default>spark.skins.spark.ListDropIndicator
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dragIndicatorClass" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  Die Klasse, von der eine Instanz für den Dragindikator für Drag &amp; Drop-Vorgänge, die von der Liste initiiert werden, zu erstellen ist. Muss vom Typ <codeph>IFlexDisplayObject</codeph> sein. 
   <p>Wenn die Klasse die <codeph>ILayoutManagerClient</codeph>-Schnittstelle implementiert, wird die Instanz vom DragManager überprüft.</p>
   <p>Wenn die Klasse die <codeph>IVisualElement</codeph>-Schnittstelle implementiert, wird die <codeph>owner</codeph>-Eigenschaft der Instanz auf die Liste eingestellt, die den Ziehvorgang initiiert.</p>
   <p>Der AIR-DragManager macht einen Schnappschuss der Instanz und der Nicht-AIR-DragManager verwendet die Instanz direkt.</p>
   </description>
<default>spark.components.supportClasses.ListItemDragProxy
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:List" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Rahmens dieser Komponente.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Die Farbe des Rahmens dieser Komponente.
    </description>
<default>#696969
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Rahmens für diese Komponente.
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropIndicator" owner="spark.components:List" playerVersion="Flash10" required="false" type="flash.display.DisplayObject" var_type="mx.core:IFactory">
<description>
      Ein Skinteil, der das Aussehen des Dropindikators definiert. Die Größe des Dropindikators wird angepasst und er wird durch das Layout so platziert, dass beim Ziehen der Maus über die Liste die Konturen der Einfügeposition angezeigt werden.
           <p>Standardmäßig ist der Dropindikator für ein Spark-Steuerelement eine durchgehende Linie, die sich über die Breite des Steuerelements erstreckt. Sie erhalten einen angepassten Dropindikator, indem Sie eine angepasste Skinklasse für das Ablageziel erstellen. Erstellen Sie im &lt;fx:Declarations>-Bereich Ihrer Skinklasse einen Skinteil namens <codeph>dropIndicator</codeph>..</p>
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the appearance of the drop indicator.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:List" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Die optionale Bildlaufleiste, die für den Bildlauf in der Liste verwendet wird.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:List&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:List
    <strong>Properties</strong>
    allowMultipleSelection="false"
    dragEnabled="false"
    dragMoveEnabled="false"
    dropEnabled="false"
    selectedIndices="null"
    selectedItems="null"
    useVirtualLayout="true"
 
    <strong>Styles</strong>
    alternatingItemColors="undefined"
    borderAlpha="1.0"
    borderColor="0#CCCCCC"
    borderVisible="true"
    contentBackgroundColor="0xFFFFFF"
    downColor="0xA8C6EE"
    dragIndicator="ListItemDragProxy"
    dropIndicatorSkin="ListDropIndicator"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das List-Steuerelement zeigt eine vertikale Elementliste an. Seine Funktion ist der des SELECT-Elements in HTML ähnlich. Wenn mehr Elemente vorhanden sind, als gleichzeitig angezeigt werden können, kann es eine vertikale Bildlaufleiste anzeigen, sodass auf alle Listenelemente zugegriffen werden kann. Mithilfe einer optionalen horizontalen Bildlaufleiste können Benutzer Elemente sehen, wenn die Gesamtbreite der Listenelemente wahrscheinlich zu breit ist. Abhängig von der <codeph>allowMultipleSelection</codeph>-Eigenschaft können Benutzer ein Element oder mehrere aus der Liste auswählen.
   <p><b>Hinweis:</b> Die listenbasierten Spark-Steuerelemente (die Spark ListBase-Klasse und ihre Unterklassen wie ButtonBar, ComboBox, DropDownList, List und TabBar) unterstützen nicht die Verwendung der BasicLayout-Klasse als Wert der <codeph>layout</codeph>-Eigenschaft. Verwenden Sie BasicLayout nicht für listenbasierte Spark-Steuerelemente. Wenn ein Layout festgelegt ist, wird die typicalLayoutElement-Eigenschaft des Layouts nicht eingestellt; sie wird automatisch auf einen Elementrenderer eingestellt, der mit <codeph>typicalItem</codeph> der Liste erstellt wurde.</p>
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
   <p>Das List-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>112 Pixel breit und 112 Pixel hoch</entry></row><row><entry>Minimale Größe</entry><entry>112 Pixel breit und 112 Pixel hoch</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row><row><entry>Standardskinklasse</entry><entry>spark.skins.spark.ListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ListExample.mxml"><swfblock conref="examples/ListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ListSkin"><linktext>spark.skins.spark.ListSkin</linktext></link></related-links><apiConstructor id="spark.components:List:List"><apiName>List</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:List:addDragData"><apiName>addDragData</apiName><shortdesc>
      Fügt die ausgewählten Elemente dem DragSource-Objekt als Teil eines Drag &amp; Drop-Vorgangs hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragSource</apiItemName><apiType value="mx.core:DragSource"/><apiDesc>Das DragSource-Objekt, dem die Daten hinzugefügt werden sollen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt die ausgewählten Elemente dem DragSource-Objekt als Teil eines Drag &amp; Drop-Vorgangs hinzu. Überschreiben Sie diese Methode, um dem DragSource-Objekt andere Daten hinzuzufügen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelectionAndCaretUponNavigation"><apiName>adjustSelectionAndCaretUponNavigation</apiName><shortdesc>
      Passt die Auswahl entsprechend den erfassten Tastenanschlägen oder Kombinationen von Tastenanschlägen an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Das erkannte Tastaturereignis 
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die Auswahl entsprechend den erfassten Tastenanschlägen oder Kombinationen von Tastenanschlägen an. Der Tastenanschlag wird an das Layout gesendet und die getNavigationDestinationIndex()-Methode des Layouts bestimmt aufgrund des Elements, das aktuell den Fokus hat, die Indexposition, zu der navigiert werden soll. Nachdem die Indexposition bestimmt wurde, werden die Einzelauswahl, die Einfügezeichenelemente und falls erforderlich die Mehrfachauswahl entsprechend dem neu gewählten Objekt aktualisiert.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      Passt die ausgewählten Indexpositionen an, um die Elemente zu berücksichtigen, die zu dieser Komponente hinzugefügt oder aus dieser Komponente entfernt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die neue Indexposition.
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph>, wenn ein Element der Komponente hinzugefügt wurde, und <codeph>false</codeph>, wenn ein Element entfernt wurde.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die ausgewählten Indexpositionen an, um die Elemente zu berücksichtigen, die zu dieser Komponente hinzugefügt oder aus dieser Komponente entfernt werden sollen. 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:calculateSelectedIndices"><apiName>calculateSelectedIndices</apiName><shortdesc>
      Helper-Methode zur Berechnung, wie sich die aktuelle Auswahl ändert, wenn auf ein Objekt geklickt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die aktualisierten Indexpositionen der Objekte, die die neue Auswahl übernimmt.
     
      </apiDesc><apiType value="Vector$int"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des Objekts, auf das geklickt wurde.
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiDesc>„True“, wenn die Umschalttaste gedrückt wird.
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiDesc>„True“, wenn die Strg-Taste gedrückt wird.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Helper-Methode zur Berechnung, wie sich die aktuelle Auswahl ändert, wenn auf ein Objekt geklickt wird.
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/selectedIndices"><linktext>selectedIndices</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:protected:copyItemWithUID"><apiName>copyItemWithUID</apiName><shortdesc>
      Erstellt eine tiefe Kopie des Objekts, indem die ObjectUtil.copy()-Methode aufgerufen wird, und ersetzt die uid-Eigenschaft der Kopie (wenn vorhanden) durch einen neuen Wert, indem die UIDUtil.createUID()-Methode aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Kopie des Objekts.
           </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das zu kopierende Element.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt eine tiefe Kopie des Objekts, indem die <codeph>ObjectUtil.copy()</codeph>-Methode aufgerufen wird, und ersetzt die <codeph>uid</codeph>-Eigenschaft der Kopie (wenn vorhanden) durch einen neuen Wert, indem die <codeph>UIDUtil.createUID()</codeph>-Methode aufgerufen wird.
     
      <p>Diese Methode wird für eine Drag &amp; Drop-Kopie verwendet.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.utils.ObjectUtil.xml"><linktext>mx.utils.ObjectUtil</linktext></link><link href="" invalidHref="mx.utils.UIDUtil.xml"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:createDragIndicator"><apiName>createDragIndicator</apiName><shortdesc>
      Erstellt eine Instanz einer Klasse, die für die Anzeige der Grafiken während des Drag &amp; Drop-Vorgangs zuständig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das IFlexDisplayObject, das den Dragindikator darstellt.
      
      </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt eine Instanz einer Klasse, die für die Anzeige der Grafiken während des Drag &amp; Drop-Vorgangs zuständig ist. Die standardmäßige <codeph>DragEvent.DRAG_START</codeph>-Prozedur übergibt die Instanz an die<codeph>DragManager.doDrag()</codeph>-Methode.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:createDropIndicator"><apiName>createDropIndicator</apiName><shortdesc>
      Erstellt eine Instanz der dropIndicator-Klasse, die für die Anzeige der Ablagepositionsgrafiken während des Drag &amp; Drop-Vorgangs zuständig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt den dropIndicator zurück, der im Layout festgelegt wurde.
           </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt eine Instanz der dropIndicator-Klasse, die für die Anzeige der Ablagepositionsgrafiken während des Drag &amp; Drop-Vorgangs zuständig ist. Die Instanz wird in der <codeph>dropIndicator</codeph>-Eigenschaft des Layouts festgelegt.
           <p>Wenn Sie die <codeph>dragEnter</codeph>-Ereignisprozedur überschreiben und <codeph>preventDefault()</codeph> aufrufen, sodass die Standardprozedur nicht ausgeführt wird, rufen Sie <codeph>createDropIndicator()</codeph> auf, um den Dropindikator zu erstellen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/destroyDropIndicator"><linktext>destroyDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:destroyDropIndicator"><apiName>destroyDropIndicator</apiName><shortdesc>
      Gibt die dropIndicator-Instanz frei, die aktuell im Layout festgelegt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt den dropIndicator zurück, der entfernt wurde. 
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die <codeph>dropIndicator</codeph>-Instanz frei, die aktuell im Layout festgelegt ist.
           <p>Wenn Sie die <codeph>dragExit</codeph>-Ereignisprozedur überschreiben und <codeph>preventDefault()</codeph> aufrufen, sodass die Standardprozedur nicht ausgeführt wird, rufen Sie <codeph>createDropIndicator()</codeph> auf, um den Dropindikator zu löschen.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/createDropIndicator"><linktext>createDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:ensureIndexIsVisible"><apiName>ensureIndexIsVisible</apiName><shortdesc>
      Eine bequeme Methode, mit der ein Datenelement durch einen Bildlauf in die Ansicht gescrollt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des Datenelements.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Eine bequeme Methode, mit der ein Datenelement durch einen Bildlauf in die Ansicht gescrollt wird. Wenn das Datenelement an der angegebenen Indexposition nicht vollständig sichtbar ist, wird ein Bildlauf durchgeführt, bis es vollständig angezeigt wird. Wenn das Datenobjekt bereits sichtbar ist, wird kein zusätzlicher Bildlauf durchgeführt. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:List:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      Wenn der Wert „true“ ist, ist die Mehrfachauswahl aktiviert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn der Wert <codeph>true</codeph> ist, ist die Mehrfachauswahl aktiviert. Beim Wechseln während der Laufzeit wird die derzeitige Auswahl gelöscht. Darf nicht aktiviert werden, wenn als <codeph>interactionMode</codeph> <codeph>touch</codeph> ausgewählt ist.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      Ein Flag, das angibt, ob Sie Elemente aus diesem Steuerelement herausziehen und auf anderen Steuerelementen ablegen können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob Sie Elemente aus diesem Steuerelement herausziehen und auf anderen Steuerelementen ablegen können. Wenn <codeph>true</codeph>, wird das Ziehen für das Steuerelement zugelassen. Wenn die <codeph>dropEnabled</codeph>-Eigenschaft ebenfalls <codeph>true</codeph> ist, können Sie Elemente ziehen und in diesem Steuerelement ablegen, um diese Elemente neu anzuordnen.
     
      <p>Drag &amp; Drop-Funktion wird auf mobilen Geräten nicht unterstützt, bei denen <codeph>interactionMode</codeph> auf <codeph>touch</codeph> gesetzt ist.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      Ein Flag, das anzeigt, ob Elemente aus dem Steuerelement bei einem Drag &amp; Drop-Vorgang verschoben werden können, anstatt sie nur zu kopieren. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, das anzeigt, ob Objekte aus dem Steuerelement bei einem Drag &amp; Drop-Vorgang verschoben werden können, anstatt sie nur zu kopieren. Wenn <codeph>true</codeph> und die <codeph>dragEnabled</codeph>-Eigenschaft ebenfalls <codeph>true</codeph> ist, können Elemente bewegt werden. Oft sollen oder können Objekte nicht aus dem Datenprovider entfernt werden. In diesem Fall sollte ein MOVE-Vorgang bei Drag &amp; Drop nicht zulässig sein.
     
      <p>Drag &amp; Drop-Funktion wird auf mobilen Geräten nicht unterstützt, bei denen <codeph>interactionMode</codeph> auf <codeph>touch</codeph> gesetzt ist.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      Ein Flag, das anzeigt, ob gezogene Elemente auf dem Steuerelement abgelegt werden können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, das anzeigt, ob gezogene Elemente auf dem Steuerelement abgelegt werden können.
           <p>Wenn Sie diese Eigenschaft auf <codeph>true</codeph> einstellen, akzeptiert das Steuerelement alle Datenformate und geht davon aus, dass die gezogenen Daten zum Format der Daten im Datenprovider passen. Wenn Sie das Datenformat der gezogenen Daten explizit prüfen möchten, müssen Sie mindestens ein Drag-Ereignis verarbeiten, wie beispielsweise <codeph>dragEnter</codeph> und <codeph>dragOver</codeph>, und die <codeph>preventDefault()</codeph>-Methode des DragEvent aufrufen, um die Art anzupassen, wie die Listenklasse abgelegte Daten akzeptiert.</p>
     
      <p>Drag &amp; Drop-Funktion wird auf mobilen Geräten nicht unterstützt, bei denen <codeph>interactionMode</codeph> auf <codeph>touch</codeph> gesetzt ist.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      Ob der Bildlauf momentan für diesen Scroller aktiviert ist
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      Ob der Bildlauf momentan für diesen Scroller aktiviert ist
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      Der aktuell für diesen Scroller wirksame Bildlauf-Sprungmodus. Eine von „Aus“ abweichende Einstellung dieser Eigenschaft kann zu einer sofortigen Änderung der Bildlaufposition führen, damit ein bestimmtes Element in die richtige Position „springen“ kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"off"
           </apiDefaultValue></apiValueDef><apiDesc>
      Der aktuell für diesen Scroller wirksame Bildlauf-Sprungmodus
           <p>Eine von „Aus“ abweichende Einstellung dieser Eigenschaft kann zu einer sofortigen Änderung der Bildlaufposition führen, damit ein bestimmtes Element in die richtige Position „springen“ kann. Diese Änderung der Bildlaufposition ist nicht animiert.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:List:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      Ein Vektor aus Ganzzahlen, der die Indexpositionen der derzeit ausgewählten Elemente darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Vektor aus Ganzzahlen, der die Indexpositionen der derzeit ausgewählten Elemente darstellt. Wenn die Mehrfachauswahl deaktiviert ist, indem für <codeph>allowMultipleSelection</codeph> der Wert <codeph>false</codeph> angegeben und diese Eigenschaft festgelegt ist, wird das Datenelement ausgewählt, das der ersten Indexposition im Vektor entspricht.  
           <p>Wenn durch Einstellen von <codeph>allowMultipleSelection</codeph> auf <codeph>true</codeph> die Mehrfachauswahl aktiviert wird, enthält diese Eigenschaft eine Liste der gewählten Indizes, die in der umgekehrten Reihenfolge ihrer Auswahl angezeigt werden. Das bedeutet, dass das erste Element im Vektor dem letzten ausgewählten Element entspricht.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      Ein Vektor von Objekten, der die derzeit ausgewählten Datenelemente darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Vektor von Objekten, der die derzeit ausgewählten Datenelemente darstellt. Wenn die Mehrfachauswahl deaktiviert ist, indem für <codeph>allowMultipleSelection</codeph> der Wert <codeph>false</codeph> angegeben und diese Eigenschaft festgelegt ist, wird das Datenelement ausgewählt, das dem ersten Element im Vektor entspricht.  
           <p>Wenn durch Einstellen von <codeph>allowMultipleSelection</codeph> auf <codeph>true</codeph> die Mehrfachauswahl aktiviert wird, enthält diese Eigenschaft eine Liste der gewählten Indizes, die in der umgekehrten Reihenfolge ihrer Auswahl angezeigt werden. Das bedeutet, dass das erste Element im Vektor dem letzten ausgewählten Element entspricht.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      
      Definiert den Wert der useVirtualLayout-Eigenschaft des Layouts, das mit diesem Steuerelement verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Definiert den Wert der <codeph>useVirtualLayout</codeph>-Eigenschaft des Layouts, das mit diesem Steuerelement verknüpft ist. Wenn das Layout anschließend ersetzt wird und der Wert dieser Eigenschaft <codeph>true</codeph> ist, wird die <codeph>useVirtualLayout</codeph>-Eigenschaft des neuen Layouts auf <codeph>true</codeph> gesetzt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:hasFocusableChildren:set"><apiName>hasFocusableChildren</apiName><shortdesc>
      Ein Flag, das angibt, ob die fokusfähigen Elementrenderer dieser Liste den Tastaturfokus erhalten können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob die fokusfähigen Elementrenderer dieser Liste den Tastaturfokus erhalten können. 
           <p><b>Hinweis:</b> Diese Eigenschaft ähnelt der von Flash Player verwendeten <codeph>tabChildren</codeph>-Eigenschaft. Verwenden Sie bei Flex-Anwendungen die <codeph>hasFocusableChildren</codeph>-Eigenschaft. Verwenden Sie nicht die <codeph>tabChildren</codeph>-Eigenschaft.</p>
           <p>Diese Eigenschaft ist normalerweise <codeph>false</codeph>, da die meisten Komponenten entweder selbst den Fokus erhalten oder den Fokus an eine einzelne interne Subkomponente delegieren und so angezeigt werden, als ob die Komponente den Fokus erhalten hätte. Sie haben die Möglichkeit, diesen Wert bei einer Liste auf „true“ zu setzen, sodass der Inhalt der Liste den Fokus erhalten kann.</p>
     
      <p>Ist dieser Wert eingestellt und die Listenskin enthält einen Scroller-Skinteil, dann wird der Wert nach unten auf den Scroller übertragen.</p> 
     
      <p>Ist der Wert <codeph>true</codeph>, dann bedeutet diese Übertragung, dass der Inhalt des Scrollers, wie Elementrenderer, jetzt den Fokus erhalten kann. Dies bedeutet zum Beispiel, dass das erste Drücken der Tabulatortaste den Fokus auf das Listensteuerelement setzt und das zweite Drücken der Tabulatortaste das erste fokusfähige untergeordnete Element des Scrollers in den Fokus bringt.</p> 
      
      <p>Bei <codeph>false </codeph> setzt das erste Drücken der Tabulatortaste den Fokus auf das Listensteuerelement und das zweite Drücken der Tabulatortaste verschiebt den Fokus auf das nächste fokusfähige Steuerelement nach der Liste.</p> 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
  Die BorderContainer-Klasse definiert einen Satz von CSS-Stilen, die das Aussehen des Rahmens und der Hintergrundfüllfarbe des Containers steuern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:BorderContainer">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  Bei <codeph>true</codeph> hat der Container einen sichtbaren Schlagschatten.
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Der Radius der abgerundeten Ecken des Rahmens.
   </description>
<default>0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderWeight" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Die Konturstärke des Rahmens. 
   </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  Bestimmt, ob der Rahmen sichtbar ist. Bei <codeph>false</codeph> ist mit Ausnahme eines Rahmens, der mithilfe der <codeph>borderStroke</codeph>-Eigenschaft eingestellt wird, kein Rahmen sichtbar. 
   
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="inset,solid" inherit="no" name="borderStyle" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  Stil des Begrenzungsrahmens. Mögliche Werte sind <codeph>"solid"</codeph> und <codeph>"inset"</codeph>.
 
  </description>
<default>solid
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:BorderContainer" playerVersion="Flash10" type="uint">
<description>
  Farbe des Rahmens.
  
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  Die Alphaebene der durch den <codeph>borderColor</codeph>-Stil definierten Farbe. Die zulässigen Werte liegen zwischen 0,0 und 1,0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="scale,clip,repeat" inherit="no" name="backgroundImageFillMode" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, wie das Hintergrundbild die Abmessungen ausfüllt. Wenn Sie den Wert dieser Eigenschaft in MXML festlegen, verwenden Sie den String (z. B. „repeat“). Wenn Sie den Wert dieser Eigenschaft in ActionScript einstellen, verwenden Sie die Konstante (z. B. <codeph>BitmapFillMode.CLIP</codeph>).
 
  <p>Bei Einstellung auf <codeph>BitmapFillMode.CLIP</codeph> („clip“) endet das Bild an der Kante des Bereichs.</p>
 
  <p>Wenn <codeph>BitmapFillMode.REPEAT</codeph> („repeat“) festgelegt ist, wird das Bild wiederholt, sodass der gesamte Bereich ausgefüllt wird.</p>
   <p>Wenn <codeph>BitmapFillMode.SCALE</codeph> („scale“) festgelegt ist, wird das Bild so gedehnt, dass es den gesamten Bereich ausfüllt.</p>
 
  </description>
<default>&lt;code>BitmapFillMode.SCALE&lt;/code>
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Object">
<description>
  Das Hintergrundbild eines Containers. Wenn <codeph>backgroundColor</codeph> und <codeph>backgroundImage</codeph> beide gleichzeitig festgelegt sind, wird <codeph>backgroundColor</codeph> ignoriert. Der Standardwert ist <codeph>undefined</codeph>, also 
„nicht festgesetzt“. Wenn dieser Stil und der <codeph>backgroundColor</codeph>-Stil nicht definiert sind, hat die Komponente einen transparenten Hintergrund.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:BorderContainer&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
   <pre>
  &lt;s:BorderContainer
    <b>Properties</b>
    backgroundFill="null"
    borderStroke="null"
 
    <b>Styles</b>
    backgroundImage="undefined"
    backgroundImageFillMode="scale"
    borderAlpha="1.0"
    borderColor="0xB7BABC"
    borderStyle="solid"
    borderVisible="true"
    borderWeight="1"
    cornerRadius="0"
    dropShadowVisible="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die BorderContainer-Klasse definiert einen Satz von CSS-Stilen, die das Aussehen des Rahmens und der Hintergrundfüllfarbe des Containers steuern. 
   <p><b>Hinweis:</b> Da Sie CSS-Stile und Klasseneigenschaften verwenden, um das Aussehen des BorderContainer zu steuern, erstellen Sie normalerweise keine benutzerdefinierte Skin für ihn. Wenn Sie eine benutzerdefinierte Skin erstellen, muss Ihre Skin-Klasse die zur Steuerung des Container-Aussehens dienenden Stile anwenden.</p>
   <p>Standardmäßig ist der Rahmenstrich gerundet. Wenn Sie keine runden Ecken wünschen, legen Sie für die <codeph>joints</codeph>-Eigenschaft des Strichs <codeph>JointStyle.MITER</codeph> fest. </p>
  
  <p>Der BorderContainer-Container hat die folgenden Standardmerkmale:</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>112 Pixel breit und 112 Pixel hoch</entry></row><row><entry>Minimale Größe</entry><entry>112 Pixel breit und 112 Pixel hoch</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row><row><entry>Standardskinklasse</entry><entry>spark.skins.spark.BorderContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="BorderContainerExample.mxml"><swfblock conref="examples/BorderContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#BorderContainerSkin"><linktext>spark.skins.spark.BorderContainerSkin</linktext></link></related-links><apiConstructor id="spark.components:BorderContainer:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:BorderContainer:backgroundFill:get"><apiName>backgroundFill</apiName><shortdesc>
      Definiert den Hintergrund des BorderContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IFill"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert den Hintergrund des BorderContainer. Durch Einstellen dieser Eigenschaft werden die <codeph>backgroundAlpha</codeph>-, <codeph>backgroundColor</codeph>-, <codeph>backgroundImage</codeph>- und <codeph>backgroundImageFillMode</codeph>-Stile überschrieben.
     
      <p>Im folgenden Beispiel stellt die <codeph>backgroundFill</codeph>-Eigenschaft die Hintergrundfarbe auf rot ein:</p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:backgroundFill> 
             &lt;s:SolidColor 
                 color="red" 
                 alpha="1"/> 
         &lt;/s:backgroundFill> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:BorderContainer:borderStroke:get"><apiName>borderStroke</apiName><shortdesc>
      Definiert den Strich des BorderContainer-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IStroke"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert den Strich des BorderContainer-Containers. Durch Einstellen dieser Eigenschaft werden die <codeph>borderAlpha</codeph>-, <codeph>borderColor</codeph>-, <codeph>borderStyle</codeph>-, <codeph>borderVisible</codeph> und <codeph>borderWeight</codeph>-Stile überschrieben.  
     
      <p>Im folgenden Beispiel wird die <codeph>borderStroke</codeph>-Eigenschaft eingestellt:</p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:borderStroke> 
             &lt;mx:SolidColorStroke 
                 color="black" 
                 weight="3"/> 
         &lt;/s:borderStroke> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRenderer"><apiName>IItemRenderer</apiName><shortdesc>
  Die IItemRenderer-Schnittstelle legt die grundlegende API-Gruppe fest, die eine Klasse implementieren muss, um einen Elementrenderer zu erstellen, der mit einer Hostkomponente kommunizieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IItemRenderer-Schnittstelle legt die grundlegende API-Gruppe fest, die eine Klasse implementieren muss, um einen Elementrenderer zu erstellen, der mit einer Hostkomponente kommunizieren kann. Die Hostkomponenten wie List- und ButtonBar-Steuerelemente müssen die IItemRendererOwner-Schnittstelle implementieren. 
   
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRendererOwner"><linktext>spark.components.IItemRendererOwner</linktext></link></related-links><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      Enthält „true“, wenn der Elementrenderer gezogen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn der Elementrenderer gezogen wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      Die Indexposition des Elements im Datenprovider der Hostkomponente des Elementrenderers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Indexposition des Elements im Datenprovider der Hostkomponente des Elementrenderers.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      Der String, der im Elementrenderer anzuzeigen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der String, der im Elementrenderer anzuzeigen ist. 
     
      <p>Die Hostkomponente des Elementrenderers kann mithilfe der <codeph>itemToLabel()</codeph>-Methode das Datenelement in einen String konvertieren, der vom Elementrenderer angezeigt wird. </p>
     
      <p>Für Steuerelemente wie „List“ und „ButtonBar“ können Sie mithilfe der Eigenschaften <codeph>labelField</codeph> und <codeph>labelFunction</codeph> das Feld des Datenelements angeben, das den String enthält. Andernfalls verwendet die Hostkomponente die <codeph>toString()</codeph>-Methode, um das Datenelement in einen String zu konvertieren. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      Enthält „true“, wenn der Elementrenderer sich selbst als ausgewählt anzeigen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn der Elementrenderer sich selbst als ausgewählt anzeigen kann.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      Enthält „true“, wenn der Elementrenderer im Fokus dargestellt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn der Elementrenderer im Fokus dargestellt werden kann. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
  Das VideoPlayer-Steuerelement ist ein skinfähiger Videoplayer, der progressive Downloads, Multibitrate-Streaming und Streaming-Videos unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoPlayer">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/><skinStates><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Disabled-Status des VideoPlayer-Steuerelements im Vollbildmodus.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackErrorAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Playback-Error-Status des VideoPlayer-Steuerelements im Vollbildmodus. Beim Versuch, das Video abzuspielen, trat ein Fehler auf.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="bufferingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Buffering-Status des VideoPlayer-Steuerelements im Vollbildmodus.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="pausedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Paused-Status des VideoPlayer-Steuerelements im Vollbildmodus.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Playing-Status des VideoPlayer-Steuerelements im Vollbildmodus.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="readyAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Ready-Status des VideoPlayer-Steuerelements im Vollbildmodus. Das Video ist zum Abspielen bereit.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loadingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Loading-Status des VideoPlayer-Steuerelements im Vollbildmodus. Das VideoPlayer-Steuerelement lädt gerade oder stellt eine Verbindung zur Quelle her. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitializedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Uninitialized-Status des VideoPlayer-Steuerelements im Vollbildmodus. Das VideoPlayer-Steuerelement ist zu diesem Zeitpunkt erstellt, die Quelle wurde jedoch noch nicht festgelegt und es liegen keine Verbindungsversuche vor.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Disabled-Status des VideoPlayer-Steuerelements
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackError" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Playback Error-Status des VideoPlayer-Steuerelements. Beim Versuch, das Video abzuspielen, trat ein Fehler auf.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="buffering" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Buffering-Status des VideoPlayer-Steuerelements
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="paused" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Paused-Status des VideoPlayer-Steuerelements
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Playing-Status des VideoPlayer-Steuerelements
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Ready-Status des VideoPlayer-Steuerelements. Das Video ist zum Abspielen bereit.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Loading-Status des VideoPlayer-Steuerelements. Das VideoPlayer-Steuerelement lädt gerade oder stellt eine Verbindung zur Quelle her. 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  Uninitialized-Status des VideoPlayer-Steuerelements. Das VideoPlayer-Steuerelement ist zu diesem Zeitpunkt erstellt, die Quelle wurde jedoch noch nicht festgelegt und es liegen keine Verbindungsversuche vor.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Die Zeit in Millisekunden, in der ohne Benutzerinteraktion in der Vollbildansicht verblieben wird, bis die Steuerelemente für die Videowiedergabe ausgeblendet werden.  
 
  <p>Beim Wert <codeph>Infinity</codeph> werden die Wiedergabesteuerelemente im Vollbildmodus nicht ausgeblendet. Bei bestehendem Vollbildmodus hat ein Ändern dieses Werts keine Auswirkung.</p>
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Schlagschattens für diese Komponente.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#VideoPlayer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#VideoPlayer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="videoDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="true" var_type="spark.components:VideoDisplay">
<description>
      Ein erforderlicher Skinteil, der das VideoDisplay-Steuerelement definiert.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines the VideoDisplay.</shortdesc></SkinPart><SkinPart name="currentTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Ein optionaler Skinteil zum Anzeigen des aktuellen Werts von <codeph>codecurrentTime</codeph>.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the current value of codecurrentTime.</shortdesc></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Ein optionaler Skinteil für eine Schaltfläche zum Aktivieren und Deaktivieren des Vollbildmodus.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a button to toggle fullscreen mode.</shortdesc></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      Ein optionaler Skinteil für die Ton-aus-Schaltfläche. Die Ton-aus-Schaltfläche weist sowohl eine <codeph>muted</codeph>- als auch eine <codeph>volume</codeph>-Eigenschaft auf.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the mute button.</shortdesc></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Ein optionaler Skinteil für die Schaltfläche zum Anhalten..
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the pause button.</shortdesc></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Ein optionaler Skinteil für die Abspielen-Schaltfläche.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the play button.</shortdesc></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      Ein optionaler Skinteil für alle Steuerelemente des Videoplayers. Mit dieser Skin bestimmen Sie, was ausgeblendet werden soll, wenn der Player im Vollbildmodus ausgeführt wird und keine Benutzerinteraktion stattfindet.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for all of the player controls.</shortdesc></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      Ein optionaler Skinteil für eine Abspielen/Anhalten-Schaltfläche. Beim Abspielen eines Videos wird die <codeph>selected</codeph>-Eigenschaft auf <codeph>true</codeph> eingestellt. Sobald das Video angehalten oder gestoppt wird, wird die <codeph>selected</codeph>-Eigenschaft auf <codeph>false</codeph> eingestellt.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a play/pause button.</shortdesc></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      Ein optionaler Skinteil für die Suchleiste (Zeitleiste).
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the scrub bar (the 
      timeline).</shortdesc></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      Ein optionaler Skinteil für die Schaltfläche zum Stoppen..
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the stop button.</shortdesc></SkinPart><SkinPart name="durationDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Ein optionaler Skinteil zum Anzeigen der Dauer.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the duration.</shortdesc></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      Ein optionaler Skinteil für die Lautstärkeregelung.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the volume control.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    dropShadowVisible="true"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das VideoPlayer-Steuerelement ist ein skinfähiger Videoplayer, der progressive Downloads, Multibitrate-Streaming und Streaming-Videos unterstützt. Er unterstützt die Wiedergabe von FLV- und F4v-Dateien. Das VideoPlayer-Steuerelement enthält eine vollständige Benutzeroberfläche zum Steuern der Videowiedergabe.
 
  <p><codeph>VideoDisplay</codeph> ist die Version ohne Chrom, die Skinning nicht unterstützt. Dies ist nützlich, wenn Sie verhindern möchten, dass die Benutzer in die Steuerung eingreifen.</p>
   <p>Das VideoPlayer-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>263 Pixel breit und 184 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>0</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoPlayerExample.mxml"><swfblock conref="examples/VideoPlayerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoDisplay"><linktext>spark.components.VideoDisplay</linktext></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  Wird nach einer Änderung des Status des MediaPlayer-Steuerelements ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einer Änderung des Status des MediaPlayer-Steuerelements ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  Wird ausgelöst, wenn die duration-Eigenschaft des Mediums geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die <codeph>duration</codeph>-Eigenschaft des Mediums geändert wurde.
 
  <p>Dieses Ereignis wird möglicherweise nicht ausgelöst, wenn die Quelle auf null gesetzt wurde oder ein Wiedergabefehler auftritt.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  Wird ausgelöst, wenn die currentTime-Eigenschaft des MediaPlayer-Steuerelements geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die <codeph>currentTime</codeph>-Eigenschaft des MediaPlayer-Steuerelements geändert wurde.
 
  <p>Dieses Ereignis wird möglicherweise nicht ausgelöst, wenn die Quelle auf null gesetzt wurde oder ein Wiedergabefehler auftritt.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Wird ausgelöst, wenn der Abspielkopf die Wiedergabedauer der abspielbaren Medien erreicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Abspielkopf die Wiedergabedauer der abspielbaren Medien erreicht.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  Wird ausgelöst, wenn die Daten während des Downloadvorgangs empfangen werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Daten während des Downloadvorgangs empfangen werden. Dieses Ereignis wird nur ausgelöst, wenn ein Video wiedergegeben wird, indem es direkt von einem Server heruntergeladen wird. Dies erfolgt normalerweise durch die Ausgabe einer HTTP-Anforderung. Es wird nicht ausgelöst, wenn ein Video auf einem speziellen Medienserver wiedergegeben wird, beispielsweise einem Flash Media Server.
 
  <p>Dieses Ereignis wird möglicherweise nicht ausgelöst, wenn die Quelle auf null gesetzt wurde oder ein Wiedergabefehler auftritt.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      Formatiert einen in Sekunden angegebenen Zeitwert in einen String, der für „currentTime“ und die Dauer verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Formatierter Zeitwert.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Wert in Sekunden der zu formatierenden Zeit.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Formatiert einen in Sekunden angegebenen Zeitwert in einen String, der für <codeph>currentTime</codeph> und <codeph>duration</codeph> verwendet wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:pause"><apiName>pause</apiName><shortdesc conref="spark.components.VideoDisplay#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Skin nicht geladen wurde und kein videoDisplay verfügbar ist.    
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:play"><apiName>play</apiName><shortdesc conref="spark.components.VideoDisplay#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Skin noch nicht hochgeladen wurde und kein videoDisplay verfügbar ist.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:seek"><apiName>seek</apiName><shortdesc conref="spark.components.VideoDisplay#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Skin noch nicht hochgeladen wurde und kein videoDisplay verfügbar ist.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>Die Suchzeit in Sekunden.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:stop"><apiName>stop</apiName><shortdesc conref="spark.components.VideoDisplay#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Skin noch nicht hochgeladen wurde und kein videoDisplay verfügbar ist.
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.components.VideoDisplay#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.components.VideoDisplay#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.components.VideoDisplay#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.components.VideoDisplay#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:currentTime:get"><apiName>currentTime</apiName><shortdesc conref="spark.components.VideoDisplay#currentTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#currentTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:duration:get"><apiName>duration</apiName><shortdesc conref="spark.components.VideoDisplay#duration">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#duration">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:loop:get"><apiName>loop</apiName><shortdesc conref="spark.components.VideoDisplay#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:muted:get"><apiName>muted</apiName><shortdesc conref="spark.components.VideoDisplay#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playing:get"><apiName>playing</apiName><shortdesc conref="spark.components.VideoDisplay#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.VideoDisplay#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.components.VideoDisplay#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:source:get"><apiName>source</apiName><shortdesc conref="spark.components.VideoDisplay#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:videoObject:get"><apiName>videoObject</apiName><shortdesc conref="spark.components.VideoDisplay#videoObject">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#videoObject">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc conref="spark.components.VideoDisplay#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#volume">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  Das ButtonBar-Steuerelement definiert eine Gruppe horizontaler logisch verbundener Schaltflächen, deren Erscheinungsbild und Navigation einander ähnlich sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="firstButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Ein Skinteil, das die erste Schaltfläche definiert.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the first button.</shortdesc></SkinPart><SkinPart name="lastButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Ein Skinteil, der die letzte Schaltfläche definiert.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the last button.</shortdesc></SkinPart><SkinPart name="middleButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="true" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     Ein Skinteil, der die mittleren Schaltflächen definiert.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the middle button(s).</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ButtonBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBar
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das ButtonBar-Steuerelement definiert eine Gruppe horizontaler logisch verbundener Schaltflächen, deren Erscheinungsbild und Navigation einander ähnlich sind.
 
  <p>Normalerweise wird eine Schaltflächenleiste für das Gruppieren von miteinander in Beziehung stehenden Schaltflächen verwendet. Diese erhalten dadurch ein einheitliches Aussehen und Navigationsverhalten. Außerdem wird durch die Standardschaltflächen die Logik des <codeph>change</codeph>-Ereignisses an einer einzigen Stelle gesteuert. </p>
 
  <p>Das ButtonBar-Steuerelement erzeugt Button-Steuerelemente auf Basis der Werte seiner <codeph>dataProvider</codeph>-Eigenschaft. Verwenden Sie Methoden wie <codeph>addItem()</codeph> und <codeph>removeItem()</codeph>, um die <codeph>dataProvider</codeph>-Eigenschaft so zu bearbeiten, dass Datenelemente hinzugefügt und entfernt werden können. Das ButtonBar-Steuerelement fügt untergeordnete Elemente automatisch hinzu oder entfernt diese, wenn die <codeph>dataProvider</codeph>-Eigenschaft geändert wird.</p>
 
  <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
 
  <p>Für Nicht-Mobilprojekte legen Sie mit dem ButtonBar-Steuerelement das aktive untergeordnete Element eines ViewStack-Containers fest, wie im folgenden Beispiel beschrieben:</p>
 
  <p><b>Hinweis:</b> Die listenbasierten Spark-Steuerelemente (die Spark ListBase-Klasse und ihre Unterklassen wie ButtonBar, ComboBox, DropDownList, List und TabBar) unterstützen nicht die Verwendung der BasicLayout-Klasse als Wert der <codeph>layout</codeph>-Eigenschaft. Verwenden Sie BasicLayout nicht für listenbasierte Spark-Steuerelemente.</p>
 
  <pre>
  &lt;s:ButtonBar dataProvider="{myViewStack}" requireSelection="true" /> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  <p>Das ButtonBar-Steuerelement hat die folgenden Standardmerkmale:</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um alle Schaltflächen anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>Keine Beschränkung</entry></row><row><entry>Standardskinklasse</entry><entry>spark.skins.spark.ButtonBarSkin</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Label"><apiName>Label</apiName><shortdesc>
  Label ist eine elementare UIComponent, die es ermöglicht, eine oder mehrere Zeilen von einheitlich formatiertem Text wiederzugeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="text"/><styles><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Vertikale Ausrichtung oder Abstände.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Der obere Versatz in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Der rechte Einzug in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Der linke Einzug in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Der untere Versatz in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Steuert den Zeilenumbruch innerhalb des Containers.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Label" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Label/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Label/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Label/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Label/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Label" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Label&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Label 
    <strong>Properties</strong>
    fontContext=""
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Label ist eine elementare UIComponent, die es ermöglicht, eine oder mehrere Zeilen von einheitlich formatiertem Text wiederzugeben. Der anzuzeigende Text wird mithilfe der von TextBase geerbten <codeph>text</codeph>-Eigenschaft bestimmt. Die Textformatierung wird mithilfe der CSS-Stile des Elements wie beispielsweise <codeph>fontFamily</codeph> und <codeph>fontSize</codeph> bestimmt.
 
  <p>Label verwendet die Flash Text Engine (FTE) im Flash Player für die Darstellung hochwertiger, internationaler Typographie. Da Label schnell und einfach ist, eignet es sich besonders zum Rendern vieler kleiner Objekte mit nichtinteraktivem Text, wie beispielsweise Elementrenderer und Beschriftungen in Schaltflächenskins.</p>
 
  <p>Die Spark-Architektur bietet Benutzern, die ausschließlich die für sie erforderlichen Funktionen verwenden möchten, die drei grundlegenden Steuerelemente Label, RichText und RichEditableText. Label ist das zwar schnellste und einfachste Steuerelement, hat jedoch eingeschränkte Funktionen: keine komplexe Formatierung, keine Bildläufe, keine Auswahl, keine Bearbeitung und keine Hyperlinks. RichText und RichEditableText basieren auf der Text Layout Framework (TLF)-Bibliothek und nicht auf FTE. Mit RichText können Sie HTML-ähnlichen Text mit komplexer Formatierung anzeigen. Das Steuerelement ist jedoch nicht interaktiv. RichEditableText ist das langsamste und umfangreichste Steuerelement und bietet viele Möglichkeiten: Bildläufe mit virtualisierten TextLines, Auswahl, Bearbeitung, Hyperlinks und von URLs geladene Bilder. Es empfiehlt sich, das schnellste Steuerelement zu verwenden, das Ihre Anforderungen erfüllt.</p>
 
  <p>Das Spark Label-Steuerelement ähnelt dem MX Label-Steuerelement, mx.controls.Label. Die wichtigsten Unterschiede sind die folgenden:
  <ul>
    <li>Spark Label verwendet FTE, die neue Text-Engine des Players. MX Label hingegen verwendet die TextField-Klasse.</li>
    <li>Spark Label bietet bessere Typografie und bessere Unterstützung für Sprachen als MX Label.</li>
    <li>Spark Label ermöglicht im Gegensatz zu MX Label die Anzeige mehrerer Zeilen.</li>
    <li>Mit MX Label können Sie eine beschränkte Untergruppe von HTML anzeigen. Mit Spark Label kann ausschließlich einheitlich formatierter Text angezeigt werden.</li>
    <li>MX Label kann als wählbar eingestellt werden, Spark Label nicht.</li>
  </ul></p>
 
  <p>Bei Spark Label werden die drei folgenden Zeichenfolgen als ausdrückliche Zeilenumbrüche erkannt: CR (<codeph>"\r"</codeph>), LF (<codeph>"\n"</codeph>) und CR+LF (<codeph>"\r\n"</codeph>).</p>
 
  <p>Wenn Sie keine Breite für Label angeben, richtet sich die Breite der Beschriftung nach der Länge der längsten Zeile, die durch ausdrücklichen Zeilenumbruch bestimmt wird.</p>
 
  <p>Wenn Sie irgendeine Breite definieren, wird der angegebene Text am rechten Rand der Grenzen der Komponente umbrochen, da der Standardwert des <codeph>lineBreak</codeph>-Stils <codeph>"toFit"</codeph> ist. Wenn der Text über den unteren Rand der Komponente hinausgeht, wird er gekürzt.</p>
 
  <p>Zum Deaktivieren des automatischen Zeilenumbruchs stellen Sie den <codeph>lineBreak</codeph>-Stil auf <codeph>"explicit"</codeph> ein. Die Zeilen werden nur umbrochen, wenn <codeph>text</codeph> einen ausdrücklichen Zeilenumbruch enthält. Zeilen, die den rechten Rand überschreiten, werden gekürzt.</p>
 
  <p>Wenn der vorhandene Text die verfügbare Anzeigegröße überschreitet, kann Label den Text für Sie kürzen. Beim Kürzen von Text wird überlanger Text durch Kürzungszeichen ersetzt, wie z. B. „...“. Siehe die geerbten Eigenschaften <codeph>maxDisplayedLines</codeph> und <codeph>isTruncated</codeph>.</p>
 
  <p>Sie können den Zeilenabstand mit dem <codeph>lineHeight</codeph>-Stil steuern. Sie können den Text innerhalb der Grenzen des Elements mithilfe der <codeph>textAlign</codeph>-, <codeph>textAlignLast</codeph>- und <codeph>verticalAlign</codeph>-Stile horizontal und vertikal ausrichten. Mit den <codeph>paddingLeft</codeph>-, <codeph>paddingTop</codeph>-, <codeph>paddingRight</codeph>- und <codeph>paddingBottom</codeph>-Stilen können Sie Text von den Kanten der Komponente aus einrücken.</p>
 
  <p>Standardmäßig hat ein Label keinen Hintergrund. Sie können jedoch mithilfe der <codeph>backgroundColor</codeph>- und <codeph>backgroundAlpha</codeph>-Stile einen zeichnen. Rahmen werden nicht unterstützt. Wenn Sie einen Rahmen oder einen komplexen Hintergrund benötigen, sollten Sie ein separates grafisches Element wie beispielsweise „Rect“ hinter dem Label verwenden.</p>
 
  <p>Mit Label können Sie Texte anzeigen, die sowohl von links nach rechts (z. B. Französisch) als auch von rechts nach links (z. B. Arabisch) verlaufen. Auch die Anzeige von bidirektionalem Text wird unterstützt. Sie können also einen Satz auf Französisch in einem arabischen Text anzeigen. Läuft der Text vorwiegend von rechts nach links, stellen Sie den <codeph>direction</codeph>-Stil auf <codeph>rtl</codeph> ein. Der <codeph>textAlign</codeph>-Stil ist standardmäßig <codeph>"start"</codeph>, sodass der Text linksbündig ist, wenn <codeph>direction</codeph> <codeph>"ltr"</codeph> ist, und rechtsbündig, wenn <codeph>direction</codeph> <codeph>"rtl"</codeph> ist. Setzen Sie <codeph>textAlign</codeph> auf <codeph>"end"</codeph>, um die umgekehrte Ausrichtung zu verwenden.</p>
 
  <p>Label verwendet die TextBlock-Klasse der Flash Text Engine, um mindestens ein TextLine-Objekt zu erstellen und den Textstring in dem durch die CSS-Stile bestimmten Format statisch anzuzeigen. Aus Gründen der Leistungsfähigkeit enthalten dessen TextLines keine Informationen über einzelne Glyphen. Weitere Informationen finden Sie unter flash.text.engine.TextLineValidity.STATIC.</p>
 
  <p>Das Label-Steuerelement verfügt über die folgenden Standardeigenschaften:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>0 Pixel breit und 12 Pixel hoch, wenn es keinen Text enthält; groß genug, um den Text ggf. anzuzeigen</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLineValidity/STATIC"><linktext>flash.text.engine.TextLineValidity.STATIC</linktext></link></related-links><apiConstructor id="spark.components:Label:Label"><apiName>Label</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
      RichEditableText ist eine elementare UIComponent, mit der Sie Text mit Rich Text-Formatierung anzeigen, auswählen und bearbeiten können, und mit der Sie Bildläufe durchführen können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="chromeColor"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichEditableText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
      Die Farbe des Hintergrunds des gesamten Begrenzungsrechtecks dieser Komponente. Ist der Stil <codeph>undefined</codeph>, wird kein Hintergrund gezeichnet. Andernfalls wird diese RGB-Farbe mit einer durch den <codeph>backgroundAlpha</codeph>-Stil bestimmten Alphaebene gezeichnet.
     
      </description>
<default>undefined
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
      Die Alphaebene der Farbe, die durch den <codeph>backgroundColor</codeph>-Stil festgelegt wird. Die zulässigen Werte liegen zwischen 0,0 und 1,0.
     
      </description>
<default>1.0
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert, jedoch nicht im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente deaktiviert ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert und im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Spaltenbreite in Pixeln. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.columnWidth.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Zwischenraum in Pixeln, der zwischen den Spalten belassen werden soll.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.columnGap.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Anzahl der Textspalten.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.columnCount.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.5" type="Object">
<description>
  Legt den beim Blocksatz verwendeten Abstand zwischen Wörtern fest. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Blendet Leerraum aus oder behält ihn bei, wenn Text in einem TextFlow importiert wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Bestimmt die Gradzahl zum Drehen dieses Texts.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Offset der ersten Textzeile links vom Container.
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textIndent“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Gibt die Tabulatoren an, die dem Absatz zugewiesen sind.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den der obere Absatzrand eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der vor dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der hinter dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den die obere Absatzrandkante eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Darstellung von Einträgen in Listen.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Platzierung von Markern relativ zum Listeneintrag.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Legt einen automatischen Einzug für den Beginn von Listenrändern fest, wenn der Auffüllwert der Liste auf dieser Seite <codeph>auto</codeph> ist.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Gibt das Zeilenabstandsmodell an, das eine Kombination aus Zeilenabstandsbasis und Zeilenabstandsrichtung ist.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Gibt die Grundlinienposition der ersten Linie im Container an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Steuert, wie der Text bei einem Float umbricht.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Steuert, an welcher Stelle Zeilen umbrochen werden können, wenn umbrochener Text in mehrere Zeilen umbrochen wird. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Gibt eine vertikale oder horizontale Abfolge der Zeilenplatzierung an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Vertikale Ausrichtung oder Abstände.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Der obere Versatz in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Der rechte Einzug in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Der linke Einzug in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Der untere Versatz in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Steuert den Zeilenumbruch innerhalb des Containers.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichEditableText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichEditableText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[      <p>The <code>&lt;s:RichEditableText&gt;</code> tag inherits all of the tag 
      attributes of its superclass and adds the following tag attributes:</p>
           <pre>
      &lt;s:RichEditableText
        <strong>Properties</strong>
        clipAndEnableScrolling="false|true"
        contentHeight="<i>Calculated default</i>"
        contentWidth="<i>Calculated default</i>"
        displayAsPassword="false"
        editable="true"
        heightInLines="NaN"
        horizontalScrollPosition="0"
        imeMode="null"
        maxChars="0"
        multiline="true"
        restrict="null"
        selectable="true"
        selectionActivePosition="-1"
        selectionAnchorPosition="-1"
        selectionHighlighting="TextSelectionHighlighting.WHEN_FOCUSED"
        text=""
        textFlow="<i>TextFlow</i>"
        typicalText=null
        verticalScrollPosition="0"
        widthInChars="NaN"
      
        <strong>Events</strong>
        change="<i>No default</i>"
        changing="<i>No default</i>"
        enter="<i>No default</i>"
        selectionChange="<i>No default</i>"
      /&gt;
      </pre>
      
      ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:ISystemCursorClient</apiBaseInterface><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseInterface>spark.core:IEditableText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      RichEditableText ist eine elementare UIComponent, mit der Sie Text mit Rich Text-Formatierung anzeigen, auswählen und bearbeiten können, und mit der Sie Bildläufe durchführen können.
           <p>Rich Text kann klickbare Hyperlinks bzw. Verknüpfungen und eingebundene Grafiken enthalten, die entweder eingebettet oder von URLs geladen werden.</p>
           <p>RichEditableText hat zwar keine Bildlaufleisten, implementiert jedoch die IViewport-Schnittstelle zum Ausführen von programmgesteuerten Bildläufen, sodass die Steuerung durch einen Scroller möglich ist, der Bildlaufleisten bereitstellt. Außerdem werden vertikale Bildläufe mit dem Mausrad unterstützt.</p>
           <p>Es bietet keine Benutzeroberfläche zum Ändern der Textformatierung. Es bietet jedoch APIs, mit denen Sie Text programmgesteuert formatieren können. Diese ermöglichen es beispielsweise, eine Fettdruck-Schaltfläche zu erstellen, durch die ausgewählter Text fett formatiert wird.</p>
           <p>Diese Klasse wird in den Skins der Spark-Versionen von TextInput und TextArea verwendet. (TextInput bietet im Gegensatz zu TextArea nicht die Möglichkeit, Rich Text zu verarbeiten.) RichEditableText hat standardmäßig einen transparenten Hintergrund und unterstützt das Zeichnen von Rahmen nicht.</p>
           <p>RichEditableText verwendet die Text Layout Framework (TLF)-Bibliothek, welche wiederum auf der neuen Flash Text Engine (FTE) in Flash Player 10 beruht. In Kombination ermöglichen diese Ebenen die Bearbeitung von Text mit hochwertigen internationalen Typografie- und Layoutfunktionen.</p>
           <p>Die Spark-Architektur bietet drei grundlegende Textsteuerelemente: Label, RichText und RichEditableText. Label ist das schnellste und einfachste Steuerelement, da es nicht TLF, sondern FTE verwendet. Es hat eingeschränkte Funktionen: kein Rich Text, keine Bildläufe, keine Auswahl und keine Bearbeitung. Mit RichText können Sie Rich Text mit komplexem Layout anzeigen. Das Steuerelement ist dennoch nicht interaktiv. RichEditableText ist das umfangreichste Steuerelement und bietet die meisten Möglichkeiten von TLF. In der Regel sollten Sie das schnellste Textsteuerelement verwenden, das Ihre Anforderungen erfüllt.</p>
           <p>RichEditableText ähnelt der UITextField-Klasse, die in MX-Komponenten zum Einsatz kommt. Bei dieser Klasse wurde weder FTE noch TLF verwendet. Vielmehr wurde die ältere TextField-Klasse erweitert.</p>
           <p>Die wichtigsten Unterschiede zwischen UITextField und RichEditableText sind die folgenden:
      <ul>
        <li>RichEditableText bietet bessere Typografie, bessere Unterstützung für Sprachen und besseres Textlayout.</li>
        <li>RichEditableText verfügt über ein objektorientiertes Modell von Rich Text, UITextField nicht.</li>
        <li>RichEditableText bietet bessere Unterstützung für das Anzeigen umfangreicher Texte.</li>
        <li>Bei RichEditableText müssen Schriftarten anders eingebettet werden als bei UITextField. Weitere Informationen zur Verwendung des <codeph>embedAsCFF</codeph>-Attributs beim Einbetten von Schriftarten finden Sie in der Dokumentation.</li>
      </ul></p>
           <p>Bei RichEditableText kommt das objektorientierte TLF-Modell von Rich Text zum Einsatz. Hierbei werden Textlayoutelemente wie Unterteilungen, Absätze, Spannen, Hyperlinks und Bilder zur Laufzeit durch ActionScript-Objekte dargestellt, welche programmgesteuert verwendet und bearbeitet werden können. Das zentrale Objekt in TLF zur Darstellung von Rich Text ist ein TextFlow. Sie geben also Rich Text an, um ein RichEditableText-Steuerelement anzuzeigen, indem Sie die <codeph>textFlow</codeph>-Eigenschaft auf eine TextFlow-Instanz einstellen. In der Beschreibung der <codeph>textFlow</codeph>-Eigenschaft finden Sie weitere Informationen darüber, wie Sie diese erstellen, wie beispielsweise durch Importieren von TLF-Markup. Wenn Sie bei der Anzeige von Text auf die Darstellung unterschiedlicher Formatierungen verzichten können, verwenden Sie die <codeph>text</codeph>-Eigenschaft, um einen String mit unformatiertem Text festzulegen. Informationen zur Interaktion zwischen den <codeph>text</codeph>- und <codeph>textFlow</codeph>-Eigenschaften finden Sie in den jeweiligen Beschreibungen. Beispielsweise können Sie eine einstellen und die andere abrufen.</p>
           <p>Beim Kompilieren können Sie in TLF-Markup-Tags das RichEditableText-Tag einfügen. Gehen Sie dazu wie im folgenden Beispiel vor:
      <pre>
      &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichEditableText>
      </pre>
      In diesem Beispiel legt der MXML-Compiler die <codeph>content</codeph>-Eigenschaft fest, wodurch automatisch ein TextFlow-Objekt aufgrund der angegebenen FlowElements erstellt wird.</p>
           <p>Die Standardtextformatierung wird mithilfe von CSS-Stilen wie beispielsweise <codeph>fontFamily</codeph> und <codeph>fontSize</codeph> bestimmt. Formatierungsinformationen innerhalb des TextFlow-Objekts führen zum Überschreiben der Standardformatierung, die von den CSS-Stilen bereitgestellt wird.</p>
           <p>Sie können den Abstand zwischen den Zeilen mit dem <codeph>lineHeight</codeph>-Stil steuern. Den Abstand zwischen Absätzen steuern Sie mit den <codeph>paragraphSpaceBefore</codeph>- und <codeph>paragraphSpaceAfter</codeph>-Stilen. Mit den <codeph>textAlign</codeph>- und <codeph>textAlignLast</codeph>-Stilen richten Sie Text aus. Mit den <codeph>paddingLeft</codeph>-, <codeph>paddingTop</codeph>-, <codeph>paddingRight</codeph>- und <codeph>paddingBottom</codeph>-Stilen können Sie Text von den Kanten der Komponente aus einrücken.</p>
           <p>Standardmäßig wird die Größe von RichEditableText automatisch angepasst: zu Beginn ist es sehr klein, wenn noch kein Text vorhanden ist, dann wird die Breite während der Eingabe bis auf <codeph>maxWidth</codeph> erhöht. Die Höhe wächst, wenn Sie die Eingabetaste drücken, um eine neue Zeile zu beginnen.</p>
           <p>Mit den <codeph>widthInChars</codeph>- und <codeph>heightInLines</codeph>-Eigenschaften geben Sie die Breite und Höhe so an, dass eine Skalierung entsprechend der Schriftgröße erfolgt. Sie können auch die <codeph>typicalText</codeph>-Eigenschaft verwenden. Beachten Sie, dass beim Verwenden von <codeph>typicalText</codeph> die <codeph>widthInChars</codeph> und <codeph>heightInLines</codeph> ignoriert werden. Ferner können Sie eine explizite Breite oder Höhe in Pixeln angeben, eine prozentuale Breite oder Höhe angeben oder Beschränkungen wie <codeph>left</codeph> und <codeph>right</codeph> oder <codeph>top</codeph> und <codeph>bottom</codeph> festlegen.</p>
           <p>Wenn Sie irgendeine Breite definieren (ausdrücklich oder prozentual oder mit <codeph>maxWidth</codeph>- oder <codeph>left</codeph>- und <codeph>right</codeph>-Beschränkungen), wird der Text am rechten Rand der Komponente umbrochen. Wenn mehr Text vorhanden ist als in den Anzeigebereich passt, kann ein vertikaler Bildlauf des Texts durchgeführt werden. Wenn Sie den <codeph>lineBreak</codeph>-Stil auf <codeph>explicit</codeph> setzen, beginnen neue Zeilen ausschließlich bei ausdrücklich definierten Zeilenumbrüchen, wie beispielsweise bei der Verwendung von CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) oder CR+LF (<codeph>\r\n</codeph>) in <codeph>text</codeph> oder wenn Sie <codeph>&lt;p></codeph> und <codeph>&lt;br/></codeph> in TLF-Markup verwenden. In diesem Fall ist ein horizontaler Bildlauf möglich, wenn Textzeilen breiter sind als das Steuerelement.</p>
           <p>Mit der <codeph>maxChars</codeph>-Eigenschaft beschränken Sie die Anzahl der Zeichen, die der Benutzer eingeben kann. Mit <codeph>restrict</codeph> legen Sie fest, welche Zeichen eingegeben werden dürfen.</p>
           <p>Mit der <codeph>multiline</codeph>-Eigenschaft bestimmen Sie, welches Verhalten durch Drücken der Eingabetaste ausgelöst wird. Bei <codeph>true</codeph> wird durch Drücken der Eingabetaste ein neuer Absatz begonnen. Bei <codeph>false</codeph> wird ein <codeph>FlexEvent.ENTER</codeph>-Ereignis ausgelöst.</p>
           <p>Um das Bearbeiten von Text zu unterbinden, setzen Sie die <codeph>editable</codeph>-Eigenschaft auf <codeph>false</codeph>. Wenn Sie festlegen möchten, dass der Text nicht markiert werden kann, setzen Sie die <codeph>selectable</codeph>-Eigenschaft auf <codeph>false</codeph>.</p>
           <p>Da RichEditableText TLF verwendet, können Sie Texte anzeigen, die sowohl von links nach rechts (z. B. Französisch) als auch von rechts nach links (z. B. Arabisch) verlaufen. Auch die Anzeige von bidirektionalem Text wird unterstützt – das heißt, Sie können einen Satz auf Französisch in einem arabischen Text anzeigen. Läuft der Text vorwiegend von rechts nach links, stellen Sie den <codeph>direction</codeph>-Stil auf <codeph>rtl</codeph> ein. Der <codeph>textAlign</codeph>-Stil ist standardmäßig <codeph>"start"</codeph>, sodass der Text linksbündig ist, wenn <codeph>direction</codeph> <codeph>ltr</codeph> ist, und rechtsbündig, wenn <codeph>direction</codeph> <codeph>rtl</codeph> ist. Setzen Sie <codeph>textAlign</codeph> auf <codeph>end</codeph>, um die umgekehrte Ausrichtung zu verwenden.</p>
           <p>Infolge der Verwendung von TLF unterstützt RichEditableText eine unbegrenzte Anzahl von Schritten, die während einer Bearbeitungssitzung rückgängig gemacht und wiederhergestellt werden können. Eine Bearbeitungssitzung beginnt, wenn die Komponente den Tastaturfokus erhält, und endet, wenn sie den Fokus verliert.</p>
           <p>RichEditableText nutzt die TextContainerManager-Klasse von TLF, um Textanzeige, Bildläufe, Auswahl, Bearbeitung und Kontextmenü zu verarbeiten.</p>
           <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
           </apiDesc><example conref="RichEditableTextExample.mxml"><swfblock conref="examples/RichEditableTextExample.swf"/></example><example conref="externalTextFlow.xml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.utils.xml#TextFlowUtil"><linktext>spark.utils.TextFlowUtil</linktext></link><link href="" invalidHref="flashx.textLayout.container.TextContainerManager.xml"><linktext>flashx.textLayout.container.TextContainerManager</linktext></link></related-links><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
      Wird ausgelöst, wenn der Benutzer die Eingabetaste drückt, sofern die mulitiline-Eigenschaft auf „false“ gesetzt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, wenn der Benutzer die Eingabetaste drückt, sofern die <codeph>mulitiline</codeph>-Eigenschaft auf „false“ gesetzt ist.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
      Wird ausgelöst, nachdem ein Bearbeitungsvorgang eines Benutzers abgeschlossen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, nachdem ein Bearbeitungsvorgang eines Benutzers abgeschlossen ist.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
      Wird ausgelöst, bevor ein Bearbeitungsvorgang eines Benutzers auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, bevor ein Bearbeitungsvorgang eines Benutzers auftritt. Sie können den Vorgang ändern oder das Ereignis abbrechen, damit der Vorgang nicht verarbeitet wird.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
      Wird ausgelöst, nachdem sich die Eigenschaften „selectionAnchorPosition“ und/oder „selectionActivePosition“ geändert haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, nachdem sich die Eigenschaften <codeph>selectionAnchorPosition</codeph> und/oder <codeph>selectionActivePosition</codeph> geändert haben.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RichEditableText:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
          Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Konstruktor. 
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:RichEditableText:appendText"><apiName>appendText</apiName><shortdesc>
          Hängt den angegebenen Text an das Ende von RichEditableText an, als ob Sie am Ende geklickt und den Text eingegeben hätten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Der anzuhängende Text.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Hängt den angegebenen Text an das Ende von RichEditableText an, als ob Sie am Ende geklickt und den Text eingegeben hätten.
                   <p>Nach dem neuen Text wird anschließend eine Einfügemarke eingefügt. Falls nötig erfolgt ein Bildlauf des Texts, um sicherzustellen, dass die Einfügemarke sichtbar ist.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc>
          Gibt ein TextLayoutFormat-Objekt zurück, das die berechneten Formate für den angegebenen Zeichenbereich angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein TextLayoutFormat-Objekt.
          
          </apiDesc><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>Ein Vektor von Strings mit den Namen der angeforderten Formate oder <codeph>null</codeph>, um alle Formate anzufordern.
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Eine Zeichenposition, die das feste Ende der Auswahl angibt.
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Eine Zeichenposition, die das feste Ende der Auswahl angibt.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Gibt ein TextLayoutFormat-Objekt zurück, das die berechneten Formate für den angegebenen Zeichenbereich angibt.
                   <p>Wird ein Format nicht für den gesamten Bereich einheitlich eingestellt, ist sein Wert <codeph>undefined</codeph>.</p>
                   <p>Sie können einen Vektor von Strings angeben, der die Namen der für Sie wichtigen Formate enthält. Wenn Sie dies nicht tun, werden alle Formate berechnet.</p>
          
          <p>Wenn Sie keinen Bereich angeben, wird der ausgewählte Bereich verwendet.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc>
          
      Gibt die Anzahl zurück, die zur aktuellen horizontalScrollPosition des Viewports hinzuzufügen ist, um einen Bildlauf mit der angeforderten Bildlaufeinheit durchzuführen. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Anzahl an Pixeln, die zu <codeph>horizontalScrollPosition</codeph> hinzuzufügen ist.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Die Anzahl für den Bildlauf. Der Wert muss eine der folgenden spark.core.NavigationUnit-Konstanten sein: 
      <ul>
       <li><codeph>LEFT</codeph></li>
       <li><codeph>RIGHT</codeph></li>
       <li><codeph>PAGE_LEFT</codeph></li>
       <li><codeph>PAGE_RIGHT</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      Für einen Bildlauf über eine einzelne Spalte verwenden Sie <codeph>LEFT</codeph> oder <codeph>RIGHT</codeph>. Für einen Bildlauf zur ersten oder letzten Spalte verwenden Sie <codeph>HOME</codeph> oder <codeph>END</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      Gibt die Anzahl zurück, die zur aktuellen <codeph>horizontalScrollPosition</codeph> des Viewports hinzuzufügen ist, um einen Bildlauf mit der angeforderten Bildlaufeinheit durchzuführen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc>
          
      Gibt die Anzahl zurück, die zur aktuellen verticalScrollPosition des Viewports hinzuzufügen ist, um einen Bildlauf mit der angeforderten Bildlaufeinheit durchzuführen. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Anzahl an Pixeln, die zu <codeph>verticalScrollPosition</codeph> hinzuzufügen ist.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>Die Anzahl für den Bildlauf. Der Wert der Einheit muss eine der folgenden spark.core.NavigationUnit-Konstanten sein: 
      <ul>
       <li><codeph>UP</codeph></li>
       <li><codeph>DOWN</codeph></li>
       <li><codeph>PAGE_UP</codeph></li>
       <li><codeph>PAGE_DOWN</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      Für einen Bildlauf über eine einzelne Spalte verwenden Sie <codeph>UP</codeph> oder <codeph>DOWN</codeph>. Für einen Bildlauf zur ersten oder letzten Zeile verwenden Sie <codeph>HOME</codeph> oder <codeph>END</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      Gibt die Anzahl zurück, die zur aktuellen <codeph>verticalScrollPosition</codeph> des Viewports hinzuzufügen ist, um einen Bildlauf mit der angeforderten Bildlaufeinheit durchzuführen. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:insertText"><apiName>insertText</apiName><shortdesc>
          Fügt den angegebenen Text in den RichEditableText ein, als ob Sie ihn eingegeben hätten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Der einzufügende Text.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Fügt den angegebenen Text in den RichEditableText ein, als ob Sie ihn eingegeben hätten.
                   <p>Wurde ein Bereich ausgewählt, wird der ausgewählte Text durch den neuen Text ersetzt. Wenn eine Einfügemarke vorhanden war, wird der neue Text dort eingefügt.</p>
                   <p>Nach dem neuen Text wird anschließend eine Einfügemarke eingefügt. Falls nötig erfolgt ein Bildlauf des Texts, um sicherzustellen, dass die Einfügemarke sichtbar ist.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectAll"><apiName>selectAll</apiName><shortdesc>
          Wählt den gesamten Text aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Wählt den gesamten Text aus. Dies schließt nicht das letzte Absatzendezeichen mit ein.
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectRange"><apiName>selectRange</apiName><shortdesc>
          Wählt einen angegebenen Zeichenbereich aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>Die Zeichenposition, die das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl erweitert wird.
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>Die Zeichenposition, die das Ende der Auswahl angibt. Wird verschoben, wenn die Auswahl erweitert wird.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Wählt einen angegebenen Zeichenbereich aus.
                   <p>Ist eine der Positionen negativ, wird die Auswahl des Textbereichs aufgehoben.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc>
          Wendet die festgelegten Formate auf jedes Element im festgelegten Bereich, der zum angegebenen Format gehört, an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>Das auf die Auswahl anzuwendende TextLayoutFormat.
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Eine Zeichenposition, die relativ zum Anfang des Textstrings ist und das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl mit den Pfeiltasten erweitert wird.
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Eine Zeichenposition, die relativ zum Anfang des Textstrings ist und das Auswahlende angibt, das verschoben wird, wenn die Auswahl mit den Pfeiltasten erweitert wird. 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Wendet die festgelegten Formate auf jedes Element im festgelegten Bereich, der zum angegebenen Format gehört, an. Wendet die Zeichenformate auf den Text innerhalb des festgelegten Bereichs an. (Wenn der festgelegte Bereich ein einzelner Punkt ist, erfolgen keine Änderungen.) Die Absatzformate werden dabei auf alle Absätze angewendet, die zumindest teilweise innerhalb des Bereichs liegen (oder auf einen einzelnen Absatz, wenn der Bereich ein einzelner Punkt ist). Die Containerformate werden auf den Container angewendet.
         
          <p>Die unterstützten Formate entsprechen denjenigen in TextLayoutFormat. Der Wert <codeph>undefined</codeph> wird nicht angewendet. Wenn Sie keinen Bereich angeben, wird der ausgewählte Bereich verwendet.</p>
                   <p>Im folgenden Beispiel werden <codeph>fontSize</codeph> und <codeph>color</codeph> der Auswahl festgelegt:
          <pre>
          var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
          textLayoutFormat.fontSize = 12;
          textLayoutFormat.color = 0xFF0000;
          myRET.setFormatOfRange(textLayoutFormat);
          </pre>
          </p>
          
          <p>Hinweis: Wenn Sie die Ergebnisse von <codeph>getFormatOfRange()</codeph> zum Festlegen des <codeph>format</codeph> verwenden, weist jedes Format im <codeph>TextLayoutFormat</codeph> einen berechneten Wert auf, der auf jedes Element, das mit dem angegebenen Format übereinstimmt, angewendet wird.</p>
         
          <p>Wenn Sie ein Format festlegen möchten, das auf den gesamten Text angewendet werden soll, sollten Sie <codeph>setStyle(format, value)</codeph> für die Komponente selbst verwenden.</p>
         
          <p>Im folgenden Beispiel werden <codeph>fontSize</codeph> und <codeph>color</codeph> des gesamten Texts festgelegt:
          <pre>
          myRET.setStyle("fontSize", 12);
          myRET.setStyle("color", 0xFF0000);
          </pre>
          </p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:styleChanged"><apiName>styleChanged</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:RichEditableText:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:RichEditableText:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
          
          </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
          Die Höhe des Texts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Die Höhe des Texts.
                   <p>Da das Text Layout Framework aus Gründen der Leistungsfähigkeit TextLines virtualisiert, ist diese Höhe zunächst eine Schätzung, wenn die Komponente nicht den gesamten Text anzeigen kann. Wenn Sie einen Bildlauf bis zum Ende des Texts durchführen, werden alle TextLines zusammengesetzt und die <codeph>contentHeight</codeph> wird exakt.</p>
                   <p>Sie können vertikal durch den Text blättern, indem Sie für <codeph>verticalScrollPosition</codeph> einen Wert zwischen 0 und <codeph>contentHeight - height</codeph> verwenden.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
          Die Breite des Texts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Die Breite des Texts.
                   <p>Da das Text Layout Framework aus Gründen der Leistungsfähigkeit TextLines virtualisiert, ist diese Breite zunächst eine Schätzung, wenn die Komponente nicht den gesamten Text anzeigen kann. Wenn Sie einen Bildlauf bis zum Ende des Texts durchführen, werden alle TextLines zusammengesetzt und die <codeph>contentWidth</codeph> wird exakt.</p>
                   <p>Sie können horizontal durch den Text blättern, indem Sie für <codeph>horizontalScrollPosition</codeph> einen Wert zwischen 0 und <codeph>contentWidth - width</codeph> verwenden.</p>  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:content:get"><apiName>content</apiName><shortdesc>
          Diese Eigenschaft ist für die Verwendung in MXML bei der Kompilierung vorgesehen. Um Rich Text-Inhalt zur Laufzeit abzurufen oder einzustellen, verwenden Sie stattdessen die textFlow-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          Diese Eigenschaft ist für die Verwendung in MXML bei der Kompilierung vorgesehen. Um Rich Text-Inhalt zur Laufzeit abzurufen oder einzustellen, verwenden Sie stattdessen die <codeph>textFlow</codeph>-Eigenschaft.
                   <p>Die <codeph>content</codeph>-Eigenschaft ist die Standardeigenschaft für RichEditableText, sodass Sie MXML-Code wie im folgenden Beispiel schreiben können:
          <pre>
          &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichEditableText>
          </pre>
          Damit können Sie den String und das SpanElement, die Sie als Inhalt angeben, zur Erstellung eines TextFlows nutzen.</p>
                   <p>Diese Eigenschaft hat den Typ „Object“, da Sie sie als String, FlowElement oder ein Array von Strings und FlowElements festlegen können. Im obigen Beispiel geben Sie an, dass der Inhalt ein Array mit zwei Elementen ist. Das erste Element ist der String „Hello“ und das zweite Element ist ein SpanElement mit dem Text „World“ in Fettdruck.</p>
         
          <p>Unabhängig davon, wie Sie den Inhalt angeben, wird er in TextFlow konvertiert, und wenn Sie diese Eigenschaft abrufen, erhalten Sie den resultierenden TextFlow.</p>
         
          <p>Wenn Sie Rich Text-Inhalte zur Laufzeit abrufen und einstellen möchten, empfiehlt Adobe, die <codeph>textFlow</codeph>-Eigenschaft zu verwenden, da ihr Typ ausdrücklich als TextFlow statt als Objekt festgelegt ist. Ein TextFlow ist die standardmäßige visuelle Darstellungsmethode von Rich Text-Inhalten im Text Layout Framework.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:editable:get"><apiName>editable</apiName><shortdesc>
          Ein Flag, das anzeigt, ob der Benutzer berechtigt ist, den Text dieses Steuerelements zu ändern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
                   </apiDefaultValue></apiValueDef><apiDesc>
          Ein Flag, das anzeigt, ob der Benutzer berechtigt ist, den Text dieses Steuerelements zu ändern.
                   <p>Bei <codeph>true</codeph> wird der Cursor zu einem Textcursor, wenn Sie ihn außerhalb der Grenzen dieses Steuerelements bewegen. Bei <codeph>false</codeph> wird der Cursor weiterhin als Pfeil dargestellt.</p>
                   <p>Wenn diese Eigenschaft <codeph>true</codeph> ist, wird die <codeph>selectable</codeph>-Eigenschaft ignoriert.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:enableIME:get"><apiName>enableIME</apiName><shortdesc>
          Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><returns>true if the component is editable and it is not displaying a password.
         
          </returns></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
          Die Standardhöhe des Steuerelements in Zeilen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          Die Standardhöhe des Steuerelements in Zeilen.
                   <p>Die Formatierungsstile des Steuerelements, wie beispielsweise <codeph>fontSize</codeph> und <codeph>lineHeight</codeph>, werden zur Berechnung der Zeilenhöhe in Pixeln verwendet.</p>
                   <p>Beispielsweise könnten Sie für diese Eigenschaft den Wert „5“ einstellen, wenn Sie festlegen möchten, dass die Höhe von RichEditableText ausreichen soll, um fünf Zeilen Text anzuzeigen.</p>
                   <p>Wenn diese Eigenschaft auf den Standardwert <codeph>NaN</codeph> eingestellt ist, wird die Standardhöhe der Komponente entsprechend dem anzuzeigenden Text bestimmt.</p>
          
          <p>Diese Eigenschaft wird ignoriert, wenn Sie eine ausdrückliche Höhe, eine prozentuale Höhe oder sowohl <codeph>top</codeph>- als auch <codeph>bottom</codeph>-Beschränkungen angeben.</p>
                   <p>Diese Eigenschaft wird auch ignoriert, wenn die <codeph>typicalText</codeph>-Eigenschaft festgelegt ist.</p>
         
          <p>Die <codeph>measure()</codeph>-Methode von RichEditableText verwendet <codeph>widthInChars</codeph> und <codeph>heightInLines</codeph>, um die <codeph>measuredWidth</codeph> und <codeph>measuredHeight</codeph> zu bestimmen. Diese entsprechen den <codeph>cols</codeph> und <codeph>rows</codeph> einer HTML-TextArea.</p>
                   <p>Da sowohl <codeph>widthInChars</codeph> als auch <codeph>heightInLines</codeph> den Standardwert <codeph>NaN</codeph> annehmen, wird bei RichEditableText die Textgröße standardmäßig automatisch angepasst. Ist kein Text vorhanden, ist die Größe sehr gering. Beim Eingeben von Text wird die Breite erhöht, und wenn Sie die Eingabetaste drücken, um eine neue Zeile zu beginnen, wächst die Höhe.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          Die Anzahl der Pixel, um die der Text bei einem Bildlauf horizontal gescrollt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Die Anzahl der Pixel, um die der Text bei einem Bildlauf horizontal gescrollt wird.
                   <p>Sie können horizontal durch den Text blättern, indem Sie für <codeph>horizontalScrollPosition</codeph> einen Wert zwischen 0 und <codeph>contentWidth - width</codeph> verwenden.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:imeMode:get"><apiName>imeMode</apiName><shortdesc>
          Gibt den Modus des Eingabemethodeneditors (IME) an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Gibt den Modus des Eingabemethodeneditors (IME) an. Mithilfe des Eingabemethodeneditors können chinesische, japanische und koreanische Schriftzeichen eingegeben werden. Flex stellt den festgelegten IME-Modus ein, wenn das Steuerelement den Fokus erhält und setzt es auf den vorherigen Wert zurück, wenn das Steuerelement den Fokus verliert.
                   <p>Die flash.system.IMEConversionMode-Klasse definiert Konstanten für gültige Werte dieser Eigenschaft. Sie können auch <codeph>null</codeph> festlegen, um keinen IME festzulegen.</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:multiline:get"><apiName>multiline</apiName><shortdesc>
          Bestimmt, ob der Benutzer mehrzeiligen Text eingeben kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Bestimmt, ob der Benutzer mehrzeiligen Text eingeben kann.
                   <p>Bei <codeph>true</codeph> wird durch Drücken der Eingabetaste ein neuer Absatz begonnen. Bei <codeph>false</codeph> wirkt sich das Drücken der Eingabetaste nicht auf den Text aus, führt jedoch dazu, dass RichEditableText ein <codeph>"enter"</codeph>-Ereignis auslöst. Wenn Sie Text in RichEditableText einfügen, dessen multiline-Wert auf <codeph>false</codeph> gesetzt ist, werden neue Zeilen aus dem Text entfernt. </p>  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectable:get"><apiName>selectable</apiName><shortdesc>
          Ein Flag, das anzeigt, ob der Inhalt mit der Maus oder der Tastatur wählbar ist, wenn das Steuerelement den Tastaturfokus hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Ein Flag, das anzeigt, ob der Inhalt mit der Maus oder der Tastatur wählbar ist, wenn das Steuerelement den Tastaturfokus hat.
                   <p>Wenn der Text auswählbar ist, können Sie ihn aus dem Steuerelement kopieren.</p>
                   <p>Diese Eigenschaft wird ignoriert, wenn die <codeph>editable</codeph>-Eigenschaft <codeph>true</codeph> ist.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
          Eine Zeichenposition, die relativ zum Anfang des Textstrings ist und das Auswahlende angibt, das verschoben wird, wenn die Auswahl mit den Pfeiltasten erweitert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          Eine Zeichenposition, die relativ zum Anfang des <codeph>text</codeph>-Strings ist und das Auswahlende angibt, das verschoben wird, wenn die Auswahl mit den Pfeiltasten erweitert wird.
                   <p>Die aktive Position kann entweder dem Anfang oder dem Ende der Auswahl entsprechen.</p>
                   <p>Wenn Sie beispielsweise durch Ziehen und Auswählen Position 12 bis Position 8 markieren, ist <codeph>selectionAnchorPosition</codeph> 12 und <codeph>selectionActivePosition</codeph> 8, und wenn Sie die Nach-Links-Taste drücken, ist <codeph>selectionActivePosition</codeph> 7.</p>
                   <p>Der Wert „-1“ bedeutet „nicht festgelegt“.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
          Eine Zeichenposition, die relativ zum Anfang des Textstrings ist und das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl mit den Pfeiltasten erweitert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          Eine Zeichenposition, die relativ zum Anfang des <codeph>text</codeph>-Strings ist und das Ende der Auswahl angibt. Bleibt fest, wenn die Auswahl mit den Pfeiltasten erweitert wird.
                   <p>Die Ankerposition kann entweder dem Anfang oder dem Ende der Auswahl entsprechen.</p>
                   <p>Wenn Sie beispielsweise durch Ziehen und Auswählen Position 12 bis Position 8 markieren, ist <codeph>selectionAnchorPosition</codeph> 12 und <codeph>selectionActivePosition</codeph> 8, und wenn Sie die Nach-Links-Taste drücken, ist <codeph>selectionActivePosition</codeph> 7.</p>
                   <p>Der Wert „-1“ bedeutet „nicht festgelegt“.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
          Bestimmt, wann die Textauswahl hervorgehoben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Bestimmt, wann die Textauswahl hervorgehoben wird.
          
          <p>Die möglichen Werte werden durch die spark.components.TextSelectionHighlighting-Klasse festgelegt. Gültige Werte sind <codeph>TextSelectionHighlighting.WHEN_FOCUSED</codeph>, <codeph>TextSelectionHighlighting.WHEN_ACTIVE</codeph> und <codeph>TextSelectionHighlighting.ALWAYS</codeph>.</p>
                   <p><codeph>WHEN_FOCUSED</codeph> zeigt die Textauswahl nur an, wenn die Komponente den Tastaturfokus hat.</p>
          
          <p><codeph>WHEN_ACTIVE</codeph> zeigt die Textauswahl immer an, wenn das Fenster der Komponente aktiv ist, selbst wenn die Komponente nicht den Tastaturfokus hat.</p>
                   <p><codeph>ALWAYS</codeph> zeigt die Textauswahl immer an, selbst wenn die Komponente nicht den Tastaturfokus hat oder das Fenster der Komponente nicht aktiv ist.</p>
          
          </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#TextSelectionHighlighting"><linktext>spark.components.TextSelectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:showSystemCursor:get"><apiName>showSystemCursor</apiName><shortdesc>
          „True“, wenn der Systemcursor immer angezeigt werden soll, wenn die Maus über die Komponente bewegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          „True“, wenn der Systemcursor immer angezeigt werden soll, wenn die Maus über die Komponente bewegt wird. Wenn „false“, wird der benutzerdefinierte Cursor angezeigt.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
          Der TextFlow, der den Rich Text darstellt, der von dieser Komponente angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
          Der TextFlow, der den Rich Text darstellt, der von dieser Komponente angezeigt wird.
         
          <p>Ein TextFlow ist die wichtigste Klasse im Text Layout Framework (TLF). Es handelt sich um den Stamm einer Struktur von FlowElements, die Rich Text-Inhalt darstellen.</p>
                   <p>Normalerweise erstellen Sie einen TextFlow mithilfe von TLF-Markup unter Verwendung der <codeph>TextFlowUtil.importFromString()</codeph>- oder <codeph>TextFlowUtil.importFromXML()</codeph>-Methoden. Sie können auch die TextConverter-Klasse von TLF verwenden (mit der eine HTML-Untergruppe importiert werden kann) oder einen TextFlow erstellen, indem Sie Methoden wie <codeph>addChild()</codeph> auf TextFlow anwenden.</p>
                   <p>Das Einstellen dieser Eigenschaft wirkt sich auf die <codeph>text</codeph>-Eigenschaft aus und umgekehrt.</p>
                   <p>Wenn Sie den <codeph>textFlow</codeph> festlegen und den <codeph>text</codeph> abrufen, wird der Text der einzelnen Absätze jeweils durch einen LF („\n“) voneinander getrennt.</p>
                   <p>Wenn Sie den <codeph>text</codeph> als String festlegen, wie beispielsweise <codeph>"Hello World"</codeph>, und den <codeph>textFlow</codeph> abrufen, wird dies ein TextFlow, der ein einzelnes ParagraphElement enthält, das ein einzelnes SpanElement hat.</p>
                   <p>Wenn der Text ausdrücklich definierte Zeilenumbrüche enthält, wie beispielsweise CR („\r“), LF („\n“) oder CR+LF („\r\n“), wird der Inhalt auf einen TextFlow mit mehreren Absätzen mit jeweils einem span eingestellt.</p>
                   <p>Das Einstellen dieser Eigenschaft wirkt sich auch auf die Eigenschaften aus, mit denen die Bildlaufposition des Steuerelements und die Textauswahl angegeben werden. Dadurch werden <codeph>horizontalScrollPosition</codeph> und <codeph>verticalScrollPosition</codeph> auf 0 zurückgesetzt. Außerdem werden <codeph>selectionAnchorPosition</codeph> und <codeph>selectionActivePosition</codeph> auf den Wert „-1“ eingestellt, um die Auswahl zu löschen.</p>
                   <p>Um ein TextFlow-Objekt in TLF-Markup zu konvertieren, verwenden Sie <codeph>TextFlowUtil.export()</codeph>-Markup.</p>
                   <p>Ein einzelner TextFlow kann nicht von mehreren Instanzen von RichEditableText gemeinsam verwendet werden. Um Text in einer zweiten Instanz anzuzeigen, erstellen Sie einen zweiten TextFlow, indem Sie entweder <codeph>TextFlowUtil.export()</codeph> und <codeph>TextFlowUtil.importFromXML()</codeph> verwenden oder die <codeph>deepCopy()</codeph>-Methode auf den TextFlow anwenden.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:text:get"><apiName>text</apiName><shortdesc>
          Der Textstring, der von dieser Komponente angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
                   </apiDefaultValue></apiValueDef><apiDesc>
          Der Textstring, der von dieser Komponente angezeigt wird.
                   <p>Das Einstellen dieser Eigenschaft wirkt sich auf die <codeph>textFlow</codeph>-Eigenschaft aus und umgekehrt.</p>
                   <p>Wenn Sie den <codeph>text</codeph> als String festlegen, wie beispielsweise <codeph>"Hello World"</codeph>, und den <codeph>textFlow</codeph> abrufen, wird dies ein TextFlow, der ein einzelnes ParagraphElement enthält, das ein einzelnes SpanElement hat.</p>
                   <p>Wenn Sie den <codeph>text</codeph> auf „null“ setzen, wird er auf den Standardwert gesetzt, der einen leeren String enthält.</p>
         
          <p>Wenn der Text ausdrücklich definierte Zeilenumbrüche enthält, wie beispielsweise CR („\r“), LF („\n“) oder CR+LF („\r\n“), wird der Inhalt auf einen TextFlow mit mehreren Absätzen mit jeweils einem span eingestellt.</p>
                   <p>Wenn Sie den <codeph>textFlow</codeph> festlegen und den <codeph>text</codeph> abrufen, wird der Text der einzelnen Absätze jeweils durch einen LF („\n“) voneinander getrennt.</p>
                   <p>Das Einstellen dieser Eigenschaft wirkt sich auch auf die Eigenschaften aus, mit denen die Bildlaufposition des Steuerelements und die Textauswahl angegeben werden. <codeph>horizontalScrollPosition</codeph> und <codeph>verticalScrollPosition</codeph> werden auf 0 zurückgesetzt. Beginnend mit Flex 4.6 bleiben <codeph>selectionAnchorPosition</codeph> und <codeph>selectionActivePosition</codeph> erhalten. Vorher wurden <codeph>selectionAnchorPosition</codeph> und <codeph>selectionActivePosition</codeph> auf -1 gesetzt, um die Auswahl zu löschen.</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:typicalText:get"><apiName>typicalText</apiName><shortdesc>
          Text zum Bestimmen der Standardbreite und -höhe des Steuerelements, ohne dass er angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
                   </apiDefaultValue></apiValueDef><apiDesc>
          Text zum Bestimmen der Standardbreite und -höhe des Steuerelements, ohne dass er angezeigt wird.
                   <p>Diese Eigenschaft wird ignoriert, wenn Sie eine ausdrückliche Breite, eine prozentuale Breite oder sowohl <codeph>left</codeph>- als auch <codeph>right</codeph>-Beschränkungen angeben.</p>
                   <p>Wenn diese Eigenschaft verwendet wird, werden die <codeph>widthInChars</codeph>- und <codeph>heightInLines</codeph>-Eigenschaften ignoriert. </p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link><link href="" invalidHref="spark.primitives.widthInChars.xml"><linktext>spark.primitives.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          Die Anzahl der Pixel, um die der Text bei einem Bildlauf vertikal gescrollt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Die Anzahl der Pixel, um die der Text bei einem Bildlauf vertikal gescrollt wird.
                   <p>Sie können vertikal durch den Text blättern, indem Sie für <codeph>verticalScrollPosition</codeph> einen Wert zwischen 0 und <codeph>contentHeight - height</codeph> verwenden.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
          Die Standardbreite des Steuerelements in em-Einheiten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          Die Standardbreite des Steuerelements in em-Einheiten.
                   <p>Ein em ist eine typografische Maßeinheit und entspricht der Punktgröße. Ein em hat nicht unbedingt genau die Breite des Zeichens „M“, aber in vielen Schriftarten ist das „M“ ungefähr ein em breit. Der <codeph>fontSize</codeph>-Stil des Steuerelements wird zur Berechnung der em-Einheit in Pixeln verwendet.</p>
                   <p>Beispielsweise würden Sie für diese Eigenschaft den Wert „20“ einstellen, wenn Sie festlegen möchten, dass die Breite von RichEditableText ausreichen soll, um 20 Textzeichen anzuzeigen.</p>
                   <p>Wenn diese Eigenschaft auf den Standardwert <codeph>NaN</codeph> eingestellt ist, wird die Standardbreite der Komponente aufgrund des anzuzeigenden Texts bestimmt.</p>
                   <p>Diese Eigenschaft wird ignoriert, wenn Sie eine ausdrückliche Breite, eine prozentuale Breite oder sowohl <codeph>left</codeph>- als auch <codeph>right</codeph>-Beschränkungen angeben.</p>
                   <p>Diese Eigenschaft wird auch ignoriert, wenn die <codeph>typicalText</codeph>-Eigenschaft festgelegt ist.</p>
         
          <p>Die <codeph>measure()</codeph>-Methode von RichEditableText verwendet <codeph>widthInChars</codeph> und <codeph>heightInLines</codeph>, um die <codeph>measuredWidth</codeph> und <codeph>measuredHeight</codeph> zu bestimmen. Diese entsprechen den <codeph>cols</codeph> und <codeph>rows</codeph> einer HTML-TextArea.</p>
                   <p>Da sowohl <codeph>widthInChars</codeph> als auch <codeph>heightInLines</codeph> den Standardwert <codeph>NaN</codeph> annehmen, wird bei RichEditableText die Textgröße standardmäßig automatisch angepasst. Ist kein Text vorhanden, ist die Größe sehr gering. Beim Eingeben von Text wird die Breite erhöht, und wenn Sie die Eingabetaste drücken, um eine neue Zeile zu beginnen, wächst die Höhe.</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  Die TitleWindow-Klasse erweitert das Bedienfeld um eine Schaltfläche zum Schließen und einen Bereich zum Verschieben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TitleWindow">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="inactiveWithControlBar" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  Nicht aktiver Ansichtsstatus bei sichtbarer Steuerleiste.
   </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="inactive" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  Für ein TitleWindow verwendeter nicht aktiver Ansichtsstatus, wenn dieses bzw. alle seine untergeordneten Elemente nicht den Fokus haben.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="closeButton" owner="spark.components:TitleWindow" required="false" var_type="spark.components:Button">
<description>
      Der Skinteil, der das Aussehen des „Schließen“-Symbols (kleines „x“ rechts oben in der Titelleiste des TitleWindow) definiert. Wird es angeklickt, löst das „Schließen“-Symbol ein <codeph>close</codeph>-Ereignis aus.
           <p>Flex schließt das Fenster nicht automatisch. Um das „Schließen“-Symbol zu unterstützen, müssen Sie eine Prozedur für das <codeph>close</codeph>-Ereignis programmieren und TitleWindow von dieser Ereignisprozedur aus schließen.</p>
           <p>Fokus ist für diesen Skinteil deaktiviert.</p>
     </description>
	<shortdesc>
      The skin part that defines the appearance of the 
      close icon (a small x in the upper-right corner of the TitleWindow title bar).</shortdesc></SkinPart><SkinPart name="moveArea" owner="spark.components:TitleWindow" required="false" var_type="flash.display:InteractiveObject">
<description>
      Der Bereich, in dem der Benutzer klicken und ziehen muss, um das Fenster zu verschieben. Standardmäßig ist der Bereich zum Verschieben die Titelleiste des TitleWindow-Containers.
           <p>Um den TitleWindow-Container zu ziehen, klicken Sie auf den Bereich der Titelleiste und halten Sie die Maustaste gedrückt, verschieben Sie dann die Maus. Erstellen Sie eine benutzerdefinierte Skinklasse, um den Verschiebebereich zu ändern.</p>
     </description>
	<shortdesc>
      The area where the user must click and drag to move the window.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:TitleWindow&gt;
    <strong>Events</strong>
    close="<i>No default</i>"
    windowMove="<i>No default</i>"
    windowMoveEnd="<i>No default</i>"
    windowMoveStart="<i>No default</i>"
    windowMoving="<i>No default</i>"
  &lt;/s:TitleWindow&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die TitleWindow-Klasse erweitert das Bedienfeld um eine Schaltfläche zum Schließen und einen Bereich zum Verschieben.
 
  <p>Das TitleWindow ist als Popup-Fenster vorgesehen. Erstellen Sie kein TitleWindow in MXML als Teil einer Anwendung. Stattdessen erstellen Sie normalerweise eine auf der TitleWindow-Klasse basierende benutzerdefinierte MXML-Komponente und verwenden dann die <codeph>PopUpManager.createPopUp()</codeph>-Methode, um die Komponente als Popup einzublenden und die <codeph>PopUpManager.removePopUp()</codeph>-Methode, um die Komponente wieder zu entfernen.</p>
  
  <p>Der TitleWindow-Container weist folgende Merkmale für die Standardgrößen auf:</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Die Höhe reicht aus, um alle untergeordneten Objekte im Inhaltsbereich mit den Standardhöhenwerten oder expliziten Höhenwerten der untergeordneten Objekte aufzunehmen, plus Titelleiste und Rahmen, plus vertikale Lücken zwischen den untergeordneten Objekten, plus oberer und unterer Füllbereich des Containers. Die Breite ist die Standardbreite oder die explizite Breite des breitesten untergeordneten Objekts, je nachdem, welche Breite größer ist, plus linker und rechter Füllbereich am Containerrahmen oder die Breite des Titeltexts.</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.TitleWindowSkin</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext>spark.components.Panel</linktext></link><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext>spark.skins.spark.TitleWindowCloseButtonSkin</linktext></link><link href="" invalidHref="mx.managers.PopUpManager.xml"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer die Maustaste nach dem Ziehen loslässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer die Maustaste nach dem Ziehen loslässt.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><shortdesc>
  Wird ausgelöst, nachdem der Benutzer das Fenster erfolgreich gezogen hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem der Benutzer das Fenster erfolgreich gezogen hat.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer das Fenster zieht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer das Fenster zieht.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer im Verschiebebereich die Maustaste nach dem Klicken gedrückt hält und beginnt, das Fenster zu ziehen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer im Verschiebebereich die Maustaste nach dem Klicken gedrückt hält und beginnt, das Fenster zu ziehen.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Ausgelöst, wenn der Benutzer die Schaltfläche „Schließen“ betätigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Ausgelöst, wenn der Benutzer die Schaltfläche „Schließen“ betätigt.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TabBar"><apiName>TabBar</apiName><shortdesc>
  Die TabBar-Klasse zeigt eine Reihe von identischen Registerkarten an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TabBar">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:TabBar" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Definiert den Radius der linken und rechten oberen Ecke der TabBar-Schaltflächen bei der Standardskin von TabBarButton.
   </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:TabBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TabBar
    <b>Styles</b>
    cornerRadius="4"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die TabBar-Klasse zeigt eine Reihe von identischen Registerkarten an. Es kann jeweils immer nur eine Registerkarte ausgewählt sein; standardmäßig ist dies die erste. Die TabBarSkin-Klasse ordnet die Registerkarten in einer Linie an. Verwenden Sie den TabBar-<codeph>cornerRadius</codeph>-Stil, um den Eckenradius der Registerkarten zu konfigurieren.
 
  <p>Die Registerkartenreihe wird durch die <codeph>dataProvider</codeph>-Eigenschaft festgelegt. Das Aussehen der TabBar wird durch die TabBarSkin-Klasse festgelegt. Das Aussehen der einzelnen Registerkarten wird durch die TabBarSkin-Klasse festgelegt.</p>
   <p>Mit dem TabBar-Steuerelement legen Sie das aktive untergeordnete Element eines ViewStack-Containers fest, wie im folgenden Beispiel beschrieben:</p>
   <p><b>Hinweis:</b> Die listenbasierten Spark-Steuerelemente (die Spark ListBase-Klasse und ihre Unterklassen wie ButtonBar, ComboBox, DropDownList, List und TabBar) unterstützen nicht die Verwendung der BasicLayout-Klasse als Wert der <codeph>layout</codeph>-Eigenschaft. Verwenden Sie BasicLayout nicht für listenbasierte Spark-Steuerelemente.</p>
  
  <pre>
  &lt;s:TabBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
   <p>Der TabBar-Container weist folgende Standardmerkmale auf:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um die Registerkarten anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="TabBarExample.mxml"><swfblock conref="examples/TabBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext>spark.skins.spark.TabBarSkin</linktext></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext>spark.skins.spark.TabBarButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  Die RadioButton-Komponente ermöglicht es dem Benutzer, eine Möglichkeit innerhalb einer Reihe sich gegenseitig ausschließender Möglichkeiten zu wählen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:RadioButton" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:RadioButton" playerVersion="Flash10" theme="mobile" type="String">
<description>
  Richtung des Symbols in Relation zur Beschriftung. Gültige MXML-Werte sind <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> und <codeph>top</codeph>.
 
  <p>In ActionScript können Sie folgende Konstanten verwenden, um diese Eigenschaft festzulegen: <codeph>IconPlacement.RIGHT</codeph>, <codeph>IconPlacement.LEFT</codeph>, <codeph>IconPlacement.BOTTOM</codeph> und <codeph>IconPlacement.TOP</codeph>.</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButton
    <strong>Properties</strong>
    enabled=""
    group="<i>the automatically created default RadioButtonGroup</i>"
    groupName="radioGroup"
    value="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die RadioButton-Komponente ermöglicht es dem Benutzer, eine Möglichkeit innerhalb einer Reihe sich gegenseitig ausschließender Möglichkeiten zu wählen. Eine RadioButtonGroup besteht aus zwei oder mehr RadioButton-Komponenten mit derselben <codeph>groupName</codeph>-Eigenschaft. Das Gruppieren von RadioButton-Instanzen in einer RadioButtonGroup ist optional. In einer Gruppe können Sie beispielsweise eine einzige Ereignisprozedur für eine Gruppe von RadioButtons, anstatt für jeden einzelnen RadioButton festlegen.
 
  <p>Die RadioButton-Gruppe kann auf eine durch das <codeph>&lt;s:RadioButtonGroup></codeph>-Tag erstellte Gruppe verweisen. Benutzer können nur ein Mitglied aus der Gruppe wählen. Durch Auswählen einer nicht ausgewählten Gruppe wird die aktuell ausgewählte RadioButton-Komponente in der Gruppe deaktiviert.</p>
 
  <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
 
  <p>Die RadioButton-Komponente verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Breit genug für die Beschriftung der Komponente.</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>18 Pixel breit und 18 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.RadioButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link><link href="spark.skins.spark.xml#RadioButtonSkin"><linktext>spark.skins.spark.RadioButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RadioButton:enabled:get"><apiName>enabled</apiName><shortdesc>
      Die RadioButton-Komponente wird aktiviert, wenn die RadioButtonGroup und der RadioButton selbst aktiviert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Die RadioButton-Komponente wird aktiviert, wenn die RadioButtonGroup und der RadioButton selbst aktiviert wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      Legt den Namen der Gruppe fest, zu der die RadioButton-Komponente gehört, oder den Wert der ID-Eigenschaft einer RadioButtonGroup-Komponente, wenn das RadioButton-Steuerelement Teil einer durch eine RadioButtonGroup-Komponente festgelegten Gruppe ist. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"radioGroup"
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt den Namen der Gruppe fest, zu dem die RadioButton-Komponente gehört, oder den Wert der <codeph>id</codeph>-Eigenschaft einer RadioButtonGroup-Komponente, wenn das RadioButton-Steuerelement Teil einer durch eine RadioButtonGroup-Komponente festgelegten Gruppe ist. Alle Optionsschalter mit derselben <codeph>groupName</codeph>-Eigenschaft sind in derselben Registerkartengruppe enthalten.
     
      <p>Beim Erstellen von Optionsschaltern, die in einer RadioButtonGroup enthalten sein sollen, wird empfohlen, entweder die <codeph>group</codeph>-Eigenschaft oder die <codeph>groupName</codeph>-Eigenschaft für alle Schaltflächen zu verwenden.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/group"><linktext>group</linktext></link><link href="" invalidHref="mx.manager.xml#IFocusManagerGroup/groupName"><linktext>mx.manager.IFocusManagerGroup.groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      Die RadioButtonGroup-Komponente, zu der dieses RadioButton-Steuerelement gehört.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButtonGroup</apiValueClassifier><apiDefaultValue>the automatically created default RadioButtonGroup
      </apiDefaultValue></apiValueDef><apiDesc>
      Die RadioButtonGroup-Komponente, zu der dieses RadioButton-Steuerelement gehört. Beim Erstellen von RadioButtons, die in einer RadioButtonGroup enthalten sein sollen, verwenden Sie entweder die <codeph>group</codeph>-Eigenschaft oder die <codeph>groupName</codeph>-Eigenschaft für alle Schaltflächen.
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/groupName"><linktext>groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      Optionaler benutzerdefinierter Wert, der mit einer RadioButton-Komponente verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Optionaler benutzerdefinierter Wert, der mit einer RadioButton-Komponente verknüpft ist.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
  Die ButtonBarButton-Klasse definiert den benutzerdefinierten Elementrenderer, der vom ButtonBar-Steuerelement verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:ToggleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ButtonBarButton-Klasse definiert den benutzerdefinierten Elementrenderer, der vom ButtonBar-Steuerelement verwendet wird. Dieser Elementrenderer wird in der ButtonBarSkin-Klasse verwendet, der standardmäßigen Skin der ButtonBar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><adobeApiEvent id="spark.components:ButtonBarButton_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Data-Eigenschaft verändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>data</codeph>-Eigenschaft verändert
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:ButtonBarButton:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ButtonBarButton:allowDeselection:get"><apiName>allowDeselection</apiName><shortdesc>
      Bei „true“ klickt der Benutzer auf eine aktuell ausgewählte Schaltfläche, um deren Auswahl aufzuheben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> klickt der Benutzer auf eine aktuell ausgewählte Schaltfläche, um deren Auswahl aufzuheben. Bei <codeph>false</codeph> muss der Benutzer eine andere Schaltfläche auswählen, um die aktuelle Schaltflächenauswahl aufzuheben.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:data:get"><apiName>data</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:ButtonBarButton:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      Die Indexposition des Elements im Datenprovider der Hostkomponente des Elementrenderers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Die Indexposition des Elements im Datenprovider der Hostkomponente des Elementrenderers.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:label:get"><apiName>label</apiName><shortdesc>
      
      Der String, der im Elementrenderer anzuzeigen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Der String, der im Elementrenderer anzuzeigen ist. 
     
      <p>Die Hostkomponente des Elementrenderers kann mithilfe der <codeph>itemToLabel()</codeph>-Methode das Datenelement in einen String konvertieren, der vom Elementrenderer angezeigt wird. </p>
     
      <p>Für Steuerelemente wie „List“ und „ButtonBar“ können Sie mithilfe der Eigenschaften <codeph>labelField</codeph> und <codeph>labelFunction</codeph> das Feld des Datenelements angeben, das den String enthält. Andernfalls verwendet die Hostkomponente die <codeph>toString()</codeph>-Methode, um das Datenelement in einen String zu konvertieren. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      Enthält „true“, wenn der Elementrenderer im Fokus dargestellt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      Enthält <codeph>true</codeph>, wenn der Elementrenderer im Fokus dargestellt werden kann. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Panel"><apiName>Panel</apiName><shortdesc>
  Die Panel-Klasse definiert einen Container, der eine Titelleiste, eine Beschriftung, einen Rahmen und einen Inhaltsbereich für seine untergeordneten Elemente enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Panel">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabledWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Disabled-Status mit ControlBar des Bedienfelds
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Normal-Status mit ControlBar des Bedienfelds
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Disabled-Status des Bedienfelds
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Normal-Status des Bedienfelds
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Schlagschattens für diese Komponente.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Der Radius der Ecken dieser Komponente.
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Rahmens dieser Komponente.
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Die Farbe des Rahmens dieser Komponente.
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Rahmens für diese Komponente.
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Der Skinteil, der das Aussehen des Steuerleistenbereichs des Containers definiert. Standardmäßig bestimmt die PanelSkin-Klasse, dass der Steuerleistenbereich am unteren Rand des Inhaltsbereichs des Bedienfeldcontainers und mit einem grauen Hintergrund angezeigt wird. 
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      Der Skinteil, der das Aussehen des Titeltexts im Container definiert.
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:Panel
   <strong>Properties</strong>
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    title=""
 
   <strong>Styles</strong>
    borderAlpha="0.5"
    borderColor="0"
    borderVisible="true"
    cornerRadius="0"
    dropShadowVisible="true"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/s:Panel&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Panel-Klasse definiert einen Container, der eine Titelleiste, eine Beschriftung, einen Rahmen und einen Inhaltsbereich für seine untergeordneten Elemente enthält.
   <p>Der Panel-Container weist folgende Standardmerkmale auf:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>131 Pixel breit und 127 Pixel hoch</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="PanelExample.mxml"><swfblock conref="examples/PanelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links><apiConstructor id="spark.components:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Panel:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Der Satz von Komponenten, die im Steuerleistenbereich des Bedienfeldcontainers enthalten sein sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Der Satz von Komponenten, die im Steuerleistenbereich des Bedienfeldcontainers enthalten sein sollen. Die Position und das Aussehen des Steuerleistenbereichs des Bedienfeldcontainers wird von der spark.skins.spark.PanelSkin-Klasse bestimmt. Standardmäßig bestimmt die PanelSkin-Klasse, dass der Steuerleistenbereich am unteren Rand des Inhaltsbereichs des Bedienfeldcontainers und mit einem grauen Hintergrund angezeigt wird. Erstellen Sie eine benutzerdefinierte Skin, um das Standardaussehen der Steuerleiste zu ändern.
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Panel:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      Definiert das Layout des Steuerleistenbereichs des Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert das Layout des Steuerleistenbereichs des Containers.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      Bei „true“ ist die Steuerleiste sichtbar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> ist die Steuerleiste sichtbar. Das Flag hat keine Auswirkung, wenn für die <codeph>controlBarContent</codeph>-Eigenschaft kein Wert festgelegt wurde.
           <p><b>Hinweis:</b> Der Panel-Container überwacht die <codeph>controlBarGroup</codeph>-Eigenschaft nicht. Wenn er durch sonstigen Code unsichtbar gemacht wird, wird der Panel-Container gegebenenfalls nicht korrekt aktualisiert.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:title:get"><apiName>title</apiName><shortdesc>
      Titel oder Beschriftung in der Titelleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Titel oder Beschriftung in der Titelleiste. 
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HGroup"><apiName>HGroup</apiName><shortdesc>
  Der HGroup-Container ist eine Instanz des Group-Containers, die die HorizontalLayout-Klasse verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:HGroup
    <strong>Properties</strong>
    columnWidth="no default"
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount="-1"
    requestedMaxColumnCount="-1"
    requestedMinColumnCount="-1"
    variableColumnWidth"true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der HGroup-Container ist eine Instanz des Group-Containers, die die HorizontalLayout-Klasse verwendet. Ändern Sie die <codeph>layout</codeph>-Eigenschaft nicht. Verwenden Sie stattdessen die Eigenschaften der HGroup-Klasse, um die Merkmale der HorizontalLayout-Klasse zu ändern.
 
  <p>Der HGroup-Container weist folgende Standardmerkmale auf:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HGroupExample.mxml"><swfblock conref="examples/HGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#HorizontalLayout"><linktext>spark.layouts.HorizontalLayout</linktext></link></related-links><apiConstructor id="spark.components:HGroup:HGroup"><apiName>HGroup</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. Initialisiert die <codeph>layout</codeph>-Eigenschaft mit einer Instanz der HorizontalLayout-Klasse.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="spark.layout.HorizontalLayout.xml"><linktext>spark.layout.HorizontalLayout</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:HGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.HorizontalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMaxColumnCount:get"><apiName>requestedMaxColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:variableColumnWidth:get"><apiName>variableColumnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRendererOwner"><apiName>IItemRendererOwner</apiName><shortdesc>
  Die IItemRendererOwner-Schnittstelle definiert den Basissatz von APIs, der von einer Klasse implementiert werden muss, um Elementrenderer zu unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IItemRendererOwner-Schnittstelle definiert den Basissatz von APIs, der von einer Klasse implementiert werden muss, um Elementrenderer zu unterstützen. Eine Klasse, die die IItemRendererOwner-Schnittstelle implementiert, wird als Hostkomponente des Elementrenderers bezeichnet.
  
  <p>Die Klasse, die den Elementrenderer definiert, muss die IItemRenderer-Schnittstelle implementieren.</p> 
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link></related-links><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Gibt den in einem Elementrenderer anzuzeigenden String zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der in einem Elementrenderer anzuzeigende String.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das anzuzeigende Datenelement.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt den in einem Elementrenderer anzuzeigenden String zurück. Der String wird in die <codeph>labelText</codeph>-Eigenschaft des Elementrenderers geschrieben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      Aktualisiert den Renderer zur Wiederverwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Der Elementrenderer.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Die Indexposition der Daten im Datenprovider.
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Das Datenobjekt, das dieser Elementrenderer darstellt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Aktualisiert den Renderer zur Wiederverwendung. Diese Methode bereitet den Elementrenderer auf die Wiederverwendung vor, indem zuerst veraltete Eigenschaften gelöscht werden und er mit neuen Eigenschaften aktualisiert wird.
     
      <p>Am Schluss legt diese Methode die <codeph>data</codeph>-Eigenschaft des Elementrenderers fest.</p>    
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:FormItem"><apiName>FormItem</apiName><shortdesc>
  Der FormItem-Container definiert Folgendes in einem Spark-Formular: Eine einzelne Beschriftung. Eine Sequenzbeschriftung. Ein oder mehrere untergeordnete Steuerelemente oder Container. Hilfeinhalt, der eine Beschreibung des Formularelements oder Anweisungen zum Ausfüllen enthält. Erforderlicher Indikator, wenn ein Formularelement ausgefüllt werden muss. Untergeordnete Elemente können Steuerelemente oder Container sein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="errorIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  Gibt die Bildquelle an, die für den Fehlerindikator zu verwenden ist. Der Standardwert ist „assets/ErrorIndicator.png".
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="requiredIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  Gibt die Bildquelle an, die für den erforderlichen Indikator zu verwenden ist. Der Standardwert ist „assets/RequiredIndicator.png".
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
       Ein Verweis auf das visuelle Element, das diese Beschriftung des FormItem anzeigt.
     </description>
	<shortdesc>
       A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart><SkinPart name="sequenceLabelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      Ein Verweis auf das visuelle Element, das die sequenceLabel des FormItem anzeigt.
     </description>
	<shortdesc>
      A reference to the visual element that displays the FormItem's sequenceLabel.</shortdesc></SkinPart><SkinPart name="helpContentGroup" owner="spark.components:FormItem" required="false" var_type="spark.components:Group">
<description>
      Ein Verweis auf die Gruppe, die die helpContentGroup des FormItem enthält.
     </description>
	<shortdesc>
      A reference to the Group that contains the FormItem's helpContentGroup.</shortdesc></SkinPart><SkinPart name="errorTextDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      Ein Verweis auf das visuelle Element, das die Fehlerstrings des FormItem anzeigt.
     </description>
	<shortdesc>
      A reference to the visual element that display the FormItem's error strings.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormItem&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormItem
    <strong>Properties</strong>
    helpContent="null"
    label=""
    required="false"
    sequenceLabel=""
  
    <strong>Common Styles</strong>
    errorIndicatorSource="assets/ErrorIndicator.png"
    requiredIndicatorSource="assets/RequiredIndicator.png"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der FormItem-Container definiert Folgendes in einem Spark-Formular:
 
  <ul>
    <li>Eine einzelne Beschriftung.</li>
    <li>Eine Sequenzbeschriftung.</li>
    <li>Ein oder mehrere untergeordnete Steuerelemente oder Container.</li>
    <li>Hilfeinhalt, der eine Beschreibung des Formularelements oder Anweisungen zum Ausfüllen enthält.</li>
    <li>Erforderlicher Indikator, wenn ein Formularelement ausgefüllt werden muss.</li>
  </ul>
 
  Untergeordnete Objekte können Steuerelemente oder andere Container sein. Ein einzelner Form-Container kann mehrere FormItem-Container enthalten. Standardmäßig werden alle FormItem-Elemente in einem horizontalen Layout angeordnet, in dem die Beschriftung links und der Hilfeinhalt rechts platziert wird.
 
  </apiDesc><example conref="FormItemExample.mxml"><swfblock conref="examples/FormItemExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormItemSkin"><linktext>spark.skins.spark.FormItemSkin</linktext></link></related-links><apiConstructor id="spark.components:FormItem:FormItem"><apiName>FormItem</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:FormItem:protected:updateErrorTextDisplay"><apiName>updateErrorTextDisplay</apiName><shortdesc>
      Konvertiert elementErrorStrings in einen String und weist diesen String dem errorTextDisplay-Skinteil zur Anzeige zu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Konvertiert <codeph>elementErrorStrings</codeph> in einen String und weist diesen String dem <codeph>errorTextDisplay</codeph>-Skinteil zur Anzeige zu. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:FormItem:elementErrorStrings:get"><apiName>elementErrorStrings</apiName><shortdesc>
      Jedes Vector-Element enthält den Fehlerstring eines Inhaltselements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc>
      Jedes Vector-Element enthält den Fehlerstring eines Inhaltselements. Wenn keine Inhaltselemente ungültig sind, ist der Vektor leer. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:helpContent:get"><apiName>helpContent</apiName><shortdesc> 
      Der Satz von Komponenten, die im Hilfeinhaltsbereich des FormItem enthalten sein sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="helpContentChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Der Satz von Komponenten, die im Hilfeinhaltsbereich des FormItem enthalten sein sollen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:label:get"><apiName>label</apiName><shortdesc>
      Textbeschriftung für FormItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Textbeschriftung für FormItem. Beispielsweise kann ein für die Eingabe einer Adresse verwendetes FormItem die Beschriftung „Adresse“ haben.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:required:get"><apiName>required</apiName><shortdesc>
      Wenn „true“, wird die FormItem-Skin auf den erforderlichen Status gesetzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="requiredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, wird die FormItem-Skin auf den <codeph>required</codeph>-Status gesetzt. Standardmäßig wird in diesem Status ein Indikator dafür angezeigt, dass für die untergeordneten FormItem-Elemente Benutzereingaben erforderlich sind. Wenn <codeph>false</codeph>, wird kein Indikator angezeigt.
     
      <p>Diese Eigenschaft steuert nur den Status der Skin. Sie müssen dem untergeordneten Objekt einen Validator zuweisen, wenn Sie eine Überprüfung der Eingaben verlangen.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:sequenceLabel:get"><apiName>sequenceLabel</apiName><shortdesc>
      Die Anzahl der Formularelemente im Formular.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sequenceLabelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Anzahl der Formularelemente im Formular. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
  Die SkinnableContainer-Klasse ist die Basisklasse für die skinfähigen Container mit einem visuellen Inhalt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  Alpha von Textschatten.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  Farbe von Textschatten.
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Die Hintergrundfarbe einer Komponente.
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alphaebene des Inhaltshintergrunds für diese Komponente. Die zulässigen Werte liegen zwischen 0,0 und 1,0. 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert, jedoch nicht im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente deaktiviert ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert und im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.5" type="Object">
<description>
  Legt den beim Blocksatz verwendeten Abstand zwischen Wörtern fest. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Blendet Leerraum aus oder behält ihn bei, wenn Text in einem TextFlow importiert wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Bestimmt die Gradzahl zum Drehen dieses Texts.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Offset der ersten Textzeile links vom Container.
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textIndent“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Gibt die Tabulatoren an, die dem Absatz zugewiesen sind.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den der obere Absatzrand eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der vor dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der hinter dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den die obere Absatzrandkante eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Darstellung von Einträgen in Listen.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Platzierung von Markern relativ zum Listeneintrag.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Legt einen automatischen Einzug für den Beginn von Listenrändern fest, wenn der Auffüllwert der Liste auf dieser Seite <codeph>auto</codeph> ist.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Gibt das Zeilenabstandsmodell an, das eine Kombination aus Zeilenabstandsbasis und Zeilenabstandsrichtung ist.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Gibt die Grundlinienposition der ersten Linie im Container an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Steuert, wie der Text bei einem Float umbricht.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Steuert, an welcher Stelle Zeilen umbrochen werden können, wenn umbrochener Text in mehrere Zeilen umbrochen wird. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Gibt eine vertikale oder horizontale Abfolge der Zeilenplatzierung an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="contentGroup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      Ein optionales Skinteil, das die Gruppe definiert, der die untergeordneten Content-Elemente hinzugefügt und in der sie angeordnet werden.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the Group where the content 
      children get pushed into and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableContainer
    <strong>Properties</strong>
    autoLayout="true"
    creationPolicy="auto"
    layout="BasicLayout"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors=""
    backgroundAlpha="1.0"
    backgroundColor="0xFFFFFF"
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="0xE8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
   
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SkinnableContainer-Klasse ist die Basisklasse für die skinfähigen Container mit einem visuellen Inhalt. Der SkinnableContainer-Container kann als untergeordnete Elemente alle Komponenten aufnehmen, die die IVisualElement-Schnittstelle implementieren. Alle Spark- und Halo-Komponenten sowie die GraphicElement-Klasse implementieren die IVisualElement-Schnittstelle. Dies bedeutet, dass der Container Grafikklassen wie Rect und Ellipse als untergeordnete Elemente verwenden kann.
 
  <p>Um die Leistung zu verbessern und die Anwendungsgröße zu minimieren, können Sie den Group-Container verwenden. Dem Group-Container kann keine Skin zugewiesen werden.</p>
 
  <p>Der SkinnableContainer-Container weist folgende Standardmerkmale auf:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableContainerExample.mxml"><swfblock conref="examples/SkinnableContainerExample.swf"/></example><example conref="MyBorderSkin.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>Gruppe</linktext></link><link href="spark.skins.spark.xml#SkinnableContainerSkin"><linktext>spark.skins.spark.SkinnableContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  Wird ausgelöst, wenn ein visuelles Element aus dem Inhalt entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein visuelles Element aus dem Inhalt entfernt wird. <codeph>event.element</codeph> ist das visuelle Element, das entfernt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  Wird ausgelöst, wenn ein visuelles Element zu einem Inhalt hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein visuelles Element zu einem Inhalt hinzugefügt wird. <codeph>event.element</codeph> ist das visuelle Element, das hinzugefügt wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  Wird ausgelöst, nachdem der Inhalt für diese Komponente erstellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem der Inhalt für diese Komponente erstellt wurde. Mit der verzögerten Instanziierung kann der Inhalt für eine Komponente lange nach dem Erstellen einer Komponente erstellt werden.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableContainer:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Erstellen Sie untergeordnete Elemente des Inhalts, wenn die creationPolicy-Richtlinie ungleich „none“ ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellen Sie untergeordnete Elemente des Inhalts, wenn die <codeph>creationPolicy</codeph>-Eigenschaft ungleich <codeph>none</codeph> ist.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Erstellen Sie den Inhalt für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellen Sie den Inhalt für diese Komponente. Wenn die <codeph>creationPolicy</codeph>-Eigenschaft auf <codeph>auto</codeph> oder <codeph>all</codeph> eingestellt ist, wird diese Funktion automatisch durch die Flex-Architektur aufgerufen. Wenn die <codeph>creationPolicy</codeph>-Eigenschaft auf <codeph>none</codeph> eingestellt ist, rufen Sie diese Methode auf, um den Inhalt zu initialisieren.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      
      Wird aufgerufen, wenn ein Skinteil hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Die Instanz des Teils.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Wird aufgerufen, wenn ein Skinteil hinzugefügt wird. Sie können diese Methode nicht direkt aufrufen. Für statische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>attachSkin()</codeph>-Methode aufgerufen wird. Für dynamische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>createDynamicPartInstance()</codeph>-Methode aufgerufen wird. 
     
      <p>Überschreiben Sie diese Funktion, um dem Teil ein bestimmtes Verhalten zuzuweisen. Wenn Sie das Verhalten in Bezug auf einen Skinteil überschreiben möchten, das von einer Basisklasse vererbt wurde, rufen Sie nicht die <codeph>super.partAdded()</codeph>-Methode auf. Andernfalls sollten Sie immer die <codeph>super.partAdded()</codeph>-Methode aufrufen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      Wird aufgerufen, wenn eine Instanz eines Skinteils entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>Der Name des Teils.
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>Die Instanz des Teils.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Wird aufgerufen, wenn eine Instanz eines Skinteils entfernt wird. Sie können diese Methode nicht direkt aufrufen. Für statische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>detachSkin()</codeph>-Methode aufgerufen wird. Für dynamische Teile wird sie in Flex automatisch aufgerufen, wenn die <codeph>removeDynamicPartInstance()</codeph>-Methode aufgerufen wird. 
     
      <p>Überschreiben Sie diese Funktion, um das Verhalten vom Teil zu entfernen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SkinnableContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      Enthält „true“, wenn zurückgestellter Inhalt erstellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn zurückgestellter Inhalt erstellt wurde.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContentFactory:set"><apiName>mxmlContentFactory</apiName><shortdesc>
      Ein Factory-Objekt, das den Ausgangswert für die content-Eigenschaft erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IDeferredInstance"/></apiValueDef><apiDesc>
      Ein Factory-Objekt, das den Ausgangswert für die <codeph>content</codeph>-Eigenschaft erstellt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc conref="spark.components.Group#mxmlContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc conref="spark.components.Group#mxmlContent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichText"><apiName>RichText</apiName><shortdesc>
  RichText ist eine elementare UIComponent, die es ermöglicht, eine oder mehrere Zeilen von Text im Rich Text-Format sowie eingebettete Bilder anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style inherit="no" name="columnWidth" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Spaltenbreite in Pixeln. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.columnWidth.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Zwischenraum in Pixeln, der zwischen den Spalten belassen werden soll.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.columnGap.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Anzahl der Textspalten.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.columnCount.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichText" playerVersion="Flash10.5" type="Object">
<description>
  Legt den beim Blocksatz verwendeten Abstand zwischen Wörtern fest. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Blendet Leerraum aus oder behält ihn bei, wenn Text in einem TextFlow importiert wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Bestimmt die Gradzahl zum Drehen dieses Texts.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Offset der ersten Textzeile links vom Container.
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textIndent“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Gibt die Tabulatoren an, die dem Absatz zugewiesen sind.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den der obere Absatzrand eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der vor dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der hinter dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den die obere Absatzrandkante eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Darstellung von Einträgen in Listen.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Platzierung von Markern relativ zum Listeneintrag.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Legt einen automatischen Einzug für den Beginn von Listenrändern fest, wenn der Auffüllwert der Liste auf dieser Seite <codeph>auto</codeph> ist.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Gibt das Zeilenabstandsmodell an, das eine Kombination aus Zeilenabstandsbasis und Zeilenabstandsrichtung ist.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Gibt die Grundlinienposition der ersten Linie im Container an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Steuert, wie der Text bei einem Float umbricht.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Steuert, an welcher Stelle Zeilen umbrochen werden können, wenn umbrochener Text in mehrere Zeilen umbrochen wird. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Gibt eine vertikale oder horizontale Abfolge der Zeilenplatzierung an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Vertikale Ausrichtung oder Abstände.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.verticalAlign.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Der obere Versatz in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Der rechte Einzug in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingRight.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Der linke Einzug in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paddingLeft.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Der untere Versatz in Pixeln.
 
  <p><b>Spark-Design: siehe lashx.textLayout.formats.ITextLayoutFormat.paddingBottom.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Steuert den Zeilenumbruch innerhalb des Containers.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
 
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichText" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichText" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RichText&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RichText
    <strong>Properties</strong>
    fontContext="<i>IFlexModuleFactory</i>"
    luminosityClip="false"
    luminosityInvert="false"
    maskType="MaskType.CLIP"
    textFlow="<i>TextFlow</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichText ist eine elementare UIComponent, die es ermöglicht, eine oder mehrere Zeilen von Text im Rich Text-Format sowie eingebettete Bilder anzuzeigen.
 
  <p>Aus Gründen der Leistungsfähigkeit werden Bildlauf, Auswahl, Bearbeitung, klickbare Hyperlinks und von URLs geladene Bilder nicht unterstützt. Wenn Sie diese Funktionen benutzen möchten, verwenden Sie die RichEditableText-Klasse.</p>
 
  <p>RichText verwendet die Text Layout Framework (TLF)-Bibliothek, welche wiederum auf der Flash Text Engine (FTE) in Flash Player 10 beruht. Diese Kombination ermöglicht die Bearbeitung von Rich Text-Layouts mit hochwertiger internationaler Typographie.</p>
 
  <p>Die Spark-Architektur bietet drei grundlegende Textsteuerelemente: Label, RichText und RichEditableText. Label ist das schnellste und einfachste Steuerelement, da es nicht TLF, sondern FTE verwendet. Es hat eingeschränkte Funktionen: kein Rich Text, keine Bildläufe, keine Auswahl und keine Bearbeitung. Mit RichText können Sie Rich Text mit komplexem Layout anzeigen. Das Steuerelement ist dennoch nicht interaktiv. RichEditableText ist das umfangreichste Steuerelement und bietet die meisten Möglichkeiten von TLF. Es empfiehlt sich, das Textsteuerelement mit dem geringsten Umfang, der Ihre Anforderungen noch erfüllt, zu verwenden.</p>
 
  <p>RichText ähnelt dem MX-Steuerelement mx.controls.Text. Das Textsteuerelement verwendet nicht TLF, sondern die ältere TextField-Klasse zum Anzeigen von Text.</p>
 
  <p>Die wichtigsten Unterschiede zwischen RichText und Text sind die folgenden:
  <ul>
    <li>Im Vergleich mit Text bietet RichText bessere Typografie, bessere Unterstützung für Sprachen und besseres Textlayout.</li>
    <li>RichText verfügt über ein objektorientiertes Modell zur Anzeige, Text nicht.</li>
    <li>Text ist wählbar, RichText unterstützt die Auswahl nicht.</li>
  </ul></p>
 
  <p>Bei RichText kommt das objektorientierte TLF-Modell von Rich Text zum Einsatz. Hierbei werden Textlayoutelemente wie Bereiche, Absätze, Spannen und Bilder zur Laufzeit durch ActionScript-Objekte dargestellt, welche programmgesteuert verwendet und bearbeitet werden können. Das zentrale Objekt in TLF zur Darstellung von Rich Text ist ein TextFlow. Sie geben also an, was Rich Text anzeigen soll, indem Sie die <codeph>textFlow</codeph>-Eigenschaft als TextFlow-Instanz einstellen. (In der Beschreibung der <codeph>textFlow</codeph>-Eigenschaft finden Sie Informationen zur Erstellung.) Sie können auch die von TextBase stammende <codeph>text</codeph>-Eigenschaft verwenden. Wenn Sie den Funktionsumfang von TextFlow nicht benötigen, empfiehlt es sich unter Umständen, stattdessen Label zu verwenden.</p>
 
  <p>Beim Kompilieren können Sie in TLF-Markup-Tags das RichText-Tag einfügen. Gehen Sie dazu wie im folgenden Beispiel vor:
  <pre>
  &lt;s:RichText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichText>
  </pre>
  In diesem Beispiel legt der MXML-Compiler die <codeph>content</codeph>-Eigenschaft fest, wodurch automatisch ein TextFlow-Objekt aufgrund der angegebenen FlowElements erstellt wird.</p>
 
  <p>Die Standardtextformatierung wird mithilfe von CSS-Stilen wie beispielsweise <codeph>fontFamily</codeph> und <codeph>fontSize</codeph> bestimmt. Formatierungsinformationen innerhalb des TextFlow-Objekts führen zum Überschreiben der Standardformatierung, die von den CSS-Stilen bereitgestellt wird.</p>
 
  <p>Sie können den Abstand zwischen den Zeilen mit dem <codeph>lineHeight</codeph>-Stil steuern. Den Abstand zwischen Absätzen steuern Sie mit den <codeph>paragraphSpaceBefore</codeph>- und <codeph>paragraphSpaceAfter</codeph>-Stilen. Mit den <codeph>textAlign</codeph>- und <codeph>textAlignLast</codeph>-Stilen richten Sie Text aus. Mit den <codeph>paddingLeft</codeph>-, <codeph>paddingTop</codeph>-, <codeph>paddingRight</codeph>- und <codeph>paddingBottom</codeph>-Stilen können Sie Text von den Kanten der Komponente aus einrücken.</p>
 
  <p>Wenn Sie keine Breite für RichText angeben, richtet sich die Breite der Beschriftung nach der Länge der längsten Zeile, die durch ausdrücklichen Zeilenumbruch bestimmt wird.</p>
 
  <p>Wenn Sie eine Breite definieren, wird der Text am rechten Rand der Komponente umbrochen. Wenn mehr Text vorhanden ist als in den Anzeigebereich passt, wird der Text abgeschnitten. Wenn Sie den <codeph>lineBreak</codeph>-Stil auf <codeph>explicit</codeph> setzen, beginnen neue Zeilen ausschließlich bei ausdrücklich definierten Zeilenumbrüchen, wie beispielsweise bei der Verwendung von CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) oder CR+LF (<codeph>\r\n</codeph>) in <codeph>text</codeph> oder wenn Sie <codeph>&lt;p></codeph> und <codeph>&lt;br/></codeph> in TLF-Markup verwenden. In diesem Fall werden Zeilen gekürzt, die breiter sind als das Steuerelement.</p>
 
  <p>Wenn der vorhandene Text die verfügbare Anzeigegröße überschreitet, kann RichText den Text für Sie kürzen. Beim Kürzen von Text wird überlanger Text durch Kürzungszeichen ersetzt, wie z. B. „...“. Siehe die geerbten Eigenschaften <codeph>maxDisplayedLines</codeph> und <codeph>isTruncated</codeph>.</p>
 
  <p>Standardmäßig hat RichText keinen Hintergrund. Sie können jedoch mithilfe der <codeph>backgroundColor</codeph>- und <codeph>backgroundAlpha</codeph>-Stile einen zeichnen. Rahmen werden nicht unterstützt. Wenn Sie einen Rahmen oder einen komplexen Hintergrund benötigen, sollten Sie ein separates grafisches Element wie beispielsweise „Rect“ hinter dem RichText verwenden.</p>
 
  <p>Da RichText TLF verwendet, können Sie Texte anzeigen, die sowohl von links nach rechts (z. B. Französisch) als auch von rechts nach links (z. B. Arabisch) verlaufen. Auch die Anzeige von bidirektionalem Text wird unterstützt. Sie können also einen Satz auf Französisch in einem arabischen Text anzeigen. Läuft der Text vorwiegend von rechts nach links, stellen Sie den <codeph>direction</codeph>-Stil auf <codeph>rtl</codeph> ein. Der <codeph>textAlign</codeph>-Stil ist standardmäßig <codeph>"start"</codeph>, sodass der Text linksbündig ist, wenn <codeph>direction</codeph> <codeph>ltr</codeph> ist, und rechtsbündig, wenn <codeph>direction</codeph> <codeph>rtl</codeph> ist. Setzen Sie <codeph>textAlign</codeph> auf <codeph>end</codeph>, um die umgekehrte Ausrichtung zu verwenden.</p>
 
  <p>RichText verwendet die StringTextFlowFactory- und TextFlowTextLineFactory-Klassen von TLF, um ein oder mehrere TextLine-Objekte zu erstellen und den Text statisch anzuzeigen. Aus Gründen der Leistungsfähigkeit enthalten dessen TextLines keine Informationen über einzelne Glyphen. Weitere Informationen finden Sie unter der TextLineValidity-Klasse.</p>
 
  <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
  
  </apiDesc><example conref="RichTextExample.mxml"><swfblock conref="examples/RichTextExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="flash.text.engine.TextLineValidity.xml"><linktext>flash.text.engine.TextLineValidity</linktext></link></related-links><apiConstructor id="spark.components:RichText:RichText"><apiName>RichText</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RichText:content:get"><apiName>content</apiName><shortdesc>
      Diese Eigenschaft ist für die Verwendung in MXML bei der Kompilierung vorgesehen. Um Rich Text-Inhalt zur Laufzeit abzurufen oder einzustellen, verwenden Sie stattdessen die textFlow-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Diese Eigenschaft ist für die Verwendung in MXML bei der Kompilierung vorgesehen. Um Rich Text-Inhalt zur Laufzeit abzurufen oder einzustellen, verwenden Sie stattdessen die <codeph>textFlow</codeph>-Eigenschaft.
     
      <p>Die <codeph>content</codeph>-Eigenschaft ist die Standardeigenschaft für RichText, sodass Sie MXML-Code wie im folgenden Beispiel schreiben können:
      <pre>
      &lt;s:RichText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichText>
      </pre>
      Damit können Sie den String und das SpanElement, die Sie als Inhalt angeben, zur Erstellung eines TextFlows nutzen.</p>
     
      <p>Diese Eigenschaft hat den Typ „Object“, da Sie sie als String, FlowElement oder ein Array von Strings und FlowElements festlegen können. Im obigen Beispiel geben Sie an, dass der Inhalt ein Array mit zwei Elementen ist. Das erste Element ist der String „Hello“ und das zweite Element ist ein SpanElement mit dem Text „World“ in Fettdruck.</p>
     
      <p>Unabhängig davon, wie Sie den Inhalt angeben, wird er in TextFlow konvertiert, und wenn Sie diese Eigenschaft abrufen, erhalten Sie den resultierenden TextFlow.</p>
     
      <p>Wenn Sie Rich Text-Inhalte zur Laufzeit abrufen und einstellen möchten, empfiehlt Adobe, die <codeph>textFlow</codeph>-Eigenschaft zu verwenden, da ihr Typ ausdrücklich als TextFlow statt als Objekt festgelegt ist. Ein TextFlow ist die standardmäßige visuelle Darstellungsmethode von Rich Text-Inhalten im Text Layout Framework.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      Eine Eigenschaft, die steuert, ob die Luminanzmaske den maskierten Inhalt beschneidet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Eigenschaft, die steuert, ob die Luminanzmaske den maskierten Inhalt beschneidet. Diese Eigenschaft kann sich nur auswirken, wenn auf das Grafikelement eine Maske des Typs <codeph>MaskType.LUMINOSITY</codeph> angewendet wird.  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      Eine Eigenschaft, die die Berechnung des RGB-Farbwerts eines Grafikelements, das durch eine Luminanzmaske maskiert wird, steuert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Eigenschaft, die die Berechnung des RGB-Farbwerts eines Grafikelements, das durch eine Luminanzmaske maskiert wird, steuert. Bei „true“ wird der RGB-Farbwert der Pixel des Quellinhalts umgekehrt und mit dem entsprechenden Bereich der Maske multipliziert. Bei „false“ wird der RGB-Farbwert der Pixel des Quellinhalts direkt verwendet. 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:maskType:get"><apiName>maskType</apiName><shortdesc>
      Der maskType definiert, wie die Maske auf die Komponente angewendet wird. Mögliche Werte sind MaskType.CLIP, MaskType.ALPHA und MaskType.LUMINOSITY. Schnittmasken Beim Maskieren im Schnittmodus wird die Schnittmaske auf 1 Bit reduziert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>Der maskType definiert, wie die Maske auf die Komponente angewendet wird.</p> 
     
      <p>Mögliche Werte sind <codeph>MaskType.CLIP</codeph>, <codeph>MaskType.ALPHA</codeph> und <codeph>MaskType.LUMINOSITY</codeph>.</p>  
     
      <p><b>Schnittmasken</b></p>
     
      <p>Beim Maskieren im Schnittmodus wird die Schnittmaske auf 1 Bit reduziert. Das bedeutet, dass die Maske die Deckkraft eines Pixels des Quellinhalts nicht beeinflusst. Entweder bleibt der Wert unverändert, wenn das entsprechende Pixel der Maske einen Alphawert ungleich null hat, oder es wird voll transparent, wenn der Wert des Maskenpixels einen Alphawert von null hat.</p>
     
      <p>Wenn Sie Schnittmasken verwenden, werden nur die tatsächlichen, durch die Maske definierten Pfad- und Formvektoren sowie Füllungen verwendet, um die Auswirkung auf den Quellinhalt zu bestimmen. Striche und Bitmapfilter, die für die Maske definiert wurden, werden ignoriert. Jeder in der Maske gefüllte Bereich gilt als gefüllt und gibt den Quellinhalt wieder. Typ und Parameter der Füllung sind nicht relevant. Eine durchgehende Farbfüllung, Verlaufsfläche oder Bitmapfüllung einer Maske gibt stets den darunter liegenden Quellinhalt wieder, unabhängig von den Alphawerten der Maskenfüllung.</p>
      
      <p>BitmapGraphics werden bei Verwendung in einer Schnittmaske als mit einer Bitmap gefüllte Rechtecke betrachtet. Folglich ist der Alphakanal der Quellbitmap nicht relevant, wenn er Teil einer Maske ist. Die Bitmap wirkt sich auf die Maske genauso aus wie ein Rechteck mit durchgehende Farbfüllung entsprechender Abmessungen.</p>
     
      <p><b>Alphamasken</b></p>
     
      <p>Im Alphamodus wird die Deckkraft eines jeden Pixels des Quellinhalts mit der Deckkraft des entsprechenden Bereichs der Maske multipliziert. D. h., ein Pixel des Quellinhalts mit einer Deckkraft von 1, das mit einem Bereich mit der Deckkraft 5 maskiert ist, hat im Ergebnis eine Deckkraft von 5. Ein Quellpixel mit einer Deckkraft von 0,8, das mit einem Bereich mit der Deckkraft 0,5 maskiert ist, hat im Ergebnis eine Deckkraft von 0,4.</p>
     
      <p>Konzeptionell entspricht die Verwendung von Alphamasken der Wiedergabe des transformierten Masken- und Quellinhalts auf separaten RGBA-Oberflächen und der Multiplikation des Alphakanals des Maskeninhalts in den Alphakanal des Quellinhalts. Der gesamte Maskeninhalt wird auf der Oberfläche wiedergegeben, bevor er auf der Oberfläche des Quellinhalts zusammengesetzt wird. Dies führt dazu, dass alle FXG-Merkmale wie Striche, Bitmapfilter und Füllungsdeckkraft sich auf den endgültigen zusammengesetzten Inhalt auswirken.</p>
     
      <p>Im Alphamodus wird der Alphakanal der Bitmapdaten wie üblich im Alphakanal der Maske berücksichtigt und wirkt sich auf den am Ende wiedergegebenen Inhalt aus. Dies gilt sowohl für BitmapGraphics als auch für Bitmap-gefüllte Formen und Pfade.</p>
     
      <p><b>Luminanzmasken</b></p>
     
      <p>Eine Luminanzmaske, manchmal digitale Maske genannt, funktioniert ganz ähnlich wie eine Alphamaske, außer dass sowohl die Deckkraft als auch der RGB-Farbwert der Pixel des Quellinhalts mit der Deckkraft und dem RGB-Farbwert des entsprechenden Bereichs der Maske multipliziert wird.</p>
     
      <p>Konzeptionell entspricht die Verwendung von Luminanzmasken der Wiedergabe des transformierten Masken- und Quellinhalts auf separaten RGBA-Oberflächen und der Multiplikation des Alphakanals und des RGB-Farbwerts des Maskeninhalts in den Alphakanal und RGB-Farbwert des Quellinhalts. Der gesamte Maskeninhalt wird auf der Oberfläche wiedergegeben, bevor er auf der Oberfläche des Quellinhalts zusammengesetzt wird. Dies führt dazu, dass alle FXG-Merkmale wie Striche, Bitmapfilter und Füllungsdeckkraft sich auf den endgültigen zusammengesetzten Inhalt auswirken.</p>
     
      <p>Luminanzmasken stehen nicht originär in Flash zur Verfügung, sondern in Tools wie Adobe Illustrator und Adobe Photoshop. Um bei Inhalten, die in Flash wiedergegeben werden, die visuelle Wirkung einer Luminanzmaske zu erzielen, instanziieren Grafikelemente, die eine Luminanzmaske angeben, einen Shaderfilter, der das Aussehen einer Luminanzmaske in Adobe Creative Suite-Tools imitiert.</p>
     
      <p>Von Luminanzmasken maskierte Objekte können Eigenschaften zur Steuerung der RGB-Farbwerte und der Beschneidung der Maske festlegen. Weitere Informationen finden Sie bei den Attributen luminosityInvert und luminosityClip.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      Der TextFlow, der den Rich Text darstellt, der von dieser Komponente angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      Der TextFlow, der den Rich Text darstellt, der von dieser Komponente angezeigt wird.
     
      <p>Ein TextFlow ist die wichtigste Klasse im Text Layout Framework (TLF). Es handelt sich um den Stamm einer Struktur von FlowElements, die Rich Text-Inhalt darstellen.</p>
     
      <p>Normalerweise erstellen Sie einen TextFlow mithilfe von TLF-Markup unter Verwendung der <codeph>TextFlowUtil.importFromString()</codeph>- oder <codeph>TextFlowUtil.importFromXML()</codeph>-Methoden. Sie können auch die TextConverter-Klasse von TLF verwenden (mit der eine HTML-Untergruppe importiert werden kann) oder einen TextFlow erstellen, indem Sie Methoden wie <codeph>addChild()</codeph> auf TextFlow anwenden.</p>
     
      <p>Das Einstellen dieser Eigenschaft wirkt sich auf die <codeph>text</codeph>-Eigenschaft aus und umgekehrt.</p>
     
      <p>Wenn Sie den <codeph>textFlow</codeph> einstellen und den <codeph>text</codeph> abrufen, wird der Text der einzelnen Abschnitte jeweils durch einen LF (<codeph>\n</codeph>) voneinander getrennt.</p>
     
      <p>Wenn Sie den <codeph>text</codeph> als String festlegen, wie beispielsweise <codeph>"Hello World"</codeph>, und den <codeph>textFlow</codeph> abrufen, wird dies ein TextFlow, der ein einzelnes ParagraphElement enthält, das ein einzelnes SpanElement hat.</p>
     
      <p>Wenn der Text ausdrücklich definierte Zeilenumbrüche enthält, wie beispielsweise CR (<codeph>\r</codeph>), LF (<codeph>\n</codeph>) oder CR+LF (<codeph>\r\n</codeph>), wird der Inhalt auf einen TextFlow mit mehreren Absätzen mit jeweils einem span eingestellt.</p>
     
      <p>Um ein TextFlow-Objekt in TLF-Markup zu konvertieren, verwenden Sie das von der <codeph>TextFlowUtil.export()</codeph>-Methode zurückgegebene Markup.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
  Die SkinnableDataContainer-Klasse ist die Basisklasse für Datenelemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="focusThickness" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  In Pixeln angegebene Stärke des Fokusrechteckrands.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Farbe des Fokusrings, wenn eine Komponente im Fokus ist.
 
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Fokusrings dieser Komponente.
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataGroup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" required="false" var_type="spark.components:DataGroup">
<description>
      Ein optionales Skinteil, das die DataGroup in der Skinklasse definiert, der die Datenelemente hinzugefügt und in der sie gerendert sowie angeordnet werden.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the DataGroup in the skin class 
      where data items get pushed into, rendered, and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableDataContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableDataContainer
    <strong>Properties</strong>
    autoLayout="true"
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    layout="VerticalLayout"
    typicalItem="null"
  
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontal_stem"
    color="0"
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    focusAlpha="0.55"
    focusColor=""
    focusThickness="2"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textJustify="inter_word"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die SkinnableDataContainer-Klasse ist die Basisklasse für Datenelemente. Die SkinnableDataContainer-Klasse konvertiert Datenelemente in visuelle Elemente für die Anzeige. Obwohl dieser Container visuelle Elemente enthalten kann, sind oft nur untergeordnete Datenelemente enthalten.
 
  <p>Die SkinnableDataContainer-Klasse verwendet untergeordnete Datenelemente oder visuelle Elemente, die die IVisualElement-Schnittstelle implementieren und DisplayObjects sind. Datenelemente können einfache Datenelemente wie String- und Number-Objekte und komplexere Datenelemente wie Object- und XMLNode-Objekte sein. Obwohl diese Container visuelle Elemente enthalten können, sind oft nur untergeordnete Datenelemente enthalten.</p>
 
  <p>Ein Elementrenderer definiert die visuelle Darstellung des Datenelements im Container. Der Elementrenderer konvertiert das Datenelement in ein Format, das vom Container angezeigt werden kann. Sie müssen einen Elementrenderer an einen SkinnableDataContainer übergeben, um die Datenelemente ordnungsgemäß zu rendern.</p>
 
  <p>Wenn Sie einen Container von Datenelementen, aber keine Skin benötigen, ist die Verwendung von einer DataGroup (für die keine Skins möglich sind) zu empfehlen, um die Leistung und Anwendungsgröße zu verbessern.</p>
 
  <p>Der SkinnableDataContainer-Container weist folgende Standardmerkmale auf:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableDataContainerExample.mxml"><swfblock conref="examples/SkinnableDataContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.components.xml#DataGroup"><linktext>DataGroup</linktext></link><link href="spark.skins.spark.xml#SkinnableDataContainerSkin"><linktext>spark.skins.spark.SkinnableDataContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  Wird ausgelöst, wenn ein Renderer aus dem Container entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Renderer aus dem Container entfernt wird. Die <codeph>event.renderer</codeph>-Eigenschaft enthält den Renderer, der entfernt wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  Wird ausgelöst, wenn ein Renderer zum Container hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Renderer zum Container hinzugefügt wird. Die <codeph>event.renderer</codeph>-Eigenschaft enthält den hinzugefügten Renderer.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableDataContainer:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableDataContainer:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Bei einem angegebenen Datenelement wird die Stringdarstellung des Datenelements für einen anzuzeigenden Elementrenderer zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Stringdarstellung des Datenelements.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Datenelement.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bei einem angegebenen Datenelement wird die Stringdarstellung des Datenelements für einen anzuzeigenden Elementrenderer zurückgegeben. Diese Methode verwendet die <codeph>toString()</codeph>-Methode des Datenelements, um es in eine Stringdarstellung zu konvertieren. Ein Null-Datenelement gibt einen leeren String zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableDataContainer:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      Aktualisiert einen Elementrenderer zur Verwendung oder Wiederverwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Der aktualisierte Renderer.. 
      
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des Datenelements im Datenprovider. 
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Das Datenobjekt, das dieser Elementrenderer darstellt. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Aktualisiert einen Elementrenderer zur Verwendung oder Wiederverwendung. Wenn ein Elementrenderer erstellt oder infolge einer Virtualisierung recycelt wird, kann diese SkinnableDataContainer-Instanz die <codeph>label</codeph>-Eigenschaft und <codeph>owner</codeph>-Eigenschaft des Elementrenderers einstellen. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableDataContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnableDataContainer/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#SkinnableDataContainer/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc conref="spark.components.DataGroup#itemRendererFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRendererFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.DataGroup#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRenderer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>VerticalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.DataGroup#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.components.DataGroup#typicalItem">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Scroller"><apiName>Scroller</apiName><shortdesc>
  Die Scroller-Komponente zeigt eine einzige bildlauffähige Komponente an, die als Viewport bezeichnet wird, sowie eine horizontale und eine vertikale Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="viewport"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt an, unter welchen Bedingungen die vertikale Bildlaufleiste angezeigt wird.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> („on“) – Die Bildlaufleiste wird immer angezeigt.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> („off“) – Die Bildlaufleiste wird niemals angezeigt. Der Viewport kann immer noch programmgesteuert durch Festlegen der verticalScrollPosition-Eigenschaft durchlaufen werden.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> („auto“) – Die Bildlaufleiste wird angezeigt, wenn die contentHeight des Viewports größer als dessen Höhe ist.
  </li>
  </ul>
 
  <p>
  Die Bildlaufrichtlinie wirkt sich auf die gemessene Größe der Scroller-Komponente aus.
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:Scroller" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveScrolling" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description>
  Ein Proxy für den <codeph>liveDragging</codeph>-Stil der von der Scroller-Komponente verwendeten Bildlaufleisten.   
 
  <p>Wenn für diesen Stil <codeph>true</codeph> festgelegt ist, werden die <codeph>liveDragging</codeph>-Stile auf <codeph>true</codeph> gesetzt (Standardeinstellung). Das bedeutet, dass die Bildlaufposition des Viewports beim Bewegen einer Bildlaufminiatur sofort aktualisiert wird. Wenn für diesen Stil <codeph>false</codeph> festgelegt ist, werden die <codeph>liveDragging</codeph>-Stile auf <codeph>false</codeph> gesetzt. Das bedeutet, dass die Bildlaufposition des Viewports beim bewegen der Bildlaufminiatur nur aktualisiert wird, wenn die Maustaste losgelassen wird.</p>
 
  <p>Die Einstellung dieses Stils auf <codeph>false</codeph> kann sehr hilfreich sein, wenn das Aktualisieren der Viewportansicht so aufwendig ist, dass „liveDragging“ schlecht funktioniert.</p> 
  
  <p>Standardmäßig ist dieser Stil <codeph>undefiniert</codeph>, das heißt, dass die <codeph>liveDragging</codeph>-Stile der Bildlaufleiste nicht modifiziert sind.</p>
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt an, unter welchen Bedingungen die horizontale Bildlaufleiste angezeigt wird.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> („on“) – Die Bildlaufleiste wird immer angezeigt.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> („off“) – Die Bildlaufleiste wird niemals angezeigt. Der Viewport kann immer noch programmgesteuert durch Festlegen der horizontalScrollPosition-Eigenschaft durchlaufen werden.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> („auto“) – Die Bildlaufleiste wird angezeigt, wenn die contentWidth des Viewports größer als dessen Breite ist.
  </li>
  </ul>
 
  <p>
  Die Bildlaufrichtlinie wirkt sich auf die gemessene Größe der Scroller-Komponente aus.
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert, jedoch nicht im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente deaktiviert ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Die Farbe von Text, wenn die Komponente aktiviert und im Fokus ist.
  
  <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:Scroller" playerVersion="Flash10.5" type="Object">
<description>
  Legt den beim Blocksatz verwendeten Abstand zwischen Wörtern fest. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.wordSpacing.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Blendet Leerraum aus oder behält ihn bei, wenn Text in einem TextFlow importiert wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Bestimmt die Gradzahl zum Drehen dieses Texts.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textRotation.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Offset der ersten Textzeile links vom Container.
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textIndent.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textIndent“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt die Tabulatoren an, die dem Absatz zugewiesen sind.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.tabStops.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den der obere Absatzrand eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der vor dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Der Platz, der hinter dem Absatz gelassen werden soll.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Betrag, um den die obere Absatzrandkante eingerückt wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Darstellung von Einträgen in Listen.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStyleType.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Dies steuert die Platzierung von Markern relativ zum Listeneintrag.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listStylePosition.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Legt einen automatischen Einzug für den Beginn von Listenrändern fest, wenn der Auffüllwert der Liste auf dieser Seite <codeph>auto</codeph> ist.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt das Zeilenabstandsmodell an, das eine Kombination aus Zeilenabstandsbasis und Zeilenabstandsrichtung ist.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.leadingModel.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Gibt die Grundlinienposition der ersten Linie im Container an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Steuert, wie der Text bei einem Float umbricht.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.clearFloats.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Steuert, an welcher Stelle Zeilen umbrochen werden können, wenn umbrochener Text in mehrere Zeilen umbrochen wird. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt eine vertikale oder horizontale Abfolge der Zeilenplatzierung an.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.blockProgression.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Scroller/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Scroller/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Scroller/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Scroller/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="horizontalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.HScrollBar" var_type="mx.core:IFactory">
<description>
      Ein Skinteil, der die Komponente „horizontale Bildlaufleiste“ definiert. Der Skinteil <codeph>horizontalScrollBar</codeph> hat Vorrang vor diesem Skinteil. Wenn Scroller eine Instanz dieses Teils erzeugt, wird der Skinteil <codeph>horizontalScrollBar</codeph> auf diese Instanz eingestellt. Diese Eigenschaft ist schreibgeschützt. Sie wird durch die Skin der Scroller-Komponente festgelegt. <codeph/>
     </description>
	<shortdesc>
      A skin part that defines the horizontal scroll bar component.</shortdesc></SkinPart><SkinPart name="verticalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.VScrollBar" var_type="mx.core:IFactory">
<description>
      Ein Skinteil, das die vertikale Bildlaufleiste definiert. Der Skinteil <codeph>verticalScrollBar</codeph> hat Vorrang vor diesem Skinteil. Wenn Scroller eine Instanz dieses Teils erzeugt, wird der Skinteil <codeph>verticalScrollBar</codeph> auf diese Instanz eingestellt. Diese Eigenschaft ist schreibgeschützt. Sie wird durch die Skin der Scroller-Komponente festgelegt. <codeph/>
     </description>
	<shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart><SkinPart name="horizontalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:HScrollBar">
<description>
      Ein Skinteil, das die horizontale Bildlaufleiste definiert. Diese Eigenschaft ist schreibgeschützt. Sie wird durch die Skin der Scroller-Komponente festgelegt. Diese Eigenschaft ist bindbar.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the horizontal scroll bar.</shortdesc></SkinPart><SkinPart name="verticalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:VScrollBar">
<description>
      Ein Skinteil, das die vertikale Bildlaufleiste definiert. Diese Eigenschaft ist schreibgeschützt. Sie wird durch die Skin der Scroller-Komponente festgelegt. Diese Eigenschaft ist bindbar.
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Scroller&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Scroller
   <strong>Properties</strong>
    measuredSizeIncludesScrollBars="true"
    minViewportInset="0"
    viewport="null"
  
    <strong>Styles</strong>
    alignmentBaseline="use_dominant_baseline"
    alternatingItemColors=""
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    horizontalScrollPolicy="auto"
    inactiveTextSelection=""
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die Scroller-Komponente zeigt eine einzige bildlauffähige Komponente an, die als Viewport bezeichnet wird, sowie eine horizontale und eine vertikale Bildlaufleiste. Der Viewport muss die IViewport-Schnittstelle implementieren. Ihre Skin muss von der Group-Klasse abgeleitet werden.
   <p>Die Spark-Group-, DataGroup- und RichEditableText-Komponenten implementieren die IViewport-Schnittstelle und können als untergeordnete Elemente des Scroller-Steuerelements verwendet werden, wie im folgenden Beispiel gezeigt wird:</p>
 
  <pre>
  &lt;s:Scroller width="100" height="100">
       &lt;s:Group> 
          &lt;mx:Image width="300" height="400" 
               source="@Embed(source='assets/logo.jpg')"/> 
       &lt;/s:Group>        
  &lt;/s:Scroller></pre>     
   <p>Die Größe des Image-Steuerelements wird höher eingestellt als die des dazugehörigen übergeordneten Group-Containers. Standardmäßig überschreitet das untergeordnete Element die Begrenzungen des übergeordneten Containers. Anstatt zuzulassen, dass das untergeordnete Element die Begrenzungen des übergeordneten Containers überschreitet, gibt der Scroller an, dass das untergeordnete Objekt auf die Begrenzungen beschnitten wird und Bildlaufleisten angezeigt werden.</p>
   <p>Nicht alle Spark-Container implementieren die IViewPort-Schnittstelle. Deshalb können solche Container wie BorderContainer- und SkinnableContainer-Container nicht als direkt untergeordnetes Element der Scroller-Komponente verwendet werden. Dennoch können alle Spark-Container eine Scroller-Komponente als untergeordnete Komponente haben. Beispiel: Um Bildlaufleisten in einem untergeordneten Element des Spark-BorderContainer zu verwenden, schließen Sie das untergeordnete Element in eine Scroller-Komponente ein. </p>
   <p>Um den gesamten BorderContainer bildlauffähig zu machen, schließen Sie ihn in einen Group-Container ein. Machen Sie anschließend den Group-Container zu einem untergeordneten Element der Scroller-Komponente. Bei skinfähigen Spark-Containern, die die IViewport-Schnittstelle nicht implementieren, können Sie auch eine benutzerdefinierte Skin, die die Scroller-Komponente enthält, für den Container erstellen. </p>
 
  <p>Die IViewport-Schnittstelle definiert einen Viewport für die Komponenten, die ihn implementieren. Bei einem Viewport handelt es sich um eine rechteckige Untergruppe des Bereichs eines Containers, den Sie anzeigen möchten, und nicht um die Anzeige des gesamten Containers. Die Bildlaufleisten steuern die Eigenschaften <codeph>horizontalScrollPosition</codeph> und <codeph>verticalScrollPosition</codeph> des Viewports. Mit Bildlaufleisten können die Bereiche angezeigt werden, die durch die Eigenschaften <codeph>contentWidth</codeph> und <codeph>contentHeight</codeph> des Viewports definiert sind.</p>
   <p><codeph/> <codeph/><codeph/></p>
   <p><codeph/><codeph/></p>
   <p>Sie können Bildlaufleisten mit ausdrücklichen Einstellungen für den Viewport des Containers kombinieren. Die Viewport-Einstellungen bestimmen die anfängliche Position des Viewports. Anschließend können Sie ihn mit den Bildlaufleisten bewegen, wie im folgenden Beispiel demonstriert wird: </p>
  
  <pre>
  &lt;s:Scroller width="100" height="100">
      &lt;s:Group
          horizontalScrollPosition="50" verticalScrollPosition="50"> 
          &lt;mx:Image width="300" height="400" 
              source="@Embed(source='assets/logo.jpg')"/> 
      &lt;/s:Group>                 
  &lt;/s:Scroller></pre>
 
  <p>Die Bildlaufleisten werden entsprechend der Richtlinie für vertikale und horizontale Bildlaufleisten angezeigt, die auf <codeph>auto</codeph>, <codeph>on</codeph> oder <codeph>off</codeph> eingestellt sein kann. Die <codeph>auto</codeph>-Richtlinie besagt, dass die Bildlaufleiste angezeigt und in das Layout eingeschlossen wird, wenn der Inhalt des Viewports größer als der Viewport selbst ist.</p>
 
  <p>Das Scroller-Skinlayout kann nicht geändert werden. Es ist bedingungslos auf eine private Layoutimplementierung eingestellt, die die Bildlaufrichtlinien verarbeitet. Skins der Scroller-Komponente können nur Ersetzungsbildlaufleisten bereitstellen. Damit Sie das Layout eines Viewports und dessen Bildlaufleisten besser steuern können, fügen Sie die Scroller-Komponente, statt sie zu verwenden, zu einer <codeph>Group</codeph> hinzu, und verwenden Sie die <codeph>viewport</codeph>-Eigenschaft für Bildlaufleisten, um sie zu verbinden.</p>
   <p>Das Scroller-Steuerelement hat die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>0</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>0</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.ScrollerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ScrollerExample.mxml"><swfblock conref="examples/ScrollerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Scroller_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Bildlaufposition aufgrund eines mouseWheel-Ereignisses ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die Bildlaufposition aufgrund eines <codeph>mouseWheel</codeph>-Ereignisses ändert.
  
  <p>Wenn es eine sichtbare verticalScrollBar gibt, wird für den Viewport standardmäßig ein vertikaler Bildlauf in <codeph>event.delta</codeph>-„Schritten“ durchgeführt. Die Höhe des Schritts wird von der <codeph>getVerticalScrollPositionDelta</codeph>-Methode des Viewports mithilfe von <codeph>UP</codeph> oder <codeph>DOWN</codeph> (abhängig von der Bildlaufrichtung) bestimmt.</p>
   <p>Wenn es dagegen eine sichtbare horizontalScrollBar gibt, wird für den Viewport standardmäßig ein horizontaler Bildlauf in <codeph>event.delta</codeph>-„Schritten“ durchgeführt. Die Breite des Schritts wird von der <codeph>getHorizontalScrollPositionDelta</codeph>-Methode des Viewports mithilfe von <codeph>LEFT</codeph> oder <codeph>RIGHT</codeph> (abhängig von der Bildlaufrichtung) bestimmt.</p>
   <p>Das Aufrufen der <codeph>preventDefault()</codeph>-Methode im Ereignis verhindet, dass sich die Bildlaufposition ändert. Wenn Sie die <codeph>delta</codeph>-Eigenschaft des Ereignisses modifizieren, wird dieser Wert als die Anzahl von „Schritten“ verwendet.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Scroller:Scroller"><apiName>Scroller</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Scroller:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      Dieser Vorgang wird vom Scroller nicht unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Dieser Vorgang wird vom Scroller nicht unterstützt. Ein Scroller-Steuerelement hat nur ein einziges untergeordnetes Element. Verwenden Sie die <codeph>viewport</codeph>-Eigenschaft, um es zu bearbeiten. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:addElement"><apiName>addElement</apiName><shortdesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt. Ein Scroller-Steuerelement hat nur ein einziges untergeordnetes Element. Verwenden Sie die <codeph>viewport</codeph>-Eigenschaft, um es zu bearbeiten. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:ensureElementIsVisible"><apiName>ensureElementIsVisible</apiName><shortdesc>
      Führt im Viewport einen Bildlauf durch, sodass das angegebene Element sichtbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Ein untergeordnetes Element des Containers oder eines verschachtelten Containers, das vom Scroller eingeschlossen ist.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Führt im Viewport einen Bildlauf durch, sodass das angegebene Element sichtbar ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      Gibt den Viewport zurück, wenn vorhanden, und die Indexposition 0 wird übergeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Indexposition in der Child-Liste nicht vorhanden ist.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element an der angegebenen Indexposition.
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des abzurufenden Elements.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt den Viewport zurück, wenn ein Viewport verfügbar ist und die übergebene Indexposition 0 lautet. Andernfalls wird ein RangeError ausgegeben.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      Gibt 0 zurück, wenn es sich bei dem übergebenen Element um den Viewport handelt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn das Element kein untergeordnetes Element dieses Objekts ist.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die Indexposition des zu identifizierenden Elements.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Das zu identifizierende Element.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt 0 zurück, wenn es sich bei dem übergebenen Element um den Viewport handelt. Andernfalls wird ein ArgumentError ausgegeben.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt. Ein Scroller-Steuerelement hat nur ein einziges untergeordnetes Element. Verwenden Sie die <codeph>viewport</codeph>-Eigenschaft, um es zu bearbeiten. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt. Ein Scroller-Steuerelement hat nur ein einziges untergeordnetes Element. Verwenden Sie die <codeph>viewport</codeph>-Eigenschaft, um es zu bearbeiten. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElement"><apiName>removeElement</apiName><shortdesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt. Ein Scroller-Steuerelement hat nur ein einziges untergeordnetes Element. Verwenden Sie die <codeph>viewport</codeph>-Eigenschaft, um es zu bearbeiten. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt. Ein Scroller-Steuerelement hat nur ein einziges untergeordnetes Element. Verwenden Sie die <codeph>viewport</codeph>-Eigenschaft, um es zu bearbeiten. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt. Ein Scroller-Steuerelement hat nur ein einziges untergeordnetes Element. Verwenden Sie die <codeph>viewport</codeph>-Eigenschaft, um es zu bearbeiten. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElements"><apiName>swapElements</apiName><shortdesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Dieser Vorgang wird vom Scroller nicht unterstützt. Ein Scroller-Steuerelement hat nur ein einziges untergeordnetes Element. Verwenden Sie die <codeph>viewport</codeph>-Eigenschaft, um es zu bearbeiten. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Scroller:measuredSizeIncludesScrollBars:get"><apiName>measuredSizeIncludesScrollBars</apiName><shortdesc>
      Bei „true“ schließt die gemessene Größe des Scrollers den für die sichtbaren Bildlaufleisten erforderlichen Platz ein. Ansonsten hängt die gemessene Größe des Scrollers ausschließlich von seinem Viewport ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> schließt die gemessene Größe des Scrollers den für die sichtbaren Bildlaufleisten erforderlichen Platz ein. Ansonsten hängt die gemessene Größe des Scrollers ausschließlich von seinem Viewport ab.
     
      <p>Komponenten wie TextArea, die ihren Inhalt neu umbrechen, damit er in die verfügbare Breite oder Höhe passt, können diese Eigenschaft verwenden, um ihre gemessene Größe zu stabilisieren. Standardmäßig wird ein TextArea durch seine <codeph>widthInChars</codeph>- und <codeph>heightInChars</codeph>-Eigenschaften definiert. In vielen Anwendungen ist es vorteilhaft, wenn die gemessene Größe selbst dann konstant bleibt, wenn Bildlaufleisten vom Scroller der TextArea-Skin angezeigt werden.</p>
     
      <p>Bei Komponenten, deren Inhalt nicht umbrochen wird, wie dies beispielsweise bei Elementen einer normalen Liste der Fall ist, ist das Standardverhalten vorteilhaft, da es die Wahrscheinlichkeit verringert, dass der Inhalt einer Komponente von einer Bildlaufleiste verdeckt wird.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:minViewportInset:get"><apiName>minViewportInset</apiName><shortdesc>
      Der Mindestabstand zwischen dem Viewport und den Kanten der Scroller-Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Mindestabstand zwischen dem Viewport und den Kanten der Scroller-Komponente. Wenn keine der Bildlaufleisten angezeigt wird, wird der Viewport mit <codeph>minViewportInset</codeph> an allen vier Seiten verkleinert. Wenn eine Bildlaufleiste angezeigt wird, wird der Viewport um <codeph>minViewportInset</codeph> oder um die Größe der Bildlaufleiste verkleinert. Der jeweils größere Wert wird verwendet. ScrollBars schließen bündig mit den Kanten der Scroller-Komponente ab.   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:numElements:get"><apiName>numElements</apiName><shortdesc>
      Gibt 1 zurück, wenn es sich um einen Viewport handelt, und andernfalls 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Gibt 1 zurück, wenn es sich um einen Viewport handelt, und andernfalls 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
        <codeph/><codeph/>
           <p><b/><codeph/><codeph/></p>
           <p> </p>
           <p>   </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
           </apiDefaultValue></apiValueDef><apiDesc>
        <codeph/><codeph/> <codeph/>
           <p><b/><codeph/><codeph/></p>
           <p><codeph/><codeph/> </p>
           <p><codeph/> Diese Änderung der Bildlaufposition ist nicht animiert.</p>
           <p><codeph/><codeph/><codeph/><codeph/>  </p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Scroller:viewport:get"><apiName>viewport</apiName><shortdesc>
      Die zu durchlaufende Viewport-Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die zu durchlaufende Viewport-Komponente.
     
      <p>
      Der Viewport wird zur Skin der Scroller-Komponente hinzugefügt, die sowohl den Viewport als auch die Bildlaufleisten anordnet. Wenn die <codeph>viewport</codeph>-Eigenschaft festgelegt ist, wird die <codeph>clipAndEnableScrolling</codeph>-Eigenschaft des Viewports auf „true“ eingestellt, um den Bildlauf zu aktivieren. Der Scroller unterstützt nicht das direkte Drehen des Viewports. Der Inhalt des Viewports kann willkürlich transformiert werden, der Viewport selbst jedoch nicht.
     </p>
     
      Diese Eigenschaft ist bindbar.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VGroup"><apiName>VGroup</apiName><shortdesc>
  Der VGroup-Container ist eine Instanz des Group-Containers, der die VerticalLayout-Klasse verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:VGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:VGroup
    <strong>Properties</strong>
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedMaxRowCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount"-1"
    rowHeight="no default"
    variableRowHeight="true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der VGroup-Container ist eine Instanz des Group-Containers, der die VerticalLayout-Klasse verwendet. Ändern Sie die <codeph>layout</codeph>-Eigenschaft nicht. Verwenden Sie stattdessen die Eigenschaften der VGroup-Klasse, um die Merkmale der VerticalLayout-Klasse zu ändern.
 
  <p>Der VGroup-Container weist folgende Standardmerkmale auf:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VGroupExample.mxml"><swfblock conref="examples/VGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link></related-links><apiConstructor id="spark.components:VGroup:VGroup"><apiName>VGroup</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. Initialisiert die <codeph>layout</codeph>-Eigenschaft mit einer Instanz der VerticalLayout-Klasse.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:VGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.VerticalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  Das ComboBox-Steuerelement ist eine untergeordnete Klasse des DropDownListBase-Steuerelements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ComboBox">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Oberer Versatz des Texts (in Pixeln) im Eingabeaufforderungsbereich des Steuerelements.  
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Rechter Versatz des Texts (in Pixeln) im Eingabeaufforderungsbereich des Steuerelements.  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Linker Versatz des Texts (in Pixeln) im Eingabeaufforderungsbereich des Steuerelements.  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  Unterer Versatz des Texts (in Pixeln) im Eingabeaufforderungsbereich des Steuerelements.  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="textInput" owner="spark.components:ComboBox" playerVersion="Flash10" required="false" var_type="spark.components:TextInput">
<description>
      Ein optionaler Skinteil, der den Eingabetext oder den selectedItem-Text enthält. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      Optional skin part that holds the input text or the selectedItem text.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ComboBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ComboBox
    <strong>Properties</strong>
    itemMatchingFunction="null"
    labelToItemFunction="null"
    maxChars="0"
    openOnInput="true"
    prompt="null"
    restrict=""
     <strong>Styles</strong>
    paddingBottom="3"
    paddingLeft="3"
    paddingRight="3"
    paddingTop="5"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das ComboBox-Steuerelement ist eine untergeordnete Klasse des DropDownListBase-Steuerelements. Wie beim DropDownListBase-Steuerelement wird nach der Auswahl eines Objekts aus der Dropdownliste des ComboBox-Steuerelements durch den Benutzer das Datenobjekt im Eingabeaufforderungsbereich des Steuerelements angezeigt. 
   <p>Beim ComboBox-Steuerelement wird der Eingabeaufforderungsbereich mithilfe des TextInput-Steuerelements implementiert. Dagegen erfolgt beim DropdownList-Steuerelement die Implementierung mithilfe des Label-Steuerelements. Deshalb können Benutzer den Eingabeaufforderungsbereich bearbeiten und einen Wert eingeben, der von den vordefinierten Optionen abweicht.</p>
   <p>Beispielsweise lässt das DropdownList-Steuerelement nur zu, dass die Benutzer eine Auswahl aus einer Liste vordefinierter Objekte treffen. Beim ComboBox-Steuerelement dagegen kann der Benutzer entweder ein vordefiniertes Objekt auswählen oder ein neues im Eingabeaufforderungsbereich eingeben. Ihre Anwendung kann erkennen, dass ein neues Objekt eingegeben wurde und dieses optional zu den Listenelementen des Steuerelements hinzufügen.</p>
   <p>Außerdem durchsucht das ComboBox-Steuerelement die Objektliste, während der Benutzer Zeichen im Eingabeaufforderungsbereich eingibt. Bei der Zeicheneingabe durch den Benutzer wird der Dropdownbereich des Steuerelements geöffnet. Dann erfolgt ein Bildlauf zum passendsten Treffer in der Objektliste; dieser wird hervorgehoben.</p>
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
   <p><b>Hinweis:</b> Die listenbasierten Spark-Steuerelemente (die Spark ListBase-Klasse und ihre Unterklassen wie ButtonBar, ComboBox, DropDownList, List und TabBar) unterstützen nicht die Verwendung der BasicLayout-Klasse als Wert der <codeph>layout</codeph>-Eigenschaft. Verwenden Sie BasicLayout nicht für listenbasierte Spark-Steuerelemente.</p>
 
  <p>Das ComboBox-Steuerelement verfügt über die folgenden Standardeigenschaften:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>146 Pixel breit und 23 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>20 Pixel breit und 23 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.ComboBoxSkin
               <p>spark.skins.spark.ComboBoxTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ComboBoxExample.mxml"><swfblock conref="examples/ComboBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link><link href="spark.skins.spark.xml#ComboBoxTextInputSkin"><linktext>spark.skins.spark.ComboBoxTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ComboBox:CUSTOM_SELECTED_ITEM"><apiName>CUSTOM_SELECTED_ITEM</apiName><shortdesc>
      Statische Konstante, die den Wert der selectedIndex-Eigenschaft, wenn der Benutzer einen Wert im Eingabeaufforderungsbereich eingibt und der Wert übernommen wird, darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="int"/></apiValueDef><apiDesc>
      Statische Konstante, die den Wert der <codeph>selectedIndex</codeph>-Eigenschaft, wenn der Benutzer einen Wert im Eingabeaufforderungsbereich eingibt und der Wert übernommen wird, darstellt. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:itemMatchingFunction"><apiName>itemMatchingFunction</apiName><shortdesc>
      Gibt eine Rückruffunktion an, mit deren Hilfe die Objektliste während der Zeicheneingabe durch den Benutzer im Eingabeaufforderungsbereich durchsucht wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt eine Rückruffunktion an, mit deren Hilfe die Objektliste während der Zeicheneingabe durch den Benutzer im Eingabeaufforderungsbereich durchsucht wird. Bei der Zeicheneingabe durch den Benutzer wird der Dropdownbereich des Steuerelements geöffnet. Dann erfolgt ein Bildlauf zum passendsten Treffer in der Objektliste; dieser wird hervorgehoben.
     
      <p>Die Funktion, auf die diese Eigenschaft verweist, gibt bei Eingabe eines Strings den Index der Elemente im Datenprovider zurück, die der Eingabe entsprechen. Die Elemente werden als Vektor zurückgegeben.&lt;int> der Indizes im Datenprovider. </p>
     
      <p>Die Rückruffunktion muss über die folgende Signatur verfügen: </p>
     
      <pre>
        function myMatchingFunction(comboBox:ComboBox, inputText:String):Vector.&lt;int></pre>
     
      <p>Wenn der Wert der Eigenschaft „null“ ist, findet ComboBox die Treffer mithilfe des Standardalgorithmus. Wenn ein Eingabestring der Länge n mit den ersten n Zeichen eines Objekts (ohne Berücksichtigung der Groß-/Kleinschreibung) übereinstimmt, handelt es sich standardmäßig um einen Treffer für dieses Objekt. Beispielsweise gilt „aRiz“ als Übereinstimmung für „Arizona“, „riz“ jedoch nicht.</p>
           <p>Um die Suche zu deaktivieren, erstellen Sie eine Rückruffunktion, die einen leeren Vektor zurückgibt.&lt;int>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:openOnInput"><apiName>openOnInput</apiName><shortdesc>
      Bei „true“ wird die Dropdownliste geöffnet, wenn der Benutzer den Eingabeaufforderungsbereich bearbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei <codeph>true</codeph> wird die Dropdownliste geöffnet, wenn der Benutzer den Eingabeaufforderungsbereich bearbeitet.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:enableIME:get"><apiName>enableIME</apiName><shortdesc conref="spark.components.TextInput#enableIME">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.TextInput#enableIME">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="spark.components.TextInput#imeMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.TextInput#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:prompt:get"><apiName>prompt</apiName><shortdesc>
      Anzuzeigender Text, wenn der Eingabetext „null“ ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Anzuzeigender Text, wenn der Eingabetext „null“ ist.
     
      <p>Text für die Eingabeaufforderung wird angezeigt, wenn das Steuerelement zuerst erstellt wird. Text für die Eingabeaufforderung wird ausgeblendet, wenn das Steuerelement den Fokus erhält, wenn der Eingabetext nicht null ist oder wenn ein Element in der Liste ausgewählt ist. Text für die Eingabeaufforderung wird wieder eingeblendet, wenn das Steuerelement den Fokus verliert, aber nur, wenn kein Text eingegeben wurde (wenn der Wert des Textfelds „null“ oder ein leerer String ist).</p>
      
      <p>Sie können den Stil des Texts für die Eingabeaufforderung mit CSS ändern. Wenn das Steuerelement Text für die Eingabeaufforderung enthält und nicht deaktiviert ist, wird der Stil durch den <codeph>normalWithPrompt</codeph>-Pseudoselektor definiert. Wenn das Steuerelement deaktiviert ist, werden die von dem <codeph>disabledWithPrompt</codeph>-Pseudoselektor definierten Stile verwendet.</p>
      
      <p>Die folgende Beispiel-CSS ändert die Farbe des Texts der Eingabeaufforderung in den TextInput-Steuerelementen. Das ComboBox-Steuerelement verwendet ein TextInput-Steuerelement als Unterkomponente für den Text der Eingabeaufforderung und die Eingabe: damit wird der Text der Eingabeaufforderung geändert, wenn Sie diese CSS verwendet:
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|TextInput:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:labelToItemFunction:set"><apiName>labelToItemFunction</apiName><shortdesc>
      Gibt eine Rückruffunktion an, mit der neue im Eingabeaufforderungsbereich eingegebene Werte in den Datentyp der im Datenprovider befindlichen Datenobjekte konvertiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Gibt eine Rückruffunktion an, mit der neue im Eingabeaufforderungsbereich eingegebene Werte in den Datentyp der im Datenprovider befindlichen Datenobjekte konvertiert werden. Die von dieser Eigenschaft referenzierte Funktion wird aufgerufen, wenn der Text im Eingabeaufforderungsbereich nicht im Datenprovider gefunden wurde und übernommen wird. 
     
      <p>Die Rückruffunktion muss über die folgende Signatur verfügen: </p>
     
      <pre>
        function myLabelToItem(value:String):Object</pre>
     
      <p>Dabei ist <codeph>value</codeph> der im Eingabeaufforderungsbereich eingegebene String. Die Funktion gibt ein Objekt vom Typ der im Datenprovider enthaltenen Objekte zurück.</p>
     
      <p>Die Standardrückruffunktion gibt <codeph>value</codeph> zurück. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:maxChars:set"><apiName>maxChars</apiName><shortdesc>
      Die vom Benutzer festgelegte maximale Anzahl von Zeichen, die der Eingabeaufforderungsbereich enthalten kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die vom Benutzer festgelegte maximale Anzahl von Zeichen, die der Eingabeaufforderungsbereich enthalten kann. Der Wert 0 entspricht einer unbegrenzten Zeichenanzahl.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:restrict:set"><apiName>restrict</apiName><shortdesc>
      Gibt an, welche Zeichen vom Benutzer im Eingabeaufforderungsbereich eingegeben können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, welche Zeichen vom Benutzer im Eingabeaufforderungsbereich eingegeben können. Standardmäßig kann der Benutzer beliebige Zeichen eingeben, die dem Wert eines leeren Strings entsprechen.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Image"><apiName>Image</apiName><shortdesc>
  Das Spark-Image-Steuerlement ist eine skinfähige Komponente, die einen benutzerdefinierten Lade-, Chrom- und Fehlerstatus bietet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style enumeration="default,high" inherit="no" name="smoothingQuality" owner="spark.components:Image" playerVersion="Flash9" type="String">
<description>
  Stil, der der <codeph>smoothingQuality</codeph>-Eigenschaft des BitmapImage entspricht. Wurde <codeph>BitmapSmoothingQuality.BEST</codeph> festgelegt, wird das Bild neu erstellt (falls die Daten aus einer vertrauenswürdigen Quelle stammen), um Ergebnisse mit besserer Qualität zu erzielen. Wurde <codeph>BitmapSmoothingQuality.DEFAULT</codeph> festgelegt, wird die standardmäßige Stagequalität für skalierte Bitmapfüllungen verwendet.
 
  </description>
<default>&lt;code>BitmapSmoothingQuality.DEFAULT&lt;/code>
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="enableLoadingState" owner="spark.components:Image" playerVersion="Flash9" type="Boolean">
<description>
  Bei <codeph>true</codeph> wird der <codeph>loading</codeph>-Skinstatus aktiviert.
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  Die Hintergrundfarbe dieser Komponente.
   
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  Der Alphawert des Hintergrunds für diese Komponente.
 
  </description>
<default>NaN
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Deaktiviert-Status des Image-Steuerelements.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="invalid" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Ungültig-Status des Image-Steuerelements. D. h., das Bild konnte nicht erfolgreich geladen werden.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:Image" playerVersion="Flash10.1">
<description>
  Bereit-Status des Image-Steuerelements.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Vorabladen-Status des Image-Steuerelements. Der <codeph>enableLoadingState</codeph>-Stil muss auf <codeph>true</codeph> gesetzt sein, um diesen Komponentenstatus zu ermöglichen.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Nicht-initialisiert-Status des Image-Steuerelements.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="imageDisplay" owner="spark.components:Image" playerVersion="Flash10" required="true" var_type="spark.primitives:BitmapImage">
<description>
      Ein erforderlicher Skinteil, der den Bildinhalt definiert.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines image content.</shortdesc></SkinPart><SkinPart name="progressIndicator" owner="spark.components:Image" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:Range">
<description>
      Ein optionaler Skinteil, der den aktuellen Ladefortschritt anzeigt. Während des Ladens wird der Prozentsatz des progressIndicator-Werts für den Ladefortschritt automatisch aktualisiert.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that displays the current loading progress.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Image&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Image 
    <strong>Properties</strong>
    clearOnLoad="true"
    contentLoader="null"
    contentLoaderGrouping="null"
    fillMode="scale"
    horizontalAlign="center"
    preliminaryHeight="NaN"
    preliminaryWidth="NaN"
    scaleMode="letterbox"
    smooth="false"
    source="null
    verticalAlign="middle"
 
    <strong>Styles</strong>
    backgroundAlpha="NaN"
    backgroundColor="NaN"
    enableLoadingState="false"
    smoothingQuality="default"
 
    <strong>Events</strong>
    complete="<i>No default</i>"
    httpStatus="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
    securityError="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das Spark-Image-Steuerlement ist eine skinfähige Komponente, die einen benutzerdefinierten Lade-, Chrom- und Fehlerstatus bietet. Mithilfe des Image-Steuerelements können Sie JPEG-, PNG- und GIF-Dateien zur Laufzeit importieren. Diese Dateitypen können auch zur Kompilierzeit mithilfe von <codeph>@Embed(source='filename')</codeph> eingebettet werden.
   <p><b>Hinweis: </b>Flex umfasst auch das SWFLoader-Steuerelement zum Laden von Flex-Anwendungen. Das Image-Steuerelement wird üblicherweise zum Laden von statischen Grafikdateien und SWF-Dateien verwendet, das SWFLoader-Steuerelement zum Laden von Flex-Anwendungen. Das Image-Steuerelement ist auch für die Verwendung in benutzerdefinierten Elementrenderern und Elementeditoren ausgelegt. </p>
 
  <p><b>Hinweis:</b> Flex enthält auch die BitmapImage-Klasse. Diese Klasse dient zum Einbetten von Bildern in Skins und FXG-Komponenten. </p>
   <p>Eingebettete Bilder werden automatisch geladen, da sie bereits Teil einer Flex-SWF-Datei sind. Sie erhöhen jedoch die Größe Ihrer Anwendung und verlangsamen den Initialisierungsprozess der Anwendung. Eingebettete Bilder machen es auch nötig, dass die Anwendungen neu kompiliert werden, wenn sich Bilddateien ändern.</p> 
  
  <p>Alternativ zum Einbetten von Ressourcen können diese zur Laufzeit geladen werden. Ressourcen können vom lokalen Dateisystem, auf dem die SWF-Datei ausgeführt wird, geladen werden oder von einer Remote-Quelle, üblicherweise über eine HTTP-Anfrage oder ein Netzwerk. Diese Bilder sind unabhängig von Ihrer Flex-Anwendung und können daher geändert werden, ohne einen erneuten Kompiliervorgang auszulösen, solange die Namen der geänderten Bilder gleich bleiben. Die referenzierten Bilder verlangsamen die ursprüngliche Ladezeit Ihrer Anwendung nicht. Beim Verwenden und Laden der Bilder in Flash Player oder AIR kann es jedoch zu Verzögerungen kommen. </p>
  
  <p>Die standardmäßige Skin bietet eine chromlose Bildskin mit einem auf einer generischen Fortschrittsleiste basierenden Preloader und einem Bildsymbol für ungültigen Inhalt.</p>
   <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
   <p>Das Image-Steuerelement verfügt über die folgenden Standardeigenschaften:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Breit genug für damit verknüpften Quellinhalt</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>0 Pixel breit und 0 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklasse</entry>
           <entry>spark.skins.spark.ImageSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ImageSkin"><linktext>spark.skins.spark.ImageSkin</linktext></link><link href="" invalidHref="mx.controls.SWFLoader.xml"><linktext>mx.controls.SWFLoader</linktext></link></related-links><adobeApiEvent id="spark.components:Image_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
  Wird ausgeführt, wenn ein Sicherheitsfehler auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgeführt, wenn ein Sicherheitsfehler auftritt.
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.SecurityErrorEvent.xml"><linktext>flash.events.SecurityErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_mx.events.FlexEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  Wird nach Abschluss des Ladevorgangs ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.READY</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach Abschluss des Ladevorgangs ausgelöst. Im Gegensatz zum <codeph>complete</codeph>-Ereignis wird dieses Ereignis für alle Arten von Quellen ausgelöst.  
  
  <p>Hinweis: Bei Inhalt, der über Loader geladen wird, werden <codeph>ready</codeph>- und <codeph>complete</codeph>-Ereignisse ausgelöst.</p>  Bei anderen Arten von Quellen (beispielsweise Einbettungen) wird nur <codeph>ready</codeph> ausgelöst.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Wird während des Ladevorgangs ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird während des Ladevorgangs ausgelöst.
   <p><b>Hinweis:</b> Es ist nicht sicher, dass das <codeph>progress</codeph>-Ereignis ausgelöst werden kann. Das <codeph>complete</codeph>-Ereignis kann auch eingehen, wenn kein <codeph>progress</codeph>-Ereignis ausgelöst wurde. Dies kann passieren, wenn der geladene Inhalt eine lokale Datei ist.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  Wird ausgelöst, wenn ein Eingabe- oder Ausgabefehler aufgetreten ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Eingabe- oder Ausgabefehler aufgetreten ist.
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.IOErrorEvent.xml"><linktext>flash.events.IOErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
  Wird ausgelöst, wenn eine Netzwerkanfrage über HTTP und Flash Player gestellt wird oder AIR den HTTP-Statuscode ermittelt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn eine Netzwerkanfrage über HTTP und Flash Player gestellt wird oder AIR den HTTP-Statuscode ermittelt hat.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Wird nach Abschluss des Ladevorgangs ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach Abschluss des Ladevorgangs ausgelöst. Dieses Ereignis wird nur bei url- und ByteArray-basierten Quellen ausgelöst (diese Quellen erfordern einen Loader).
 
  <p>Hinweis: Bei Inhalt, der über Loader geladen wird, werden <codeph>ready</codeph>- und <codeph>complete</codeph>-Ereignisse ausgelöst.</p>  Bei anderen Arten von Quellen (beispielsweise Einbettungen) wird nur <codeph>ready</codeph> ausgelöst.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Image:Image"><apiName>Image</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Image:bitmapData:get"><apiName>bitmapData</apiName><shortdesc conref="spark.primitives.BitmapImage#bitmapData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:BitmapData"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bitmapData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:clearOnLoad:get"><apiName>clearOnLoad</apiName><shortdesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoaderGrouping:get"><apiName>contentLoaderGrouping</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoader:get"><apiName>contentLoader</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoader">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IContentLoader</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoader">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:fillMode:get"><apiName>fillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.CENTER&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryHeight:get"><apiName>preliminaryHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryWidth:get"><apiName>preliminaryWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapScaleMode.LETTERBOX&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:sourceHeight:get"><apiName>sourceHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:sourceWidth:get"><apiName>sourceWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:trustedSource:get"><apiName>trustedSource</apiName><shortdesc conref="spark.primitives.BitmapImage#trustedSource">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#trustedSource">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.MIDDLE&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:smooth:set"><apiName>smooth</apiName><shortdesc conref="spark.primitives.BitmapImage#smooth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#smooth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:source:set"><apiName>source</apiName><shortdesc conref="spark.primitives.BitmapImage#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#source">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextSelectionHighlighting"><apiName>TextSelectionHighlighting</apiName><shortdesc>
  Diese Klasse gibt die zulässigen Werte an für die selectionHighlighting-Eigenschaft des RichEditableText-Steuerelements sowie von Steuerelementen, die RichEditableText als Teilkomponente verwenden (Spark TextInput und Spark TextArea).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Diese Klasse gibt die zulässigen Werte an für die <codeph>selectionHighlighting</codeph>-Eigenschaft des RichEditableText-Steuerelements sowie von Steuerelementen, die RichEditableText als Teilkomponente verwenden (Spark TextInput und Spark TextArea).
  
  </apiDesc><example conref="TraceSelectionRanges"><swfblock conref="TraceSelectionRanges"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiValue id="spark.components:TextSelectionHighlighting:ALWAYS"><apiName>ALWAYS</apiName><shortdesc>
      Zeigt die Textauswahl immer an, selbst wenn die Komponente nicht den Tastaturfokus hat oder das Fenster der Komponente nicht aktiv ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Zeigt die Textauswahl immer an, selbst wenn die Komponente nicht den Tastaturfokus hat oder das Fenster der Komponente nicht aktiv ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_ACTIVE"><apiName>WHEN_ACTIVE</apiName><shortdesc>
      Zeigt die Textauswahl immer an, wenn das Fenster der Komponente aktiv ist, selbst wenn die Komponente nicht den Tastaturfokus hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenActive</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Zeigt die Textauswahl immer an, wenn das Fenster der Komponente aktiv ist, selbst wenn die Komponente nicht den Tastaturfokus hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_FOCUSED"><apiName>WHEN_FOCUSED</apiName><shortdesc>
      Zeigt die Textauswahl nur an, wenn die Komponente den Tastaturfokus hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenFocused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Zeigt die Textauswahl nur an, wenn die Komponente den Tastaturfokus hat.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpPosition"><apiName>PopUpPosition</apiName><shortdesc>
  Aufzählungstyp für die PopUpAnchor.popUpPosition-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Aufzählungstyp für die <codeph>PopUpAnchor.popUpPosition</codeph>-Eigenschaft. Dieser Typ beschreibt das <codeph>popUp</codeph>-Steuerelement, das durch PopUpAnchor verankert wird. Die Position ist relativ zur PopUpAnchor-Position.  
    
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:PopUpPosition:ABOVE"><apiName>ABOVE</apiName><shortdesc>
      Position über dem Ziel
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>above</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position über dem Ziel
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:BELOW"><apiName>BELOW</apiName><shortdesc>
      Position unter dem Ziel
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>below</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position unter dem Ziel
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:CENTER"><apiName>CENTER</apiName><shortdesc>
      Position im Mittelpunkt des Ziels
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position im Mittelpunkt des Ziels
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:LEFT"><apiName>LEFT</apiName><shortdesc>
      Position links vom Ziel
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position links vom Ziel
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      Position rechts vom Ziel
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position rechts vom Ziel
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
      Position in der linken oberen Ecke des Ziels
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Position in der linken oberen Ecke des Ziels
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataGroup"><apiName>DataGroup</apiName><shortdesc>
  Die DataGroup-Klasse ist die Basiscontainerklasse für Datenelemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:DataGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGroup
    <strong>Properties</strong>
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    typicalItem="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DataGroup-Klasse ist die Basiscontainerklasse für Datenelemente. Die DataGroup-Klasse konvertiert Datenelemente in visuelle Elemente für die Anzeige. Obwohl dieser Container visuelle Elemente enthalten kann, sind oft nur untergeordnete Datenelemente enthalten.
   <p>Die DataGroup-Klasse verwendet untergeordnete Datenelemente oder visuelle Elemente, die die IVisualElement-Schnittstelle implementieren und DisplayObjects sind. Datenelemente können einfache Datenelemente wie String- und Number-Objekte und komplexere Datenelemente wie Object- und XMLNode-Objekte sein. Obwohl diese Container visuelle Elemente enthalten können, sind oft nur untergeordnete Datenelemente enthalten.</p>
   <p>Ein Elementrenderer definiert die visuelle Darstellung des Datenelements im Container. Der Elementrenderer konvertiert das Datenelement in ein Format, das vom Container angezeigt werden kann. Sie müssen einen Elementrenderer an einen DataGroup-Container übergeben, um die Datenelemente ordnungsgemäß zu rendern.</p>
   <p>Um die Leistung zu verbessern und die Anwendungsgröße zu minimieren, kann dem DataGroup-Container keine Skin zugewiesen werden. Wenn Sie eine Skin anwenden möchten, verwenden Sie stattdessen den SkinnableDataContainer. </p>
  
  <p>Der DataGroup-Container hat die folgenden Standardmerkmale:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DataGroupExample.mxml"><swfblock conref="examples/DataGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer"><linktext>spark.skins.spark.DefaultItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultComplexItemRenderer"><linktext>spark.skins.spark.DefaultComplexItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  Wird ausgelöst, wenn ein Renderer aus dieser dataGroup entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Renderer aus dieser dataGroup entfernt wird. <codeph>event.renderer</codeph> ist der Renderer, der entfernt wurde.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  Wird ausgelöst, wenn ein Renderer zu dieser dataGroup hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Renderer zu dieser dataGroup hinzugefügt wird. <codeph>event.renderer</codeph> ist der Renderer, der hinzugefügt wurde.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGroup:DataGroup"><apiName>DataGroup</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGroup:getItemIndicesInView"><apiName>getItemIndicesInView</apiName><shortdesc>
      Gibt die Indizes der in dieser DataGroup sichtbaren Elementrenderer zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indizes der sichtbaren Elementrenderer.
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Indizes der in dieser DataGroup sichtbaren Elementrenderer zurück.
     
      <p>Wenn <codeph>clipAndEnableScrolling</codeph> <codeph>true</codeph> ist, werden die Indexpositionen der Elementrenderer zurückgegeben, für die <codeph>visible</codeph> = <codeph>true</codeph> gilt und die das <codeph>scrollRect</codeph> dieser DataGroup überlappen. D. h., die Elementrenderer, die relativ zu dieser DataGroup mindestens teilweise sichtbar sind. Ist <codeph>clipAndEnableScrolling</codeph> <codeph>false</codeph>, wird eine Liste von Ganzzahlen von 0 bis <codeph>dataProvider.length</codeph> - 1 zurückgegeben. Ist der Besitzer dieser DataGroup ein Scroller, dann wurde <codeph>clipAndEnableScrolling</codeph> auf <codeph>true</codeph> gesetzt.</p>
     
      <p>Die den zurückgegebenen Indexpositionen jeweils entsprechende Indexposition kann mithilfe der <codeph>getElementAt()</codeph>-Methode zurückgegeben werden, selbst wenn das Layout virtuell ist.</p>
     
      <p>Die Reihenfolge der Objekte im zurückgegebenen Vektor wird nicht garantiert.</p>
     
      <p>Die Klassen „VerticalLayout“ und „HorizontalLayout“ stellen bindbare <codeph>firstIndexInView</codeph>- und <codeph>lastIndexInView</codeph>-Eigenschaften zur Verfügung, die dieselben Informationen wie diese Methode enthalten.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="11"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      <codeph/>  
     
      <p>Diese Methode wird bei einer direkten Änderung des <codeph>typicalItem</codeph> automatisch aufgerufen. D. h., wenn die Eigenschaft auf einen neuen Wert gesetzt wird, der dem aktuellen Wert nicht entspricht („==“).</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:itemToLabel"><apiName>itemToLabel</apiName><shortdesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      Bei einem Datenelement wird die toString()-Darstellung des Datenelements für einen anzuzeigenden Elementrenderer zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>Der in einem Elementrenderer anzuzeigende String.
      
      </apiDesc></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das anzuzeigende Datenelement.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      <p>Bei einem Datenelement wird die <codeph>toString()</codeph>-Darstellung des Datenelements für einen anzuzeigenden Elementrenderer zurückgegeben. Null Datenelemente geben einen leeren String zurück. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      
      Aktualisiert den Renderer zur Wiederverwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Der Elementrenderer.
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>Die Indexposition der Daten im Datenprovider.
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Das Datenobjekt, das dieser Elementrenderer darstellt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Aktualisiert den Renderer zur Wiederverwendung. Diese Methode bereitet den Elementrenderer auf die Wiederverwendung vor, indem zuerst veraltete Eigenschaften gelöscht werden und er mit neuen Eigenschaften aktualisiert wird.
     
      <p>Am Schluss legt diese Methode die <codeph>data</codeph>-Eigenschaft des Elementrenderers fest.</p>    
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGroup:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Der Datenprovider für diese DataGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Der Datenprovider für diese DataGroup. Dies muss eine IList sein.
     
      <p>In der Flex-Architektur sind zahlreiche IList-Implementierungen enthalten, einschließlich ArrayCollection, ArrayList und XMLListCollection.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGroup/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#DataGroup/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGroup:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc>
      Funktion, die ein Elementrenderer-IFactory für ein bestimmtes Element zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Funktion, die ein Elementrenderer-IFactory für ein bestimmtes Element zurückgibt. Definieren Sie eine Elementrendererfunktion ähnlich wie diese Beispielfunktion:
      
      <pre>
        function myItemRendererFunction(item:Object):IFactory</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      Der Elementrenderer, der für Datenelemente verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Elementrenderer, der für Datenelemente verwendet werden soll. Die Klasse muss die IDataRenderer-Schnittstelle implementieren. Wenn definiert, hat die <codeph>itemRendererFunction</codeph>-Eigenschaft Vorrang vor dieser Eigenschaft.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      In Layouts wird die bevorzugte Größe von typicalItem verwendet, wenn eine feste Zeilen- oder Spaltengröße erforderlich ist, jedoch kein rowHeight- oder columnWidth-Wert eingestellt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      In Layouts wird die bevorzugte Größe von <codeph>typicalItem</codeph> verwendet, wenn eine feste Zeilen- oder Spaltengröße erforderlich ist, jedoch kein <codeph>rowHeight</codeph>- oder <codeph>columnWidth</codeph>-Wert eingestellt ist. Auf ähnliche Weise verwenden virtuelle Layouts dieses Element, um die Größe der Layoutelemente zu definieren, die sich nicht in der Ansicht befinden.
           <p>Der Container verwendet das typische Datenelement und den damit verknüpften Elementrenderer, um die Standardgröße der untergeordneten Elemente des Containers zu bestimmen. Durch die Definition des typischen Elements muss der Container nicht die Größe von jedem untergeordneten Element festlegen, das auf dem Bildschirm gezeichnet wird.</p>
           <p>Durch Festlegen dieser Eigenschaft wird die <codeph>tyicalLayoutElement</codeph>-Eigenschaft des Layouts definiert.</p>
     
      <p>Beschränkung: Wenn das <codeph>typicalItem</codeph> ein IVisualItem ist, muss es nicht gleichzeitig ein Mitglied des Datenproviders sein.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HSlider"><apiName>HSlider</apiName><shortdesc>
  Mithilfe des Steuerelements HSlider (horizontale Schiebereglerleiste) können Benutzer einen Wert auswählen, indem sie einen Schieberegler zwischen den beiden Endpunkten der Schiebereglerleiste bewegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:HSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe des Steuerelements HSlider (horizontale Schiebereglerleiste) können Benutzer einen Wert auswählen, indem sie einen Schieberegler zwischen den beiden Endpunkten der Schiebereglerleiste bewegen. Das HSlider-Steuerelement bewegt sich horizontal. Die Schiebereglerleiste verläuft von links nach rechts. Der aktuelle Wert der Schiebereglerleiste wird von der relativen Position des Schiebereglers zwischen den Endpunkten der Schiebereglerleiste bestimmt, die dem Mindest- und Höchstwert der Schiebereglerleiste entsprechen.
 
  <p>Die Schiebereglerleiste ermöglicht einen fortlaufenden Wertebereich zwischen dem Mindest- und dem Höchstwert; Werte können auch durch bestimmte Intervalle zwischen Mindest- und Höchstwert beschränkt werden. Die Schiebereglerleiste kann einen Datentipp für die Anzeige des aktuellen Werts enthalten.</p>
 
  <p>Das HSlider-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>100 Pixel breit und 11 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>100 Pixel breit und 100 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklassen</entry>
           <entry>spark.skins.spark.HSliderSkin
              <p>spark.skins.spark.HSliderThumbSkin</p>
              <p>spark.skins.spark.HSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HSliderExample.mxml"><swfblock conref="examples/HSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HSliderSkin"><linktext>spark.skins.spark.HSliderSkin</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DataGrid"><apiName>DataGrid</apiName><shortdesc>
  Das DataGrid zeigt eine Reihe von Spaltenüberschriften über einem bildlauffähigen Raster an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DataGrid">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Gibt an, unter welchen Bedingungen die vertikale Bildlaufleiste angezeigt wird.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> („on“) – Die Bildlaufleiste wird immer angezeigt.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> („off“) – Die Bildlaufleiste wird nie angezeigt. Der Viewport kann immer noch programmgesteuert durch Festlegen der <codeph>verticalScrollPosition</codeph>-Eigenschaft durchlaufen werden.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> („auto“) – Die Bildlaufleiste wird angezeigt, wenn die <codeph>contentHeight</codeph> des Viewports größer als dessen Höhe ist.
  </li>
  </ul>
 
  <p>
  Die Bildlaufrichtlinie wirkt sich auf die gemessene Größe des Scroller-Skinteils aus. Dieser Stil ist ein Verweis auf den <codeph>verticalScrollPolicy</codeph>-Stil des Scroller-Skinteils. Dies ist kein erbender Stil, daher wirkt er sich beispielsweise nicht auf Elementrenderer aus. </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Gibt an, unter welchen Bedingungen die horizontale Bildlaufleiste angezeigt wird.
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph> („on“) – Die Bildlaufleiste wird immer angezeigt.
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph> („off“) – Die Bildlaufleiste wird nie angezeigt. Der Viewport kann immer noch programmgesteuert durch Festlegen der <codeph>horizontalScrollPosition</codeph>-Eigenschaft durchlaufen werden.
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph> („auto“) – Die Bildlaufleiste wird angezeigt, wenn die <codeph>contentWidth</codeph> des Viewports größer als deren Breite ist.
  </li>
  </ul>
 
  <p>
  Die Bildlaufrichtlinie wirkt sich auf die gemessene Größe des Scroller-Skinteils aus. Dieser Stil ist ein Verweis auf den <codeph>horizontalScrollPolicy</codeph>-Stil des Scroller-Skinteils. Dies ist kein erbender Stil, daher wirkt er sich beispielsweise nicht auf Elementrenderer aus. </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="defaultDataGridItemEditor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  Die Klasse, die als Elementrenderer verwendet werden soll, wenn keiner von einer Spalte angegeben wird. Mit dieser Stileigenschaft legen Sie einen Elementrenderer für eine Gruppe von DataGrid-Steuerelementen fest, anstatt jede Festlegung einzeln vorzunehmen. Die <codeph>DataGridColumn.itemEditor</codeph>-Eigenschaft ersetzt diesen Wert.
  
  </description>
<default>null
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete typografische Groß-/Kleinschreibung.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.typographicCase</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die rechte Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingRight</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Die Laufweite (manuelles Kerning), die auf die linke Seite jedes Zeichens angewendet werden soll.   
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Gibt Optionen für die Ausrichtung des Texts an.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textJustify</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird.
   <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textDecoration</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textDecoration“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  Wert für Alpha (Transparenz) des Texts.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlpha</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Ausrichtung der letzten Zeile im Absatz in Relation zum Container bei Verwendung von Blocksatz. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Ausrichtung von Text in einem Container.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.textAlign</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style textAlign“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style textAlign“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Der für diesen Text verwendete Rendervorgang, wird nur auf eingebettete Schriftarten verwendet.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Nutzt standardmäßige Gebietsschemabezeichner, wie in Unicode Technical Standard #35 beschrieben. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch. 
  
  <p>Der Standardwert ist „undefined“. Diese Eigenschaft übernimmt ihren Wert von einem Vorgänger. Ist er immer noch „undefined“, erbt sie ihn vom globalen <codeph>locale</codeph>-Stil. Ist während der Initialisierung der Anwendung der globale <codeph>locale</codeph>-Stil nicht definiert, wird der Standardwert auf „en“ gesetzt.</p>
 
  <p>Beim Einsatz der Spark-Formatierer und -Globalisierungsklassen können Sie diesen Stil in der Stammanwendung auf den Wert der <codeph>LocaleID.DEFAULT</codeph>-Konstante setzen. Diese Klassen nutzen dann die internationalen Einstellungen des Client-Betriebssystems.</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:DataGrid" playerVersion="Flash10" type="Boolean">
<description> 
  Wenn „true“, wird Durchstreichung angewendet, d. h eine mitten durch den Text gezogene Linie.  
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineThrough</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Steuerelemente für den Zeilenabstand des Texts. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.lineHeight.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b> Siehe <codeph>leading</codeph>.</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#DataGrid/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Steuert, welche in der Schriftart definierten Ligaturen im Text verwendet werden können. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Die Anzahl zusätzlicher Pixel, die zwischen den einzelnen Zeichen eingefügt werden sollen.
 
  <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>trackingLeft</codeph> und <codeph>trackingRight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField.letterSpacing“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#DataGrid/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#DataGrid/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
   <p><b>Dies wird im Spark-Design nicht unterstützt.</b> Siehe <codeph>lineHeight</codeph>.</p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableStageText Style fontWeight“. Bei Verwendung von StyleableStageText wird dieses nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#DataGrid/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p>Kerning ist standardmäßig für Spark-Komponenten aktiviert, für MX-Komponenten jedoch standardmäßig deaktiviert. Spark-Komponenten interpretieren <codeph>default</codeph> als <codeph>auto</codeph>, während MX-Komponenten <codeph>default</codeph> als <codeph>false</codeph> interpretieren.</p>
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.kerning</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Der Stil, der zum Ausrichten des Absatzes verwendet wird. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Regel zum Ausrichten von Text in einem Absatz.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.justificationRule</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontWeight</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontWeight“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontWeight“.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontStyle</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontStyle. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontStyle.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  Die Höhe des Texts in Pixeln.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontSize</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style fontSize“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style fontSize“.</b></p>
 
  <p>Der Standardwert für das Spark-Design beträgt <codeph>12</codeph>. Der Standardwert für das Mobile-Design beträgt <codeph>24</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Zu verwendende Schriftartensuche. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontLookup</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen. 
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.fontFamily.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter spark.components.supportClasses.StyleableTextField Style fontFamily. Bei Verwendung von StyleableStageText siehe spark.components.supportClasses.StyleableStageText Style fontFamily.</b></p>
 
  <p>Der Standardwert für das Spark-Design ist <codeph>Arial</codeph>. Der Standardwert für das Mobile-Design ist <codeph>_sans</codeph>.</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Gibt an, welche Elementgrundlinie an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements auf der Linie zu bestimmen. 
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Gibt die standardmäßige bidirektionale Einbettungsebene des Texts an.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.direction.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernbreite.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitWidth.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Ziffernart.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.digitCase.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:DataGrid" playerVersion="Flash10" type="uint">
<description>
  Farbe des Texts.
 
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.color.</b></p>
   <p><b>Wenn für das Mobile-Design StyleableTextField verwendet wird, finden Sie Informationen unter „spark.components.supportClasses.StyleableTextField Style color“. Bei Verwendung von StyleableStageText siehe „spark.components.supportClasses.StyleableStageText Style color“.</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Die für diesen Text verwendete Art der CFF-Hinweise.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.cffHinting.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  Betrag, um den die Grundlinie verschoben wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.baselineShift.</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  Gibt die Grundlinie an, an der die dominierende Grundlinie ausgerichtet wird.
  
  <p><b>Spark-Design: siehe flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</b></p>
   <p><b>Dies wird im Mobile-Design nicht unterstützt.</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="stretchCursor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  Klasse, die als Skin für den Cursor verwendet werden soll, der anzeigt, dass die Größe einer Spalte geändert werden kann. Der Standardwert ist das <codeph>cursorStretch</codeph>-Symbol aus der Datei „Assets.swf“.
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Inhaltshintergrunds für diese Komponente. Die zulässigen Werte liegen zwischen 0,0 und 1,0. 
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="caretColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Farbe des Einfügezeichenindikators beim Navigieren im Grid.
   </description>
<default>0x0167FF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Steuert die Sichtbarkeit des Rahmens dieser Komponente.
   </description>
<default>true
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Die Farbe des Rahmens dieser Komponente.
   </description>
<default>#696969
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Der Alphawert des Rahmens für diese Komponente. Die zulässigen Werte liegen zwischen 0,0 und 1,0. 
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="alternatingRowColors" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Array">
<description>
  Wird verwendet, um den <codeph>rowBackground</codeph>-Skinteil des DataGrid zu initialisieren. Wenn der <codeph>alternatingRowColors</codeph>-Stil festgelegt ist, verwenden Sie den <codeph>alternatingRowColorsBackground</codeph>-Skinteil als Wert für den <codeph>rowBackground</codeph>-Skinteil. Die wechselnden Farben für die Rasterzeilen werden von aufeinanderfolgenden Einträgen im Arraywert dieses Stils definiert.
   <p>Wenn Sie die Darstellung dieses Stils ändern möchten, ersetzen Sie den <codeph>alternatingRowColorsBackground</codeph>-Skinteil in der DataGridSkin-Klasse. Wenn Sie den Hintergrund für jede Zeile festlegen möchten, initialisieren Sie den <codeph>rowBackground</codeph>-Skinteil direkt.</p>
 
  </description>
<default>undefined
   
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="alternatingRowColorsBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Die IVisualElement-Klasse zum Darstellen des <codeph>alternatingRowColors</codeph>-Stils.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the alternatingRowColors style.</shortdesc></SkinPart><SkinPart name="caretIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Die IVisualElement-Klasse zum Darstellen des Einfügezeichenindikators des Rasters.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the grid's caret indicator.</shortdesc></SkinPart><SkinPart name="columnHeaderGroup" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:GridColumnHeaderGroup">
<description>
      Ein Verweis auf das GridColumnHeaderGroup-Objekt, das die Spaltenüberschriften anzeigt.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the GridColumnHeaderGroup object that displays the column headers.</shortdesc></SkinPart><SkinPart name="columnSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Die IVisualElement-Klasse zum Darstellen des vertikalen Trennzeichens zwischen Spalten. 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the vertical separator between columns.</shortdesc></SkinPart><SkinPart name="editorIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Die IVisualElement-Klasse zum Darstellen eines Hintergrunds für Elementrenderer, die bearbeitet werden. Elementrenderer können nur bearbeitet werden, wenn das Datenraster und die Spalten bearbeitbar sind und für die Spalte <codeph>rendererIsEditable</codeph><codeph> auf „true“ gesetzt ist</codeph>.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render a background behind
      item renderers that are being edited.</shortdesc></SkinPart><SkinPart name="grid" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Grid">
<description>
      Ein Verweis auf das Grid-Steuerelement, das Zeilen und Spalten anzeigt.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Grid control that displays row and columns.</shortdesc></SkinPart><SkinPart name="hoverIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Die IVisualElement-Klasse, die verwendet wird, um Hover-Rückmeldungen zu geben.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to provide hover feedback.</shortdesc></SkinPart><SkinPart name="rowBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Die IVisualElement-Klasse zum Darstellen des Hintergrunds jeder Zeile.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the background of each row.</shortdesc></SkinPart><SkinPart name="rowSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Die IVisualElement-Klasse zum Darstellen des horizontalen Trennzeichens zwischen Überschriftszeilen. 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the horizontal separator between header rows.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      Ein Verweis auf das Scroller-Steuerelement in der Skin-Klasse, das dem DataGrid-Steuerelement Bildlaufleisten hinzufügt.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Scroller control in the skin class 
      that adds scroll bars to the DataGrid control.</shortdesc></SkinPart><SkinPart name="selectionIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      Die IVisualElement-Klasse zum Darstellen ausgewählter Zeilen oder Zellen.
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render selected rows or cells.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataGrid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGrid 
    <strong>Properties</strong>
    columns="null"
    dataProvider="null"  
    dataTipField="null"  
    dataTipFunction="null"
    editable="false"
    editorColumnIndex="-1"
    editorRowIndex="-1"
    imeMode="null"
    itemEditor="null"
    itemRenderer="<i>DefaultGridItemRenderer</i>" 
    preserveSelection="true"
    requestedColumnCount="-1"
    requestedMaxRowCount="-1"
    requestedMinColumnCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount="-1"
    requireSelection="false"
    resizeableColumns="true"
    rowHeight="<i>Calculated default</i>"
    selectedCell="null"
    selectedCells="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedIndex="null"
    selectedIndices="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedItem="null"
    selectedItems="<i>empty Vector.&lt;Object&gt</i>"
    selectionMode="singleRow"
    showDataTips="false"
    sortableColumns="true"
    typicalItem="null"
    variableRowHeight="false" 
 
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontalStem"
    color="0"
    defaultGridItemEditor="null"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="cff"
    stretchCursor="<i>cursorStretch symbol from Assets.swf</i>"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    verticalScrollPolicy="auto"
     <strong>Styles for the Spark Theme</strong>
    alternatingRowColors="undefined"
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    caretColor="0x0167FF"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
 
    <strong>Styles for the Mobile Theme</strong>
    leading="0"
    letterSpacing="0"
    selectionColor="0xE0E0E0"
    symbolColor="0x000000"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridItemEditorSessionCancel="<i>No default</i>"
    gridItemEditorSessionSave="<i>No default</i>"
    gridItemEditorSessionStart="<i>No default</i>"
    gridItemEditorSessionStarting="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    selectionChange="<i>No default</i>"
    selectionChanging="<i>No default</i>"
    sortChange="<i>No default</i>"
    sortChanging="<i>No default</i>" 
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das DataGrid zeigt eine Reihe von Spaltenüberschriften über einem bildlauffähigen Raster an. Das Raster wird als eine Sammlung einzelner, in Zeilen und Spalten angeordneter Zellen angeordnet. Das DataGrid-Steuerelement unterstützt einen flüssigen Bildlauf (Smooth Scrolling) durch zahlreiche Zeilen und Spalten.
   <p>Das Spark-DataGrid-Steuerelement wird als skinfähiger Wrapper um das Spark-Grid-Steuerelement implementiert. Das Grid-Steuerelement definiert die Spalten des Datenrasters und die meisten Funktionen des DataGrid-Steuerelements selbst.</p>
   <p>Die DataGrid-Skin ist zuständig für das Anordnen des Rasters, der Spaltenüberschrift und des Scrollers. Die Skin konfiguriert außerdem die Grafikelemente, die zum Darstellen von als Indikatoren, Trennzeichen und Hintergründe verwendeten, visuellen Elementen verwendet werden. Die DataGrid-Skin definiert außerdem einen Standardelementrenderer, der zum Anzeigen aller Zelleninhalte verwendet wird. In der Dokumentation zu Rendererklassen für die Liste unterstützter Stile finden Sie weitere Informationen.</p>
   <p>Übergänge in DataGrid-Elementrenderern werden nicht unterstützt. Die GridItemRenderer-Klasse hat ihre <codeph>transitions</codeph>-Eigenschaft deaktiviert, d. h. ihr Einstellen bewirkt nichts.</p>
   </apiDesc><example conref="DataGridSimpleExample.mxml"><swfblock conref="examples/DataGridSimpleExample.swf"/></example><example conref="DataGridMasterDetailExample.mxml"><swfblock conref="examples/DataGridMasterDetailExample.swf"/></example><example conref="DataGridTypicalItemExample.mxml"><swfblock conref="examples/DataGridTypicalItemExample.swf"/></example><example conref="DataGridRowHeightExample.mxml"><swfblock conref="examples/DataGridRowHeightExample.swf"/></example><example conref="DataGridSelectionExample.mxml"><swfblock conref="examples/DataGridSelectionExample.swf"/></example><example conref="DataGridInvalidateCellExample.mxml"><swfblock conref="examples/DataGridInvalidateCellExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>spark.components.Grid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link><link href="spark.skins.spark.xml#DataGridSkin"><linktext>spark.skins.spark.DataGridSkin</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL_gridItemEditorSessionCancel"><apiName>gridItemEditorSessionCancel</apiName><shortdesc>
  Wird ausgelöst, wenn der Elementeditor geschlossen wurde, ohne dass die Daten gespeichert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Elementeditor geschlossen wurde, ohne dass die Daten gespeichert wurden.  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE_gridItemEditorSessionSave"><apiName>gridItemEditorSessionSave</apiName><shortdesc>
  Wird ausgelöst, nachdem die Daten des Elementeditors im Datenprovider gespeichert und der Editor geschlossen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem die Daten des Elementeditors im Datenprovider gespeichert und der Editor geschlossen wurde.  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START_gridItemEditorSessionStart"><apiName>gridItemEditorSessionStart</apiName><shortdesc>
  Wird direkt nach dem Öffnen des Elementeditors ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird direkt nach dem Öffnen des Elementeditors ausgelöst. 
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING_gridItemEditorSessionStarting"><apiName>gridItemEditorSessionStarting</apiName><shortdesc>
  Wird ausgelöst, wenn eine neue Elementeditorsitzung angefordert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn eine neue Elementeditorsitzung angefordert wurde. Ein Listener kann dynamisch ermitteln, ob eine Zelle bearbeitet werden kann, und, wenn dies nicht der Fall ist, die Bearbeitung (durch Aufrufen der <codeph>preventDefault()</codeph>-Methode) abbrechen. Ein Listener kann außerdem einer Spalte einen anderen Elementeditor zuweisen und dadurch den verwendeten Editor dynamisch wechseln.
 
  <p>Wenn das Ereignis abgebrochen wird, wird der Elementeditor nicht erstellt.</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link><link href="" invalidHref="flash.events.Event.xml"><linktext>flash.events.Event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGE_sortChange"><apiName>sortChange</apiName><shortdesc>
  Wird ausgelöst, nachdem die Sortierung auf die Sammlung des Datenproviders angewendet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem die Sortierung auf die Sammlung des Datenproviders angewendet wurde. Dies ist für gewöhnlich der Fall, nachdem der Benutzer die Maustaste über einer Spaltenüberschrift losgelassen hat und die Sortierung auf die Sammlung des Datenproviders angewendet wurde. 
  
  <p>Dieses Ereignis wird ausgelöst, wenn der Benutzer mit dem Steuerelement interagiert. Wenn Sie die Sammlung des Datenproviders programmgesteuert sortieren, löst die Komponente kein <codeph>sortChanging</codeph>-Ereignis aus.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGING_sortChanging"><apiName>sortChanging</apiName><shortdesc>
  Wird ausgelöst, bevor die Sortierung auf die Sammlung des Datenproviders angewendet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, bevor die Sortierung auf die Sammlung des Datenproviders angewendet wurde. Dies ist für gewöhnlich der Fall, wenn der Benutzer die Maustaste über einer Spaltenüberschrift loslässt, um das Steuerelement anzuweisen, den Inhalt des Rasters anhand des Inhalts dieser Spalte zu sortieren. Wird nur ausgelöst, wenn die Spalte sortierbar ist und der Datenprovider die Sortierung unterstützt.
  
  <p>Das DataGrid-Steuerelement verfügt über eine Standardprozedur für dieses Ereignis, bei dem eine Sortierung nach einer einzelnen Spalte implementiert wird und die <codeph>visibleSortIndices</codeph> in der <codeph>columnHeaderGroup</codeph> des Rasters mit den <codeph>columnIndices</codeph> aktualisiert werden.</p>
 
  <p>Sortierungen nach mehreren Spalten können implementiert werden, indem die <codeph>preventDefault()</codeph>-Methode aufgerufen wird, um die Sortierung nach einer einzelnen Spalte zu verhindern, und die <codeph>columnIndices</codeph>- und <codeph>newSortFields</codeph>-Parameter des Ereignisses festgelegt werden, um das Standardverhalten zu ändern. <codeph>newSortFields</codeph> müssen auf die gewünschten Sortierfelder gesetzt werden. <codeph>columnIndices</codeph> müssen auf die Indexpositionen der Spalten gesetzt sein, die über einen sichtbaren Sortierindikator im Spaltenüberschriftsbalken verfügen müssen.</p>
   
  <p>Dieses Ereignis wird ausgelöst, wenn der Benutzer mit dem Steuerelement interagiert. Wenn Sie die Sammlung des Datenproviders programmgesteuert sortieren, löst die Komponente kein <codeph>sortChanging</codeph>-Ereignis aus. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  Wird ausgelöst, wenn die Auswahl geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Auswahl geändert wurde. 
  
  <p>Dieses Ereignis wird ausgelöst, wenn der Benutzer mit dem Steuerelement interagiert. Wenn Sie die Auswahl programmgesteuert ändern, löst die Komponente das <codeph>selectionChange</codeph>-Ereignis nicht aus. In beiden Fällen wird außerdem das <codeph>valueCommit</codeph>-Ereignis ausgelöst.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGING_selectionChanging"><apiName>selectionChanging</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Auswahl ändern wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die Auswahl ändern wird. Das Aufrufen der <codeph>preventDefault()</codeph>-Methode im Ereignis verhindert, dass sich die Auswahl ändert.
  
  <p>Dieses Ereignis wird ausgelöst, wenn der Benutzer mit dem Steuerelement interagiert. Wenn Sie die Auswahl programmgesteuert ändern, löst die Komponente das <codeph>selectionChanging</codeph>-Ereignis nicht aus. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  Wird durch den Rasterskinteil ausgelöst, wenn ein Doppelklick über einer Zelle erfolgt..</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den <codeph>grid</codeph>-Skinteil ausgelöst, wenn mit der Maus auf eine Zelle doppelgeklickt wird.
   <p>Weisen Sie zum Verarbeiten dieses Ereignisses dem <codeph>grid</codeph>-Skinteil des DataGrid-Steuerelements eine Ereignisprozedur zu.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  Wird durch den grid-Skinteil ausgelöst, wenn ein Mausklick über einer Zelle erfolgt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den <codeph>grid</codeph>-Skinteil ausgelöst, wenn ein Mausklick über einer Zelle erfolgt.
   <p>Weisen Sie zum Verarbeiten dieses Ereignisses dem <codeph>grid</codeph>-Skinteil des DataGrid-Steuerelements eine Ereignisprozedur zu.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  Wird durch den Rasterskinteil ausgelöst, wenn die Maus eine Rasterzelle verlässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den <codeph>grid</codeph>-Skinteil ausgelöst, wenn die Maus eine Rasterzelle verlässt.
   <p>Weisen Sie zum Verarbeiten dieses Ereignisses dem <codeph>grid</codeph>-Skinteil des DataGrid-Steuerelements eine Ereignisprozedur zu.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  Wird durch den Rasterskinteil ausgelöst, wenn die Maus in eine Rasterzelle hineinbewegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den <codeph>grid</codeph>-Skinteil ausgelöst, wenn die Maus über eine Rasterzelle bewegt wird.
   <p>Weisen Sie zum Verarbeiten dieses Ereignisses dem <codeph>grid</codeph>-Skinteil des DataGrid-Steuerelements eine Ereignisprozedur zu.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  Wird durch den grid-Skinteil nach einem gridMouseDown-Ereignis ausgelöst, wenn die Maustaste losgelassen wird, selbst wenn sich die Maus nicht mehr innerhalb des Rasters befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den <codeph>grid</codeph>-Skinteil nach einem <codeph>gridMouseDown</codeph>-Ereignis ausgelöst, wenn die Maustaste losgelassen wird, selbst wenn sich die Maus nicht mehr innerhalb des Rasters befindet.
   <p>Weisen Sie zum Verarbeiten dieses Ereignisses dem <codeph>grid</codeph>-Skinteil des DataGrid-Steuerelements eine Ereignisprozedur zu.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  Wird durch den grid-Skinteil nach einem gridMouseDown-Ereignis ausgelöst, wenn die Maus vor dem Loslassen der Taste bewegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den <codeph>grid</codeph>-Skinteil nach einem <codeph>gridMouseDown</codeph>-Ereignis ausgelöst, wenn die Maus vor dem Loslassen der Taste bewegt wird.
   <p>Weisen Sie zum Verarbeiten dieses Ereignisses dem <codeph>grid</codeph>-Skinteil des DataGrid-Steuerelements eine Ereignisprozedur zu.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  Wird durch den grid-Skinteil ausgelöst, wenn die Maustaste über einer Rasterzelle gedrückt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den <codeph>grid</codeph>-Skinteil ausgelöst, wenn die Maustaste über einer Rasterzelle gedrückt wird.
   <p>Weisen Sie zum Verarbeiten dieses Ereignisses dem <codeph>grid</codeph>-Skinteil des DataGrid-Steuerelements eine Ereignisprozedur zu.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  Wird vom Skinteil des Rasters ausgelöst, wenn die Position, die Größe oder die Sichtbarkeit des Einfügezeichens durch Benutzerinteraktion oder Programmierung geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den <codeph>grid</codeph>-Skinteil ausgelöst, wenn die Position, die Größe oder die Sichtbarkeit des Einfügezeichens durch Benutzerinteraktion oder Programmierung geändert wurde.
   <p>Weisen Sie zum Verarbeiten dieses Ereignisses dem <codeph>grid</codeph>-Skinteil des DataGrid-Steuerelements eine Ereignisprozedur zu.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGrid:DataGrid"><apiName>DataGrid</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGrid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc conref="spark.components.Grid#addSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>rowIndex</codeph> oder <codeph>columnIndex</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc conref="spark.components.Grid#addSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>index</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:clearSelection"><apiName>clearSelection</apiName><shortdesc conref="spark.components.Grid#clearSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn sich die Auswahl geändert hat. <codeph>false</codeph>, wenn nichts zuvor ausgewählt wurde.
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#clearSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitCaretPosition"><apiName>commitCaretPosition</apiName><shortdesc>
      Aktualisiert die Position des Einfügezeichens des Rasters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newCaretRowIndex</apiItemName><apiType value="int"/><apiDesc>Der auf null basierende rowIndex der neuen Einfügezeichenposition.
     
      </apiDesc></apiParam><apiParam><apiItemName>newCaretColumnIndex</apiItemName><apiType value="int"/><apiDesc>Der auf null basierende columnIndex der neuen Einfügezeichenposition. Der Wert ist „-1“, wenn der selectionMode zeilenbasiert ist.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Aktualisiert die Position des Einfügezeichens des Rasters. Wenn sich die Position des Einfügezeichens ändert, löst der <codeph>grid</codeph>-Skinteil ein <codeph>caretChange</codeph>-Ereignis aus.
           </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridCaretEvent/CARET_CHANGE"><linktext>spark.events.GridCaretEvent.CARET_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitInteractiveSelection"><apiName>commitInteractiveSelection</apiName><shortdesc>
      Diese Methode löst als Reaktion auf eine Benutzereingabe (Maus oder Tastatur), durch die die Auswahl geändert wird, das selectionChanging-Ereignis aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die Auswahl übernommen oder nicht geändert wurde, oder <codeph>false</codeph>, wenn die Auswahl abgebrochen wurde oder aufgrund eines Fehlers nicht übernommen werden konnte, wie beispielsweise bei einer Indexposition außerhalb des gültigen Bereichs oder wenn das <codeph>selectionEventKind</codeph>-Ereignis nicht mit dem <codeph>selectionMode</codeph> kompatibel ist.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>selectionEventKind</apiItemName><apiType value="String"/><apiDesc>Eine Konstante, die durch die GridSelectionEventKind-Klasse definiert wurde, die die übernommene Auswahl festlegt. Bei einem anderen Wert als null wird dies zum Erzeugen des <codeph>selectionChanging</codeph>-Ereignisses verwendet.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Wenn <codeph>selectionEventKind</codeph> sich auf eine Zeile oder Zelle bezieht: der auf null basierende <codeph>rowIndex</codeph> der Auswahl im Datenprovider. Wenn <codeph>selectionEventKind</codeph> sich auf mehrere Zellen bezieht: der auf null basierende <codeph>rowIndex</codeph> des Ursprungs des Zellbereichs. Der Standardwert „-1“ gibt an, dass dieser Parameter nicht verwendet wird.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Wenn <codeph>selectionEventKind</codeph> sich auf eine einzelne Zeile oder Zelle bezieht: der auf null basierende <codeph>columnIndex</codeph> der Auswahl. Wenn <codeph>selectionEventKind</codeph> sich auf mehrere Zellen bezieht: der auf null basierende <codeph>columnIndex</codeph> des Ursprungs des Zellbereichs. Der Standardwert „-1“ gibt an, dass dieser Parameter nicht verwendet wird.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc>Wenn <codeph>selectionEventKind</codeph> sich auf einen Zellbereich bezieht: die Anzahl der Zeilen im Zellbereich. Der Standardwert „-1“ gibt an, dass dieser Parameter nicht verwendet wird.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc>Wenn <codeph>selectionEventKind</codeph> sich auf einen Zellbereich bezieht: die Anzahl der Spalten im Zellbereich. Der Standardwert „-1“ gibt an, dass dieser Parameter nicht verwendet wird.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Diese Methode löst als Reaktion auf eine Benutzereingabe (Maus oder Tastatur), durch die die Auswahl geändert wird, das <codeph>selectionChanging</codeph>-Ereignis aus. Wenn das Ereignis nicht abgebrochen wird, übernimmt es die Auswahländerung und löst das <codeph>selectionChange</codeph>-Ereignis aus. Die Position des Einfügezeichens wird nicht aktualisiert. Mithilfe des <codeph>caretChanged-Ereignisses</codeph> können Sie erkennen, ob sich das Einfügezeichen geändert hat.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGE"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGE</linktext></link><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGING"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGING</linktext></link><link href="spark.events.xml#GridSelectionEventKind"><linktext>spark.events.GridSelectionEventKind</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:endItemEditorSession"><apiName>endItemEditorSession</apiName><shortdesc>
      Schließt den zurzeit aktiven Editor und speichert optional die Werte des Editors, indem die save()-Methode des Elementeditors aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die Editorsitzung gespeichert wurde, und <codeph>false</codeph>, wenn der Speichervorgang abgebrochen wurde.  
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cancel</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn <codeph>false</codeph>, werden die Daten im Editor gespeichert. Anderenfalls werden die Daten im Editor verworfen.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Schließt den zurzeit aktiven Editor und speichert optional die Werte des Editors, indem die <codeph>save()</codeph>-Methode des Elementeditors aufgerufen wird. Wenn der <codeph>cancel</codeph>-Parameter <codeph>true</codeph> lautet, wird stattdessen die <codeph>cancel()</codeph>-Methode des Editors aufgerufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc conref="spark.components.Grid#ensureCellIsVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle des Elementrenderers oder „-1“, um eine Spalte anzugeben.
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Die auf null basierende Spaltenindexposition der Zelle des Elementrenderers oder „-1“, um eine Zeile anzugeben.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#ensureCellIsVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc conref="spark.components.Grid#invalidateCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle, die geändert wurde, oder -1.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle, die geändert wurde, oder „-1“.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateTypicalItem"><apiName>invalidateTypicalItem</apiName><shortdesc conref="spark.components.Grid#invalidateTypicalItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateTypicalItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc conref="spark.components.Grid#removeSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>rowIndex</codeph> oder <codeph>columnIndex</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc conref="spark.components.Grid#removeSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>index</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist. 
           
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.components.Grid#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>True</codeph>, wenn die Auswahl geändert wurde.
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#selectAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc conref="spark.components.Grid#selectCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn der Zellbereich oder der <codeph>selectionMode</codeph> ungültig ist.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition des Ursprungs des Zellbereichs.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition des Ursprungs des Zellbereichs.
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc>Die Anzahl der Zeilen beginnend mit <codeph>rowIndex</codeph>, die im Zellbereich enthalten sein sollen.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc>Die Anzahl der Spalten beginnend mit <codeph>columnIndex</codeph>, die im Zellbereich enthalten sein sollen.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectIndices"><apiName>selectIndices</apiName><shortdesc conref="spark.components.Grid#selectIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn eine Indexposition ungültig ist, <codeph>startRowIndex</codeph> nicht kleiner oder gleich <codeph>endRowIndex</codeph> ist oder der <codeph>selectionMode</codeph> ungültig ist. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der ersten Zeile in der Auswahl.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der Zeilen in der Auswahl.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn die aktuelle Auswahl alle Zellen im Zellbereich enthält.
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der Zeilen beginnend mit <codeph>rowIndex</codeph>, die im Zellbereich enthalten sein sollen.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc>Die Anzahl der Spalten beginnend mit <codeph>columnIndex</codeph>, die im Zellbereich enthalten sein sollen.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc conref="spark.components.Grid#selectionContainsCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn die aktuelle Auswahl die Zelle enthält.
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn die Auswahl die Zeile enthält.
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zeile.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn die aktuelle Auswahl diese Zeilen enthält.
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Vektor von auf null basierenden Zeilenindexpositionen, die in der Auswahl enthalten sein sollen. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc conref="spark.components.Grid#setSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true </codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>rowIndex</codeph> oder <codeph>columnIndex</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist.     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der Zelle. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc conref="spark.components.Grid#setSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true </codeph>, wenn keine Fehler. <codeph>false</codeph>, wenn <codeph>index</codeph> ungültig ist oder der <codeph>selectionMode</codeph> ungültig ist. 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der Zelle.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:sortByColumns"><apiName>sortByColumns</apiName><shortdesc>
      Sortiert das DataGrid nach einer oder mehreren Spalten und aktualisiert die Anzeige.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn der <codeph>dataProvider</codeph> nach den angegebenen Spaltenindexpositionen sortiert wurde.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndices</apiItemName><apiType value="Vector$int"/><apiDesc>Die Indexpositionen der Spalten, nach denen der <codeph>dataProvider</codeph> sortiert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>isInteractive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn „true“, werden <codeph>GridSortEvent.SORT_CHANGING</codeph>- und <codeph>GridSortEvent.SORT_CHANGE</codeph>-Ereignisse ausgelöst und die Spaltenüberschriftsgruppe <codeph>visibleSortIndicatorIndices</codeph> wird mit <codeph>columnIndices</codeph> aktualisiert, wenn das <codeph>GridSortEvent.SORT_CHANGING</codeph>-Ereignis nicht abgebrochen wird.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sortiert das DataGrid nach einer oder mehreren Spalten und aktualisiert die Anzeige.
     
      <p>Wenn der <codeph>dataProvider</codeph> eine ICollectionView ist, wird für seine <codeph>sort</codeph>-Eigenschaft ein Wert basierend auf dem <codeph>dataField</codeph>, der <codeph>sortCompareFunction</codeph> und dem <codeph>sortDescending</codeph>-Flag jeder Spalte festgelegt. Daraufhin wird die <codeph>refresh()</codeph>-Methode des Datenproviders aufgerufen. </p>
      
      <p>Wenn der <codeph>dataProvider</codeph> keine ICollectionView ist, ist diese Methode wirkungslos.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortCompareFunction"><linktext>spark.components.gridClasses.GridColumn.sortCompareFunction</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortDescending"><linktext>spark.components.gridClasses.GridColumn.sortDescending</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortField"><linktext>spark.components.gridClasses.GridColumn.sortField</linktext></link><link href="" invalidHref="spark.components.gridClasses.xml#GridColumnHeaderGroup/visibleSortIndicatorIndices"><linktext>spark.components.gridClasses.GridColumnHeaderGroup.visibleSortIndicatorIndices</linktext></link><link href="spark.events.xml#GridSortEvent"><linktext>spark.events.GridSortEvent</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:startItemEditorSession"><apiName>startItemEditorSession</apiName><shortdesc>
      Startet eine Editorsitzung für eine ausgewählte Zelle im Raster.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die Editorsitzung gestartet wurde. Gibt <codeph>false</codeph> zurück, wenn die Editorsitzung abgebrochen wurde oder nicht gestartet werden konnte. Beachten Sie, dass eine Editorsitzung in einer nicht sichtbaren Spalte nicht gestartet werden kann.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Zeilenindexposition der zu bearbeitenden Zelle.
           </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Spaltenindexposition der zu bearbeitenden Zelle.  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Startet eine Editorsitzung für eine ausgewählte Zelle im Raster. Diese Methode umgeht Prüfungen der bearbeitbaren Eigenschaft auf dem DataGrid und GridColumn, wodurch verhindert wird, dass die Benutzeroberfläche eine neue Editorsitzung startet. Ein <codeph>startItemEditorSession</codeph>-Ereignis wird ausgelöst, bevor ein Elementeditor erstellt wird. So kann ein Listener den Elementeditor für eine bestimmte Zelle dynamisch ändern. Das Ereignis kann auch durch Aufrufen der <codeph>preventDefault()</codeph>-Methode abgebrochen werden, um zu verhindern, dass die Editorsitzung erstellt wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGrid:columnsLength:get"><apiName>columnsLength</apiName><shortdesc>
      Gibt den Wert von columns.length zurück, wenn die IList der Liste festgelegt wurde, anderenfalls „0“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Gibt den Wert von <codeph>columns.length</codeph> zurück, wenn die IList der Liste festgelegt wurde, anderenfalls „0“.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:columns:get"><apiName>columns</apiName><shortdesc conref="spark.components.Grid#columns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#columns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProviderLength:get"><apiName>dataProviderLength</apiName><shortdesc>
      Gibt den Wert von dataProvider.length zurück, wenn die IList des dataProvider festgelegt wurde, anderenfalls „0“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Gibt den Wert von <codeph>dataProvider.length</codeph> zurück, wenn die IList des dataProvider festgelegt wurde, anderenfalls „0“.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.Grid#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataProvider">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.Grid#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.Grid#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editable:get"><apiName>editable</apiName><shortdesc>
      Der Standardwert für die editable-Eigenschaft der GridColumn, der angibt, ob das Datenproviderelement einer entsprechenden Zelle bearbeitet werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>editable</codeph>-Eigenschaft der GridColumn, der angibt, ob das Datenproviderelement einer entsprechenden Zelle bearbeitet werden kann. Wenn <codeph>true</codeph>, wird beim Klicken auf eine ausgewählte Zelle ein Elementeditor geöffnet. Sie können die Bearbeitung für einzelne Zellen (anstatt für einzelne Spalten) aktivieren oder deaktivieren, indem Sie das <codeph>startItemEditorSession</codeph>-Ereignis verarbeiten. Fügen Sie in der Ereignisprozedur die notwendige Logik hinzu, um zu bestimmen, ob die Zelle bearbeitbar sein soll. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorColumnIndex:get"><apiName>editorColumnIndex</apiName><shortdesc>
      Die auf null basierende Spaltenindexposition der Zelle, die bearbeitet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die auf null basierende Spaltenindexposition der Zelle, die bearbeitet wird. Der Wert ist -1, wenn keine Zelle bearbeitet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorRowIndex:get"><apiName>editorRowIndex</apiName><shortdesc>
      Die auf null basierende Zeilenindexposition der Zelle, die bearbeitet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die auf null basierende Zeilenindexposition der Zelle, die bearbeitet wird. Der Wert ist -1, wenn keine Zelle bearbeitet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält. Wenn der Elementeditor geöffnet ist, wird diese Eigenschaft entsprechend festgelegt.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Der Standardwert für die imeMode-Eigenschaft der GridColumn, der den Modus des Eingabemethodeneditors (IME) angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>imeMode</codeph>-Eigenschaft der GridColumn, der den Modus des Eingabemethodeneditors (IME) angibt. Mithilfe des Eingabemethodeneditors können chinesische, japanische und koreanische Schriftzeichen eingegeben werden. Flex stellt den festgelegten IME-Modus ein, wenn das Steuerelement den Fokus erhält und setzt es auf den vorherigen Wert zurück, wenn das Steuerelement den Fokus verliert.
          <p>Die flash.system.IMEConversionMode-Klasse definiert Konstanten für gültige Werte dieser Eigenschaft. Sie können auch <codeph>null</codeph> festlegen, um keinen IME festzulegen.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemEditorInstance:get"><apiName>itemEditorInstance</apiName><shortdesc>
      Ein Verweis auf die derzeit aktive Instanz des Elementeditors, falls vorhanden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.gridClasses:IGridItemEditor</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf die derzeit aktive Instanz des Elementeditors, falls vorhanden.
           <p>Verwenden Sie die <codeph>itemEditorInstance</codeph>-Eigenschaft, um bei der Bearbeitung eines Elements auf die Instanz des Elementeditors und den neuen Elementwert zuzugreifen. Die <codeph>itemEditorInstance</codeph>-Eigenschaft ist erst gültig, wenn das <codeph>itemEditorSessionStart</codeph>-Ereignis ausgelöst wird.</p>
           <p>Die <codeph>DataGridColumn.itemEditor</codeph>-Eigenschaft definiert die Klasse des Elementeditors und somit auch den Datentyp für die Instanz des Elementeditors.</p>
           <p>Stellen Sie diese Eigenschaft nicht in MXML ein.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:itemEditor:get"><apiName>itemEditor</apiName><shortdesc>
      Der Standardwert für die itemEditor-Eigenschaft der GridColumn, der die zum Erstellen von Elementeditorinstanzen verwendete IGridItemEditor-Klasse angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemEditorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null.
           </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>itemEditor</codeph>-Eigenschaft der GridColumn, der die zum Erstellen von Elementeditorinstanzen verwendete IGridItemEditor-Klasse angibt.
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataField"><linktext>dataField</linktext></link><link href="spark.components.gridClasses.xml#IGridItemEditor"><linktext>spark.components.gridClasses.IGridItemEditor</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.Grid#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>DefaultGridItemRenderer
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#itemRenderer">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc conref="spark.components.Grid#preserveSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#preserveSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.components.Grid#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc conref="spark.components.Grid#requireSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requireSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc conref="spark.components.Grid#resizableColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#resizableColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.components.Grid#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.Grid#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc conref="spark.components.Grid#selectedCell">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedCell">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc conref="spark.components.Grid#selectedCells">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedCells">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc conref="spark.components.Grid#selectedIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc conref="spark.components.Grid#selectedIndices">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndices">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc conref="spark.components.Grid#selectedItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc conref="spark.components.Grid#selectedItems">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedItems">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc conref="spark.components.Grid#selectionLength">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectionLength">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc conref="spark.components.Grid#selectionMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectionMode">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc conref="spark.components.Grid#showDataTips">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#showDataTips">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:sortableColumns:get"><apiName>sortableColumns</apiName><shortdesc>
      Legt fest, ob der Benutzer Spalten interaktiv sortieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt fest, ob der Benutzer Spalten interaktiv sortieren kann. Wenn <codeph>true</codeph>, kann der Benutzer den Datenprovider nach dem Datenfeld einer Spalte sortieren, indem er auf die Überschrift der Spalte klickt. Wenn <codeph>true</codeph>, kann eine einzelne Spalte für ihre <codeph>sortable</codeph>-Eigenschaft <codeph>false</codeph> festlegen, um zu verhindern, dass der Benutzer nach dieser Spalte sortiert.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.Grid#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#typicalItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.components.Grid#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  Mit der RadioButtonGroup-Komponente wird eine Gruppe von RadioButton-Komponenten definiert, die jeweils als einzelne, die anderen Möglichkeiten ausschließende Komponente auftreten; daher kann der Benutzer nur jeweils eine RadioButton-Komponente auswählen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true"
    selectedValue="null"
    selection="null"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
    valueCommit="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit der RadioButtonGroup-Komponente wird eine Gruppe von RadioButton-Komponenten definiert, die jeweils als einzelne, die anderen Möglichkeiten ausschließende Komponente auftreten; daher kann der Benutzer nur jeweils eine RadioButton-Komponente auswählen. Die <codeph>id</codeph>-Eigenschaft wird benötigt, wenn der Name der Gruppe mithilfe des Tags <codeph>&lt;s:RadioButtonGroup></codeph> definiert wird. Alle zu dieser Gruppe hinzugefügten <codeph>&lt;s:RadioButton></codeph>-Komponenten erhalten diesen Gruppennamen.
 
  <p>Die RadioButtonGroup-Komponente ist eine Unterklasse von EventDispatcher, nicht von UIComponent, und implementiert die IMXMLObject-Schnittstelle. Alle anderen visuellen Komponenten von Flex implementieren die IVisualElement-Schnittstelle. Die RadioButtonGroup-Komponentendeklaration muss im Tag <codeph>&lt;Declarations></codeph> enthalten sein, da sie IVisualElement nicht zugewiesen werden kann.</p> 
 
  <p>Erstellen Sie einen Elementrenderer, um diese Komponente in einer listenbasierten Komponente wie beispielsweise einer Liste oder einem DataGrid zu verwenden. Weitere Informationen zum Erstellen eines Elementrenderers finden Sie unter <xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html"> Benutzerdefinierte Spark-Elementrenderer</xref>. </p>
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Wird ausgelöst, wenn Werte programmgesteuert oder durch Benutzerinteraktion geändert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn Werte programmgesteuert oder durch Benutzerinteraktion geändert werden.
 
  <p>Da dieses Ereignis durch eine programmgesteuerte Änderung ausgelöst wird, müssen Sie sicherstellen, dass keine <codeph>valueCommit</codeph>-Ereignisprozedur einen Wert ändert, der zu einem weiteren <codeph>valueCommit</codeph>-Ereignis führt. Beispiel: Ändern Sie die <codeph>selectedValue</codeph>-Eigenschaft oder die <codeph>selection</codeph>-Eigenschaft nicht in einer <codeph>valueCommit</codeph>-Ereignisprozedur. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer eine RadioButton-Komponente der Gruppe aktiviert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer eine RadioButton-Komponente der Gruppe aktiviert. Sie können außerdem eine Prozedur für einzelne RadioButton-Komponenten festlegen. Dieses Ereignis wird nur ausgelöst, wenn der Benutzer über die Maus mit den Optionsschaltern interagiert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn der Wert der ausgewählten RadioButton-Komponente dieser Gruppe geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Wert der ausgewählten RadioButton-Komponente dieser Gruppe geändert wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>In einfachen Fällen, in denen eine Klasse EventDispatcher erweitert, sollte der <codeph>document</codeph>-Parameter nicht verwendet werden.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="spark.components:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      Gibt die RadioButton-Komponente an der angegebenen Indexposition zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die angegebene RadioButton-Komponente, wenn die Indexposition zwischen 0 und <codeph>numRadioButtons</codeph> - 1 liegt. Gibt <codeph>null</codeph> zurück, wenn die Indexposition ungültig ist.
     
      </apiDesc><apiOperationClassifier>spark.components:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition des RadioButton-Steuerelements in der RadioButtonGroup.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die RadioButton-Komponente an der angegebenen Indexposition zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="spark.components.numRadioButtons.xml"><linktext>numRadioButtons</linktext></link></related-links></apiOperation><apiOperation id="spark.components:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      Implementierung der IMXMLObject.initialized()-Methode, um eine zurückgestellte Instanziierung zu unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Das MXML-Dokument, das dieses Objekt erstellt hat.
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Der vom Dokument für den Verweis auf dieses Objekt verwendete Bezeichner. Ist das Objekt eine verschachtelte Eigenschaft des Dokuments, nimmt<codeph>id</codeph> den Wert Null an.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Implementierung der <codeph>IMXMLObject.initialized()</codeph>-Methode zur Unterstützung verzögerter Instanziierung.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IMXMLObject.xml"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="spark.components:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      Bestimmt, ob die Auswahl zulässig ist</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bestimmt, ob die Auswahl zulässig ist Beachten Sie, dass der zurückgegebene Wert nur den Wert widerspiegelt, der explizit für <codeph>RadioButtonGroup</codeph> festgelegt wurde, und keine anderen Werte, die für die einzelnen RadioButtons festgelegt wurden. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      Die Anzahl der RadioButtons in dieser RadioButtonGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="numRadioButtonsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"0"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Anzahl der RadioButtons in dieser RadioButtonGroup.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      Die value-Eigenschaft der ausgewählten RadioButton-Komponente in der Gruppe, falls ein Wert eingestellt wurde, ansonsten die label-Eigenschaft des ausgewählten RadioButton-Steuerelements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die <codeph>value</codeph>-Eigenschaft der ausgewählten RadioButton-Komponente in der Gruppe, falls ein Wert eingestellt wurde, ansonsten die <codeph>label</codeph>-Eigenschaft des ausgewählten RadioButton-Steuerelements. Ist kein RadioButton ausgewählt, hat diese Eigenschaft den Wert <codeph>null</codeph>.
     
      <p>Wenn Sie einen Wert für <codeph>selectedValue</codeph> festlegen, wählt Flex die erste RadioButton-Komponente aus, deren <codeph>value</codeph>- oder <codeph>label</codeph>-Eigenschaft diesem Wert entspricht.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      Enthält einen Verweis auf die aktuell ausgewählte RadioButton-Komponente der Gruppe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Enthält einen Verweis auf die aktuell ausgewählte RadioButton-Komponente der Gruppe. Auf diese Eigenschaft können Sie nur in ActionScript zugreifen. In MXML kann sie nicht festgelegt werden. Wenn Sie für diese Eigenschaft den Wert <codeph>null</codeph> festlegen, wird die momentan ausgewählte RadioButton-Komponente deaktiviert. Es wird kein change-Ereignis ausgelöst.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  Mithilfe des VScrollBar-Steuerelements (vertikale Bildlaufleiste) können Sie steuern, welche Daten angezeigt werden, wenn zu viele Daten vorhanden sind und diese vertikal nicht in den Anzeigebereich passen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:VScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VScrollBar
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
   
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe des VScrollBar-Steuerelements (vertikale Bildlaufleiste) können Sie steuern, welche Daten angezeigt werden, wenn zu viele Daten vorhanden sind und diese vertikal nicht in den Anzeigebereich passen.
 
  <p>Obwohl das VScrollBar-Steuerelement auch als allein stehendes Steuerelement verwendet werden kann, wird es üblicherweise in Kombination in einer Komponentengruppe für die Bildlauffunktion verwendet.</p>
   <p>Das VScrollBar-Steuerelement verfügt über die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>15 Pixel breit und 85 Pixel hoch</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>15 Pixel breit und 15 Pixel hoch</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row><row>
           <entry>Standardskinklassen</entry>
           <entry>spark.skins.spark.VScrollBarSkin
              <p>spark.skins.spark.VScrollBarThumbSkin</p>
              <p>spark.skins.spark.VScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VScrollBarSkin"><linktext>spark.skins.spark.VScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  Wird ausgelöst, wenn sich die verticalScrollPosition aufgrund eines mouseWheel-Ereignisses ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>verticalScrollPosition</codeph> aufgrund eines <codeph>mouseWheel</codeph>-Ereignisses ändert.
 
  <p>Der Bildlauf erfolgt in vertikaler Richtung gemäß der für dieses Ereignis standardmäßig festgelegten <codeph>delta</codeph>-Anzahl von „Schritten“. Die <codeph>getVerticalScrollPositionDelta</codeph>-Methode des Viewports, die abhängig von der Bildlaufrichtung entweder <codeph>UP</codeph> oder <codeph>DOWN</codeph> verwendet, legt die Höhe des Schritts fest.</p>
 
  <p>Das Aufrufen der <codeph>preventDefault()</codeph>-Methode im Ereignis verhindet, dass sich die vertikale Bildlaufposition ändert. Wenn Sie die <codeph>delta</codeph>-Eigenschaft des Ereignisses modifizieren, wird dieser Wert als die Anzahl vertikaler „Schritte“ verwendet. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      Wert um eine Seite inkrementieren, wenn „increase“ den Wert „true“ hat, oder Wert um eine Seite dekrementieren, wenn „increase“ den Wert „false“ hat</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Ob Inkrementieren (<codeph>true</codeph>) oder Dekrementieren (<codeph>false</codeph>) von <codeph>value</codeph> erfolgen soll. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>value</codeph> um eine Seite inkrementieren, wenn <codeph>increase</codeph> den Wert <codeph>true</codeph> hat, oder <codeph>value</codeph>um eine Seite dekrementieren, wenn <codeph>increase</codeph> den Wert <codeph>false</codeph> hat Durch Erhöhen des <codeph>value</codeph> der Bildlaufleiste wird ein Bildlauf im Viewport nach oben durchgeführt. Durch Verringern des <codeph>value</codeph> erfolgt ein Bildlauf im Viewport nach unten.
      
      <p>Ist die <codeph>viewport</codeph>-Eigenschaft festgelegt, dann wird mit ihrer <codeph>getVerticalScrollPositionDelta()</codeph>-Methode die Größe der Seiteninkrementierung berechnet. Wenn <codeph>viewport</codeph> den Wert „null“ hat, wird die <codeph>pageSize</codeph>-Eigenschaft der Bildlaufleiste verwendet.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      Wenn „viewport“ nicht gleich null ist, wird die vertikale Bildlaufposition für einen Zeilenwechsel nach oben oder unten im Viewport geändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Ob der Zeilenbildlauf nach oben (<codeph>true)</codeph> oder nach unten (<codeph>false</codeph>) erfolgt. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wenn <codeph>viewport</codeph> nicht gleich null ist, wird die vertikale Bildlaufposition für einen Zeilenwechsel nach oben oder unten im Viewport geändert. Diese Methode berechnet den Umfang des Bildlaufs, indem sie die <codeph>IViewport.getVerticalScrollPositionDelta()</codeph>-Methode mit <codeph>flash.ui.Keyboard.RIGHT</codeph> oder <codeph>flash.ui.Keyboard.LEFT</codeph> aufruft. Anschließend ruft sie die <codeph>setValue()</codeph>-Methode auf, um die <codeph>IViewport.verticalScrollPosition</codeph>-Eigenschaft auf den entsprechenden Wert einzustellen.
           <p>Wenn <codeph>viewport</codeph> gleich null ist, ändert sich durch Aufrufen dieser Methode die vertikale Bildlaufposition bei einem Zeilenwechsel nach oben oder unten, indem die <codeph>changeValueByPage()</codeph>-Methode aufgerufen wird.</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      Aktualisiert die value-Eigenschaft. Wenn „viewport“ nicht null ist, wird die zugehörige verticalScrollPosition auf „value“ gesetzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Der neue Wert der <codeph>value</codeph>-Eigenschaft. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Aktualisiert die value-Eigenschaft. Wenn <codeph>viewport</codeph> nicht null ist, wird die zugehörige <codeph>verticalScrollPosition</codeph> auf <codeph>value</codeph> gesetzt.
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VScrollBar/viewport"><linktext>viewport</linktext></link></related-links></apiOperation><apiValue id="spark.components:VScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      Der Viewport, der durch diese Bildlaufleiste gesteuert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Viewport, der durch diese Bildlaufleiste gesteuert wird.
      
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  Bei der VideoDisplay-Klasse handelt es sich um einen Videoplayer ohne Chrom, der progressive Downloads, Multibitrate-Streaming und Streaming-Videos unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoDisplay">
<description>
 Da diese Komponente keine Skin für das Mobile-Design definiert, wird empfohlen, dass Sie sie nicht in einer Mobilanwendung verwenden. Sie können auch eine eigene Mobile-Skin für die Komponente definieren. Weitere Informationen finden Sie unter <xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Grundlagen des Mobilskinnings</xref>.
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoDisplay&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoDisplay 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Bei der VideoDisplay-Klasse handelt es sich um einen Videoplayer ohne Chrom, der progressive Downloads, Multibitrate-Streaming und Streaming-Videos unterstützt.
 
  <p><codeph>VideoDisplay</codeph> ist die Version ohne Chrom, die Skinning nicht unterstützt. Dies ist nützlich, wenn Sie verhindern möchten, dass die Benutzer in die Steuerung eingreifen.</p>
 
  <p><codeph>VideoPlayer</codeph> ist die skinfähige Version.</p>
   <p>Das VideoDisplay-Steuerelement hat die folgenden Standardmerkmale:</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row>
           <entry>Standardgröße</entry>
           <entry>Ohne Inhalt 0 Pixel breit und 0 Pixel hoch, mit Inhalt entsprechen Breite und Höhe dem Video mit dem Inhalt</entry>
        </row><row>
           <entry>Minimale Größe</entry>
           <entry>0</entry>
        </row><row>
           <entry>Maximale Größe</entry>
           <entry>10000 Pixel breit und 10000 Pixel hoch</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoDisplayExample.mxml"><swfblock conref="examples/VideoDisplayExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link></related-links><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  Wird nach einer Änderung des Status des MediaPlayer-Steuerelements ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einer Änderung des Status des MediaPlayer-Steuerelements ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  Wird ausgelöst, wenn die duration-Eigenschaft des Mediums geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die <codeph>duration</codeph>-Eigenschaft des Mediums geändert wurde.
 
  <p>Dieses Ereignis wird möglicherweise nicht ausgelöst, wenn die Quelle auf null gesetzt wurde oder ein Wiedergabefehler auftritt.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  Wird ausgelöst, wenn die currentTime-Eigenschaft des MediaPlayer-Steuerelements geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die <codeph>currentTime</codeph>-Eigenschaft des MediaPlayer-Steuerelements geändert wurde.
 
  <p>Dieses Ereignis wird möglicherweise nicht ausgelöst, wenn die Quelle auf null gesetzt wurde oder ein Wiedergabefehler auftritt.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Wird ausgelöst, wenn der Abspielkopf die Wiedergabedauer der abspielbaren Medien erreicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Abspielkopf die Wiedergabedauer der abspielbaren Medien erreicht.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  Wird ausgelöst, wenn die Daten während des Downloadvorgangs empfangen werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Daten während des Downloadvorgangs empfangen werden. Dieses Ereignis wird nur ausgelöst, wenn ein Video wiedergegeben wird, indem es direkt von einem Server heruntergeladen wird. Dies erfolgt normalerweise durch die Ausgabe einer HTTP-Anforderung. Es wird nicht ausgelöst, wenn ein Video auf einem speziellen Medienserver wiedergegeben wird, beispielsweise einem Flash Media Server.
 
  <p>Dieses Ereignis wird möglicherweise nicht ausgelöst, wenn die Quelle auf null gesetzt wurde oder ein Wiedergabefehler auftritt.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      Hält die Wiedergabe an, ohne den Abspielkopf zu verschieben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Hält die Wiedergabe an, ohne den Playhead zu verschieben. Wurde die Wiedergabe bereits angehalten oder beendet, hat diese Methode keine Wirkung.  
           <p>Um die Wiedergabe erneut zu starten, rufen Sie die <codeph>play()</codeph>-Methode auf.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      Löst das Abspielen des Videos aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Löst das Abspielen des Videos aus. Kann aufgerufen werden, während das Video angehalten oder beendet wurde oder während es bereits abgespielt wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:seek"><apiName>seek</apiName><shortdesc>
      Sucht bis zur gegebenen Zeit im Video.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>Die Suchzeit in Sekunden.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sucht bis zur gegebenen Zeit im Video. Wird das Video gerade abgespielt, Wiedergabe von diesem Punkt an fortsetzen. Ist das Video angehalten, Vor-/Rücklauf bis zu diesem Punkt durchführen und Video weiterhin anhalten. Ist das Video beendet, Vor-/Rücklauf bis zu diesem Punkt durchführen und das Video dann anhalten. Bei Live-Videostreams hat diese Methode keine Wirkung.
           <p>Wenn der Wert für „time“ kleiner 0 oder gleich NaN ist, wird eine Ausnahme ausgegeben. Wenn der Wert für „time“ nach dem Ende des Streams oder des bereits heruntergeladenen Teils der Datei liegt, wird der Suchlauf dennoch ausgeführt und bei einem Fehler eine Wiederherstellung durchgeführt.</p>
     
      <p>Unter Umständen weist die <codeph>currentTime</codeph>-Eigenschaft unmittelbar nach dem Aufruf von <codeph>seek()</codeph> nicht den erwarteten Wert auf. Bei einem progressiven Download können Sie nur nach einem Schlüsselbild suchen; deshalb bringt ein Suchlauf Sie zu der Zeit des ersten Schlüsselbilds nach der angegebenen Zeit.</p>
      
      <p><b>Hinweis</b>: Beim Streaming führt eine Suche immer zu der exakt angegebenen Zeit, selbst wenn die FLV-Quelldatei an dieser Stelle über kein Schlüsselbild verfügt.</p>
           <p>Die Suche erfolgt nicht synchron. Das heißt, wenn Sie die <codeph>seek()</codeph>-Methode aufrufen, wird <codeph>currentTime</codeph> nicht sofort aktualisiert. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      Beendet die Videowiedergabe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Beendet die Videowiedergabe. Wenn <codeph>autoRewind</codeph> auf <codeph>true</codeph> eingestellt ist, wird zum ersten Bild zurückgespult. Wenn das Video bereits beendet ist, hat dies keine Auswirkungen. Um die Wiedergabe erneut zu starten, rufen Sie <codeph>play()</codeph> auf. 
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="spark.components:VideoDisplay:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc>
      Ist autoPlay = false, dann steuert autoDisplayFirstFrame, ob das Video geladen ist, wenn die Quelle festgelegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ist <codeph>autoPlay = false</codeph>, dann steuert <codeph>autoDisplayFirstFrame</codeph>, ob das Video geladen ist, wenn die <codeph>source</codeph> festgelegt wird. Ist <codeph>autoDisplayFirstFrame</codeph> auf <codeph>true</codeph> gesetzt, dann ist das erste Bild des Videos geladen und die Größe des Videos wurde korrekt eingestellt. Ist <codeph>autoDisplayFirstFrame</codeph> auf <codeph>false</codeph> gesetzt, dann wird keine Verbindung zur Quelle hergestellt, das erste Bild wird nicht angezeigt und die Größe des Videos wird erst bestimmt, wenn jemand versucht, das Video abzuspielen.
     
      <p>Ist <codeph>autoPlay = true</codeph>, dann wird dieses Flag ignoriert.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      Legt fest, ob die Wiedergabe des Videos sofort nach Festlegen der source-Eigenschaft gestartet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt fest, ob die Wiedergabe des Videos sofort nach Festlegen der <codeph>source</codeph>-Eigenschaft gestartet wird. Ist der Wert <codeph>true</codeph>, wird die Videodatei sofort in den Puffer geladen und die Wiedergabe beginnt.
           <p>Auch wenn für <codeph>autoPlay</codeph> <codeph>false</codeph> festgelegt wird, beginnt Flex nach dem Aufruf der <codeph>initialize()</codeph>-Methode mit dem Laden des Videos. Für Flash Media Server bedeutet dies, dass der Stream erstellt und das erste Bild für die Anzeige geladen wird. Bei HTTP-Downloads beginnt Flex mit dem Herunterladen des Stream und zeigt das erste Bild an.</p>
     
      <p>Hat <codeph>playWhenHidden</codeph> den Wert <codeph>false</codeph>, wirkt sich <codeph>autoPlay</codeph> auch auf das Verhalten des Videos bei seiner Rückkehr auf die Bühne im aktivierten und sichtbaren Status aus.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      Bestimmt, ob die FLV-Datei beim Beenden der Wiedergabe zum ersten Bild zurückgespult wird. Die Wiedergabe kann durch Aufrufen der stop()-Methode oder durch Erreichen des Streamendes beendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bestimmt, ob die FLV-Datei beim Beenden der Wiedergabe zum ersten Bild zurückgespult wird. Die Wiedergabe kann durch Aufrufen der <codeph>stop()</codeph>-Methode oder durch Erreichen des Streamendes beendet werden.
           <p>Diese Eigenschaft hat keine Wirkung für Live-Streaming-Video.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      Die Anzahl der in die Anwendung heruntergeladenen Datenbyte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Anzahl der in die Anwendung heruntergeladenen Datenbyte.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      Die Gesamtgröße (in Byte) der in die Anwendung heruntergeladenen Daten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Gesamtgröße (in Byte) der in die Anwendung heruntergeladenen Daten.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:currentTime:get"><apiName>currentTime</apiName><shortdesc>
      Aktuelle Zeit des Abspielkopfs, gemessen in Sekunden ab dem Start der Videowiedergabe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Aktuelle Zeit des Abspielkopfs, gemessen in Sekunden ab dem Start der Videowiedergabe. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:duration:get"><apiName>duration</apiName><shortdesc>
      Dauer der Videowiedergabe in Sekunden.
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Dauer der Videowiedergabe in Sekunden.
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:loop:get"><apiName>loop</apiName><shortdesc>
      Gibt an, ob die Mediendatei nach Beenden der Wiedergabe erneut wiedergegeben werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die Mediendatei nach Beenden der Wiedergabe erneut wiedergegeben werden soll. Die <codeph>loop</codeph>-Eigenschaft hat Vorrang vor der <codeph>autoRewind</codeph>-Eigenschaft; wenn also „loop“ auf <codeph>true</codeph> gesetzt ist, wird die <codeph>autoRewind</codeph>-Eigenschaft ignoriert. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc>
      Der aktuelle Status des Videos.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der aktuelle Status des Videos. Verfügbare Werte finden Sie unter org.osmf.media.MediaPlayerState.
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:muted:get"><apiName>muted</apiName><shortdesc>
      Auf „true“ einstellen, um das Video stummzuschalten, und auf „false“ einstellen, um die Stummschaltung aufzuheben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Auf <codeph>true</codeph> einstellen, um das Video stummzuschalten, und auf <codeph>false</codeph> einstellen, um die Stummschaltung aufzuheben.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc>
      Steuert, ob das Video weiterhin wiedergegeben wird, wenn es „ausgeblendet“ ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Steuert, ob das Video weiterhin wiedergegeben wird, wenn es „ausgeblendet“ ist. Das Video ist „ausgeblendet“, wenn die <codeph>visible</codeph>-Eigenschaft des Videos selbst oder eines seiner Vorgänger auf <codeph>false</codeph> gesetzt wurde oder das Video von der Anzeigeliste entfernt wurde. Wenn die Einstellung <codeph>true</codeph> lautet, wird die Wiedergabe angehalten, bis das Video wieder sichtbar ist. Lautet die Einstellung <codeph>false</codeph>, wird das Video weiterhin abgespielt, wenn es ausgeblendet ist.
     
      <p>Wird das Video (oder eines seiner übergeordneten Elemente) deaktiviert, wird das Video ebenfalls angehalten; wenn es aber erneut aktiviert wird, wird das Video nicht wieder abgespielt. Dieses Verhalten wird nicht durch <codeph>pauseWhenHidden</codeph> gesteuert, es wird in der VideoDisplay-Komponente definiert.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      Enthält „true“, wenn das Video abgespielt wird bzw. versucht wird, es abzuspielen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn das Video abgespielt wird bzw. versucht wird, es abzuspielen.
      
      <p>Das Video wird möglicherweise derzeit nicht abgespielt, da ein Suchlauf ausgeführt oder es gepuffert wird, aber es wird versucht, das Video abzuspielen.</p> 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link><link href="spark.components.xml#VideoDisplay/pause()"><linktext>pause()</linktext></link><link href="spark.components.xml#VideoDisplay/stop()"><linktext>stop()</linktext></link><link href="spark.components.xml#VideoDisplay/autoPlay"><linktext>autoPlay</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
      Die scaleMode-Eigenschaft beschreibt verschiedene Möglichkeiten, die Größe des Videoinhalts zu verändern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc>
      Die <codeph>scaleMode</codeph>-Eigenschaft beschreibt verschiedene Möglichkeiten, die Größe des Videoinhalts zu verändern. Sie können <codeph>scaleMode</codeph> auf <codeph>"none"</codeph>, <codeph>"stretch"</codeph>, <codeph>"letterbox"</codeph> oder <codeph>"zoom"</codeph> setzen.
     
      <p>Wenn keine Breite, Höhe oder Beschränkungen für die Komponente angegeben sind, hat diese Eigenschaft keine Auswirkungen.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      Die Videoquelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die Videoquelle.
     
      <p>Für einen progressiven Download ist die Quelle nur ein Pfad oder eine URL, die auf die abzuspielende Videodatei verweist.</p>
     
      <p>Für Streaming (Recorded Streaming, Live-Streaming oder Multibitrate-Streaming) ist die source-Eigenschaft ein DynamicStreamingVideoSource-Objekt. Wenn Sie nur ein aufgezeichnetes oder ein Live-Streaming-Video ohne Multibitrate-Unterstützung abspielen möchten, brauchen Sie nur eine String-URL, die auf den Videostream zeigt, zu übergeben. Dabei wird allerdings davon ausgegangen, dass der streamType "any" ist und Sie haben nicht so viel Einfluss auf das Streaming, wie bei Verwendung des DynamicStreamingVideoSource-Objekts.</p>
     
      <p>Hinweis: Es wird empfohlen, die Quelle für MediaPlayerStateChangeEvent.LOADING oder MediaPlayerStateChangeEvent.READY nicht festzulegen, wenn sie vorher bereits definiert wurde. Dies könnte zu einer Endlosschleife oder einem Laufzeitfehler führen. Wenn Sie einen solchen Vorgang durchführen müssen, warten Sie bis zum nächsten Bild, um die Quelle festzulegen.</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.mediaClasses.xml#DynamicStreamingVideoSource"><linktext>spark.components.mediaClasses.DynamicStreamingVideoSource</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:videoObject:get"><apiName>videoObject</apiName><shortdesc>
      Das zugrunde liegende flash.media.Video-Objekt des Flash Players.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das zugrunde liegende <codeph>flash.media.Video</codeph>-Objekt des Flash Players.
     
      <p>Ist die Quelle <codeph>null</codeph>, dann ist möglicherweise noch kein zugrunde liegendes <codeph>flash.media.Video</codeph>-Objekt vorhanden. In diesem Fall gibt <codeph>videoObject</codeph> <codeph>null</codeph> zurück.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      Die Lautstärke als Wert zwischen 0 und 1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Lautstärke als Wert zwischen 0 und 1.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TileGroup"><apiName>TileGroup</apiName><shortdesc>
  Der TileGroup-Container ist eine Instanz des Group-Containers, der die TileLayout-Klasse verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TileGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TileGroup
    <strong>Properties</strong>
    columnAlign="left"
    columnCount="-1"
    columnWidth="0"
    horizontalAlign="justify"
    horizontalGap="6"
    orientation="rows"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount"-1"
    requestedRowCount="-1"
    rowAlign="top"
    rowCount="-1"
    rowHeight="0"
    verticalAlign="justify"
    verticalGap="6"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Der TileGroup-Container ist eine Instanz des Group-Containers, der die TileLayout-Klasse verwendet. Ändern Sie die <codeph>layout</codeph>-Eigenschaft nicht. Verwenden Sie stattdessen die Eigenschaften der TileGroup-Klasse, um die Merkmale der TileLayout-Klasse zu ändern.
 
  <p>Der TileGroup-Container hat die folgenden Standardmerkmale:</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Merkmale</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry>Standardgröße</entry><entry>Groß genug, um seine untergeordneten Elemente anzuzeigen.</entry></row><row><entry>Minimale Größe</entry><entry>0 Pixel</entry></row><row><entry>Maximale Größe</entry><entry>10000 Pixel breit und 10000 Pixel hoch</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileGroupExample.mxml"><swfblock conref="examples/TileGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link></related-links><apiConstructor id="spark.components:TileGroup:TileGroup"><apiName>TileGroup</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor. Initialisiert die <codeph>layout</codeph>-Eigenschaft mit einer Instanz der TileLayout-Klasse.
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:TileGroup:columnAlign:get"><apiName>columnAlign</apiName><shortdesc conref="spark.layouts.TileLayout#columnAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.TileLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.TileLayout#columnWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalGap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:orientation:get"><apiName>orientation</apiName><shortdesc conref="spark.layouts.TileLayout#orientation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"rows"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#orientation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.TileLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.TileLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.TileLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.TileLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowAlign:get"><apiName>rowAlign</apiName><shortdesc conref="spark.layouts.TileLayout#rowAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.TileLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.TileLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalGap:get"><apiName>verticalGap</apiName><shortdesc conref="spark.layouts.TileLayout#verticalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalGap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>