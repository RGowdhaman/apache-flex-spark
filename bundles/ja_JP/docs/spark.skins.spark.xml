<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.skins.spark"><apiName>spark.skins.spark</apiName><apiDetail/><apiClassifier id="spark.skins.spark:ButtonBarSkin"><apiName>ButtonBarSkin</apiName><shortdesc>Spark の ButtonBar コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ButtonBar コンポーネントのデフォルトスキンクラスです。ButtonBar コンポーネント上のボタンは、ButtonBarLastButtonSkin、ButtonBarFirstButtonSkin および ButtonBarMiddleButtonSkin クラスを使用します。  
    
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarSkin:ButtonBarSkin"><apiName>ButtonBarSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ButtonBarSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:firstButton"><apiName>firstButton</apiName><shortdesc conref="spark.components.ButtonBar#firstButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarFirstButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#firstButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarFirstButtonSkin"><linktext>spark.skins.spark.ButtonBarFirstButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ButtonBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:lastButton"><apiName>lastButton</apiName><shortdesc conref="spark.components.ButtonBar#lastButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarLastButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#lastButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarLastButtonSkin"><linktext>spark.skins.spark.ButtonBarLastButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:middleButton"><apiName>middleButton</apiName><shortdesc conref="spark.components.ButtonBar#middleButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarMiddleButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#middleButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarMiddleButtonSkin"><linktext>spark.skins.spark.ButtonBarMiddleButtonSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TextInputSkin"><apiName>TextInputSkin</apiName><shortdesc>Spark の TextInput コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の TextInput コンポーネントのデフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiConstructor id="spark.skins.spark:TextInputSkin:TextInputSkin"><apiName>TextInputSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TextInputSkin:background"><apiName>background</apiName><shortdesc>TextInput コンポーネントの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>TextInput コンポーネントの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>プロンプトテキストに使用されるラベルを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>プロンプトテキストに使用されるラベルを定義します。includeInLayout プロパティが false であるため、プロンプトテキストは測定に影響しません。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonSkin"><apiName>ButtonSkin</apiName><shortdesc>Spark の Button コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Button コンポーネントのデフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonSkin:ButtonSkin"><apiName>ButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarThumbSkin"><apiName>VScrollBarThumbSkin</apiName><shortdesc>Spark の VScrollBar コンポーネントのサム用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の VScrollBar コンポーネントのサム用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarThumbSkin:VScrollBarThumbSkin"><apiName>VScrollBarThumbSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormItemSkin"><apiName>StackedFormItemSkin</apiName><shortdesc>コンテンツ上のラベルの位置を設定する Spark の FormItem コンポーネントの代替スキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>コンテンツ上のラベルの位置を設定する Spark の FormItem コンポーネントの代替スキンクラスです。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormItemSkin:StackedFormItemSkin"><apiName>StackedFormItemSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormItemSkin:background"><apiName>background</apiName><shortdesc>FormItem の背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>FormItem の背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:contentCol"><apiName>contentCol</apiName><shortdesc>FormItem のラベルとコンテンツが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>FormItem のラベルとコンテンツが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:helpCol"><apiName>helpCol</apiName><shortdesc>FormItem のヘルプコンテンツが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>FormItem のヘルプコンテンツが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:helpContentGroup"><apiName>helpContentGroup</apiName><shortdesc conref="spark.components.FormItem#helpContentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#helpContentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormItem</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormItem#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>シーケンスラベルが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>シーケンスラベルが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:sequenceLabelDisplay"><apiName>sequenceLabelDisplay</apiName><shortdesc conref="spark.components.FormItem#sequenceLabelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#sequenceLabelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultComplexItemRenderer"><apiName>DefaultComplexItemRenderer</apiName><shortdesc>Spark の DefaultComplexItemRenderer クラスは、Group コンテナ内の Flex コンポーネントを表示するアイテムレンダラークラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の DefaultComplexItemRenderer クラスは、Group コンテナ内の Flex コンポーネントを表示するアイテムレンダラークラスです。各コンポーネントは専用の Group コンテナ内にラップされます。したがって、コンテナの子が Flex コンポーネントなどのビジュアルエレメントである場合に便利です。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultComplexItemRenderer:DefaultComplexItemRenderer"><apiName>DefaultComplexItemRenderer</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultComplexItemRenderer:contentGroup"><apiName>contentGroup</apiName><shortdesc>ホストコンポーネントで定義されている各 Flex コンポーネントをラップするために使用されるコンテナです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>ホストコンポーネントで定義されている各 Flex コンポーネントをラップするために使用されるコンテナです。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:CheckBoxSkin"><apiName>CheckBoxSkin</apiName><shortdesc>Spark の CheckBox コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の CheckBox コンポーネントのデフォルトスキンクラスです。  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link></related-links><apiConstructor id="spark.skins.spark:CheckBoxSkin:CheckBoxSkin"><apiName>CheckBoxSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:CheckBoxSkin:check"><apiName>check</apiName><shortdesc>このスキンのボックスのチェックマークです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>このスキンのボックスのチェックマークです。カスタムチェックマークを作成するには、カスタムスキンクラスを作成します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:CheckBoxSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:CheckBox</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:CheckBoxSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VideoPlayerSkin"><apiName>VideoPlayerSkin</apiName><shortdesc>Spark の VideoPlayer コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の VideoPlayer コンポーネントのデフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link></related-links><apiConstructor id="spark.skins.spark:VideoPlayerSkin:VideoPlayerSkin"><apiName>VideoPlayerSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VideoPlayerSkin:clippedGroup"><apiName>clippedGroup</apiName><shortdesc>ビデオおよびプレーヤーコントロールは、コンポーネントのサイズを超えているとクリッピングされますが、その上のドロップシャドウはクリッピングされず、コンポーネントに合わせてサイズが設定されます。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>ビデオおよびプレーヤーコントロールは、コンポーネントのサイズを超えているとクリッピングされますが、その上のドロップシャドウはクリッピングされず、コンポーネントに合わせてサイズが設定されます。クリッピングを行う場合に下からではなく上から先にクリッピングされるようにするには、verticalScrollPosition も設定します。このように設定すると、クリッピングが開始されてもプレーヤーコントロールは引き続き見える状態になります。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:currentTimeDisplay"><apiName>currentTimeDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#currentTimeDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#currentTimeDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:durationDisplay"><apiName>durationDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#durationDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#durationDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:fullScreenButton"><apiName>fullScreenButton</apiName><shortdesc conref="spark.components.VideoPlayer#fullScreenButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#fullScreenButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VideoPlayer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:playPauseButton"><apiName>playPauseButton</apiName><shortdesc conref="spark.components.VideoPlayer#playPauseButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ToggleButton</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#playPauseButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:playerControls"><apiName>playerControls</apiName><shortdesc conref="spark.components.VideoPlayer#playerControls"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#playerControls"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:scrubBar"><apiName>scrubBar</apiName><shortdesc conref="spark.components.VideoPlayer#scrubBar"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.mediaClasses:ScrubBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#scrubBar"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:videoDisplay"><apiName>videoDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#videoDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VideoDisplay</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#videoDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:volumeBar"><apiName>volumeBar</apiName><shortdesc conref="spark.components.VideoPlayer#volumeBar"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.mediaClasses:VolumeBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#volumeBar"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TitleWindowCloseButtonSkin"><apiName>TitleWindowCloseButtonSkin</apiName><shortdesc>Spark の TitleWindow コンポーネントの閉じるボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の TitleWindow コンポーネントの閉じるボタン用デフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.components.xml#TitleWindow"><linktext>spark.components.TitleWindow</linktext></link></related-links><apiConstructor id="spark.skins.spark:TitleWindowCloseButtonSkin:TitleWindowCloseButtonSkin"><apiName>TitleWindowCloseButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:cbshad"><apiName>cbshad</apiName><shortdesc>内側シャドウを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>内側シャドウを定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:dropShadow"><apiName>dropShadow</apiName><shortdesc>閉じるボタンのドロップシャドウを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:RectangularDropShadow</apiValueClassifier></apiValueDef><apiDesc>閉じるボタンのドロップシャドウを定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:xSymbol"><apiName>xSymbol</apiName><shortdesc>閉じるボタンの x の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>閉じるボタンの x の外観を定義します。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxSkin"><apiName>ComboBoxSkin</apiName><shortdesc>Spark の ComboBox コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ComboBox コンポーネントのデフォルトスキンクラスです。ComboBox コンポーネントのアンカーボタンのスキンは、ComboBoxButtonSkin クラスで定義されています。テキスト入力用のスキンは、ComboBoxTextInputSkin クラスで定義されます。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link><link href="spark.skins.spark.xml#ComboBoxButtonSkin"><linktext>spark.skins.spark.ComboBoxButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxSkin:ComboBoxSkin"><apiName>ComboBoxSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxSkin:background"><apiName>background</apiName><shortdesc>ドロップダウンリストの背景の塗りつぶしの外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>ドロップダウンリストの背景の塗りつぶしの外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:dropDown"><apiName>dropDown</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#dropDown">これには、境界線、背景色、スクローラーおよびフィルターが含まれます。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#dropDown">これには、境界線、背景色、スクローラーおよびフィルターが含まれます。 
            </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ComboBox</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:openButton"><apiName>openButton</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#openButton">デフォルトスキンは ComboBoxButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#openButton">デフォルトスキンは ComboBoxButtonSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ComboBoxButtonSkin"><linktext>spark.skins.spark.ComboBoxButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:popUp"><apiName>popUp</apiName><shortdesc>ドロップダウンリストを開く PopUpAnchor コントロールです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:PopUpAnchor</apiValueClassifier></apiValueDef><apiDesc>ドロップダウンリストを開く PopUpAnchor コントロールです。 
        
        <p><codeph/><codeph/></p></apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:textInput"><apiName>textInput</apiName><shortdesc conref="spark.components.ComboBox#textInput"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.ComboBox#textInput"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxTextInputSkin"><apiName>ComboBoxTextInputSkin</apiName><shortdesc>Spark の ComboBox コンポーネントの textInput 用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ComboBox コンポーネントの textInput 用デフォルトスキンクラスです。  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxTextInputSkin:ComboBoxTextInputSkin"><apiName>ComboBoxTextInputSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:background"><apiName>background</apiName><shortdesc>TextInput コンポーネントの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>TextInput コンポーネントの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:bgFill"><apiName>bgFill</apiName><shortdesc>背景の塗りのカラーを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>背景の塗りのカラーを定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>プロンプトテキストに使用されるラベルを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>プロンプトテキストに使用されるラベルを定義します。includeInLayout プロパティが false であるため、プロンプトテキストは測定に影響しません。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarMiddleButtonSkin"><apiName>ButtonBarMiddleButtonSkin</apiName><shortdesc>Spark の ButtonBar コンポーネントにある中央ボタンのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ButtonBar コンポーネントにある中央ボタンのデフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarMiddleButtonSkin:ButtonBarMiddleButtonSkin"><apiName>ButtonBarMiddleButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarTrackSkin"><apiName>VScrollBarTrackSkin</apiName><shortdesc>Spark の VScrollBar コンポーネントのトラック用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の VScrollBar コンポーネントのトラック用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarTrackSkin:VScrollBarTrackSkin"><apiName>VScrollBarTrackSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TitleWindowSkin"><apiName>TitleWindowSkin</apiName><shortdesc>Spark の TitleWindow コンテナのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の TitleWindow コンテナのデフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext>spark.skins.spark.TitleWindowCloseButtonSkin</linktext></link><link href="spark.components.xml#TitleWindow"><linktext>spark.components.TitleWindow</linktext></link></related-links><apiConstructor id="spark.skins.spark:TitleWindowSkin:TitleWindowSkin"><apiName>TitleWindowSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TitleWindowSkin:backgroundFill"><apiName>backgroundFill</apiName><shortdesc>TitleWindowSkin クラスの背景の塗りを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>TitleWindowSkin クラスの背景の塗りを定義します。デフォルトのカラーは 0xFFFFFF です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:background"><apiName>background</apiName><shortdesc>TitleWindowSkin クラスの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>TitleWindowSkin クラスの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:borderStroke"><apiName>borderStroke</apiName><shortdesc>TitleWindowSkin クラスの境界線を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColorStroke"/></apiValueDef><apiDesc>TitleWindowSkin クラスの境界線を定義します。デフォルト値は 1 です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:closeButton"><apiName>closeButton</apiName><shortdesc conref="spark.components.TitleWindow#closeButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.TitleWindow#closeButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:contents"><apiName>contents</apiName><shortdesc>タイトルバーの内容とコントロールバーの垂直方向のスタックを含みます。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>タイトルバーの内容とコントロールバーの垂直方向のスタックを含みます。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Panel#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TitleWindow</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:moveArea"><apiName>moveArea</apiName><shortdesc conref="spark.components.TitleWindow#moveArea"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.TitleWindow#moveArea"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:titleDisplay"><apiName>titleDisplay</apiName><shortdesc conref="spark.components.Panel#titleDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#titleDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormItemSkin"><apiName>FormItemSkin</apiName><shortdesc>Spark の FormItem コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の FormItem コンポーネントのデフォルトスキンクラスです。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormItemSkin:FormItemSkin"><apiName>FormItemSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormItemSkin:background"><apiName>background</apiName><shortdesc>FormItem の背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>FormItem の背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:contentCol"><apiName>contentCol</apiName><shortdesc>FormItem のコンテンツが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>FormItem のコンテンツが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:errorTextDisplay"><apiName>errorTextDisplay</apiName><shortdesc conref="spark.components.FormItem#errorTextDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#errorTextDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:helpCol"><apiName>helpCol</apiName><shortdesc>FormItem のヘルプコンテンツが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>FormItem のヘルプコンテンツが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:helpContentGroup"><apiName>helpContentGroup</apiName><shortdesc conref="spark.components.FormItem#helpContentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#helpContentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormItem</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:labelCol"><apiName>labelCol</apiName><shortdesc>FormItem のラベルが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>FormItem のラベルが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormItem#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>シーケンスラベルが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>シーケンスラベルが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:sequenceLabelDisplay"><apiName>sequenceLabelDisplay</apiName><shortdesc conref="spark.components.FormItem#sequenceLabelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#sequenceLabelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ImageSkin"><apiName>ImageSkin</apiName><shortdesc>Spark の Image コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Image コンポーネントのデフォルトスキンクラスです。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Image"><linktext>spark.components.Image</linktext></link></related-links><apiConstructor id="spark.skins.spark:ImageSkin:ImageSkin"><apiName>ImageSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ImageSkin:background"><apiName>background</apiName><shortdesc>イメージの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>イメージの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:bgFill"><apiName>bgFill</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:brokenImageIcon"><apiName>brokenImageIcon</apiName><shortdesc>無効なイメージが読み込まれたときに、イメージの代わりに表示されるアイコンです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:BitmapImage</apiValueClassifier></apiValueDef><apiDesc>無効なイメージが読み込まれたときに、イメージの代わりに表示されるアイコンです。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Image</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:imageDisplay"><apiName>imageDisplay</apiName><shortdesc>主なイメージ表示のスキンパーツです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:BitmapImage</apiValueClassifier></apiValueDef><apiDesc>主なイメージ表示のスキンパーツです。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:progressIndicator"><apiName>progressIndicator</apiName><shortdesc>進捗インジケーターのスキンパーツです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:Range</apiValueClassifier></apiValueDef><apiDesc>進捗インジケーターのスキンパーツです。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ListDropIndicator"><apiName>ListDropIndicator</apiName><shortdesc>
  List のスキンで dropIndicator パーツが定義されていない場合の、List コンポーネントのドロップインジケーターに対するデフォルトのスキンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.skins:ProgrammaticSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  List のスキンで <codeph>dropIndicator</codeph> パーツが定義されていない場合の、List コンポーネントのドロップインジケーターに対するデフォルトのスキンです。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link></related-links><apiConstructor id="spark.skins.spark:ListDropIndicator:ListDropIndicator"><apiName>ListDropIndicator</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:ErrorSkin"><apiName>ErrorSkin</apiName><shortdesc>
  ErrorSkin クラスは、Spark コンポーネントのエラースキンを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins.spark:HighlightBitmapCaptureSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  ErrorSkin クラスは、Spark コンポーネントのエラースキンを定義します。エラースキンは、検証エラーが発生すると表示されます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.validators.Validator.xml"><linktext>mx.validators.Validator</linktext></link></related-links><apiConstructor id="spark.skins.spark:ErrorSkin:ErrorSkin"><apiName>ErrorSkin</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:ErrorSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     
          </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.skins.spark:DataGridSkin"><apiName>DataGridSkin</apiName><shortdesc>Spark の DataGrid コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の DataGrid コンポーネントのデフォルトスキンクラスです。  
<p>このスキンは、rowBackground 以外のすべてのオプションの DataGrid スキンパーツを定義します（デフォルトでは、行ごとの背景ビジュアルエレメントは表示されません）。このスキンは、グリッドの itemRenderer プロパティのデフォルト値を spark.skins.spark.DefaultGridItemRenderer に設定し、columnHeaderGroup の headerRenderer プロパティのデフォルト値を <codeph>spark.skins.spark.DefaultGridHeaderRenderer</codeph> に設定します。</p>
<p>次の DataGrid スキンパーツの値は宣言によって定義されており、このクラスのサブクラスでオーバーライドできます。<codeph>alternatingRowColors</codeph>、<codeph>caretIndicator</codeph>、<codeph>columnSeparator</codeph>、<codeph>editorIndicator</codeph>、<codeph>headerColumnSeparator</codeph>、<codeph>hoverIndicator</codeph>、<codeph>rowSeparator</codeph>、<codeph>selectionIndicator</codeph>。 これらのすべての宣言は、columnHeaderGroup の <codeph>columnSeparator</codeph> プロパティおよび <codeph>headerRenderer</codeph> プロパティの値に使用される <codeph>headerColumnSeparator</codeph> および <codeph>headerRenderer</codeph> 以外の DataGrid スキンパーツを定義します。</p>
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link></related-links><apiConstructor id="spark.skins.spark:DataGridSkin:DataGridSkin"><apiName>DataGridSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DataGridSkin:bgFill"><apiName>bgFill</apiName><shortdesc>背景色を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>背景色を定義します。デフォルトのカラーは 0xFFFFFF です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:headerColumnSeparator"><apiName>headerColumnSeparator</apiName><shortdesc>columnHeaderGroup の columnSeparator プロパティの値を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>columnHeaderGroup の columnSeparator プロパティの値を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:headerRenderer"><apiName>headerRenderer</apiName><shortdesc>columnHeaderGroup の headerRenderer プロパティの値を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>columnHeaderGroup の headerRenderer プロパティの値を定義します。デフォルトは spark.skins.spark.DefaultGridHeaderRenderer です</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ToggleButtonSkin"><apiName>ToggleButtonSkin</apiName><shortdesc>Spark の ToggleButton コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ToggleButton コンポーネントのデフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ToggleButtonSkin:ToggleButtonSkin"><apiName>ToggleButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarSkin"><apiName>VScrollBarSkin</apiName><shortdesc>Spark の VScrollBar コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の VScrollBar コンポーネントのデフォルトスキンクラスです。サムとトラックのスキンは、それぞれ VScrollBarThumbSkin クラスと VScrollBarTrackSkin クラスによって定義されます。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarSkin:VScrollBarSkin"><apiName>VScrollBarSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">デフォルトスキンクラスは ScrollBarUpButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">デフォルトスキンクラスは ScrollBarUpButtonSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VScrollBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">デフォルトスキンクラスは ScrollBarDownButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">デフォルトスキンクラスは ScrollBarDownButtonSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">デフォルトスキンクラスは VScrollBarThumbSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">デフォルトスキンクラスは VScrollBarThumbSkin です。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">デフォルトスキンクラスは VScrollBarTrackSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">デフォルトスキンクラスは VScrollBarTrackSkin です。  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperTextInputSkin"><apiName>NumericStepperTextInputSkin</apiName><shortdesc>Spark の NumericStepper コンポーネントのテキスト入力フィールド用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の NumericStepper コンポーネントのテキスト入力フィールド用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperTextInputSkin:NumericStepperTextInputSkin"><apiName>NumericStepperTextInputSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:background"><apiName>background</apiName><shortdesc>NumericStepper コンポーネントの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>NumericStepper コンポーネントの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormSkin"><apiName>StackedFormSkin</apiName><shortdesc>Spark の Form コンテナの代替スキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Form コンテナの代替スキンクラスです。このスキンは、レイアウトオブジェクトとして、FormLayout が設定された Form コンテナの contentGroup を定義します。FormLayout は、FormItem の列を整列するための追加のロジックが設定された VerticalLayout です。このスキンは、Form の errorText を表示するための errorTextDisplay も定義します。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormSkin:StackedFormSkin"><apiName>StackedFormSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormSkin:background"><apiName>background</apiName><shortdesc>Form クラスの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Form クラスの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:errorTextDisplay"><apiName>errorTextDisplay</apiName><shortdesc>Form のエラーテキストを表示します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>Form のエラーテキストを表示します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Form</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderThumbSkin"><apiName>VSliderThumbSkin</apiName><shortdesc>Spark の VSlider コンポーネントのサム用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の VSlider コンポーネントのサム用デフォルトスキンクラスです。  
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderThumbSkin:VSliderThumbSkin"><apiName>VSliderThumbSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultGridItemRenderer"><apiName>DefaultGridItemRenderer</apiName><shortdesc>
  DefaultGridItemRenderer クラスは、1 つのテキストラベルを表示する簡単で効率的なアイテムレンダラーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="property" name="locale"/><Exclude kind="property" name="direction"/><Exclude kind="style" name="layoutDirection"/><Exclude kind="property" name="layoutDirection"/><Exclude kind="style" name="typographicCase"/><Exclude kind="style" name="trackingRight"/><Exclude kind="style" name="trackingLeft"/><Exclude kind="style" name="textJustify"/><Exclude kind="style" name="textAlpha"/><Exclude kind="style" name="textAlignLast"/><Exclude kind="style" name="renderingMode"/><Exclude kind="style" name="lineThrough"/><Exclude kind="style" name="lineHeight"/><Exclude kind="style" name="ligatureLevel"/><Exclude kind="style" name="leading"/><Exclude kind="style" name="justificationStyle"/><Exclude kind="style" name="justificationRule"/><Exclude kind="style" name="fontLookup"/><Exclude kind="style" name="dominantBaseline"/><Exclude kind="style" name="digitWidth"/><Exclude kind="style" name="digitCase"/><Exclude kind="style" name="cffHinting"/><Exclude kind="style" name="baselineShift"/><Exclude kind="style" name="alignmentBaseline"/><Exclude kind="style" name="verticalAlign"/><Exclude kind="style" name="paddingTop"/><Exclude kind="style" name="paddingBottom"/><styles><style format="Length" inherit="yes" name="textIndent" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  右側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  左側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingLeft を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの折り返しを制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IGridItemRenderer</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier>mx.core:UIFTETextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  DefaultGridItemRenderer クラスは、1 つのテキストラベルを表示する簡単で効率的なアイテムレンダラーを定義します。 このクラスは DataGrid <codeph>itemRenderer</codeph> プロパティのデフォルト値です。 このクラスは UIFTETextField を拡張し、テキストフィールドを使用してテキストラベルのセルデータを表示します。UIFTETextField コントロールは FTE（FlashTextEngine）に基づいており、国際化対応の高品質な文字体裁とフォントの埋め込みを他の Spark コントロールと同じ方法でサポートします。 UIFTETextField コントロールは TextField の API を実装するので、Spark のテキストスタイルのサブセットがサポートされています。 サポートされているスタイルのリストについては、このクラスに関するマニュアルを参照してください。 
 
  <p>ラベルテキストの折り返しは <codeph>lineBreak</codeph> スタイルを使用して制御できます。 例えば、<codeph>lineBreak="explicit"</codeph> と <codeph>variableRowHeight="false"</codeph> を設定すると、ラベルが折り返されない、高さが固定のセルが作成されます。<codeph>wordWrap</codeph> プロパティを明示的に設定しない場合、<codeph>wordWrap</codeph> はグリッドの <codeph>variableRowHeight</codeph> プロパティの値に設定されます。</p>
 
  <p>multiline プロパティは、DataGrid のアイテムエディターが入力改行文字を解釈するために使用されます。<codeph>mutliline=false</codeph> の場合は、改行を入力すると（タブやエスケープを入力した場合と同様に）編集セッションが終了します。<codeph>multiline=true</codeph> の場合は、改行文字がテキストに挿入されます。multiline プロパティが明示的に設定されてない場合、<codeph>lineBreak="explicit"</codeph> で <codeph>text</codeph> に改行文字が含まれている場合は、自動的に true に設定されます。</p>
 
  <p>DefaultGridItemRenderer は <codeph>layoutDirection</codeph> プロパティを親から継承します。 このプロパティは直接設定しないでください。</p>
  
  <p>DefaultGridItemRenderer クラスは、サブクラス化したり、コピーしたりしないでください。 GridItemRenderer クラスに基づいてカスタムアイテムレンダラーを作成します。</p>
 
  <p>Microsoft Windows ベースのアプリケーションで最高のパフォーマンスを得るには、UITextFieldGridItemRenderer を使用します。 このレンダラーは ActionScript で記述されており、Windows 用に最適化されています。</p>
 
  </apiDesc><example conref="DefaultGridItemRendererExample.mxml"><swfblock conref="examples/DefaultGridItemRendererExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#UITextFieldGridItemRenderer"><linktext>spark.skins.spark.UITextFieldGridItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:DefaultGridItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  バインド可能な data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  バインド可能な <codeph>data</codeph> プロパティが変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:DefaultGridItemRenderer:DefaultGridItemRenderer"><apiName>DefaultGridItemRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:DefaultGridItemRenderer:discard"><apiName>discard</apiName><shortdesc>
      
      アイテムレンダラーが表示されなくなると判断された場合に、アイテムレンダラーの親の updateDisplayList() メソッドから呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hasBeenRecycled</apiItemName><apiType value="Boolean"/><apiDesc>このレンダラーがオーナーの内部フリーリストに追加されて再利用される場合は <codeph>true</codeph> です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      アイテムレンダラーが表示されなくなると判断された場合に、アイテムレンダラーの親の <codeph>updateDisplayList()</codeph> メソッドから呼び出されます。<codeph>willBeRecycled</codeph> パラメーターが <codeph>true</codeph> の場合、オーナーはこのレンダラーを内部フリーリストに追加して再利用します。 実装では、このメソッドを使用して不要となったレンダラープロパティを消去できます。
     
      <p>このメソッドが直接呼び出されることは意図されていません。 このメソッドは、DataGrid の実装によって呼び出されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:DefaultGridItemRenderer:prepare"><apiName>prepare</apiName><shortdesc>
      
      レンダラーのすべてのプロパティが設定された後、アイテムレンダラーの親の updateDisplayList() メソッドから呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>willBeRecycled</apiItemName><apiType value="Boolean"/><apiDesc> このレンダラーが再利用中である場合は <codeph>true</codeph> です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      レンダラーのすべてのプロパティが設定された後、アイテムレンダラーの親の <codeph>updateDisplayList()</codeph> メソッドから呼び出されます。このレンダラーが今まで使用されたことがない場合、つまりリサイクルされなかった場合、<codeph>hasBeenRecycled</codeph> パラメーターは <codeph>false</codeph> です。 このメソッドは、レンダラーが表示されようとしているときに呼び出されます。また、レンダラープロパティの変更または再表示の明示的要求によってレンダラーが再表示されるたびに呼び出されます。 
     
      <p>このメソッドを使用して、レンダラーのすべてのビジュアルエレメントとプロパティを設定できます。このメソッドを使用すると、<codeph>data</codeph> プロパティをビジュアルエレメントのプロパティにバインドするよりも効率的な場合があります。注意：<codeph>prepare()</codeph> メソッドは頻繁に呼び出されるため、効率的なコードを書いてください。</p>
     
      <p><codeph>prepare()</codeph> メソッドは、<codeph>discard()</codeph> メソッドの呼び出し前に何度も呼び出されることがあります。</p>
     
      <p>このメソッドが直接呼び出されることは意図されていません。 このメソッドは、DataGrid の実装によって呼び出されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:DefaultGridItemRenderer:columnIndex:get"><apiName>columnIndex</apiName><shortdesc>
      
      このアイテムレンダラーのセルの列インデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      このアイテムレンダラーのセルの列インデックスです。これは <codeph>column.columnIndex</codeph> と同じ値です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:column:get"><apiName>column</apiName><shortdesc>
      
      このアイテムレンダラーに関連付けられている列を表す GridColumn オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:GridColumn</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      このアイテムレンダラーに関連付けられている列を表す GridColumn オブジェクトです。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      グリッドコントロールの行全体に対するデータプロバイダーアイテムの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      グリッドコントロールの行全体に対するデータプロバイダーアイテムの値です。 多くの場合、アイテムレンダラーはビジュアルエレメントの属性を、このオブジェクトのプロパティにバインドします。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:down:get"><apiName>down</apiName><shortdesc>
      グリッドコントロールの updateDisplayList() メソッドは、prepare() を呼び出す前に、このプロパティを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールの <codeph>updateDisplayList()</codeph> メソッドは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを設定します。   </p>
     
      
      グリッドセル内で、2 つの入力ジェスチャのうちの 1 つが行われると、つまりマウスボタンまたはタッチスクリーンのどちらかが押されると、このプロパティが <codeph>true</codeph> に設定されます。マウスボタンが放されるか、ユーザーがタッチ画面に触れなくなるか、またはマウスやタッチがグリッドセルの外にドラッグされると、<codeph>down</codeph> プロパティは <codeph>false</codeph> にリセットされます。   
     
      <p>List アイテムレンダラーとは異なり、Grid アイテムレンダラーには、ダウンインジケーターを表示する排他的な役割はありません。Grid 自体は、選択された行またはセルのダウンインジケーターをレンダリングします。アイテムレンダラーは、そのビジュアルプロパティを変更して、押下されていることを強調することもできます。</p>   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      ドラッグ＆ドロップ操作中の場合のようにアイテムレンダラーがドラッグされている場合は true が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="draggingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      ドラッグ＆ドロップ操作中の場合のようにアイテムレンダラーがドラッグされている場合は <codeph>true</codeph> が含まれます。 現在、ドラッグ＆ドロップ操作は、Spark DataGrid コントロールではサポートされていません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:grid:get"><apiName>grid</apiName><shortdesc>
      このアイテムレンダラーに関連付けられているグリッドコントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Grid</apiValueClassifier></apiValueDef><apiDesc>
      このアイテムレンダラーに関連付けられているグリッドコントロールです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:hovered:get"><apiName>hovered</apiName><shortdesc>
      アイテムレンダラー上にマウスポインターが置かれたときに true に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoveredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      アイテムレンダラー上にマウスポインターが置かれたときに <codeph>true</codeph> に設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      グリッドコントロールは、prepare() を呼び出す前に、このプロパティを列の itemToLabel() メソッドの値に設定します。 アイテムレンダラーで表示するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを列の <codeph>itemToLabel()</codeph> メソッドの値に設定します。</p>
     
      
      アイテムレンダラーで表示するストリングです。  
     
      <p>GridItemRenderer クラスは、<codeph>labelDisplay</codeph> エレメントが指定されている場合、そのエレメントの <codeph>text</codeph> プロパティに、このプロパティの値を自動的にコピーします。Grid は、<codeph>label</codeph> を列の <codeph>itemToLabel()</codeph> メソッドから返される値に設定します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:rowIndex:get"><apiName>rowIndex</apiName><shortdesc>
      グリッドコントロールの updateDisplayList() メソッドは、prepare() を呼び出す前に、このプロパティを設定します。 レンダリングされているセルの行の 0 で始まるインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールの <codeph>updateDisplayList()</codeph> メソッドは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを設定します。</p>
     
      
      レンダリングされているセルの行の 0 で始まるインデックスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      グリッドコントロールの updateDisplayList() メソッドは、prepare() を呼び出す前に、このプロパティを設定します。 アイテムレンダラーのセルが現在の選択範囲に含まれている場合は true が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールの <codeph>updateDisplayList()</codeph> メソッドは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを設定します。</p>
     
      
      アイテムレンダラーのセルが現在の選択範囲に含まれている場合は <codeph>true</codeph> が含まれます。 
     
      <p> List アイテムレンダラーとは異なり、Grid アイテムレンダラーには、自分が選択範囲の一部であることを表示する排他的な役割はありません。Grid 自体は、選択された行またはセルに対して、selectionIndicator スキンパーツを自動的に表示します。また、アイテムレンダラーは、選択範囲の一部であることを強調するためにビジュアルプロパティを変更できます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      グリッドコントロールの updateDisplayList() メソッドは、prepare() を呼び出す前に、このプロパティを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showsCaretChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールの <codeph>updateDisplayList()</codeph> メソッドは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを設定します。   </p>
     
      
      アイテムレンダラーのセルがキャレットで示される場合は <codeph>true</codeph> が含まれます。
     
      <p> List アイテムレンダラーとは異なり、Grid アイテムレンダラーには、自分のセルまたは行にキャレットがあることを表示する排他的な役割はありません。Grid 自体は、キャレット行またはキャレットセルに対して、caretIndicator スキンパーツを自動的に表示します。また、アイテムレンダラーは、キャレットがあることを強調するためにビジュアルプロパティを変更できます。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarRightButtonSkin"><apiName>ScrollBarRightButtonSkin</apiName><shortdesc>Spark の ScrollBar コンポーネントの右ボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ScrollBar コンポーネントの右ボタン用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarRightButtonSkin:ScrollBarRightButtonSkin"><apiName>ScrollBarRightButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarRightButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>ScrollBar コンポーネントの右矢印の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>ScrollBar コンポーネントの右矢印の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarRightButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderSkin"><apiName>VSliderSkin</apiName><shortdesc>Spark の VSlider コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の VSlider コンポーネントのデフォルトスキンクラスです。サムとトラックのスキンは、それぞれ VSliderThumbSkin クラスと VSliderTrackSkin クラスによって定義されます。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderSkin:VSliderSkin"><apiName>VSliderSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderSkin:dataTip"><apiName>dataTip</apiName><shortdesc>mx.controls.Slider コントロールで使用されるツールヒントです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>mx.controls.Slider コントロールで使用されるツールヒントです。DataTip の外観をカスタマイズするには、カスタムの VSliderSkin クラスを作成します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VSliderSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VSlider</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VSliderSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">デフォルトスキンクラスは VSliderThumbSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">デフォルトスキンクラスは VSliderThumbSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VSliderSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">デフォルトスキンクラスは VSliderTrackSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">デフォルトスキンクラスは VSliderTrackSkin です。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderTrackSkin"><apiName>VSliderTrackSkin</apiName><shortdesc>Spark の VSlider コンポーネントのトラック用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の VSlider コンポーネントのトラック用デフォルトスキンクラスです。  
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderTrackSkin:VSliderTrackSkin"><apiName>VSliderTrackSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DropDownListSkin"><apiName>DropDownListSkin</apiName><shortdesc>Spark の DropDownList コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の DropDownList コンポーネントのデフォルトスキンクラスです。DropDownList コンポーネントのアンカーボタンのスキンは、DropDownListButtonSkin クラスで定義されています。  
      
      <p><codeph/><codeph/></p>      
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link><link href="spark.skins.spark.xml#DropDownListButtonSkin"><linktext>spark.skins.spark.DropDownListButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:DropDownListSkin:DropDownListSkin"><apiName>DropDownListSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DropDownListSkin:background"><apiName>background</apiName><shortdesc>ドロップダウンリストの背景の塗りつぶしの外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>ドロップダウンリストの背景の塗りつぶしの外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:bgFill"><apiName>bgFill</apiName><shortdesc>ドロップダウンの背景の塗りのカラーです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>ドロップダウンの背景の塗りのカラーです。デフォルトのカラーは 0xFFFFFF です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:dropDown"><apiName>dropDown</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#dropDown">これには、境界線、背景色、スクローラーおよびフィルターが含まれます。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#dropDown">これには、境界線、背景色、スクローラーおよびフィルターが含まれます。
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DropDownList</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.DropDownList#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.DropDownList#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:openButton"><apiName>openButton</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#openButton">デフォルトスキンは DropDownListButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#openButton">デフォルトスキンは DropDownListButtonSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#DropDownListButtonSkin"><linktext>spark.skins.spark.DropDownListButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:popUp"><apiName>popUp</apiName><shortdesc>ドロップダウンリストを開く PopUpAnchor コントロールです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:PopUpAnchor</apiValueClassifier></apiValueDef><apiDesc>ドロップダウンリストを開く PopUpAnchor コントロールです。 
        
        <p><codeph/><codeph/></p></apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormSkin"><apiName>FormSkin</apiName><shortdesc>Spark の Form コンテナのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Form コンテナのデフォルトスキンクラスです。このスキンは、レイアウトオブジェクトとして、FormLayout が設定された Form コンテナの contentGroup を定義します。FormLayout は、FormItem の列を整列するための追加のロジックが設定された VerticalLayout です。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormSkin:FormSkin"><apiName>FormSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormSkin:background"><apiName>background</apiName><shortdesc>Form クラスの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Form クラスの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Form</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultGridHeaderRenderer"><apiName>DefaultGridHeaderRenderer</apiName><shortdesc>DefaultGridHeaderRenderer クラスは、Spark DataGrid コントロールの列のデフォルトヘッダーレンダラーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.gridClasses:GridItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>DefaultGridHeaderRenderer クラスは、Spark DataGrid コントロールの列のデフォルトヘッダーレンダラーを定義します。
<p>MXML に定義されるサブクラスで、<codeph>labelDisplay</codeph> プロパティと <codeph>sortIndicator</codeph> プロパティの値を再定義できます。</p>
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.xml#GridColumnHeaderGroup"><linktext>spark.components.GridColumnHeaderGroup</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultGridHeaderRenderer:DefaultGridHeaderRenderer"><apiName>DefaultGridHeaderRenderer</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:defaultSortIndicator"><apiName>defaultSortIndicator</apiName><shortdesc>sortIndicator プロパティのデフォルト値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc><codeph>sortIndicator</codeph> プロパティのデフォルト値です。この値は IVisualElement の IFactory にする必要があります。        
        
        <p>この値は <codeph>fx:Declaration</codeph> ブロックに指定されており、MXML サブクラスで <codeph>id="defaultSortIndicator"</codeph> を指定した宣言でオーバーライドできます。</p>
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:labelDisplayGroup"><apiName>labelDisplayGroup</apiName><shortdesc>labelDisplay ビジュアルエレメントのサイズと場所を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>labelDisplay ビジュアルエレメントのサイズと場所を定義します。 
        
        <p><codeph>labelDisplay</codeph> は、レンダラーの <codeph>prepare()</codeph> メソッドによってこのグループに追加されます。labelDisplay によって指定されるサイズや場所の制限は、labelDisplayGroup を基準としてレイアウトを定義します。</p>
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:sortIndicatorGroup"><apiName>sortIndicatorGroup</apiName><shortdesc>sortIndicator ビジュアルエレメントのサイズと場所を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>sortIndicator ビジュアルエレメントのサイズと場所を定義します。 
        
        <p><codeph>sortIndicator</codeph> は、レンダラーの <codeph>prepare()</codeph> メソッドによってこのグループに追加されます。sortIndicator によって指定されるサイズや場所の制限は、sortIndicatorGroup を基準としてレイアウトを定義します。このグループは、sortIndicator が表示されるときにのみレイアウトに含まれます。</p>  
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc conref="spark.components.supportClasses.TextBase#maxDisplayedLines">
              このプロパティの値は、このレンダラーの labelDisplay エレメントの maxDisplayedLines プロパティを初期化するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxDisplayedLinesChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
             
              </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.TextBase#maxDisplayedLines">
              このプロパティの値は、このレンダラーの <codeph>labelDisplay</codeph> エレメントの <codeph>maxDisplayedLines</codeph> プロパティを初期化するために使用されます。
             
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:sortIndicator:get"><apiName>sortIndicator</apiName><shortdesc>
              列がソートされるときに表示されるビジュアルエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
             
              </apiDefaultValue></apiValueDef><apiDesc>
              列がソートされるときに表示されるビジュアルエレメントです。
             
              <p>sortIndicator ビジュアルエレメントは、このレンダラーの <codeph>prepare()</codeph> メソッドによって <codeph>sortIndicatorGroup</codeph> に追加されます。sortIndicator によって指定されるサイズや場所の制限は、sortIndicatorGroup を基準として場所を定義します。</p>
             
              </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperIncrementButtonSkin"><apiName>NumericStepperIncrementButtonSkin</apiName><shortdesc>Spark の NumericStepper コンポーネントの上ボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の NumericStepper コンポーネントの上ボタン用デフォルトスキンクラスです。  
    
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperIncrementButtonSkin:NumericStepperIncrementButtonSkin"><apiName>NumericStepperIncrementButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperIncrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>上矢印の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>上矢印の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperIncrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TabBarButtonSkin"><apiName>TabBarButtonSkin</apiName><shortdesc>Spark の TabBar ボタンのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の TabBar ボタンのデフォルトスキンクラスです。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TabBar"><linktext>spark.components.TabBar</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext>spark.skins.spark.TabBarSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:TabBarButtonSkin:TabBarButtonSkin"><apiName>TabBarButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:TextAreaSkin"><apiName>TextAreaSkin</apiName><shortdesc>Spark の TextArea コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の TextArea コンポーネントのデフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link></related-links><apiConstructor id="spark.skins.spark:TextAreaSkin:TextAreaSkin"><apiName>TextAreaSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TextAreaSkin:background"><apiName>background</apiName><shortdesc>TextArea コンポーネントの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>TextArea コンポーネントの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextArea</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>プロンプトテキストに使用されるラベルを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>プロンプトテキストに使用されるラベルを定義します。includeInLayout プロパティが false であるため、プロンプトテキストは測定に影響しません。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:scroller"><apiName>scroller</apiName><shortdesc>TextArea コントロールをスクロールするために使用するスクローラーを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc>TextArea コントロールをスクロールするために使用するスクローラーを定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperDecrementButtonSkin"><apiName>NumericStepperDecrementButtonSkin</apiName><shortdesc>Spark の NumericStepper コンポーネントの下ボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の NumericStepper コンポーネントの下ボタン用デフォルトスキンクラスです。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperDecrementButtonSkin:NumericStepperDecrementButtonSkin"><apiName>NumericStepperDecrementButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperDecrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>下矢印の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>下矢印の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperDecrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ImageLoadingSkin"><apiName>ImageLoadingSkin</apiName><shortdesc>Spark の Image スキンプログレスバープリローダーのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Image スキンプログレスバープリローダーのデフォルトスキンクラスです。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Image"><linktext>spark.components.Image</linktext></link></related-links><apiConstructor id="spark.skins.spark:ImageLoadingSkin:ImageLoadingSkin"><apiName>ImageLoadingSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ImageLoadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:Range</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderTrackSkin"><apiName>HSliderTrackSkin</apiName><shortdesc>Spark の HSlider コンポーネントのトラック用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の HSlider コンポーネントのトラック用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderTrackSkin:HSliderTrackSkin"><apiName>HSliderTrackSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HighlightBitmapCaptureSkin"><apiName>HighlightBitmapCaptureSkin</apiName><shortdesc>
      ターゲットコンポーネントのビットマップキャプチャを行ってフィルターをビットマップに適用するスキンの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      ターゲットコンポーネントのビットマップキャプチャを行ってフィルターをビットマップに適用するスキンの基本クラスです。FocusSkin および ErrorSkin の基本クラスです。
      
      </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ErrorSkin"><linktext>spark.skins.spark.ErrorSkin</linktext></link><link href="spark.skins.spark.xml#FocusSkin"><linktext>spark.skins.spark.FocusSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HighlightBitmapCaptureSkin:HighlightBitmapCaptureSkin"><apiName>HighlightBitmapCaptureSkin</apiName><shortdesc>
         コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
         コンストラクターです。
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:processBitmap"><apiName>processBitmap</apiName><shortdesc>
          キャプチャされたビットマップに後処理を適用します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          キャプチャされたビットマップに後処理を適用します。
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:bitmap"><apiName>bitmap</apiName><shortdesc>
          ターゲットコンポーネントのビットマップキャプチャです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Bitmap"/></apiValueDef><apiDesc>
          ターゲットコンポーネントのビットマップキャプチャです。 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:borderWeight:get"><apiName>borderWeight</apiName><shortdesc>
          ビットマップの周囲に配置するパディングピクセルの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          ビットマップの周囲に配置するパディングピクセルの数です。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:target:get"><apiName>target</apiName><shortdesc>
          ターゲットとするオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:SkinnableComponent</apiValueClassifier></apiValueDef><apiDesc>
          ターゲットとするオブジェクトです。
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarLeftButtonSkin"><apiName>ScrollBarLeftButtonSkin</apiName><shortdesc>Spark の ScrollBar コンポーネントの左ボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ScrollBar コンポーネントの左ボタン用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarLeftButtonSkin:ScrollBarLeftButtonSkin"><apiName>ScrollBarLeftButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarLeftButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>ScrollBar コンポーネントの左矢印の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>ScrollBar コンポーネントの左矢印の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarLeftButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormHeadingSkin"><apiName>StackedFormHeadingSkin</apiName><shortdesc>Spark の FormHeading コンポーネントの代替スキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の FormHeading コンポーネントの代替スキンクラスです。FormItems で StackedFormItemSkin を使用する場合にこのスキンを使用します。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormHeadingSkin:StackedFormHeadingSkin"><apiName>StackedFormHeadingSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormHeadingSkin:background"><apiName>background</apiName><shortdesc>Form クラスの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Form クラスの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:contentCol"><apiName>contentCol</apiName><shortdesc>FormItem のラベルとコンテンツが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>FormItem のラベルとコンテンツが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:helpCol"><apiName>helpCol</apiName><shortdesc>FormItem のヘルプコンテンツが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>FormItem のヘルプコンテンツが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormHeading</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormHeading#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormHeading#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>シーケンスラベルが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>シーケンスラベルが含まれる列です。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultItemRenderer"><apiName>DefaultItemRenderer</apiName><shortdesc>
  DefaultItemRenderer クラスは、List コントロールのデフォルトのアイテムレンダラーを定義します。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DefaultItemRenderer クラスは、List コントロールのデフォルトのアイテムレンダラーを定義します。 デフォルトのアイテムレンダラーは、リスト内の各アイテムに関連付けられているテキストのみを描画します。
 
  <p>カスタムアイテムレンダラーを作成することにより、デフォルトのアイテムレンダラーをオーバーライドできます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link><link href="spark.components.supportClasses.xml#ItemRenderer"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:DefaultItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
 
  <p>コンポーネントをアイテムレンダラーとして使う場合、<codeph>data</codeph> プロパティは表示するデータを保持します。 このイベントを受け取って、<codeph>data</codeph> プロパティが変更されたときにコンポーネントを更新することができます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:DefaultItemRenderer:DefaultItemRenderer"><apiName>DefaultItemRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      オプションのアイテムレンダラーのラベルコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      オプションのアイテムレンダラーのラベルコンポーネントです。このコンポーネントは、アイテムレンダラーのホストコンポーネントで <codeph>baselinePosition</codeph> プロパティの値を特定するために使用されます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      IDataRenderer インターフェイスによって定義された data プロパティの実装です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      IDataRenderer インターフェイスによって定義された <codeph>data</codeph> プロパティの実装です。 設定すると、値を格納し、コンポーネントを無効化してコンポーネントの再レイアウトをトリガーします。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      アイテムレンダラーがドラッグされている場合は、true になります。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      アイテムレンダラーがドラッグされている場合は、<codeph>true</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      アイテムレンダラーのホストコンポーネントのデータプロバイダー内のアイテムのインデックスです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーのホストコンポーネントのデータプロバイダー内のアイテムのインデックスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      アイテムレンダラーで表示するストリングです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
     </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーで表示するストリングです。 
     
      <p>アイテムレンダラーのホストコンポーネントは <codeph>itemToLabel()</codeph> メソッドを使用して、アイテムレンダラーによって表示するストリングにデータアイテムを変換できます。 </p>
     
      <p>List や ButtonBar などのコントロールの場合、<codeph>labelField</codeph> プロパティまたは <codeph>labelFunction</codeph> プロパティを使用して、ストリングを含むデータアイテムのフィールドを指定できます。それ以外の場合、ホストコンポーネントは <codeph>toString()</codeph> メソッドを使用して、ストリングにデータアイテムを変換できます。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      アイテムレンダラーがそれ自体を選択済みとして表示できる場合は、true が含まれます。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーがそれ自体を選択済みとして表示できる場合は、<codeph>true</codeph> が含まれます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、true を含みます。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、<codeph>true</codeph> を含みます。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarTrackSkin"><apiName>HScrollBarTrackSkin</apiName><shortdesc>Spark の HScrollBar コンポーネント上のトラック用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の HScrollBar コンポーネント上のトラック用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarTrackSkin:HScrollBarTrackSkin"><apiName>HScrollBarTrackSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxButtonSkin"><apiName>ComboBoxButtonSkin</apiName><shortdesc>Spark の ComboBox コンポーネント上のアンカーボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ComboBox コンポーネント上のアンカーボタン用デフォルトスキンクラスです。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxButtonSkin:ComboBoxButtonSkin"><apiName>ComboBoxButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>アンカーボタンに表示される矢印のグラフィックです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>アンカーボタンに表示される矢印のグラフィックです。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormHeadingSkin"><apiName>FormHeadingSkin</apiName><shortdesc>Spark の FormHeading コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の FormHeading コンポーネントのデフォルトスキンクラスです。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormHeadingSkin:FormHeadingSkin"><apiName>FormHeadingSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormHeadingSkin:background"><apiName>background</apiName><shortdesc>Form クラスの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>Form クラスの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:contentCol"><apiName>contentCol</apiName><shortdesc>フォームアイテムのコンテンツが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>フォームアイテムのコンテンツが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:helpCol"><apiName>helpCol</apiName><shortdesc>フォームアイテムのヘルプコンテンツが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>フォームアイテムのヘルプコンテンツが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormHeading</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:labelCol"><apiName>labelCol</apiName><shortdesc>フォームアイテムのラベルが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>フォームアイテムのラベルが含まれる列です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormHeading#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormHeading#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>シーケンスラベルが含まれる列です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>シーケンスラベルが含まれる列です。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarDownButtonSkin"><apiName>ScrollBarDownButtonSkin</apiName><shortdesc>Spark の ScrollBar コンポーネントの下ボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ScrollBar コンポーネントの下ボタン用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarDownButtonSkin:ScrollBarDownButtonSkin"><apiName>ScrollBarDownButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarDownButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>ScrollBar コンポーネントの下矢印の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>ScrollBar コンポーネントの下矢印の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarDownButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollerSkin"><apiName>ScrollerSkin</apiName><shortdesc>Spark の Scroller コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Scroller コンポーネントのデフォルトスキンクラスです。 
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollerSkin:ScrollerSkin"><apiName>ScrollerSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollerSkin:horizontalScrollBarFactory"><apiName>horizontalScrollBarFactory</apiName><shortdesc>データが多すぎて表示領域の幅に収まらない場合に表示される部分のデータを制御できる、水平の ScrollBar コントロールです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>データが多すぎて表示領域の幅に収まらない場合に表示される部分のデータを制御できる、水平の ScrollBar コントロールです。水平の ScrollBar を表示するかどうかは Scroller によって決定されます。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollerSkin:verticalScrollBarFactory"><apiName>verticalScrollBarFactory</apiName><shortdesc>データが多すぎて表示領域の高さに収まらない場合に表示される部分のデータを制御できる、垂直の ScrollBar コントロールです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>データが多すぎて表示領域の高さに収まらない場合に表示される部分のデータを制御できる、垂直の ScrollBar コントロールです。垂直の ScrollBar を表示するかどうかは Scroller によって決定されます。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerIncrementButtonSkin"><apiName>SpinnerIncrementButtonSkin</apiName><shortdesc>Spark の Spinner コンポーネントの上ボタンのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Spinner コンポーネントの上ボタンのデフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerIncrementButtonSkin:SpinnerIncrementButtonSkin"><apiName>SpinnerIncrementButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerIncrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>上矢印の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>上矢印の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerIncrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnableDataContainerSkin"><apiName>SkinnableDataContainerSkin</apiName><shortdesc>Spark の SkinnableDataContainer コンテナのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の SkinnableDataContainer コンテナのデフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnableDataContainerSkin:SkinnableDataContainerSkin"><apiName>SkinnableDataContainerSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnableDataContainerSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableDataContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnableDataContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarSkin"><apiName>HScrollBarSkin</apiName><shortdesc>Spark の HScrollBar コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の HScrollBar コンポーネントのデフォルトスキンクラスです。サムとトラックのスキンは、それぞれ HScrollBarThumbSkin クラスと HScrollBarTrackSkin クラスによって定義されます。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarSkin:HScrollBarSkin"><apiName>HScrollBarSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">デフォルトスキンクラスは ScrollBarLeftButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">デフォルトスキンクラスは ScrollBarLeftButtonSkin です。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:HScrollBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">デフォルトスキンクラスは ScrollBarRightButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">デフォルトスキンクラスは ScrollBarRightButtonSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">デフォルトスキンクラスは HScrollBarThumbSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">デフォルトスキンクラスは HScrollBarThumbSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">デフォルトスキンクラスは HScrollBarTrackSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">デフォルトスキンクラスは HScrollBarTrackSkin です。    
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerSkin"><apiName>SpinnerSkin</apiName><shortdesc>Spark の Spinner コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Spinner コンポーネントのデフォルトスキンクラスです。Spinner コンポーネントの上下ボタンのスキンは、それぞれ SpinnerDecrementButtonSkin クラスと SpinnerIncrementButtonSkin クラスによって定義されます。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#SpinnerDecrementButtonSkin"><linktext>spark.skins.spark.SpinnerDecrementButtonSkin</linktext></link><link href="spark.skins.spark.xml#SpinnerIncrementButtonSkin"><linktext>spark.skins.spark.SpinnerIncrementButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerSkin:SpinnerSkin"><apiName>SpinnerSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.Spinner#decrementButton">デフォルトスキンクラスは SpinnerDecrementButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#decrementButton">デフォルトスキンクラスは SpinnerDecrementButtonSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#SpinnerDecrementButtonSkin"><linktext>spark.skins.spark.SpinnerDecrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:SpinnerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Spinner</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.Spinner#incrementButton">デフォルトスキンクラスは SpinnerIncrementButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#incrementButton">デフォルトスキンクラスは SpinnerIncrementButtonSkin です。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#SpinnerIncrementButtonSkin"><linktext>spark.skins.spark.SpinnerIncrementButtonSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperSkin"><apiName>NumericStepperSkin</apiName><shortdesc>Spark の NumericStepper コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の NumericStepper コンポーネントのデフォルトスキンクラスです。NumericStepper コンポーネント上のテキスト入力フィールドのスキンは、NumericStepperTextInputSkin クラスによって定義されます。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperSkin:NumericStepperSkin"><apiName>NumericStepperSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.Spinner#decrementButton">デフォルトクラスは NumericStepperDecrementButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#decrementButton">デフォルトクラスは NumericStepperDecrementButtonSkin です。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperDecrementButtonSkin"><linktext>spark.skins.spark.NumericStepperDecrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:NumericStepper</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.Spinner#incrementButton">デフォルトクラスは NumericStepperIncrementButtonSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#incrementButton">デフォルトクラスは NumericStepperIncrementButtonSkin です。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperIncrementButtonSkin"><linktext>spark.skins.spark.NumericStepperIncrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.NumericStepper#textDisplay">デフォルトのクラスは NumericStepperTextInputSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.NumericStepper#textDisplay">デフォルトのクラスは NumericStepperTextInputSkin です。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarThumbSkin"><apiName>HScrollBarThumbSkin</apiName><shortdesc>Spark の HScrollBar コンポーネントのサム用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の HScrollBar コンポーネントのサム用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarThumbSkin:HScrollBarThumbSkin"><apiName>HScrollBarThumbSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:RadioButtonSkin"><apiName>RadioButtonSkin</apiName><shortdesc>Spark の RadioButton コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の RadioButton コンポーネントのデフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link></related-links><apiConstructor id="spark.skins.spark:RadioButtonSkin:RadioButtonSkin"><apiName>RadioButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:RadioButtonSkin:dot"><apiName>dot</apiName><shortdesc>RadioButton のドットの外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>RadioButton のドットの外観を定義します。ドットの外観をカスタマイズするには、カスタムの RadioButtonSkin クラスを作成します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:RadioButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:RadioButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ApplicationSkin"><apiName>ApplicationSkin</apiName><shortdesc>Spark の Application コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Application コンポーネントのデフォルトスキンクラスです。 
        
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Application"><linktext>spark.components.Application</linktext></link></related-links><apiConstructor id="spark.skins.spark:ApplicationSkin:ApplicationSkin"><apiName>ApplicationSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ApplicationSkin:backgroundRect"><apiName>backgroundRect</apiName><shortdesc>アプリケーションの背景を形成する単色で塗りつぶされた矩形です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>アプリケーションの背景を形成する単色で塗りつぶされた矩形です。塗りのカラーは、Application の backgroundColor プロパティに設定されます。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Application#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Application#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc> 
         このスキンの適用対象であるコンポーネントを参照する、厳密に型指定されたプロパティです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Application</apiValueClassifier></apiValueDef><apiDesc> 
         このスキンの適用対象であるコンポーネントを参照する、厳密に型指定されたプロパティです。
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:BorderContainerSkin"><apiName>BorderContainerSkin</apiName><shortdesc>
  Spark の BorderContainer コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark の BorderContainer コンポーネントのデフォルトスキンクラスです。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#BorderContainer"><linktext>spark.components.BorderContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:BorderContainerSkin:BorderContainerSkin"><apiName>BorderContainerSkin</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:BorderContainerSkin:contentGroup:get"><apiName>contentGroup</apiName><shortdesc>
      SkinnableContainer の必須のスキンパーツです。 
     </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>
      SkinnableContainer の必須のスキンパーツです。 
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:BorderContainerSkin:hostComponent:get"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:BorderContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderSkin"><apiName>HSliderSkin</apiName><shortdesc>Spark の HSlider コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の HSlider コンポーネントのデフォルトスキンクラスです。サムとトラックのスキンは、それぞれ HSliderThumbSkin クラスと HSliderTrackSkin クラスによって定義されます。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderSkin:HSliderSkin"><apiName>HSliderSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderSkin:dataTip"><apiName>dataTip</apiName><shortdesc>mx.controls.Slider コントロールで使用されるツールヒントです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>mx.controls.Slider コントロールで使用されるツールヒントです。DataTip の外観をカスタマイズするには、カスタムの HSliderSkin クラスを作成します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HSliderSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:HSlider</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HSliderSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">デフォルトスキンクラスは HSliderThumbSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">デフォルトスキンクラスは HSliderThumbSkin です。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HSliderSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">デフォルトスキンクラスは HSliderTrackSkin です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">デフォルトスキンクラスは HSliderTrackSkin です。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerDecrementButtonSkin"><apiName>SpinnerDecrementButtonSkin</apiName><shortdesc>Spark の Spinner コンポーネントの下ボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Spinner コンポーネントの下ボタン用デフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerDecrementButtonSkin:SpinnerDecrementButtonSkin"><apiName>SpinnerDecrementButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerDecrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>下矢印の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>下矢印の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerDecrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnableContainerSkin"><apiName>SkinnableContainerSkin</apiName><shortdesc>Spark の SkinnableContainer コンテナのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の SkinnableContainer コンテナのデフォルトスキンクラスです。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnableContainerSkin:SkinnableContainerSkin"><apiName>SkinnableContainerSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnableContainerSkin:background"><apiName>background</apiName><shortdesc>SkinnableContainer クラスの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>SkinnableContainer クラスの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableContainerSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnableContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarUpButtonSkin"><apiName>ScrollBarUpButtonSkin</apiName><shortdesc>Spark の ScrollBar コンポーネントの上ボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ScrollBar コンポーネントの上ボタン用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarUpButtonSkin:ScrollBarUpButtonSkin"><apiName>ScrollBarUpButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarUpButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>ScrollBar コンポーネントの上矢印の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>ScrollBar コンポーネントの上矢印の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarUpButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:PanelSkin"><apiName>PanelSkin</apiName><shortdesc>Spark の Panel コンテナのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の Panel コンテナのデフォルトスキンクラスです。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext>spark.components.Panel</linktext></link></related-links><apiConstructor id="spark.skins.spark:PanelSkin:PanelSkin"><apiName>PanelSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:PanelSkin:background"><apiName>background</apiName><shortdesc>PanelSkin クラスの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>PanelSkin クラスの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:contents"><apiName>contents</apiName><shortdesc>タイトルバーの内容とコントロールバーの垂直方向のスタックを含みます。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>タイトルバーの内容とコントロールバーの垂直方向のスタックを含みます。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Panel#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Panel</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:titleDisplay"><apiName>titleDisplay</apiName><shortdesc conref="spark.components.Panel#titleDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#titleDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultButtonSkin"><apiName>DefaultButtonSkin</apiName><shortdesc>Spark の DefaultButton コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の DefaultButton コンポーネントのデフォルトスキンクラスです。DefaultButton コンポーネントは、Alert などのパネルで使用されます。コンテナの defaultButton プロパティによって定義されます。  
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.controls.Alert.xml"><linktext>mx.controls.Alert</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultButtonSkin:DefaultButtonSkin"><apiName>DefaultButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:FocusSkin"><apiName>FocusSkin</apiName><shortdesc>
  Spark コンポーネントがフォーカスを得たときに使用する、コンポーネント周囲の「光彩」を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins.spark:HighlightBitmapCaptureSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark コンポーネントがフォーカスを得たときに使用する、コンポーネント周囲の「光彩」を定義します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.skins.spark:FocusSkin:FocusSkin"><apiName>FocusSkin</apiName><shortdesc>
     コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     コンストラクターです。
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:FocusSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:FocusSkin:protected:borderWeight:get"><apiName>borderWeight</apiName><shortdesc>
      
          ビットマップの周囲に配置するパディングピクセルの数です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
          ビットマップの周囲に配置するパディングピクセルの数です。
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarFirstButtonSkin"><apiName>ButtonBarFirstButtonSkin</apiName><shortdesc>Spark の ButtonBar コンポーネントにある最初のボタンのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ButtonBar コンポーネントにある最初のボタンのデフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarFirstButtonSkin:ButtonBarFirstButtonSkin"><apiName>ButtonBarFirstButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:DropDownListButtonSkin"><apiName>DropDownListButtonSkin</apiName><shortdesc>Spark の DropDownList コンポーネント上のアンカーボタン用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の DropDownList コンポーネント上のアンカーボタン用デフォルトスキンクラスです。  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:DropDownListButtonSkin:DropDownListButtonSkin"><apiName>DropDownListButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DropDownListButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>アンカーボタンに表示される矢印のグラフィックです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>アンカーボタンに表示される矢印のグラフィックです。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:UITextFieldGridItemRenderer"><apiName>UITextFieldGridItemRenderer</apiName><shortdesc>
  UITextFieldGridItemRenderer クラスは、1 つのテキストラベルを表示する簡単で効率的なアイテムレンダラーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="style" name="layoutDirection"/><Exclude kind="property" name="layoutDirection"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IGridItemRenderer</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier>mx.core:UITextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  UITextFieldGridItemRenderer クラスは、1 つのテキストラベルを表示する簡単で効率的なアイテムレンダラーを定義します。大量の表示セルを持つグリッドコントロールを表示するアプリケーションの場合、このレンダラーは Microsoft Windows 上での最適なパフォーマンスを提供します。 このレンダラーは Flash Text Engine（FTE）ではなく TextField に基づいているため、Spark の一部のテキスト機能がサポートされておらず、FTE 固有のテキストスタイルはサポートされていません。
 
  <p>ラベルテキストの折り返しは <codeph>wordWrap</codeph> プロパティを使用して制御できます。例えば、<codeph>wordWrap="false"</codeph> と <codeph>variableRowHeight="false"</codeph> を設定すると、ラベルが折り返されない、高さが固定のセルが作成されます。<codeph>wordWrap</codeph> プロパティを明示的に設定しない場合、<codeph>wordWrap</codeph> はグリッドの <codeph>variableRowHeight</codeph> プロパティの値に設定されます。</p>
 
  <p>UITextFieldGridItemRenderer は <codeph>layoutDirection</codeph> プロパティの値を親から継承します。 UITextFieldGridItemRenderer に直接設定することはできません。</p> 
 
  <p>UITextFieldGridItemRenderer クラスは、サブクラス化したり、コピーしたりしないでください。 GridItemRenderer クラスに基づいてカスタムアイテムレンダラーを作成します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link><link href="mx.core.xml#FTETextField"><linktext>mx.core.FTETextField</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:UITextFieldGridItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  バインド可能な data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  バインド可能な <codeph>data</codeph> プロパティが変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:UITextFieldGridItemRenderer:UITextFieldGridItemRenderer"><apiName>UITextFieldGridItemRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:UITextFieldGridItemRenderer:discard"><apiName>discard</apiName><shortdesc>
      
      アイテムレンダラーが表示されなくなると判断された場合に、アイテムレンダラーの親の updateDisplayList() メソッドから呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hasBeenRecycled</apiItemName><apiType value="Boolean"/><apiDesc>このレンダラーがオーナーの内部フリーリストに追加されて再利用される場合は <codeph>true</codeph> です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      アイテムレンダラーが表示されなくなると判断された場合に、アイテムレンダラーの親の <codeph>updateDisplayList()</codeph> メソッドから呼び出されます。<codeph>willBeRecycled</codeph> パラメーターが <codeph>true</codeph> の場合、オーナーはこのレンダラーを内部フリーリストに追加して再利用します。 実装では、このメソッドを使用して不要となったレンダラープロパティを消去できます。
     
      <p>このメソッドが直接呼び出されることは意図されていません。 このメソッドは、DataGrid の実装によって呼び出されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:UITextFieldGridItemRenderer:prepare"><apiName>prepare</apiName><shortdesc>
      
      レンダラーのすべてのプロパティが設定された後、アイテムレンダラーの親の updateDisplayList() メソッドから呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>willBeRecycled</apiItemName><apiType value="Boolean"/><apiDesc> このレンダラーが再利用中である場合は <codeph>true</codeph> です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      レンダラーのすべてのプロパティが設定された後、アイテムレンダラーの親の <codeph>updateDisplayList()</codeph> メソッドから呼び出されます。このレンダラーが今まで使用されたことがない場合、つまりリサイクルされなかった場合、<codeph>hasBeenRecycled</codeph> パラメーターは <codeph>false</codeph> です。 このメソッドは、レンダラーが表示されようとしているときに呼び出されます。また、レンダラープロパティの変更または再表示の明示的要求によってレンダラーが再表示されるたびに呼び出されます。 
     
      <p>このメソッドを使用して、レンダラーのすべてのビジュアルエレメントとプロパティを設定できます。このメソッドを使用すると、<codeph>data</codeph> プロパティをビジュアルエレメントのプロパティにバインドするよりも効率的な場合があります。注意：<codeph>prepare()</codeph> メソッドは頻繁に呼び出されるため、効率的なコードを書いてください。</p>
     
      <p><codeph>prepare()</codeph> メソッドは、<codeph>discard()</codeph> メソッドの呼び出し前に何度も呼び出されることがあります。</p>
     
      <p>このメソッドが直接呼び出されることは意図されていません。 このメソッドは、DataGrid の実装によって呼び出されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:columnIndex:get"><apiName>columnIndex</apiName><shortdesc>
      
      このアイテムレンダラーのセルの列インデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      このアイテムレンダラーのセルの列インデックスです。これは <codeph>column.columnIndex</codeph> と同じ値です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:column:get"><apiName>column</apiName><shortdesc>
      
      このアイテムレンダラーに関連付けられている列を表す GridColumn オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:GridColumn</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      このアイテムレンダラーに関連付けられている列を表す GridColumn オブジェクトです。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      グリッドコントロールの行全体に対するデータプロバイダーアイテムの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      グリッドコントロールの行全体に対するデータプロバイダーアイテムの値です。 多くの場合、アイテムレンダラーはビジュアルエレメントの属性を、このオブジェクトのプロパティにバインドします。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:down:get"><apiName>down</apiName><shortdesc>
      グリッドコントロールの updateDisplayList() メソッドは、prepare() を呼び出す前に、このプロパティを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールの <codeph>updateDisplayList()</codeph> メソッドは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを設定します。   </p>
     
      
      グリッドセル内で、2 つの入力ジェスチャのうちの 1 つが行われると、つまりマウスボタンまたはタッチスクリーンのどちらかが押されると、このプロパティが <codeph>true</codeph> に設定されます。マウスボタンが放されるか、ユーザーがタッチ画面に触れなくなるか、またはマウスやタッチがグリッドセルの外にドラッグされると、<codeph>down</codeph> プロパティは <codeph>false</codeph> にリセットされます。   
     
      <p>List アイテムレンダラーとは異なり、Grid アイテムレンダラーには、ダウンインジケーターを表示する排他的な役割はありません。Grid 自体は、選択された行またはセルのダウンインジケーターをレンダリングします。アイテムレンダラーは、そのビジュアルプロパティを変更して、押下されていることを強調することもできます。</p>   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      ドラッグ＆ドロップ操作中の場合のようにアイテムレンダラーがドラッグされている場合は true が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="draggingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      ドラッグ＆ドロップ操作中の場合のようにアイテムレンダラーがドラッグされている場合は <codeph>true</codeph> が含まれます。 現在、ドラッグ＆ドロップ操作は、Spark DataGrid コントロールではサポートされていません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:grid:get"><apiName>grid</apiName><shortdesc>
      このアイテムレンダラーに関連付けられているグリッドコントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Grid</apiValueClassifier></apiValueDef><apiDesc>
      このアイテムレンダラーに関連付けられているグリッドコントロールです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:hovered:get"><apiName>hovered</apiName><shortdesc>
      アイテムレンダラー上にマウスポインターが置かれたときに true に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoveredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      アイテムレンダラー上にマウスポインターが置かれたときに <codeph>true</codeph> に設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      グリッドコントロールは、prepare() を呼び出す前に、このプロパティを列の itemToLabel() メソッドの値に設定します。 アイテムレンダラーで表示するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを列の <codeph>itemToLabel()</codeph> メソッドの値に設定します。</p>
     
      
      アイテムレンダラーで表示するストリングです。  
     
      <p>GridItemRenderer クラスは、<codeph>labelDisplay</codeph> エレメントが指定されている場合、そのエレメントの <codeph>text</codeph> プロパティに、このプロパティの値を自動的にコピーします。Grid は、<codeph>label</codeph> を列の <codeph>itemToLabel()</codeph> メソッドから返される値に設定します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:rowIndex:get"><apiName>rowIndex</apiName><shortdesc>
      グリッドコントロールの updateDisplayList() メソッドは、prepare() を呼び出す前に、このプロパティを設定します。 レンダリングされているセルの行の 0 で始まるインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールの <codeph>updateDisplayList()</codeph> メソッドは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを設定します。</p>
     
      
      レンダリングされているセルの行の 0 で始まるインデックスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      グリッドコントロールの updateDisplayList() メソッドは、prepare() を呼び出す前に、このプロパティを設定します。 アイテムレンダラーのセルが現在の選択範囲に含まれている場合は true が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールの <codeph>updateDisplayList()</codeph> メソッドは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを設定します。</p>
     
      
      アイテムレンダラーのセルが現在の選択範囲に含まれている場合は <codeph>true</codeph> が含まれます。 
     
      <p> List アイテムレンダラーとは異なり、Grid アイテムレンダラーには、自分が選択範囲の一部であることを表示する排他的な役割はありません。Grid 自体は、選択された行またはセルに対して、selectionIndicator スキンパーツを自動的に表示します。また、アイテムレンダラーは、選択範囲の一部であることを強調するためにビジュアルプロパティを変更できます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      グリッドコントロールの updateDisplayList() メソッドは、prepare() を呼び出す前に、このプロパティを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showsCaretChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>グリッドコントロールの <codeph>updateDisplayList()</codeph> メソッドは、<codeph>prepare()</codeph> を呼び出す前に、このプロパティを設定します。   </p>
     
      
      アイテムレンダラーのセルがキャレットで示される場合は <codeph>true</codeph> が含まれます。
     
      <p> List アイテムレンダラーとは異なり、Grid アイテムレンダラーには、自分のセルまたは行にキャレットがあることを表示する排他的な役割はありません。Grid 自体は、キャレット行またはキャレットセルに対して、caretIndicator スキンパーツを自動的に表示します。また、アイテムレンダラーは、キャレットがあることを強調するためにビジュアルプロパティを変更できます。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderThumbSkin"><apiName>HSliderThumbSkin</apiName><shortdesc>Spark の HSlider コンポーネントのサム用デフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の HSlider コンポーネントのサム用デフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderThumbSkin:HSliderThumbSkin"><apiName>HSliderThumbSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ListSkin"><apiName>ListSkin</apiName><shortdesc>Spark の List コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の List コンポーネントのデフォルトスキンクラスです。  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link></related-links><apiConstructor id="spark.skins.spark:ListSkin:ListSkin"><apiName>ListSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ListSkin:background"><apiName>background</apiName><shortdesc>リストベースのコンポーネントについて背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>リストベースのコンポーネントについて背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:bgFill"><apiName>bgFill</apiName><shortdesc>背景色を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>背景色を定義します。デフォルトのカラーは 0xFFFFFF です。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:dropIndicator"><apiName>dropIndicator</apiName><shortdesc conref="spark.components.List#dropIndicator">List のドロップインジケーターの外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc conref="spark.components.List#dropIndicator">List のドロップインジケーターの外観を定義します。ドロップインジケーターの外観をカスタマイズするには、カスタム ListSkin クラスを作成します。List のレイアウトによって dropIndicator のサイズと位置が設定されます。<codeph>dropIndicator</codeph> のサイズは、通常、アイテム間のギャップのサイズに設定されます。最小値と最大値の設定は、通常、主要な軸（ギャップ軸）に沿った方向についてのみ考慮されます。例えば、VerticalLayout は <codeph>minWidth</codeph> および <codeph>maxWidth</codeph> の設定を無視しますが、<codeph>minHeight</codeph> および <codeph>maxHeight</codeph> は考慮します。 
        
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:List</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:scroller"><apiName>scroller</apiName><shortdesc>リストにスクロールバーを追加するための Scroller コンポーネントです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc>リストにスクロールバーを追加するための Scroller コンポーネントです。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnablePopUpContainerSkin"><apiName>SkinnablePopUpContainerSkin</apiName><shortdesc>Spark の SkinnablePopUpContainer コンテナのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の SkinnablePopUpContainer コンテナのデフォルトスキンクラスです。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer"><linktext>spark.components.SkinnablePopUpContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnablePopUpContainerSkin:SkinnablePopUpContainerSkin"><apiName>SkinnablePopUpContainerSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:background"><apiName>background</apiName><shortdesc>SkinnablePopUpContainer クラスの背景の外観を定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>SkinnablePopUpContainer クラスの背景の外観を定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:chrome"><apiName>chrome</apiName><shortdesc>このスキンによって使用される背景とコンテンツグループを定義します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>このスキンによって使用される背景とコンテンツグループを定義します。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnablePopUpContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TabBarSkin"><apiName>TabBarSkin</apiName><shortdesc>Spark の TabBar コンポーネントのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の TabBar コンポーネントのデフォルトスキンクラスです。TabBarSkin によって作成される ButtonBarButtons は、TabBarButtonSkin クラスを使用します。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TabBar"><linktext>spark.components.TabBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext>spark.skins.spark.TabBarButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:TabBarSkin:TabBarSkin"><apiName>TabBarSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TabBarSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TabBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TabBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarLastButtonSkin"><apiName>ButtonBarLastButtonSkin</apiName><shortdesc>Spark の ButtonBar コンポーネントにある最後のボタンのデフォルトスキンクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark の ButtonBar コンポーネントにある最後のボタンのデフォルトスキンクラスです。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarLastButtonSkin:ButtonBarLastButtonSkin"><apiName>ButtonBarLastButtonSkin</apiName><shortdesc>コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>コンストラクターです。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage>