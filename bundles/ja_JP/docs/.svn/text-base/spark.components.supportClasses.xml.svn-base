<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components.supportClasses"><apiName>spark.components.supportClasses</apiName><apiDetail/><apiClassifier id="spark.components.supportClasses:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
  スキン可能コンテナコンポーネントの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  通常の状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  スキン可能コンテナコンポーネントの基本クラスです。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:SkinnableContainerBase:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableContainerBase:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      スキンに適用される状態の名前を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>スキンに適用する状態の名前を指定する文字列です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      スキンに適用される状態の名前を返します。例えば、Button コンポーネントは、状態を指定するために「up」、「down」、「over」、または「disabled」というストリングを返すことができます。
     
      <p>SkinnableComponent のサブクラスは、このメソッドをオーバーライドして値を返す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableContainerBase:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      コンテナのデフォルトボタンとして指定された Button コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテナのデフォルトボタンとして指定された Button コントロールです。 コンテナ内のコントロールにフォーカスがあるときは、Enter キーを押すことと、この Button コントロールをクリックすることが同義です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Range"><apiName>Range</apiName><shortdesc>
  Range クラスは、minimum プロパティと maximum プロパティによって定義された、値とその値に対して許可された範囲を保持します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Range&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Range
    <strong>Properties</strong>
    maximum="100"
    minimum="0"
    snapInterval="1"
    stepSize="1"
    value="0"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Range クラスは、<codeph>minimum</codeph> プロパティと <codeph>maximum</codeph> プロパティによって定義された、値とその値に対して許可された範囲を保持します。<codeph>value</codeph> プロパティは、常に現在の <codeph>minimum</codeph> と <codeph>maximum</codeph> の間になるように制約されます。また、<codeph>minimum</codeph> および <codeph>maximum</codeph><codeph/> は、常に (minimum &lt;= value &lt;= maximum) が <codeph>true</codeph> である適切な数値順になるように制約されます。<codeph>snapInterval</codeph> プロパティの値が 0 でない場合、<codeph>value</codeph> プロパティは <codeph>snapInterval</codeph> の倍数になるようにも制限されます。
 
  <p>Range は、TrackBase や Spinner などの、範囲機能を必要とする様々なコントロールの基本クラスです。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#TrackBase"><linktext>spark.components.supportClasses.TrackBase</linktext></link><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Range:Range"><apiName>Range</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Range:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      stepSize 単位で value を増やしたり減らしたりします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>true の場合は <codeph>stepSize</codeph> を <codeph>value</codeph> に加算し、それ以外の場合は減算します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>stepSize</codeph> 単位で <codeph>value</codeph> を増やしたり減らしたりします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:nearestValidValue"><apiName>nearestValidValue</apiName><shortdesc>
      value に最も近い interval の整数倍と minimum の合計を返します。ただし、maximum の制限のほうが value に近い場合は、maximum を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>入力に最も近い有効な値です。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>入力値です。
      </apiDesc></apiParam><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>snapInterval の値、または snapInterval の整数倍。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>value</codeph> に最も近い <codeph>interval</codeph> の整数倍と minimum の合計を返します。ただし、maximum の制限のほうが <codeph>value</codeph> に近い場合は、maximum を返します。
     
      <p><codeph>interval</codeph> が 0 に等しい場合、値は下限および上限にクリップされます。</p>
     
      <p>範囲の有効値は <codeph>minimum</codeph> プロパティと <codeph>interval</codeph> の整数倍の合計と定義されます。また、<codeph>maximum</codeph> プロパティ以下とも定義されます。<codeph>maximum</codeph> は snapInterval の倍数である必要はありません。</p>
     
      <p>例えば、<codeph>minimum</codeph> が 1、<codeph>maximum</codeph> が 6、<codeph>snapInterval</codeph> が 3 の場合、Range の有効な値は 1、2、5、6 です。同様に、<codeph>minimum</codeph> が 2、<codeph>maximum</codeph> が 9、<codeph>snapInterval</codeph> が 1.5 の場合は、Range の有効な値は 2、3.5、5、6.5、8、9 です。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:setValue"><apiName>setValue</apiName><shortdesc>
      value プロパティの補助記憶領域を設定し、プロパティが変化した場合は valueCommit イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> プロパティの新しい値です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>value</codeph> プロパティの補助記憶領域を設定し、プロパティが変化した場合は <codeph>valueCommit</codeph> イベントを送出します。  
     
      <p><codeph>value</codeph> プロパティを更新すると常に、このメソッドが呼び出されます。</p>
     
      <p>このメソッドでは、呼び出し元が既に <codeph>nearestValidValue()</codeph> メソッドを使用して value パラメーターを制約していることが想定されています。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:Range:maximum:get"><apiName>maximum</apiName><shortdesc>
      value の有効な最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>value</codeph> の有効な最大値です。
     
      <p>value プロパティに対する変更は、<codeph>commitProperties()</codeph> によって、<codeph>nearestValidValue()</codeph> メソッドでの maximum 以下に制約されます。</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:minimum:get"><apiName>minimum</apiName><shortdesc>
      value の有効な最少値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>value</codeph> の有効な最少値です。
     
      <p>value プロパティに対する変更は、<codeph>commitProperties()</codeph> によって、<codeph>nearestValidValue()</codeph> メソッドでの minimum 以上に制約されます。</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:snapInterval:get"><apiName>snapInterval</apiName><shortdesc>
      snapInterval プロパティは、value プロパティの有効な値を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      snapInterval プロパティは、<codeph>value</codeph> プロパティの有効な値を制御します。 ゼロ以外の場合、有効値は、このプロパティの整数倍と <codeph>minimum</codeph> の合計で、<codeph>maximum</codeph> 以下になります。
     
      <p>例えば、<codeph>minimum</codeph> が 10、<codeph>maximum</codeph> が 20、このプロパティが 3 の場合、この Range の有効な値は 10、13、16、19 および 20 です。</p>
      
      <p>このプロパティの値がゼロの場合、有効な値の制約は minimum と maximum を含むこれらの値の範囲内だけになります。</p>
     
      <p>このプロパティを設定すると、<codeph>stepSize</codeph> プロパティの有効値も制約されます。このプロパティが明示的に設定されず、<codeph>stepSize</codeph> が設定されている場合、デフォルトでは <codeph>snapInterval</codeph> に <codeph>stepSize</codeph> が設定されます。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      changeValueByStep() メソッドが呼び出されたときに変更される value プロパティの量です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>changeValueByStep()</codeph> メソッドが呼び出されたときに変更される <codeph>value</codeph> プロパティの量です。<codeph>snapInterval</codeph> が 0 でない場合は、<codeph>snapInterval</codeph> の倍数である必要があります。<codeph>stepSize</codeph> が倍数でない場合、<codeph>snapInterval</codeph> 以上で最も近い倍数に丸められます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Range:value:get"><apiName>value</apiName><shortdesc>
      この範囲の現在の値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      この範囲の現在の値です。
      
      <p>value プロパティに対する変更は、<codeph>commitProperties()</codeph> によって、<codeph>nearestValidValue()</codeph> メソッドでの <codeph>minimum</codeph> プロパティ以上、<codeph>maximum</codeph> プロパティ以下、および <codeph>snapInterval</codeph> の倍数に制約されます。</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/setValue"><linktext>setValue</linktext></link><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
  ToggleButtonBase コンポーネントは、selected プロパティをサポートする Spark ボタンコンポーネントの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  ボタン選択時のボタンの無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="downAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  ボタン選択時のボタンのダウン状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="overAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  ボタン選択時のボタンのオーバー状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="upAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  ボタン選択時のボタンのアップ状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ToggleButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButtonBase
    <strong>Properties</strong>
    selected="false"
 
    <strong>events</strong>
    change="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleButtonBase コンポーネントは、<codeph>selected</codeph> プロパティをサポートする Spark ボタンコンポーネントの基本クラスです。ToggleButton、CheckBox、および RadioButton は ToggleButtonBase のサブクラスです。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ToggleButtonBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  ToggleButtonBase コントロールの selected プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ToggleButtonBase コントロールの <codeph>selected</codeph> プロパティが変更されたときに送出されます。ユーザーがマウスでコントロールを操作した場合にのみ、このイベントが送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ToggleButtonBase:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ToggleButtonBase:selected:get"><apiName>selected</apiName><shortdesc>
      ボタンがダウン状態の場合は true、アップ状態の場合は false です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      ボタンがダウン状態の場合は <codeph>true</codeph>、アップ状態の場合は <codeph>false</codeph> です。
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:OverlayDepth"><apiName>OverlayDepth</apiName><shortdesc>
  OverlayDepth クラスでは、Flex で使用される様々なオーバーレイエレメントのデフォルトの奥行き値が定義されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  OverlayDepth クラスでは、Flex で使用される様々なオーバーレイエレメントのデフォルトの奥行き値が定義されます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiValue id="spark.components.supportClasses:OverlayDepth:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      すべての Flex オーバーレイエレメントの下のデフォルトの奥行き値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      すべての Flex オーバーレイエレメントの下のデフォルトの奥行き値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:DROP_INDICATOR"><apiName>DROP_INDICATOR</apiName><shortdesc>
	  ドロップインジケーターのオーバーレイの奥行きです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  ドロップインジケーターのオーバーレイの奥行きです。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:FOCUS_PANE"><apiName>FOCUS_PANE</apiName><shortdesc>
	  フォーカスペインのオーバーレイの奥行きです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  フォーカスペインのオーバーレイの奥行きです。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:MASK"><apiName>MASK</apiName><shortdesc>
      マスクのオーバーレイの奥行きです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      マスクのオーバーレイの奥行きです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:TOP"><apiName>TOP</apiName><shortdesc>
	  すべての Flex オーバーレイエレメントの上のデフォルト奥行き値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  すべての Flex オーバーレイエレメントの上のデフォルト奥行き値です。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
  ItemRenderer クラスは、Spark アイテムレンダラーの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ItemRenderer
    <strong>Properties</strong>
    autoDrawBackground="true"
    selected="false"
    showsCaret="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:DataRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  ItemRenderer クラスは、Spark アイテムレンダラーの基本クラスです。
 
  <p>アイテムレンダラーは、オプションのビューステートをサポートしています。通常は、MXML のアイテムレンダラーのビューステートを使用して、アイテムとのユーザーのやりとりに基づいて、データアイテムの外観を制御します。 ItemRenderer クラスでは、リストベースのクラスでこれらのアイテムレンダラーを使用できるように、すべてのビューステートがサポートされています。</p>
 
  <p>Flex では、アイテムレンダラーでサポートできる次のビューステートが定義されています。 </p>
  <ul>
    <li>normal - データアイテムでユーザーとのやりとりがありません。</li>
    <li>hovered - マウスがデータアイテムの上にあります。</li>
    <li>selected - データアイテムが選択されています。</li>
    <li>dragging - データアイテムがドラッグ中です。</li>
    <li>normalAndShowCaret - データアイテムが normal ステートで、アイテムリストにフォーカスがあります。 </li>
    <li>hoveredAndShowCaret - データアイテムが hovered ステートで、アイテムリストにフォーカスがあります。</li>
    <li>selectedAndShowCaret - データアイテムが selected ステートで、アイテムリストにフォーカスがあります。</li>
  </ul>
 
  <p>アイテムレンダラーのビューステートを変更するような方法でユーザーがコントロールを操作する場合、Flex はレンダラーにそのビューステートが定義されているかどうかをまず判断します。アイテムレンダラーがそのビューステートをサポートしている場合、Flex はアイテムレンダラーがそのビューステートを使用するように設定します。アイテムレンダラーがそのビューステートをサポートしていない場合、Flex は何もしません。</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ItemRenderer:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:getCurrentRendererState"><apiName>getCurrentRendererState</apiName><shortdesc>
      レンダラーに適用する状態の名前を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>レンダラーに適用する状態の名前を指定するストリングです。 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      レンダラーに適用する状態の名前を返します。例えば、非常に基本的な List アイテムレンダラーは、レンダラーの状態を指定するストリング "normal"、"hovered"、または "selected" を返します。 タッチ操作（または選択が無視されるマウス操作）を処理する場合は、「down」および「downAndSelected」も重要な状態です。
     
      <p>必要な動作がデフォルトの動作と異なる場合は、ItemRenderer のサブクラスで値を返すようにこのメソッドをオーバーライドする必要があります。</p>
     
      <p>Flex 4.0 では、主な 3 つの状態は、"normal"、"hovered"、および "selected" でした。 Flex 4.5 では、"down" および "downAndSelected" が追加されました。</p>
     
      <p>サポートされている全状態（優先順）を次に示します。 
        <ul>
          <li>dragging</li>
          <li>downAndSelected</li>
          <li>selectedAndShowsCaret</li>
          <li>hoveredAndShowsCaret</li>
          <li>normalAndShowsCaret</li>
          <li>down</li>
          <li>selected</li>
          <li>hovered</li>
          <li>normal</li>
        </ul>
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:invalidateRendererState"><apiName>invalidateRendererState</apiName><shortdesc>
      後で画面が更新されるときに新しい状態が設定されるように、レンダラーの状態を無効としてマークします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      後で画面が更新されるときに新しい状態が設定されるように、レンダラーの状態を無効としてマークします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      オプションのアイテムレンダラーのラベルコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      オプションのアイテムレンダラーのラベルコンポーネントです。このコンポーネントは、アイテムレンダラーのホストコンポーネントで <codeph>baselinePosition</codeph> プロパティの値を特定するために使用されます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:autoDrawBackground:get"><apiName>autoDrawBackground</apiName><shortdesc>
      ユーザーの操作中にアイテムレンダラーがデータアイテムの背景を描画するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーの操作中にアイテムレンダラーがデータアイテムの背景を描画するかどうかを指定します。操作には、アイテム上へのマウスポインターの移動、アイテムの選択およびアイテムのキャレットの移動が含まれます。
     
      <p><codeph>true</codeph> の場合、設定されているスタイル（<codeph>contentBackgroundColor</codeph>、<codeph>alternatingItemColor</codeph>、<codeph>rollOverColor</codeph>、<codeph>downColor</codeph>、<codeph>selectionColor</codeph>）およびアイテムレンダラーの現在の状態に従って、アイテムレンダラーの背景が自動的に描画されます。</p>
     
      <p><codeph>false</codeph> の場合、アイテムレンダラーは背景を描画しません。すべてのユーザー操作の背景カラーは、カスタムアイテムレンダラーで表示する必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      ユーザーがアイテムレンダラーを押し下げているときに true に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーがアイテムレンダラーを押し下げているときに <codeph>true</codeph> に設定されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      アイテムレンダラーがドラッグされている場合は、true になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      アイテムレンダラーがドラッグされている場合は、<codeph>true</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      ユーザーがアイテムレンダラー上にマウスポインターを置いたときに true に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーがアイテムレンダラー上にマウスポインターを置いたときに <codeph>true</codeph> に設定されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      アイテムレンダラーのホストコンポーネントのデータプロバイダー内のアイテムのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーのホストコンポーネントのデータプロバイダー内のアイテムのインデックスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      アイテムレンダラーで表示するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーで表示するストリングです。 
     
      <p>アイテムレンダラーのホストコンポーネントは <codeph>itemToLabel()</codeph> メソッドを使用して、アイテムレンダラーによって表示するストリングにデータアイテムを変換できます。 </p>
     
      <p>List や ButtonBar などのコントロールの場合、<codeph>labelField</codeph> プロパティまたは <codeph>labelFunction</codeph> プロパティを使用して、ストリングを含むデータアイテムのフィールドを指定できます。それ以外の場合、ホストコンポーネントは <codeph>toString()</codeph> メソッドを使用して、ストリングにデータアイテムを変換できます。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      アイテムレンダラーがそれ自体を選択済みとして表示できる場合は、true が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーがそれ自体を選択済みとして表示できる場合は、<codeph>true</codeph> が含まれます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、true を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、<codeph>true</codeph> を含みます。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:GroupBase"><apiName>GroupBase</apiName><shortdesc>
  GroupBase クラスは、ビジュアルエレメントを表示するコンポーネントの基本クラスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" type="Number">
<description>
  タッチ操作モードの場合は、ユーザー操作が発生してからコンポーネントが視覚的にダウン状態で表示されるまでの待機時間（ミリ秒単位）です。
 
  <p>この遅延は、ユーザーがスクロール操作を開始したとき、画面にタッチするのに合わせてコンポーネントが次々と表示されることを防ぐために設定します。 適度に遅延させることによって、ユーザーがコンポーネントを押すとフィードバックが返される一方で、フィードバックの表示が早すぎてスクロール操作中に表示されることがないようにします。</p>
  
  <p>mobile テーマが適用されている場合、このスタイルのデフォルト値は、Scroller の内側のコンポーネントでは 100 ms、外側のコンポーネントでは 0 ms です。</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  コンポーネントのシンボルのカラーです。CheckBox のチェックマークやスクロールボタンの矢印などがあります.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  マウスポインターがコンポーネント上に置かれたときのハイライトのカラーです。
 
  <p>このスタイルはマウスの <codeph>interactionMode</codeph> にのみ適用されます。</p>
 
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  コンポーネントにフォーカスがある場合の、フォーカス枠のカラーです。
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="uint">
<description>
  アイテムレンダラーが押されているときのアイテムレンダラーの背景色です。
 
  <p><codeph>downColor</codeph> が <codeph>undefined</codeph> に設定されている場合、<codeph>downColor</codeph> は使用されません。</p>
 
  <p>Spark テーマのデフォルト値は <codeph>undefined</codeph> です。Mobile テーマのデフォルト値は <codeph>0xE0E0E0</codeph> です。</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  コンテナが無効になっているときのアルファ値です。
   </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  このコンポーネントのコンテンツの背景色です。
 
  <p>List の場合は、<codeph>contentBackgroundColor</codeph> を変更すると、コンテンツの背景色が変わりますが、アイテムレンダラーが不透明な場合には、ユーザーの表示が変わらない場合があります。 アイテムレンダラーの色は <codeph>alternatingItemColors</codeph> の影響を受けます。 Spark テーマでは、デフォルトで、アイテムレンダラーが透明（<codeph>alternatingItemColors = undefined</codeph>）になりますが、Mobile テーマでは、デフォルトで、アイテムレンダラーが不透明（<codeph>alternatingItemColors = 0xFFFFFF</codeph>）になります。</p>
  
  <p>Spark テーマのデフォルト値は <codeph>0xFFFFFF</codeph> です。 Mobile テーマのデフォルト値は <codeph>0xF0F0F0</codeph> です。</p> 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  コンポーネントのメインカラーです。 
   
  </description>
<default>0xCCCCCC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description>
  リスト内のアイテムの背景に使用する色です。 値は 1 つ以上の色の配列です。リストアイテムの背景には、この配列内の色が交替で使用されます。 
 
  <p>Spark テーマのデフォルト値は <codeph>undefined</codeph> です。Mobile テーマのデフォルト値は <codeph>0xFFFFFF</codeph> です。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  コンポーネントのスキンで使用されるアクセントカラーです。デフォルトのボタンスキンでは、このカラーで背景が着色されます。スライダートラックのハイライトでは、このカラーが使用されます。 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:GroupBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:GroupBase
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    horizontalScrollPosition="null"
    luminosityClip="false"
    luminosityInvert="false"
    layout="BasicLayout"
    mask=""
    maskType="clip"
    mouseEnabledWhereTransparent="true"
    resizeMode="noScale"
    verticalScrollPosition="no default"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors="undefined"
    baselineShift="0"
    blockProgression="tb"
    breakOpportunity="auto"
    cffHinting="horizontalStem"
    chromeColor="0xCCCCCC"
    color="0x000000"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    clearFloats="none"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    disabledAlpha="0.5"
    dominantBaseline="auto"
    firstBaselineOffset="auto"
    focusColor="0x70B2EE"
    focusedTextSelectionColor="A8C6EE"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="E8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="cff"
    rollOverColor="0xCEDBEF"
    symbolColor="0x000000"
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="interWord"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor="0xE8E8E8"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  GroupBase クラスは、ビジュアルエレメントを表示するコンポーネントの基本クラスを定義します。グループコンポーネントは、それに含まれる可視アイテムのレイアウトを制御しません。その代わりに、レイアウトは別個のレイアウトコンポーネントによって処理されます。
   </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:GroupBase:GroupBase"><apiName>GroupBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:GroupBase:containsElement"><apiName>containsElement</apiName><shortdesc>
      指定された IVisualElement が、コンテナインスタンスの子またはコンテナインスタンス自体であるかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エレメントがコンテナの下位要素である場合は true です
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>テストする子オブジェクトです
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された IVisualElement が、コンテナインスタンスの子またはコンテナインスタンス自体であるかを判別します。エレメントが子、孫、ひ孫であるなど、このコンテナの検索に深さがある場合は、true が返されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc conref="mx.core.UIComponent:createChildren()">
      レイアウトオブジェクトがまだ設定されていない場合は、createChildren() が BasicLayout というデフォルトレイアウトオブジェクトをこのコンテナに割り当てます。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent:createChildren()">
      <p>レイアウトオブジェクトがまだ設定されていない場合は、createChildren() が BasicLayout というデフォルトレイアウトオブジェクトをこのコンテナに割り当てます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>水平方向のスクロール位置に対する変更です。
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>次の値を取ります。 
      <ul>
      <li> 
      <codeph>END</codeph> コンテンツ領域に対して scrollRect を右揃えするスクロールデルタを返します。
      </li>
      
      <li> 
      <codeph>HOME</codeph> コンテンツ領域に対して scrollRect を左揃えするスクロールデルタを返します。
      </li>
     
      <li> 
      <codeph>LEFT</codeph> scrollRect の左端にまたがっているか、その左にある最初のエレメントに対して scrollRect を左揃えするスクロールデルタを返します。
      </li>
     
      <li>
      <codeph>PAGE_LEFT</codeph> scrollRect の左端にまたがっているか、その左にある最初のエレメントに対して scrollRect を右揃えするスクロールデルタを返します。
      </li>
     
      <li> 
      <codeph>PAGE_RIGHT</codeph> scrollRect の右端にまたがっているか、その右にある最初のエレメントに対して scrollRect を左揃えするスクロールデルタを返します。
      </li>
     
      <li> 
      <codeph>RIGHT</codeph> scrollRect の右端にまたがっているか、その右にある最初のエレメントに対して scrollRect を右揃えするスクロールデルタを返します。
      </li>
           </ul>
     
      <p>実装では、<codeph>getElementBoundsLeftOfScrollRect()</codeph> と <codeph>getElementBoundsRightOfScrollRect()</codeph> を呼び出して、エレメントの境界を判別します。通常、レイアウトクラスは、<codeph>getHorizontalScrollPositionDelta()</codeph> メソッドではなく、これらのメソッドをオーバーライドします。</p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>垂直方向のスクロール位置に対する変更です。
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>次の値を取ります。 
      <ul>
      <li> 
      <codeph>DOWN</codeph> scrollRect の下端にまたがっているか、その下にある最初のエレメントに対して scrollRect を下揃えするスクロールデルタを返します。
      </li>
     
      <li> 
      <codeph>END</codeph> コンテンツ領域に対して scrollRect を下揃えするスクロールデルタを返します。
      </li>
      
      <li> 
      <codeph>HOME</codeph> コンテンツ領域に対して scrollRect を上揃えするスクロールデルタを返します。
      </li>
     
      <li> 
      <codeph>PAGE_DOWN</codeph> scrollRect の下端にまたがっているか、その下にある最初のエレメントに対して scrollRect を上揃えするスクロールデルタを返します。
      </li>
     
      <codeph>PAGE_UP</codeph>
      <li>
      scrollRect の上端にまたがっているか、その上にある最初のエレメントに対して scrollRect を下揃えするスクロールデルタを返します。
      </li>
           <li> 
      <codeph>UP</codeph> scrollRect の上端にまたがっているか、その上にある最初のエレメントに対して scrollRect を上揃えするスクロールデルタを返します。
      </li>
           </ul>
     
      <p>実装では、<codeph>getElementBoundsAboveScrollRect()</codeph> と <codeph>getElementBoundsBelowScrollRect()</codeph> を呼び出して、エレメントの境界を判別します。通常、レイアウトクラスは、<codeph>getVerticalScrollPositionDelta()</codeph> メソッドではなく、これらのメソッドをオーバーライドします。 </p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVirtualElementAt"><apiName>getVirtualElementAt</apiName><shortdesc>
      useVirtualLayout フラグを使用するレイアウトは、updateDisplayList() 時にこのメソッドを使用して「ビュー内」にあるレイアウトエレメントを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたインデックス位置にある、検証済みのエレメントです。
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>取得するエレメントのインデックスです。
      </apiDesc></apiParam><apiParam><apiItemName>eltWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>指定する場合は、新しく作成されるエレメントまたはリサイクルされるエレメントの初期の幅です。
      </apiDesc></apiParam><apiParam><apiItemName>eltHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>指定する場合は、新しく作成されるエレメントまたはリサイクルされるエレメントの初期の高さです。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>useVirtualLayout</codeph> フラグを使用するレイアウトは、updateDisplayList() 時にのメソッドを使用して「ビュー内」、つまり Group の scrollRect と重なるレイアウトエレメントを取得します。
     
      <p>返されるエレメントがまだ表示される子ではなく、つまり作成またはリサイクルされたもので、eltWidth または eltHeight が指定されている場合は、検証される前に、setLayoutBoundsSize() でエレメントの初期サイズが設定されます。これは、レイアウトが Group の幅または高さに位置揃えされているときに再フローするテキストなどのコンポーネントにとって重要なことです。</p>
      
      <p>返されるレイアウトエレメントは、検証済みになります。</p>
     
      <p>このメソッドは、レイアウトエレメントを非効率的に作成または「リサイクル」し、必要に応じて検証します。</p>
     
      <p>このメソッドは、直接呼び出されることが想定されておらず、仮想化をサポートするレイアウトによって呼び出されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:setContentSize"><apiName>setContentSize</apiName><shortdesc>
      contentWidth プロパティおよび contentHeight プロパティを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc><codeph>contentWidth</codeph> の新しい値です。
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc><codeph>contentHeight</codeph> の新しい値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>contentWidth</codeph> プロパティおよび <codeph>contentHeight</codeph> プロパティを設定します。このメソッドは、<codeph>updateDisplayList()</codeph> メソッドからこのメソッドを呼び出す必要があるレイアウトクラス開発者を対象としています。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:GroupBase:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      true の場合、子の位置またはサイズが変更されたときに測定とレイアウトが実行されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、子の位置またはサイズが変更されたときに測定とレイアウトが実行されます。 <codeph>false</codeph> の場合、測定とレイアウトは、子がコンテナに追加されたとき、またはコンテナから削除されたときに、一度だけ実行されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:GroupBase:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentHeight:get"><apiName>contentHeight</apiName><shortdesc conref="spark.core.IViewport#contentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentWidth:get"><apiName>contentWidth</apiName><shortdesc conref="spark.core.IViewport#contentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:layout:get"><apiName>layout</apiName><shortdesc>
      このコンテナのレイアウトオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>spark.layouts.BasicLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナのレイアウトオブジェクトです。このオブジェクトは、コンテナでのビジュアルエレメントの測定とレイアウトを管理します。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      マスクされたコンテンツを輝度マスクがクリッピングするかどうかを制御するプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      マスクされたコンテンツを輝度マスクがクリッピングするかどうかを制御するプロパティです。このプロパティが有効になるのは、グラフィックエレメントに MaskType.LUMINOSITY というタイプのマスクが適用されている場合のみです。  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#GroupBase/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      輝度マスクによってマスクされているグラフィックエレメントの RGB カラー値の計算を制御するプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      輝度マスクによってマスクされているグラフィックエレメントの RGB カラー値の計算を制御するプロパティです。true の場合、ソースコンテンツのピクセルの RGB カラー値が、マスク内の対応する領域によって反転されて乗算されます。false の場合、ソースコンテンツのピクセルの RGB カラー値が直接使用されます。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:maskType:get"><apiName>maskType</apiName><shortdesc>
      マスクのタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP 
           </apiDefaultValue></apiValueDef><apiDesc>
      <p>マスクのタイプです。可能な値は、<codeph>MaskType.CLIP</codeph>、<codeph>MaskType.ALPHA</codeph> または <codeph>MaskType.LUMINOSITY</codeph> です。</p> 
           <p><b>クリップマスク</b></p>
     
      <p>クリップモードでマスクを適用すると、クリッピングマスクが 1 ビットに減らされます。つまり、マスクはソースコンテンツのピクセルの不透明度に影響しません。マスクの対応するピクセルのアルファ値がゼロ以外の場合この値は変更されず、マスクのピクセルのアルファ値がゼロの場合は完全に透明になります。</p>
     
      <p><b>アルファマスク</b></p>
     
      <p>アルファモードでは、ソースコンテンツの各ピクセルの不透明度に、マスクの対応する領域の不透明度が乗算されます。つまり、不透明度が 1 に設定されたソースコンテンツのピクセルが、不透明度 0.5 の領域でマスクされると、最終的な不透明度は 0.5 になります。不透明度が 0.8 のソースピクセルが不透明度 0.5 の領域でマスクされると、最終的な不透明度は 0.4 になります。</p>
     
      <p><b>輝度マスキング</b></p>
     
      <p>"soft mask" と呼ばれることもある輝度マスクは、ソースコンテンツのピクセルの不透明度と RGB カラー値の両方がマスクの対応する領域の不透明度と RGB カラー値で乗算される点以外は、アルファマスクと非常によく似た働きをします。</p>
     
      <p>輝度マスキングは Flash ネイティブではありませんが、Adobe Illustrator や Adobe Photoshop などの Adobe Creative Suite ツールで共通の機能です。Flash でレンダリングされるコンテンツの輝度マスクの視覚効果を実現するために、輝度マスクを指定するグラフィックエレメントでは、Adobe Creative Suite ツールでレンダリングされる輝度マスクの外観表示を模倣するシェーダーフィルターを実際にインスタンス化しています。</p>
     
      <p>輝度マスクによってマスクされているオブジェクトは、RGB カラー値とマスクのクリッピングを制御するプロパティを設定できます。luminosityInvert 属性および luminosityClip 属性を参照してください。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mask:get"><apiName>mask</apiName><shortdesc>
      マスクを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      マスクを設定します。マスクは表示リストに追加されます。マスクは、表示リストにもエレメント配列にも既に存在していない必要があります。  
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/mask"><linktext>flash.display.DisplayObject.mask</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mouseEnabledWhereTransparent:get"><apiName>mouseEnabledWhereTransparent</apiName><shortdesc>
      true の場合、Group の境界全体が、クリックやロールオーバーなどのマウスイベントに応答します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、Group の境界全体が、クリックやロールオーバーなどのマウスイベントに応答します。このプロパティは、マウスイベント、タッチイベントまたは Flash Player のジェスチャーイベントがこのインスタンスに追加された場合のみ有効になります。 さらに、addEventListener()/removeEventListener() の呼び出しが不要でないことを想定しています。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:overlay:get"><apiName>overlay</apiName><shortdesc>
      このグループのオーバーレイ平面です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:DisplayLayer</apiValueClassifier></apiValueDef><apiDesc>
      このグループのオーバーレイ平面です。オーバーレイ平面のすべてのオブジェクトが、Group のエレメントの上にレンダリングされます。
           <p><b>メモ：</b>このオブジェクトはグループにより必要に応じて破棄および作成されるので、維持できません。</p>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:resizeMode:get"><apiName>resizeMode</apiName><shortdesc>
      このコンテナの ResizeMode です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      このコンテナの ResizeMode です。サイズ変更モードが <codeph>ResizeMode.NO_SCALE</codeph> に設定されている場合は、子を新しい幅と高さでレイアウトすることによってサイズ変更されます。サイズ変更モードが <codeph>ResizeMode.SCALE</codeph> に設定されている場合は、すべての子でそれらの伸縮されていない幅と高さが維持され、子は伸縮されてサイズ変更されます。
     
     <p>デフォルト値は <codeph>ResizeMode.NO_SCALE</codeph> です。これは「noScale」に対応します。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
  SkinnableComponent クラスは、スキナブルコンポーネントの基本クラスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><Exclude kind="style" name="themeColor"/><styles><style name="skinClass" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  このコンポーネントで使用するスキンクラスの名前です。スキンは UIComponent を拡張するクラスでなければなりません。 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style name="errorSkin" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  検証エラーが発生したときにこのコンポーネントで使用するスキンクラスの名前です。 
  
  </description>
<default>spark.skins.spark.ErrorSkin
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableComponent クラスは、スキナブルコンポーネントの基本クラスを定義します。SkinnableComponent クラスによって使用されるスキンは、普通、Skin クラスの子クラスです。
 
  <p>コンポーネントクラスの <codeph>skinClass</codeph> スタイルプロパティを設定することによって、スキンクラスをコンポーネントクラスに関連付けます。CSS で <codeph>skinClass</codeph> プロパティを設定できます。次に例を示します。</p>
 
  <pre>MyComponent
  {
    skinClass: ClassReference("my.skins.MyComponentSkin")
  }</pre>
 
  <p>次の例では、MXML で <codeph>skinClass</codeph> プロパティを設定します。</p>
 
  <pre>
  &lt;MyComponent skinClass="my.skins.MyComponentSkin"/></pre>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Skin"><linktext>spark.components.supportClasses.Skin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SkinnableComponent:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:attachSkin"><apiName>attachSkin</apiName><shortdesc>
      コンポーネントのスキンを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントのスキンを作成します。このメソッドは直接呼び出さないでください。 Flex によって、<codeph>createChildren()</codeph> または <codeph>UIComponent.commitProperties()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。通常、SkinnableComponent のサブクラスはこのメソッドをオーバーライドしません。
     
      <p>このメソッドは、コンポーネントのスキンをインスタンス化し、スキンをコンポーネントの子として追加し、スキンのすべてのパーツの関連付けを解決します。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:clearSkinParts"><apiName>clearSkinParts</apiName><shortdesc>
      スキンパーツへの参照を消去します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      スキンパーツへの参照を消去します。このメソッドは直接呼び出さないでください。 Flex によって、<codeph>detachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。
     
      <p>通常、SkinnableComponent のサブクラスはこのメソッドをオーバーライドしません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:createDynamicPartInstance"><apiName>createDynamicPartInstance</apiName><shortdesc>
      動的スキンパーツのインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>パーツのインスタンスです。パーツを作成できない場合は null です。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      動的スキンパーツのインスタンスを作成します。動的スキンパーツは、直接、ファクトリで <codeph>newInstance()</codeph> メソッドを呼び出すことによってではなく、常にこのメソッドによってインスタンス化される必要があります。このメソッドはパーツを作成しますが、表示リストには追加しません。コンポーネントは <codeph>Group.addElement()</codeph> メソッドを呼び出すか、適切なメソッドを呼び出して、スキンパーツを表示リストに追加する必要があります。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:detachSkin"><apiName>detachSkin</apiName><shortdesc>
      このコンポーネントのスキンを破棄して削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントのスキンを破棄して削除します。このメソッドは直接呼び出さないでください。 実行時にスキンが変更されるときに、Flex によって自動的に呼び出されます。このメソッドはスキンを削除し、すべてのパーツの関連付けを消去します。
     
      <p>通常、SkinnableComponent のサブクラスはこのメソッドをオーバーライドしません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:findSkinParts"><apiName>findSkinParts</apiName><shortdesc>
      スキンパーツをスキンクラス内で見つけて、コンポーネントのプロパティに割り当てます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      スキンパーツをスキンクラス内で見つけて、コンポーネントのプロパティに割り当てます。このメソッドは直接呼び出さないでください。 Flex によって、<codeph>attachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。通常、SkinnableComponent のサブクラスはこのメソッドをオーバーライドしません。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      スキンに適用される状態の名前を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>スキンに適用する状態の名前を指定する文字列です。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      スキンに適用される状態の名前を返します。例えば、Button コンポーネントは、状態を指定するために「up」、「down」、「over」、または「disabled」というストリングを返すことができます。
     
      <p>SkinnableComponent のサブクラスは、このメソッドをオーバーライドして値を返す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getDynamicPartAt"><apiName>getDynamicPartAt</apiName><shortdesc>
      動的パーツの特定のインスタンスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>パーツのインスタンスです。パーツが存在しない場合は null です。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>動的パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>動的パーツのインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      動的パーツの特定のインスタンスを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:invalidateSkinState"><apiName>invalidateSkinState</apiName><shortdesc>
      後で画面が更新されるときにスキンの新しい状態が設定されるように、コンポーネントをマークします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      後で画面が更新されるときにスキンの新しい状態が設定されるように、コンポーネントをマークします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:numDynamicParts"><apiName>numDynamicParts</apiName><shortdesc>
      動的パーツのインスタンスの数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>動的パーツのインスタンスの数です。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>動的パーツの名前です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      動的パーツのインスタンスの数を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      スキンパーツが追加されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツのインスタンスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      スキンパーツが追加されるときに呼び出されます。このメソッドは直接呼び出さないでください。 静的パーツの場合は、Flex によって、<codeph>attachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。動的パーツの場合は、Flex によって、<codeph>createDynamicPartInstance()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。 
     
      <p>パーツにビヘイビアーを追加するには、この関数をオーバーライドします。基本クラスから継承したスキンパーツのビヘイビアーをオーバーライドする場合は、<codeph>super.partAdded()</codeph> メソッドを呼び出さないようにします。それ以外の場合は、常に <codeph>super.partAdded()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      スキンパーツのインスタンスが削除されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツのインスタンスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      スキンパーツのインスタンスが削除されるときに呼び出されます。このメソッドは直接呼び出さないでください。 静的パーツの場合は、Flex によって、<codeph>detachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。動的パーツの場合は、Flex によって、<codeph>removeDynamicPartInstance()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。 
     
      <p>パーツからビヘイビアーを削除するには、この関数をオーバーライドします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:removeDynamicPartInstance"><apiName>removeDynamicPartInstance</apiName><shortdesc>
      動的パーツのインスタンスを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツのインスタンスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      動的パーツのインスタンスを削除します。動的パーツが削除される前に、このメソッドを呼び出す必要があります。このメソッドは、表示リストからパーツを削除しません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      CSS 擬似セレクターの照合時に使用されるステートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      CSS 擬似セレクターの照合時に使用されるステートです。このオーバーライドは、コンポーネントの状態ではなく現在のスキンの状態を返します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:skin:get"><apiName>skin</apiName><shortdesc>
      このコンポーネントインスタンス用のスキンクラスのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="skinChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:UIComponent"/></apiValueDef><apiDesc>
      このコンポーネントインスタンス用のスキンクラスのインスタンスです。これは、Flex が <codeph>attachSkin()</codeph> メソッドを呼び出すときに自動的に設定される読み取り専用プロパティです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:suggestedFocusSkinExclusions:get"><apiName>suggestedFocusSkinExclusions</apiName><shortdesc>
      フォーカスを表示するためにキャプチャされて使用されるビットマップの中から除外するスキンパーツを列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      フォーカスを表示するためにキャプチャされて使用されるビットマップの中から除外するスキンパーツを列挙します。このリストはスキンの <codeph>focusSkinExclusions</codeph> プロパティが <codeph>null</codeph> である場合にのみ使用されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TextBase"><apiName>TextBase</apiName><shortdesc>
  デフォルト形式の CSS スタイルを使用してテキストを表示する Label や RichText などの Spark text コントロール用の基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="uint">
<description>
  このコンポーネントの境界を表す矩形の背景色です。このスタイルが <codeph>undefined</codeph> の場合、背景は描画されません。それ以外の場合は、この RGB カラーが、<codeph>backgroundAlpha</codeph> スタイルによって決まるアルファレベルで描画されます。
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="Number">
<description>
  <codeph>backgroundColor</codeph> スタイルによって定義されるカラーのアルファレベルです。有効な値の範囲は 0.0 ～ 1.0 です。
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IDisplayText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  デフォルト形式の CSS スタイルを使用してテキストを表示する Label や RichText などの Spark text コントロール用の基本クラスです。
 
  <p>このクラスでは、<codeph>text</codeph> プロパティを追加するだけでなく、切り詰めをサポートするために <codeph>maxDisplayedLines</codeph> および <codeph>isTruncated</codeph> プロパティも追加します。</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:TextBase:TextBase"><apiName>TextBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:TextBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc>
	  テキストが切り詰められたかどうかを通知する読み取り専用のプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  テキストが切り詰められたかどうかを通知する読み取り専用のプロパティです。
	 
	  <p>テキストを切り詰めるとは、余分なテキストを "..." などの切り詰めインジケーターに置き換えることです。切り詰めインジケーターはロケールに依存し、"core" リソースバンドルの "truncationIndicator" リソースで指定されます。</p>
	 
      <p><codeph>maxDisplayedLines</codeph> が 0 の場合、切り詰めは行われません。代わりに、テキストがコンポーネントの境界内に収まらない場合は、単にクリッピングされます。</p>
     
      <p><codeph>maxDisplayedLines</codeph> が正の整数の場合、行数をこの整数まで減らすために、必要に応じて、テキストが切り詰められます。</p>
     
      <p><codeph>maxDisplayedLines</codeph> が -1 の場合は、テキストは、コンポーネントの高さに完全に収まり、可能な限り多くの行が表示されるように切り詰められます。</p>
     
      <p>切り詰めは、<codeph>lineBreak</codeph> スタイルが <codeph>"toFit"</codeph> の場合にのみ実行されます。<codeph>lineBreak</codeph> が <codeph>"explicit"</codeph> の場合は、このプロパティの値は無視されます。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc>
      テキストが切り詰められるかどうか、および切り詰められる位置を指定する整数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      テキストが切り詰められるかどうか、および切り詰められる位置を指定する整数です。
	 
	  <p>テキストを切り詰めるとは、余分なテキストを "..." などの切り詰めインジケーターに置き換えることです。切り詰めインジケーターはロケールに依存し、"core" リソースバンドルの "truncationIndicator" リソースで指定されます。</p>
     
      <p>値が 0 の場合、切り詰めは行われません。代わりに、テキストがコンポーネントの境界内に収まらない場合は、単にクリッピングされます。</p>
     
      <p>値が正の整数の場合、行数をこの整数まで減らすために、必要に応じて、テキストが切り詰められます。</p>
     
      <p>値が -1 の場合は、テキストは、コンポーネントの高さに完全に収まり、可能な限り多くの行が表示されるように切り詰められます。</p>
     
      <p>切り詰めは、<codeph>lineBreak</codeph> スタイルが <codeph>"toFit"</codeph> の場合にのみ実行されます。<codeph>lineBreak</codeph> が <codeph>"explicit"</codeph> の場合は、このプロパティの値は無視されます。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:showTruncationTip:get"><apiName>showTruncationTip</apiName><shortdesc>
	  テキストが切り詰められた場合にコンポーネントでツールヒントを表示するかどうかを制御するプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  テキストが切り詰められた場合にコンポーネントでツールヒントを表示するかどうかを制御するプロパティです。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:text:get"><apiName>text</apiName><shortdesc>
      このテキストコンポーネントによって表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このテキストコンポーネントによって表示されるテキストです。
	 
      <p>このテキストの書式設定は、CSS スタイルで制御されます。サポートされるスタイルはサブクラスに依存します。</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
  ScrollBarBase クラスを使用すると、データが多すぎて表示領域に収まらない場合に、表示される部分のデータを配置できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style inherit="no" name="smoothScrolling" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
 このスタイルは、ページ操作とステップ操作のときにスクロールバーをスムーズに動かすかどうかを決定します。false の場合、ページ操作とステップ操作のときに、ページまたはステップで指定された位置に直接ジャンプします。true の場合、スクロールバーおよびスクロール対象のコンテンツがその位置まで動きます。
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  ユーザーがマウスでトラックを押し続けた場合に、ページイベントを繰り返すミリ秒単位の間隔です。
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  最初のページイベントの後に後続のページイベントが発生するまでの時間（ミリ秒単位）です。
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  true（デフォルト）の場合は、スクロールバーのサムをマウスでドラッグすると、スクロールバーの値が即座に更新されます。 false の場合は、マウスボタンが離されたときにのみスクロールバーの値が更新されます。
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="autoThumbVisibility" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  true（デフォルト）の場合、サムのサイズが更新されるたびに、サムの可視性がリセットされます。このスタイルが false でない場合、<codeph>HScrollBar</codeph> および <codeph>VScrollBar</codeph> での <codeph>updateSkinDisplayList()</codeph> のオーバーライドは、サムがトラックより小さい場合、サムを表示します。サムの可視性を直接制御するには、このスタイルを false に設定します。  
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fixedThumbSize" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  true の場合、スクロールバーの軸に沿ったサムのサイズは、その推奨サイズになります。
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="inactive" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10">
<description>
  非アクティブ状態です。これは、スクロールする内容がない状態です。つまり、<codeph>maximum</codeph> &lt;= <codeph>minimum</codeph> です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="decrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      押されたときにスクロールバーをステップ単位で上に動かすボタンを定義する、オプションのスキンパーツです。これは、<codeph>value</codeph> プロパティでステップを減らすことと同じです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar up.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      押されたときにスクロールバーをステップ単位で下に動かすボタンを定義する、オプションのスキンパーツです。これは、<codeph>value</codeph> プロパティでステップを増やすことと同じです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar down.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ScrollBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ScrollBarBase
    <strong>Properties</strong>
    pageSize="20"
    snapInterval="1"
    viewport="null"
     <strong>Styles</strong>
    autoThumbVisibility="true"
    fixedThumbSize="false"
    repeatDelay="500"
    repeatInterval="35"
    smoothScrolling="true"
    symbolColor="0x000000"
  /&gt;
  </pre> 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ScrollBarBase クラスを使用すると、データが多すぎて表示領域に収まらない場合に、表示される部分のデータを配置できます。ScrollBarBase クラスは、スクロールバーのペアとビューポートを表示します。ビューポートは、Group など、IViewport を実装する UIComponent です。
  
  <p>このコントロールは TrackBase クラスを拡張し、HScrollBar コントロールおよび VScrollBar コントロールの基本クラスです。</p> 
 
  <p>スクロールバーは、トラック、可変サイズのスクロールサム、およびオプションの 2 つの矢印ボタンで構成されます。ScrollBarBase クラスでは、4 つのパラメーターを使って表示状態が計算されます。</p>
   <ul>
    <li><codeph>minimum</codeph>：範囲の最小値です。</li>
    <li><codeph>maximum</codeph>：範囲の最大値です。</li>
    <li><codeph>value</codeph>：現在の位置です。最小値と最大値の範囲内であることが必要です。</li>
    <li>ビューポートサイズ：範囲全体のうち一度に表示できるアイテムの数を表します。アイテムの数は、範囲に該当する数以下であることが必要です。ここで、範囲とは、範囲の最小値と最大値の間に存在する値の集合です。</li>
  </ul>
    </apiDesc></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ScrollBarBase:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animatePaging"><apiName>animatePaging</apiName><shortdesc>
     newValue に移動する操作をアニメーション化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>ページングする最終的な値です。
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiType value="Number"/><apiDesc>要求された水平または垂直の移動の大きさです。この値は、<codeph>repeatInterval</codeph> スタイルで新しい値に移動するのに要する合計時間を計算するために使用されます。<codeph>pageSize</codeph> は、通常、外側の Scroller によって直接、コンテンツの論理的な境界でコンテンツを表示するために必要な値に設定されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>newValue</codeph> に移動する操作をアニメーション化します。<codeph>pageSize</codeph> パラメーターは、ページング操作のアニメーション化にかかる時間が、アニメーション化されない場合とほぼ同じになるように、その値に達するのに要する時間を計算するために使用されます。どちらの操作も、ほぼ同じ時間に、同じ位置で終了する必要があります。
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animateStepping"><apiName>animateStepping</apiName><shortdesc>
     newValue にステップ移動する操作をアニメーション化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>ステップ移動する最終的な値です。
     </apiDesc></apiParam><apiParam><apiItemName>stepSize</apiItemName><apiType value="Number"/><apiDesc>要求されたステップ移動の大きさです。この値は、<codeph>repeatInterval</codeph> スタイルで新しい値にステップ移動するのに要する合計時間を計算するために使用されます。<codeph>stepSize</codeph> は、通常、外側の Scroller によって直接、コンテンツの論理的な境界でコンテンツを表示するために必要な値に設定されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>newValue</codeph> にステップ移動する操作をアニメーション化します。<codeph>stepSize</codeph> パラメーターは、ステップ移動操作のアニメーション化にかかる時間が、アニメーション化されない場合とほぼ同じになるように、その値に達するのに要する時間を計算するために使用されます。どちらの操作も、ほぼ同じ時間に、同じ位置で終了する必要があります。
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonDownHandler"><apiName>button_buttonDownHandler</apiName><shortdesc>
      スクロールバーのインクリメントまたはデクリメントボタンをクリックする操作を処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクト。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      スクロールバーのインクリメントまたはデクリメントボタンをクリックする操作を処理します。これにより、ステップ操作を実行します。押し続けると、この操作が繰り返されます。繰り返し開始前の遅延と、繰り返されるイベント間の遅延は、基になる Button オブジェクトの <codeph>repeatDelay</codeph> スタイルと <codeph>repeatInterval</codeph> スタイルによって決定されます。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonUpHandler"><apiName>button_buttonUpHandler</apiName><shortdesc>
      スクロールバーのインクリメントまたはデクリメントボタンを離す操作を処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクト。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      スクロールバーのインクリメントまたはデクリメントボタンを離す操作を処理します。これにより、ボタンに対する元の buttonDown イベントによって開始されたステップ操作を終了します。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      value から pageSize を加算または減算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このページングアクションにより <codeph>value</codeph> を増やす (<codeph>true</codeph>) か減らす (<codeph>false</codeph>) かを指定します。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>value</codeph> から <codeph>pageSize</codeph> を加算または減算します。加算の場合、新しい <codeph>value</codeph> は、現在の <codeph>value</codeph> より大きい、最も近い <codeph>pageSize</codeph> の倍数です。減算の場合、新しい <codeph>value</codeph> は、現在の value より小さい、最も近い <codeph>pageSize</codeph> の倍数です。<codeph>value</codeph> の最小値は <codeph>pageSize</codeph> です。 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ScrollBarBase:pageSize:get"><apiName>pageSize</apiName><shortdesc>
      changeValueByPage() メソッドを呼び出したときの、value プロパティの値の変化です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>20
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>changeValueByPage()</codeph> メソッドを呼び出したときの、<codeph>value</codeph> プロパティの値の変化です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      マウスボタンが離されたときのスクロールバーの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      マウスボタンが離されたときのスクロールバーの値です。 
     
      <p><codeph>liveDragging</codeph> スタイルが false の場合、スクロールバーの値はマウスボタンが離されたときにのみ設定されます。スライダーのサムがドラッグされている間、値は更新されません。</p>
     
      <p>このプロパティは、<codeph>liveDragging</codeph> が false であっても、スクロールバーのサムが移動しているときは更新されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:viewport:get"><apiName>viewport</apiName><shortdesc>
      このスクロールバーによって制御されるビューポートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      このスクロールバーによって制御されるビューポートです。ビューポートが指定された場合、その実際のサイズ、コンテンツサイズ、およびスクロール位置を変更すると、対応する ScrollBarBase メソッドが実行されます。
      <ul>
      <li><codeph>viewportResizeHandler()</codeph></li>
      <li><codeph>contentWidthChangeHandler()</codeph></li>
      <li><codeph>contentHeightChangeHandler()</codeph></li>
      <li><codeph>viewportVerticalScrollPositionChangeHandler()</codeph></li>
      <li><codeph>viewportHorizontalScrollPositionChangeHandler()</codeph></li>
      </ul>
     
      <p>VScrollBar クラスと HScrollBar クラスは、それぞれの <codeph>pageSize</codeph>、<codeph>maximum</codeph>、および <codeph>value</codeph> プロパティをビューポートに合わせて維持するために、これらのメソッドをオーバーライドします。同様に、これらのクラスは、ビューポートの <codeph>scrollPositionDelta</codeph> メソッドを使用してページとステップのオフセットを計算するために、それぞれの <codeph>changeValueByPage()</codeph> メソッドと <codeph>changeValueByStep()</codeph> メソッドをオーバーライドします。</p>
        
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:snapInterval:set"><apiName>snapInterval</apiName><shortdesc>
      
      snapInterval プロパティは、value プロパティの有効な値を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      snapInterval プロパティは、<codeph>value</codeph> プロパティの有効な値を制御します。 ゼロ以外の場合、有効値は、このプロパティの整数倍と <codeph>minimum</codeph> の合計で、<codeph>maximum</codeph> 以下になります。
     
      <p>例えば、<codeph>minimum</codeph> が 10、<codeph>maximum</codeph> が 20、このプロパティが 3 の場合、この Range の有効な値は 10、13、16、19 および 20 です。</p>
      
      <p>このプロパティの値がゼロの場合、有効な値の制約は minimum と maximum を含むこれらの値の範囲内だけになります。</p>
     
      <p>このプロパティを設定すると、<codeph>stepSize</codeph> プロパティの有効値も制約されます。このプロパティが明示的に設定されず、<codeph>stepSize</codeph> が設定されている場合、デフォルトでは <codeph>snapInterval</codeph> に <codeph>stepSize</codeph> が設定されます。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
  ButtonBase クラスは、すべての Spark ボタンコンポーネントの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  ボタンの無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="down" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  ボタンのダウン状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="over" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  ボタンのオーバー状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="up" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  ボタンのアップ状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" type="Number">
<description>
  タッチ操作モードの場合は、ユーザー操作が発生してからコンポーネントが視覚的にダウン状態で表示されるまでの待機時間（ミリ秒単位）です。
 
  <p>この遅延は、ユーザーがスクロール操作を開始したとき、画面にタッチするのに合わせてコンポーネントが次々と表示されることを防ぐために設定します。 適度に遅延させることによって、ユーザーがコンポーネントを押すとフィードバックが返される一方で、フィードバックの表示が早すぎてスクロール操作中に表示されることがないようにします。</p>
  
  <p>mobile テーマが適用されている場合、このスタイルのデフォルト値は、Scroller の内側のコンポーネントでは 100 ms、外側のコンポーネントでは 0 ms です。</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  ユーザーがマウスでボタンを押し続けた場合に、<codeph>buttonDown</codeph> イベントを繰り返すミリ秒単位の間隔です。
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  最初の <codeph>buttonDown</codeph> イベントから、<codeph>buttonDown</codeph> イベントの繰り返しを各 <codeph>repeatInterval</codeph> で 開始するまでの待機時間（ミリ秒単位）です。
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="String">
<description>
  ラベルに対するアイコンの方向です。 有効な MXML 値は、<codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> および <codeph>top</codeph> です。
 
  <p>ActionScript では、このプロパティを設定するために、<codeph>IconPlacement.RIGHT</codeph>、<codeph>IconPlacement.LEFT</codeph>、<codeph>IconPlacement.BOTTOM</codeph> および <codeph>IconPlacement.TOP</codeph> の各定数を使用できます。</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  デフォルトアイコンとして使用するクラスまたはインスタンスです。アイコンは、次のような様々なグラフィックソースからレンダリングできます。  
  <ul>
   <li>Bitmap インスタンスまたは BitmapData インスタンス。</li>
   <li>DisplayObject のサブクラスを表すクラス。 BitmapFill によりクラスがインスタンス化され、そのビットマップレンダリングが作成されます。</li>
   <li>DisplayObject のインスタンス。 BitmapFill は、塗りのためにそのインスタンスを Bitmap にコピーします。</li>
   <li>外部イメージファイルの名前です。 </li>
  </ul>
 
  </description>
<default>null 
 
  </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.primitives.BitmapImage.source.xml"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのフォーカス枠のアルファです。
 
  </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの角の半径です。
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="iconDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" required="false" var_type="spark.primitives:BitmapImage">
<description>
      ボタンにオプションのアイコンを定義するスキンパーツです。 
      
      </description>

<playerversion>AIR 2.0
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines an optional icon for the button.</shortdesc></SkinPart><SkinPart name="labelDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      ボタンのラベルを定義するスキンパーツです。 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the label of the button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBase
    <strong>Properties</strong>
    autoRepeat="false"
    content="null"
    label=""
    stickyHighlighting="false"
  
    <strong>Events</strong>
    buttonDown="<i>No default</i>"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    cornerRadius="4"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    repeatDelay="500"
    repeatInterval="35"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
    wordSpacing="100%"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBase クラスは、すべての Spark ボタンコンポーネントの基本クラスです。Button および ToggleButtonBase クラスは ButtonBase のサブクラスです。ToggleButton、CheckBox および RadioButton クラスは ToggleButtonBase のサブクラスです。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link><link href="spark.components.supportClasses.xml#ToggleButtonBase"><linktext>spark.components.supportClasses.ToggleButtonBase</linktext></link><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ButtonBase_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  ユーザーが ButtonBase コントロールを押したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが ButtonBase コントロールを押したときに送出されます。<codeph>autoRepeat</codeph> プロパティが <codeph>true</codeph> の場合、ボタンが押されている間は、このイベントが繰り返し送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ButtonBase:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ButtonBase:protected:buttonReleased"><apiName>buttonReleased</apiName><shortdesc>
      このメソッドは、ユーザーがボタンをクリックして MouseEvent.MOUSE_UP イベントが処理されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このメソッドは、ユーザーがボタンをクリックして <codeph>MouseEvent.MOUSE_UP</codeph> イベントが処理されるときに呼び出されます。このメソッドは、ボタンがターゲットで、<codeph>mouseCaptured</codeph> が <codeph>true</codeph> の場合にのみ呼び出されます。このメソッドを使用すると、クリックと同時にボタンのプロパティをサブクラスで正しく更新できるようになり、マウスアップイベントとマウスクリックイベントの間にボタンが過渡状態になることを防止できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      別個のハンドラーを追加するのではなく、サブクラスでこのメソッドをオーバーライドして、クリックイベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>イベントに関連付けられた Event オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      別個のハンドラーを追加するのではなく、サブクラスでこのメソッドをオーバーライドして、<codeph>click</codeph> イベントを処理します。ボタンが無効になっている場合、このメソッドは呼び出されません。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:mouseEventHandler"><apiName>mouseEventHandler</apiName><shortdesc>
      このメソッドは、マウスイベントを処理し、必要に応じて clickHandler メソッドを呼び出し、hovered プロパティおよび mouseCaptured プロパティを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントに関連付けられた Event オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このメソッドは、マウスイベントを処理し、必要に応じて <codeph>clickHandler</codeph> メソッドを呼び出し、<codeph>hovered</codeph> プロパティおよび <codeph>mouseCaptured</codeph> プロパティを更新します。
     
      <p>このメソッドは、<codeph>MouseEvent.ROLL_OVER</codeph>、<codeph>MouseEvent.ROLL_OUT</codeph>、<codeph>MouseEvent.MOUSE_DOWN</codeph>、<codeph>MouseEvent.MOUSE_UP</codeph> および <codeph>MouseEvent.CLICK</codeph> イベントを処理するために呼び出されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ButtonBase:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      ユーザーがマウスボタンを押したままのときに buttonDown イベントを繰り返し送出するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーがマウスボタンを押したままのときに <codeph>buttonDown</codeph> イベントを繰り返し送出するかどうかを指定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:content:get"><apiName>content</apiName><shortdesc>
      content プロパティにより、ボタンのカスタムスキンで使用する任意のオブジェクトを渡すことができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>content</codeph> プロパティにより、ボタンのカスタムスキンで使用する任意のオブジェクトを渡すことができます。スキンがオプションパーツの <codeph>labelDisplay</codeph> を定義している場合、<codeph>content</codeph> のストリング表現がそのパーツの <codeph>text</codeph> プロパティにプッシュ配信されます。デフォルトスキンは、このメカニズムを使用して <codeph>content</codeph> をボタンラベルとしてレンダリングします。  
     
      <p><codeph>label</codeph> プロパティは、このプロパティの <codeph>String</codeph> 型のファサードです。このプロパティはバインド可能であり、「contentChange」イベントを <codeph>label</codeph> プロパティと共有します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/label"><linktext>label</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      マウスポインターがボタン上に置かれているかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      マウスポインターがボタン上に置かれているかどうかを示します。スキンの状態を特定するために使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:keyboardPressed:get"><apiName>keyboardPressed</apiName><shortdesc>
      ボタンにフォーカスがあるときにキーボードのキーが押されたかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      ボタンにフォーカスがあるときにキーボードのキーが押されたかどうかを示します。スキンの状態を特定するために使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:mouseCaptured:get"><apiName>mouseCaptured</apiName><shortdesc>
      MouseEvent.MOUSE_DOWN が最初に送出されたときに、マウスが押されてマウスポインターがボタン上に置かれていたかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph>MouseEvent.MOUSE_DOWN</codeph> が最初に送出されたときに、マウスが押されてマウスポインターがボタン上に置かれていたかどうかを示します。スキンの状態を特定するために使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:stickyHighlighting:get"><apiName>stickyHighlighting</apiName><shortdesc>
      false の場合、ボタンをクリックするとダウン状態のスキンが表示され、ボタンからマウスを離すとオーバー状態のスキンが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>false</codeph> の場合、ボタンをクリックするとダウン状態のスキンが表示され、ボタンからマウスを離すとオーバー状態のスキンが表示されます。<codeph>true</codeph> の場合、ボタンをクリックするとダウン状態のスキンが表示され、ボタンからマウスを離しても引き続きこのスキンが表示されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:label:set"><apiName>label</apiName><shortdesc>
      ButtonBase コントロールに表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue></apiValueDef><apiDesc>
      ButtonBase コントロールに表示されるテキストです。
     
      <p>ButtonBase コントロールよりラベルの幅のほうが大きい場合、ラベルは省略記号（...）で切り詰められ、最後まで表示されません。マウスをコントロール上に移動すると、ラベル全体がツールヒントとして表示されます。<codeph>tooltip</codeph> プロパティを使用してツールヒントを設定している場合は、ラベルテキストではなくツールヒントが表示されます。</p>
     
      <p>これがデフォルトの ButtonBase プロパティです。</p>
     
      <p>このプロパティは、<codeph>content</codeph> プロパティの <codeph>String</codeph> 型のファサードです。このプロパティはバインド可能であり、「contentChange」イベントの送出を <codeph>content</codeph> プロパティと共有します。</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/content"><linktext>content</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TrackBase"><apiName>TrackBase</apiName><shortdesc>
  TrackBase クラスは、Slider や ScrollBar などの、トラックと 1 つ以上のサムボタンを持つコンポーネントの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Time" inherit="no" name="slideDuration" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" type="Number">
<description>
  トラックをクリックしてサムを動かしたときに表示されるサムのスライドアニメーションの時間（ミリ秒）です。このスタイルは、Slider と ScrollBar の両方に使用されます。Slider の場合、トラックをクリックするとアニメーションでこのスタイルが使用され、サムがクリックされた位置に移動します。ScrollBar の場合、Shift キーを押しながらトラックをクリックした場合にのみ、このスタイルが使用され、これにより、サムがクリックされた位置に移動します。Shift キーを押さずに ScrollBar トラックをクリックすると、代わりにページングビヘイビアーになります。また、Shift キーを押しながらクリックしたときにアニメーションビヘイビアーになるように、<codeph>smoothScrolling</codeph> スタイルを ScrollBar に設定する必要があります。
  
 <p>この期間は、トラック全体の距離に適用されるアニメーションに対するものです。距離が短くなると、それに比例して使用される時間も短くなります。</p>
 
  </description>
<default>300
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  通常の状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="thumb" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      <codeph>value</codeph> プロパティを増減させるためにトラックに沿ってドラッグできるボタンを定義するスキンパーツです。<codeph>value</codeph> プロパティを更新すると、トラックに対してサムボタンの位置が自動的に更新されます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that can be dragged along the track to increase or
      decrease the value property.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      押されたときにトラック上の現在のボタン位置に対応する値に <codeph>value</codeph> プロパティを設定するボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that, when  pressed, sets the value property
      to the value corresponding with the current button position on the track.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TrackBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TrackBase
    <strong>Styles</strong>
    slideDuration="300"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"
    thumbDrag="<i>No default</i>"
    thumbPress="<i>No default</i>"
    thumbRelease="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  TrackBase クラスは、Slider や ScrollBar などの、トラックと 1 つ以上のサムボタンを持つコンポーネントの基本クラスです。2 つの必須スキンパーツである <codeph>thumb</codeph> と <codeph>track</codeph> を宣言します。TrackBase クラスは、サムボタンをドラッグするためのコードも提供します。これは、Slider クラスと ScrollBar クラスによって共有されます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.supportClasses.Slider.xml"><linktext>spark.components.supportClasses.Slider</linktext></link><link href="" invalidHref="spark.components.supportClasses.ScrollBar.xml"><linktext>spark.components.supportClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_RELEASE_thumbRelease"><apiName>thumbRelease</apiName><shortdesc>
  サムが離されたとき、つまり thumbPress イベントの後ユーザーがマウスボタンを離したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_RELEASE</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  サムが離されたとき、つまり <codeph>thumbPress</codeph> イベントの後ユーザーがマウスボタンを離したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_PRESS_thumbPress"><apiName>thumbPress</apiName><shortdesc>
  サムが押されたとき、つまりユーザーがサムの上でマウスボタンを押したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_PRESS</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  サムが押されたとき、つまりユーザーがサムの上でマウスボタンを押したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_DRAG_thumbDrag"><apiName>thumbDrag</apiName><shortdesc>
  サムが押され、マウスによって移動されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_DRAG</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  サムが押され、マウスによって移動されたときに送出されます。このイベントには、常に <codeph>thumbPress</codeph> イベントが先行します。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_START_changeStart"><apiName>changeStart</apiName><shortdesc>
  ユーザー操作またはアニメーションが開始されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザー操作またはアニメーションが開始されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_END_changeEnd"><apiName>changeEnd</apiName><shortdesc>
  ユーザー操作またはアニメーションが終了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザー操作またはアニメーションが終了したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  ユーザー操作の結果としてコントロールの値が変化したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザー操作の結果としてコントロールの値が変化したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:TrackBase:TrackBase"><apiName>TrackBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:TrackBase:protected:pointToValue"><apiName>pointToValue</apiName><shortdesc>
      トラックを基準とする x,y ピクセル位置を、minimum と maximum の範囲内の値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>minimum と maximum の間の値です。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>トラックの原点を基準とする位置の x 座標です。
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>トラックの原点を基準とする位置の y 座標です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      トラックを基準とする x,y ピクセル位置を、minimum と maximum の範囲内の値に変換します。  
     
      <p>TrackBase サブクラスはこのメソッドをオーバーライドして、固有のジオメトリを考慮した変換を実行する必要があります。例えば、垂直スライダーでは次のように値を計算する場合があります。
      <pre>
      return (y / track.height) (maximum - minimum);
      </pre>
      </p>
     
      <p>デフォルトでは、このメソッドは <codeph>minimum</codeph> を返します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      スキンのレイアウトではジオメトリが完全に指定されていないスキンパーツ（代表的なものはサム）の境界を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      スキンのレイアウトではジオメトリが完全に指定されていないスキンパーツ（代表的なものはサム）の境界を設定します。
     
      <p>ほとんどのサブクラスでは、このメソッドをオーバーライドし、<codeph>minimum</codeph>、<codeph>maximum</codeph>、および <codeph>value</codeph> プロパティに基づいて、サムのサイズ、位置、および可視性を更新します。 </p>
     
      <p>デフォルトでは、このメソッドは何も実行しません。</p> 
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components.supportClasses:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
      DisplayLayer クラスには、奥行きでソートされた DisplayObject が順に列挙されたリストが維持されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      DisplayLayer クラスには、奥行きでソートされた DisplayObject が順に列挙されたリストが維持されています。開発者がこのクラスをインスタンス化することはなく、<codeph>Group</codeph> と <codeph>DataGroup</codeph> の <codeph>overlay</codeph> プロパティを使用します。
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DisplayLayer:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
          コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          コンストラクターです。 
         
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DisplayLayer:addDisplayObject"><apiName>addDisplayObject</apiName><shortdesc>
          指定した奥行きの displayObject を、順に列挙されたリストに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>オブジェクトのインデックスです。
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>追加するオブジェクトです。
         
          </apiDesc></apiParam><apiParam><apiItemName>depth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>オブジェクトの奥行きです。   
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定した奥行きの <codeph>displayObject</codeph> を、順に列挙されたリストに追加します。ソートされたリストにおける <codeph>displayObject</codeph> の位置は、その奥行きに基づきます。オブジェクトは、自身と同等以下の <codeph>depth</codeph> 値を持つオブジェクトの後に挿入されます。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectAt"><apiName>getDisplayObjectAt</apiName><shortdesc>
          指定したインデックスの DisplayObject を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>オブジェクトです。
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>オブジェクトのインデックスです。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定したインデックスの DisplayObject を返します。 
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectDepth"><apiName>getDisplayObjectDepth</apiName><shortdesc>
          指定した DisplayObject の奥行きを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>オブジェクトの奥行きです。
         
          </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>オブジェクトです。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定した DisplayObject の奥行きを返します。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:removeDisplayObject"><apiName>removeDisplayObject</apiName><shortdesc>
          指定した displayObject をソートされたリストから削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>削除されるオブジェクトです。
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>オブジェクトです。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定した <codeph>displayObject</codeph> をソートされたリストから削除します。
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DisplayLayer:numDisplayObjects:get"><apiName>numDisplayObjects</apiName><shortdesc>
          DisplayLayer にあるオブジェクトの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          DisplayLayer にあるオブジェクトの数です。 
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SliderBase"><apiName>SliderBase</apiName><shortdesc>
  SliderBase クラスを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="fontWeight"/><Exclude kind="style" name="fontSize"/><Exclude kind="style" name="color"/><styles><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description>
  <codeph>true</codeph> の場合は、サムボタンが離されたときではなくサムの値がトラックに沿ってドラッグされているときに、サムの値がコミットされます。
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのフォーカス枠のアルファです。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataTip" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" required="false" type="mx.core.IDataRenderer" var_type="mx.core:IFactory">
<description>
      現在の値のフォーマットされたバージョンを表示する dataTip を定義するスキンパーツです。dataTip は、サムがドラッグされているときに表示されます。これは動的スキンパーツであり、IFactory 型である必要があります。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a dataTip that displays a formatted version of 
      the current value.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SliderBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SliderBase
    <strong>Properties</strong>
    dataTipFormatFunction="20"
    dataTipPrecision="2"
    maximum="10"
    showDataTip="true"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlph="0.55"
    focusColor="0xFFFFFF"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    liveDragging="true"
    local="en"
    renderingMode="CFF"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SliderBase クラスを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。スライダーの現在の値は、スライダーの両終点の間におけるサムの相対位置によって決定されます。スライダーの両終点は、スライダーの最小値と最大値に対応します。 SliderBase クラスは HSlider および VSlider の基本クラスです。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SliderBase:SliderBase"><apiName>SliderBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SliderBase:protected:updateDataTip"><apiName>updateDataTip</apiName><shortdesc>
      データヒントを表示するときにデータヒントを配置するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dataTipInstance</apiItemName><apiType value="mx.core:IDataRenderer"/><apiDesc>更新して配置する <codeph>dataTip</codeph> インスタンスです。
      </apiDesc></apiParam><apiParam><apiItemName>initialPosition</apiItemName><apiType value="flash.geom:Point"/><apiDesc>スキン内での <codeph>dataTip</codeph> の初期位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データヒントを表示するときにデータヒントを配置するために使用されます。サブクラスでこの関数を実装する必要があります。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SliderBase:dataTipPrecision"><apiName>dataTipPrecision</apiName><shortdesc>
      データヒントテキストで使用する小数点以下の桁数です。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>2</apiData><apiType value="int"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      データヒントテキストで使用する小数点以下の桁数です。 0 の場合、すべての値が整数に四捨五入されます。<codeph>dataTipFormatFunction</codeph> が定義されている場合、この値は無視されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:showDataTip"><apiName>showDataTip</apiName><shortdesc>
      true に設定されている場合、ユーザーが操作している間、スライダーの現在の値を含むデータヒントを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> に設定されている場合、ユーザーが操作している間、スライダーの現在の値を含むデータヒントを表示します。また、データヒントを表示するには、skinPart の <codeph>dataTip</codeph> がスキン内で定義されている必要があります。 
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:dataTipFormatFunction:get"><apiName>dataTipFormatFunction</apiName><shortdesc>
      データヒントテキストの形式を設定するコールバック関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      データヒントテキストの形式を設定するコールバック関数です。 この関数は、単一の数値を引数として受け取り、形式を設定したストリングを返します。
     
      <p>この関数のシグネチャは次のとおりです。</p>
      <pre>
      funcName(value:Number):Object
      </pre>
     
      <p>次の例では、データヒントテキストにドル記号の接頭辞を付け、'slide' という名前の SliderBase コントロールの <codeph>dataTipPrecision</codeph> を使用してテキストをフォーマットしています。 </p>
     
      <pre>
      import mx.formatters.NumberBase;
      function myDataTipFormatter(value:Number):Object { 
          var dataFormatter:NumberBase = new NumberBase(".", ",", ".", ""); 
          return   "$ " + dataFormatter.formatPrecision(String(value), slide.dataTipPrecision); 
      }
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:maximum:get"><apiName>maximum</apiName><shortdesc>
      value に設定可能な最大値を表す数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>value</codeph> に設定可能な最大値を表す数値です。<codeph>minimum</codeph> または <codeph>value</codeph> の値が <codeph>maximum</codeph> よりも大きい場合、その値は新しい <codeph>maximum</codeph> を反映するように変更されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      マウスボタンが離されたときのスライダーの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      マウスボタンが離されたときのスライダーの値です。<codeph>liveDragging</codeph> スタイルが true の場合、このプロパティはサムのアニメーションの間に設定される一時的な値も保持します。実際の値は、アニメーションの終了時にのみ設定されます。
     
      <p><codeph>liveDragging</codeph> スタイルが false の場合、スライダーの値はマウスボタンが離されたときにのみ設定されます。スライダーのサムがドラッグされている間、値は更新されません。</p>
     
      <p>このプロパティは、<codeph>liveDragging</codeph> が false であっても、スライダーのサムが移動しているときは更新されます。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Skin"><apiName>Skin</apiName><shortdesc>
  Skin クラスは、スキン可能コンポーネントによって使用されるすべてのスキンの基本クラスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.skins:IHighlightBitmapCaptureClient</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Skin クラスは、スキナブルコンポーネントによって使用されるすべてのスキンの基本クラスを定義します。SkinnableComponent クラスは、スキナブルコンポーネントの基本クラスを定義します。
 
  <p>通常、スキンクラスは MXML で記述します。次に例を示します。</p>
 
  <pre>  &lt;?xml version="1.0"?>
  &lt;Skin xmlns="http://ns.adobe.com/mxml/2009">
  
  &lt;Metadata>
          &lt;!-- Specify the component that uses this skin class. -->
          [HostComponent("my.component.MyComponent")]
      &lt;/Metadata> 
      
      &lt;states>
          &lt;!-- Specify the states controlled by this skin. -->
      &lt;/states>
          
      &lt;!-- Define skin. -->
  
  &lt;/Skin></pre>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.SkinnableComponent.xml"><linktext>mx.core.SkinnableComponent</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Skin:Skin"><apiName>Skin</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Skin:beginHighlightBitmapCapture"><apiName>beginHighlightBitmapCapture</apiName><shortdesc>
      このスキンに対してビットマップキャプチャが行われる前に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンポーネントを再描画する必要がある場合は <codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      このスキンに対してビットマップキャプチャが行われる前に呼び出されます。デフォルトの実装では、<codeph>focusSkinExclusions</codeph> 配列のアイテムが除外されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Skin:endHighlightBitmapCapture"><apiName>endHighlightBitmapCapture</apiName><shortdesc>
      このスキンに対してビットマップキャプチャが行われた後で呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンポーネントを再描画する必要がある場合は <codeph>true</codeph> です。それ以外の場合は <codeph>false</codeph> です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      このスキンに対してビットマップキャプチャが行われた後で呼び出されます。デフォルトの実装では、<codeph>focusSkinExclusions</codeph> 配列のアイテムが復元されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:Skin:focusSkinExclusions:get"><apiName>focusSkinExclusions</apiName><shortdesc>
      フォーカス枠をレンダリングするときに除外する必要があるアイテムの ID のリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      フォーカス枠をレンダリングするときに除外する必要があるアイテムの ID のリストです。DisplayObject 型または GraphicElement 型のアイテムのみを除外する必要があります。他の型のアイテムは無視されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownController"><apiName>DropDownController</apiName><shortdesc>
  DropDownController クラスは、アンカーボタンとそれに関連付けられたドロップダウンに対するマウス、キーボード、およびフォーカスの操作を処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownController クラスは、アンカーボタンとそれに関連付けられたドロップダウンに対するマウス、キーボード、およびフォーカスの操作を処理します。このクラスは、DropDownList などのドロップダウンコンポーネントが、ユーザー操作によってドロップダウンを開いたり閉じたりする処理のために使用します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DropDownController:DropDownController"><apiName>DropDownController</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownController:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      ドロップダウンを閉じて、DropDownEvent.CLOSE イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> の場合は、選択されたデータアイテムをコミットします。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドロップダウンを閉じて、<codeph>DropDownEvent.CLOSE</codeph> イベントを送出します。  
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      ドロップダウンを開いて、DropdownEvent.OPEN イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ドロップダウンを開いて、<codeph>DropdownEvent.OPEN</codeph> イベントを送出します。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processFocusOut"><apiName>processFocusOut</apiName><shortdesc>
      ドロップダウンにフォーカスがない場合は、ドロップダウンを閉じます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc><codeph>FOCUS_OUT</codeph> イベントのイベントオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドロップダウンにフォーカスがない場合は、ドロップダウンを閉じます。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processKeyDown"><apiName>processKeyDown</apiName><shortdesc>
      ユーザーによるキーボード操作を処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>keyCode</codeph> が認識されて処理された場合は、<codeph>true</codeph> を返します。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>キーボードイベントからのイベントオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ユーザーによるキーボード操作を処理します。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownController:hitAreaAdditions"><apiName>hitAreaAdditions</apiName><shortdesc>
      ドロップダウンのヒット領域の一部を考慮するための表示オブジェクトのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Vector$flash.display:DisplayObject"/></apiValueDef><apiDesc>
      ドロップダウンのヒット領域の一部を考慮するための表示オブジェクトのリストです。含めるものとしてリストされているコンポーネント内でマウスクリックすると、ドロップダウンは自動的に閉じません。
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:closeOnResize:get"><apiName>closeOnResize</apiName><shortdesc>
      true の場合は、システムマネージャーをサイズ変更するとドロップダウンが閉じます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合は、システムマネージャーをサイズ変更するとドロップダウンが閉じます。モバイルアプリケーションの場合は、このプロパティを <codeph>false</codeph> に設定すると、ページの方向が変わってもドロップダウンを開いたままにできます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      ドロップダウンが開いている場合は true を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      ドロップダウンが開いている場合は <codeph>true</codeph> を含みます。   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:rollOverOpenDelay:get"><apiName>rollOverOpenDelay</apiName><shortdesc>
      アンカーボタンがロールオーバーされてからドロップダウンを開くまでの遅延時間（ミリ秒単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
             
      </apiDefaultValue></apiValueDef><apiDesc>
      アンカーボタンがロールオーバーされてからドロップダウンを開くまでの遅延時間（ミリ秒単位）です。<codeph>NaN</codeph> に設定すると、ドロップダウンはロールオーバーではなくクリックで開きます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:openButton:set"><apiName>openButton</apiName><shortdesc>
      ドロップダウンコンポーネントの openButton スキンパーツへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:ButtonBase</apiValueClassifier></apiValueDef><apiDesc>
      ドロップダウンコンポーネントの <codeph>openButton</codeph> スキンパーツへの参照です。 
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:systemManager:set"><apiName>systemManager</apiName><shortdesc>
      マウスの追跡に使用される SystemManager への参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.managers:ISystemManager"/></apiValueDef><apiDesc>
      マウスの追跡に使用される <codeph>SystemManager</codeph> への参照です。何も指定しないと、コントローラーは openButton と関連付けられた systemManager を使用します。
             
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
  ButtonBarHorizontalLayout クラスは、Spark の ButtonBar スキン専用として設計されたレイアウトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBarHorizontalLayout クラスは、Spark の ButtonBar スキン専用として設計されたレイアウトです。このレイアウトでは、子を左から右へと水平方向にレイアウトします。
  
  <p>子のサイズは、可能な限り、それぞれの推奨サイズに基づいて設定されます。十分な領域がある場合、それぞれの子はその推奨サイズに設定され、さらに余分な領域があればその領域が子の間で均等に配分されます。</p>
 
  <p>すべての子をそれぞれの推奨サイズに設定するだけの領域がない場合、平均の幅よりも狭い子には推奨サイズが割り当てられ、残りのエレメントは均等に縮小されます。</p>
 
  <p>すべての子は親の高さに設定されます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ButtonBarHorizontalLayout:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarHorizontalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      レイアウトエレメント間の水平方向の空白です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      レイアウトエレメント間の水平方向の空白です。この間隔はレイアウトエレメント間にのみ適用されることに注意してください。そのため、エレメントが 1 つしかないと、この間隔はレイアウトに影響を与えません。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
  ListItemDragProxy クラスは、Spark の List ベースのコントロールからドラッグするときに使用されるデフォルトのドラッグプロキシを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  ListItemDragProxy クラスは、Spark の List ベースのコントロールからドラッグするときに使用されるデフォルトのドラッグプロキシを定義します。
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ListItemDragProxy:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionState"><apiName>InteractionState</apiName><shortdesc>
      InteractionStateDetector クラスの state プロパティの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      InteractionStateDetector クラスの <codeph>state</codeph> プロパティの値です。
           </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionStateDetector"><linktext>spark.components.supportClasses.InteractionStateDetector</linktext></link></related-links><apiValue id="spark.components.supportClasses:InteractionState:DOWN"><apiName>DOWN</apiName><shortdesc>
          コンポーネントはダウン状態である必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
          コンポーネントはダウン状態である必要があります。
          
          <p>現在、ユーザーがこのコンポーネントを押しています。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:OVER"><apiName>OVER</apiName><shortdesc>
          コンポーネントはオーバー状態である必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>over</apiData><apiType value="String"/></apiValueDef><apiDesc>
          コンポーネントはオーバー状態である必要があります。
          
          <p>現在、ユーザーがこのコンポーネントの上をホバーしています。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:UP"><apiName>UP</apiName><shortdesc>
          コンポーネントはアップ状態である必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
          コンポーネントはアップ状態である必要があります。
          
          <p>このコンポーネントは操作されていません。</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
  ButtonBarBase クラスは、ButtonBar、TabBar および同様のサブクラスの共通動作を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBarBase" playerVersion="Flash10" type="String">
<description>
  ラベルに対するアイコンの方向です。 有効な MXML 値は、<codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> および <codeph>top</codeph> です。
 
  <p>ActionScript では、このプロパティを設定するために、<codeph>IconPlacement.RIGHT</codeph>、<codeph>IconPlacement.LEFT</codeph>、<codeph>IconPlacement.BOTTOM</codeph> および <codeph>IconPlacement.TOP</codeph> の各定数を使用できます。</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBarBase/&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBarBase クラスは、ButtonBar、TabBar および同様のサブクラスの共通動作を定義します。このクラスでは、新しい API は追加されませんが、コントロールの ItemRenderer エレメントの選択、キーボードフォーカスおよびキーボードナビゲーション動作が洗練されたものになります。この基本クラスは、直接インスタンス化しないでください。
 
  <p>ItemRenderer をクリックすると、<codeph>selectedIndex</codeph> プロパティと <codeph>caretIndex</codeph> プロパティを設定することにより選択されます。<codeph>requireSelection</codeph> が <codeph>false</codeph> の場合は、もう一度クリックすると選択が解除されます。データプロバイダーが <codeph>ISelectableList</codeph> オブジェクトである場合は、その <codeph>selectedIndex</codeph> も設定されます。</p> 
 
  <p>矢印キーのイベントは、<codeph>caretIndex</codeph> を調整することによって処理されます。<codeph>arrowKeysWrapFocus</codeph> が <codeph>true</codeph> の場合は、<codeph>caretIndex</codeph> が折り返されます。スペースキーを押すと <codeph>caretIndex</codeph> にある ItemRenderer が選択されます。</p>
 
  <p>ButtonBarBase オブジェクトがフォーカスを得て、キーボードジェスチャーの結果として <codeph>caretIndex</codeph> に到達すると、<codeph>caretIndex</codeph> にある ItemRenderer の <codeph>showsCaret</codeph> プロパティが <codeph>true</codeph> に設定されます。マウスクリックへの応答の副作用として <codeph>caretIndex</codeph> が設定された場合、<codeph>showsCaret</codeph> は設定されません。</p>
 
  <p><codeph>ButtonBarButton</codeph> ItemRenderer の <codeph>allowDeselection</codeph> プロパティが <codeph>!requireSelection</codeph> に設定されます。</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarBase:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      <p>タブ処理が初期化されます。このコンポーネントをタブで選択すると、コンポーネントがフォーカスを得ますが、マウスでクリックしてもフォーカスは得ません。タブで子を選択することはできません。</p> 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarBase:iconField:get"><apiName>iconField</apiName><shortdesc>
      アイコンとして表示されるデータプロバイダーアイテム内のフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      アイコンとして表示されるデータプロバイダーアイテム内のフィールドの名前です。<codeph>iconFunction</codeph> プロパティはこのプロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBarBase:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      アイコンを決定するために各アイテムで実行されるユーザー指定の関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      アイコンを決定するために各アイテムで実行されるユーザー指定の関数です。 <codeph>iconFunction</codeph> プロパティは <codeph>iconField</codeph> プロパティをオーバーライドします。
     
      <p>このような場合に、適切なフィールドを検索して表示可能なアイコンを返す <codeph>iconFunction</codeph> を指定できます。 </p>
     
      <p>アイコン関数は、データプロバイダー内のアイテムである引数を 1 つ受け取り、有効な BitmapImage ソースを返します。</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListBase"><apiName>ListBase</apiName><shortdesc>
  ListBase クラスは、選択をサポートするすべてのコンポーネントの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ListBase
 
    <strong>Properties</strong>
    arrowKeysWrapFocus="false"
    labelField="label"
    labelFunction="null"
    requireSelection="false"
    selectedIndex="-1"
    selectedItem="undefined"
    useVirtualLayout="false"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    change="<i>No default</i>"
    changing="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableDataContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  ListBase クラスは、選択をサポートするすべてのコンポーネントの基本クラスです。 
 
  <p><b>メモ：</b>Spark のリストベースのコントロール（Spark の ListBase クラスと、そのサブクラスである ButtonBar、ComboBox、DropDownList、List、TabBar）では、BasicLayout クラスを <codeph>layout</codeph> プロパティの値として使用することはできません。Spark のリストベースのコントロールでは、BasicLayout を使用しないでください。</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  フォーカスが変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  フォーカスが変更された後に送出されます。  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  選択が変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  選択が変更された後に送出されます。このイベントは、ユーザーがコントロールを操作したときに送出されます。
 
  <p><codeph>selectedIndex</codeph> または <codeph>selectedItem</codeph> プロパティの値がプログラムによって変更された場合、コントロールから <codeph>change</codeph> イベントは送出されません。代わりに <codeph>valueCommit</codeph> イベントが送出されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  選択が変更されるときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  選択が変更されるときに送出されます。イベントに対して <codeph>preventDefault()</codeph> メソッドを呼び出すと、選択は変更されません。
  
  <p>このイベントは、ユーザーがコントロールを操作したときに送出されます。<codeph>selectedIndex</codeph> または <codeph>selectedItem</codeph> プロパティの値がプログラムによって変更された場合、コントロールから <codeph>changing</codeph> イベントは送出されません。代わりに <codeph>valueCommit</codeph> イベントが送出されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  ユーザーがコントロール内のアイテムの外にマウスポインターを移動したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがコントロール内のアイテムの外にマウスポインターを移動したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  ユーザーがコントロール内のアイテムの上にマウスポインターを置いたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがコントロール内のアイテムの上にマウスポインターを置いたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ListBase:ListBase"><apiName>ListBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ListBase:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      このコンポーネントに追加されるかこのコンポーネントから削除されるアイテムに応じて、選択されたインデックスを調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>新しいインデックスです。
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>アイテムがコンポーネントに追加された場合は <codeph>true</codeph>、アイテムが削除された場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントに追加されるかこのコンポーネントから削除されるアイテムに応じて、選択されたインデックスを調整します。このメソッドは選択されたインデックスの値を調整し、<codeph>valueCommit</codeph> イベントを送出します。変更はユーザー操作の直接の結果として発生したわけではないため、<codeph>change</codeph> イベントは送出されません。さらに、<codeph>changing</codeph> イベントは送出されず、選択のキャンセルは許可されません。また、同じアイテムが選択されているため、<codeph>itemSelected()</codeph> メソッドは呼び出されません。変更されているのは、アイテムのインデックスのみです。
     
      <p>次回の <codeph>commitProperties()</codeph> メソッドの呼び出しで、<codeph>valueCommit</codeph> イベントが送出されます。</p>
     
      <p><codeph>change</codeph> および <codeph>changing</codeph> イベントは、<codeph>selectedIndex</codeph> が調整されたときには送出されません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemAdded"><apiName>itemAdded</apiName><shortdesc>
      アイテムがこのコンポーネントに追加されたときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>追加されたアイテムのインデックスです。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムがこのコンポーネントに追加されたときに呼び出されます。選択およびキャレット関連のプロパティは、それに従って調節されます。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemRemoved"><apiName>itemRemoved</apiName><shortdesc>
      アイテムがこのコンポーネントから削除されたときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>削除されたアイテムのインデックスです。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムがこのコンポーネントから削除されたときに呼び出されます。選択およびキャレット関連のプロパティは、それに従って調節されます。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemSelected"><apiName>itemSelected</apiName><shortdesc>
      アイテムが選択されているか選択解除されているときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>選択されたアイテムのインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc>アイテムが選択されている場合は <codeph>true</codeph>、選択解除されている場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムが選択されているか選択解除されているときに呼び出されます。サブクラスは、このメソッドをオーバーライドして選択を表示する必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemShowingCaret"><apiName>itemShowingCaret</apiName><shortdesc>
      アイテムがキャレット状態であるかキャレット状態でないときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>キャレット状態になったアイテムのインデックスです。 
     
      </apiDesc></apiParam><apiParam><apiItemName>showsCaret</apiItemName><apiType value="Boolean"/><apiDesc>アイテムがキャレット状態である場合は <codeph>true</codeph>、キャレット状態でない場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムがキャレット状態であるかキャレット状態でないときに呼び出されます。サブクラスは、このメソッドをオーバーライドしてキャレットを表示する必要があります。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      データアイテムが指定されると、labelField および labelFunction プロパティを考慮しながらレンダラーが表示する必要がある正しいテキストを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>レンダラー内のデータアイテムに対して表示するテキストを表すストリングです。 
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>データアイテムです。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データアイテムが指定されると、<codeph>labelField</codeph> および <codeph>labelFunction</codeph> プロパティを考慮しながらレンダラーが表示する必要がある正しいテキストを返します。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ListBase:NO_SELECTION"><apiName>NO_SELECTION</apiName><shortdesc>
      "no selection" という値を表す静的定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      "no selection" という値を表す静的定数です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:arrowKeysWrapFocus"><apiName>arrowKeysWrapFocus</apiName><shortdesc>
      true の場合、矢印キーを使用してコンポーネント内を移動するときにどちらかの端に到達すると、位置が折り返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、矢印キーを使用してコンポーネント内を移動するときにどちらかの端に到達すると、位置が折り返されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      現在フォーカスが設定されているアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      現在フォーカスが設定されているアイテムです。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelField:get"><apiName>labelField</apiName><shortdesc>
      ラベルとして表示するデータプロバイダーアイテム内のフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label" 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ラベルとして表示するデータプロバイダーアイテム内のフィールドの名前です。 labelField が空のストリング（""）に設定されている場合、データプロバイダーにラベルを表すフィールドはないと見なされます。 <codeph>labelFunction</codeph> プロパティはこのプロパティをオーバーライドします。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      ラベルを決定するために各アイテムで実行されるユーザー指定の関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ラベルを決定するために各アイテムで実行されるユーザー指定の関数です。 <codeph>labelFunction</codeph> プロパティは <codeph>labelField</codeph> プロパティをオーバーライドします。
     
      <p>このような場合に、適切なフィールドを検索して表示可能なストリングを返す <codeph>labelFunction</codeph> を指定できます。 また、<codeph>labelFunction</codeph> はフォーマット処理やローカライズにも使用できます。 </p>
     
      <p>ラベル関数は、データプロバイダー内のアイテムである引数を 1 つ受け取り、ストリングを返します。</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      true の場合、コントロール内でデータアイテムが常に選択されている必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、コントロール内でデータアイテムが常に選択されている必要があります。値が <codeph>true</codeph> の場合、<codeph>selectedIndex</codeph> プロパティは常に 0 ～（<codeph>dataProvider.length</codeph> - 1）の間の値に設定されます。
     
     <p>TabBar 以外のほとんどのサブクラスのデフォルト値は <codeph>false</codeph> です。 その場合、デフォルトは <codeph>true</codeph> になります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      選択されたアイテムの 0 から始まるインデックスです。または、アイテムが選択されていない場合は -1 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      選択されたアイテムの 0 から始まるインデックスです。または、アイテムが選択されていない場合は -1 です。<codeph>selectedIndex</codeph> プロパティを設定すると、現在選択されているアイテムが選択解除され、指定したインデックスのデータアイテムが選択されます。
     
      <p>値は常に -1 ～ (<codeph>dataProvider.length</codeph> - 1) の間です。<codeph>selectedIndex</codeph> よりも低いインデックスのアイテムがコンポーネントから削除されると、選択されたインデックスがそれに応じて下方向に調整されます。</p>
     
      <p>選択されたアイテムが削除されると、選択されたインデックスは次の値に設定されます。</p>
     
      <ul>
        <li><codeph>requireSelection</codeph> = <codeph>false</codeph> であるか残りのアイテムがない場合は、-1。</li>
        <li><codeph>requireSelection</codeph> = <codeph>true</codeph> であり、かつ少なくとも 1 つアイテムがある場合は、0。</li>
      </ul>
     
      <p>ユーザーがコントロールを操作した結果として <codeph>selectedIndex</codeph> プロパティが変更された場合は、コントロールから <codeph>change</codeph> および <codeph>changing</codeph> イベントが送出されます。<codeph>selectedIndex</codeph> プロパティの値がプログラムによって変更された場合は、コントロールから <codeph>valueCommit</codeph> イベントが送出されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      現在選択されているアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      現在選択されているアイテムです。このプロパティを設定すると、現在選択されているアイテムが選択解除され、新しく指定したアイテムが選択されます。
     
      <p><codeph>selectedItem</codeph> をこのコンポーネント内にないアイテムに設定すると、選択なしの状態になり、<codeph>selectedItem</codeph> は <codeph>undefined</codeph> に設定されます。</p>
     
      <p>選択されたアイテムが削除されると、選択されたアイテムは次の値に設定されます。</p>
     
      <ul>
        <li><codeph>requireSelection</codeph> = <codeph>false</codeph> であるか残りのアイテムがない場合は、<codeph>undefined</codeph>。</li>
        <li><codeph>requireSelection</codeph> = <codeph>true</codeph> であり、かつ少なくとも 1 つアイテムがある場合は、最初のアイテム。</li>
      </ul>
     
      <p>ユーザーがコントロールを操作した結果として <codeph>selectedItem</codeph> プロパティが変更された場合は、コントロールから <codeph>change</codeph> および <codeph>changing</codeph> イベントが送出されます。<codeph>selectedItem</codeph> プロパティの値がプログラムによって変更された場合は、コントロールから <codeph>valueCommit</codeph> イベントが送出されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      このコントロールに関連付けられているレイアウトの useVirtualLayout プロパティの値を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールに関連付けられているレイアウトの <codeph>useVirtualLayout</codeph> プロパティの値を設定します。レイアウトが後で置換されて、このプロパティの値が <codeph>true</codeph> の場合、新しいレイアウトの <codeph>useVirtualLayout</codeph> プロパティは <codeph>true</codeph> に設定されます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
  コンポーネントがアップ、オーバーまたはダウン状態である必要があるかどうかを判断するために使用するヘルパークラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  コンポーネントがアップ、オーバーまたはダウン状態である必要があるかどうかを判断するために使用するヘルパークラスです。
 
  <p>状態の変更に伴って、トランジションを再生する場合は、playTransitions です。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionState"><linktext>spark.components.supportClasses.InteractionState</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:InteractionStateDetector_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  状態が変更された後で送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  状態が変更された後で送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:InteractionStateDetector:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
      コンストラクター
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>component</apiItemName><apiType value="mx.core:UIComponent"/><apiDesc> アップ、オーバーおよびダウン状態を検出する UIComponent です。 このオブジェクトには、イベントリスナーが関連付けられます。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクター
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:InteractionStateDetector:state:get"><apiName>state</apiName><shortdesc>
      コンポーネントの状態を返します。有効な値は、InteractionState.UP、InteractionState.DOWN および InteractionState.OVER です。
        
      
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントの状態を返します。
     
      <p>有効な値は次のとおりです。
        <ul>
          <li>InteractionState.UP</li>
          <li>InteractionState.DOWN</li>
          <li>InteractionState.OVER</li>
        </ul>
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.InteractionState;.xml"><linktext>spark.components.supportClasses.InteractionState;</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
  DropDownListBase コントロールには、ユーザーが 1 つの値を選択できるドロップダウンリストが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="selectedItems"/><Exclude kind="property" name="selectedIndices"/><Exclude kind="property" name="dropEnabled"/><Exclude kind="property" name="dragMoveEnabled"/><Exclude kind="property" name="dragEnabled"/><Exclude kind="property" name="allowMultipleSelection"/><skinStates><SkinState name="open" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10">
<description>
  開いた状態の DropDownListBase コントロールに対するスキンの状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントのドロップシャドウの可視性を制御します。
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの角の半径です。
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropDown" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      ドロップダウンリスト領域を定義するスキンパーツです。DropDownListBase が開いている場合、dropDown スキンパーツの外側にある任意の場所をクリックすると、ドロップダウンリストが閉じます。 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down list area.</shortdesc></SkinPart><SkinPart name="openButton" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="true" var_type="spark.components.supportClasses:ButtonBase">
<description>
      アンカーボタンを定義するスキンパーツです。  
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the anchor button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;s:DropDownListBase 
    <strong>Styles</strong>
    cornerRadius="4"
    dropShadowVisible="true"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownListBase コントロールには、ユーザーが 1 つの値を選択できるドロップダウンリストが含まれています。その機能は、HTML の SELECT フォームエレメントによく似ています。
 
  <p>DropDownListBase コントロールは、アンカーボタンとドロップダウンリストで構成されています。ドロップダウンリストの開閉にはアンカーボタンを使用します。 
  </p>
 
  <p>ドロップダウンリストが開いているときは次のようになります。</p>
  <ul>
    <li>アンカーボタンをクリックすると、ドロップダウンリストが閉じて、現在選択されているデータアイテムがコミットされます。</li>
    <li>ドロップダウンリストの外側をクリックすると、ドロップダウンリストが閉じて、現在選択されているデータアイテムがコミットされます。</li>
    <li>データアイテムをクリックすると、そのアイテムが選択されて、ドロップダウンリストが閉じます。</li>
    <li><codeph>requireSelection</codeph> プロパティが <codeph>false</codeph> の場合、Ctrl キーを押しながらデータアイテムをクリックすると、アイテムの選択が解除されて、ドロップダウンリストが閉じます。</li>
  </ul>
 
  </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  ユーザーがアンカーボタンをクリックしてドロップダウンリストを表示したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがアンカーボタンをクリックしてドロップダウンリストを表示したときに送出されます。これは、ユーザーが Ctrl キーを押しながら下矢印キーを押して dropDown を開いた場合にも送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  次に示すユーザーの操作などによってドロップダウンリストが閉じたときに送出されます。ドロップダウンリストのアイテムを選択する。ドロップダウンリストの外側をクリックする。ドロップダウンリストが表示されているときにアンカーボタンをクリックする。
  
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  次に示すユーザーの操作などによってドロップダウンリストが閉じたときに送出されます。
  <ul>
      <li>ドロップダウンリストのアイテムを選択する。</li>
      <li>ドロップダウンリストの外側をクリックする。</li>
      <li>ドロップダウンリストが表示されているときにアンカーボタンをクリックする。</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:DropDownListBase:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownListBase:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      ドロップダウンリストを閉じて、DropDownEvent.CLOSE イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> の場合は、選択されたデータアイテムをコミットします。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドロップダウンリストを閉じて、<codeph>DropDownEvent.CLOSE</codeph> イベントを送出します。 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownListBase:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      ドロップダウンリストを開いて、DropdownEvent.OPEN イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ドロップダウンリストを開いて、<codeph>DropdownEvent.OPEN</codeph> イベントを送出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownListBase:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      マウス、キーボード、およびフォーカスに関するすべてのユーザー操作を処理する DropDownController クラスのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:DropDownController</apiValueClassifier></apiValueDef><apiDesc>
      マウス、キーボード、およびフォーカスに関するすべてのユーザー操作を処理する DropDownController クラスのインスタンスです。コンストラクターで DropDownController インスタンスが作成された後、Flex は <codeph>initializeDropDownController()</codeph> メソッドを呼び出します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownListBase:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
  Spark TextInput や TextArea などのスキナブルコンポーネントの基本クラスです。このようなコンポーネントは、テキスト表示、スクロール、選択、および編集などの機能を提供するために、スキン内に IEditableText のインスタンスを含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  プロンプトが表示される無効状態です。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  プロンプトが表示される通常の状態です。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  通常の状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="yes" name="showPromptWhenFocused" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2" theme="mobile" type="Boolean">
<description>
  このコンポーネントが空でフォーカスがある場合に、プロンプトテキストを表示するかどうかを制御します。
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのフォーカス枠のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  このコンポーネントの境界線の表示を制御します。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  このコンポーネントの境界線の色です。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの境界線のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  垂直方向の整列または位置揃えです。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.verticalAlign を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  上部のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  右側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  左側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingLeft を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  下部のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingBottom を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの折り返しを制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style></styles><skinParts><SkinPart name="promptDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      このコンポーネントに割り当てられたスキンに存在できるラベルまたは他の IDisplayText です。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The Label or other IDisplayText that might be present
      in any skin assigned to this component.</shortdesc></SkinPart><SkinPart name="textDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IEditableText">
<description>
      このコンポーネントに割り当てられたスキンに存在できる IEditableText です。これは Spark テーマの場合は RichEditableText に、Mobile テーマの場合は StyleableStageText になります。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The IEditableText that may be present
      in any skin assigned to this component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:SkinnableTextBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnableTextBase
    autoCapitalize="none"  <b>[Mobile theme only]</b>
    autoCorrect="true"  <b>[Mobile theme only]</b>
    displayAsPassword="false"
    editable="true"
    imeMode="null"  <b>[Spark theme only]</b>
    maxChars="0"
    prompt="null"
    restrict="null"
    returnLabelKey="default"  <b>[Mobile theme only]</b>
    selectable="true"
    selectionHighlighting="whenFocused"  <b>[Spark theme only]</b>
    softKeyBoardType="default"  <b>[Mobile theme only]</b>
    text=""
    typicalText="null"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    contentBackgroundAlpha="1.0" 
    contentBackgroundColor="0xFFFFFF"
    focusAlpha="0.55"
    focusColor="0x70B2EE"
    showPromptWhenFocused="true"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"  <b>[Spark theme only]</b>
    selectionChange="<i>No default</i>"  <b>[Spark theme only]</b>
    textInput="<i>No default</i>"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>spark.core:ISoftKeyboardHintClient</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark TextInput や TextArea などのスキナブルコンポーネントの基本クラスです。このようなコンポーネントは、テキスト表示、スクロール、選択、および編集などの機能を提供するために、スキン内に IEditableText のインスタンスを含みます。デフォルトでは、IEditableText は Spark テーマの場合は RichEditableText に、Mobile テーマの場合は StyleableStageText になります。StyleableTextField は Mobile テーマでも使用できます。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  キーストロークがコンポーネントに入力されようとするときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  キーストロークがコンポーネントに入力されようとするときに送出されます。
   <p><b>Mobile テーマの場合、これは送出されません。</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  ユーザーによる編集操作が完了した後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーによる編集操作が完了した後に送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  ユーザーによる編集操作が発生する前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーによる編集操作が発生する前に送出されます。操作を変更するか、またはイベントをキャンセルして操作が処理されないようにすることができます。
   <p><b>Mobile テーマの場合、これは送出されません。</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  何らかの理由で selectionAnchorPosition プロパティおよび selectionActivePosition プロパティ、またはそのいずれかが変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  何らかの理由で <codeph>selectionAnchorPosition</codeph> プロパティおよび <codeph>selectionActivePosition</codeph> プロパティ、またはそのいずれかが変更された後に送出されます。
   <p><b>Mobile テーマの場合、これは送出されません。</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:SkinnableTextBase:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableTextBase:appendText"><apiName>appendText</apiName><shortdesc conref="spark.core.IEditableText#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>追加するテキストです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#appendText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/appendText()"><linktext>spark.components.RichEditableText.appendText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/appendText()"><linktext>spark.components.supportClasses.StyleableStageText.appendText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:insertText"><apiName>insertText</apiName><shortdesc conref="spark.core.IEditableText#insertText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>挿入するテキストです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#insertText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/insertText()"><linktext>spark.components.RichEditableText.insertText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/insertText()"><linktext>spark.components.supportClasses.StyleableStageText.insertText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.core.IEditableText#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectAll()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectAll()"><linktext>spark.components.RichEditableText.selectAll()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectAll()"><linktext>spark.components.supportClasses.StyleableStageText.selectAll()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectRange"><apiName>selectRange</apiName><shortdesc conref="spark.core.IEditableText#selectRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>選択範囲が拡張されるときに固定して動かない選択範囲の端を指定する文字位置です。
           </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>選択範囲が拡張されるときに移動する選択範囲の端を指定する文字位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectRange()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectRange()"><linktext>spark.components.RichEditableText.selectRange()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectRange()"><linktext>spark.components.supportClasses.StyleableStageText.selectRange()</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCapitalize:get"><apiName>autoCapitalize</apiName><shortdesc>
      ソフトキーボードの大文字使用の動作方法を示すヒントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ソフトキーボードの大文字使用の動作方法を示すヒントです。 
           <p>サポートされている値は、flash.text.AutoCapitalize に次のように定義されています。</p>
     
      <ul>
          <li><codeph>"none"</codeph> - 自動的に大文字にはしません</li>
          <li><codeph>"word"</codeph> - 空白または句読点の後の最初の英文字を大文字にします</li>
          <li><codeph>"sentence"</codeph> - ピリオドの後の最初の英文字を大文字にします</li>
          <li><codeph>"all"</codeph> - すべての英文字を大文字にします</li>
      </ul>
           <p><b>Spark テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AutoCapitalize.xml"><linktext>flash.text.AutoCapitalize</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCorrect:get"><apiName>autoCorrect</apiName><shortdesc>
      ソフトキーボードで自動訂正機能がサポートされている場合に、それを使用するかどうかを示すヒントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ソフトキーボードで自動訂正機能がサポートされている場合に、それを使用するかどうかを示すヒントです。
      <p><b>Spark テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:editable:get"><apiName>editable</apiName><shortdesc>
      テキストを編集可能にするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      テキストを編集可能にするかどうかを指定します。
     
      <p><b>Spark テーマの場合、spark.components.RichEditableText.editable を参照してください</b></p>
           <p><b>Mobile テーマの場合、spark.components.supportClasses.StyleableStageText.editable を参照してください</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/editable"><linktext>spark.components.RichEditableText.editable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/editable"><linktext>spark.components.supportClasses.StyleableStageText.editable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。
     
      <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/enableIME"><linktext>spark.components.RichEditableText.enableIME</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      IME（入力メソッドエディター）のモードを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      IME（入力メソッドエディター）のモードを指定します。
     
      <p><b>Spark テーマの場合、spark.components.RichEditableText.imeMode を参照してください</b></p>
           <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/imeMode"><linktext>spark.components.RichEditableText.imeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:prompt:get"><apiName>prompt</apiName><shortdesc>
      実際のテキストプロパティが空の文字列の場合に表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      実際のテキストプロパティが空の文字列の場合に表示されるテキストです。
     
      <p>テキストコントロールが最初に作成されるとプロンプトテキストが表示されます。コントロールがフォーカスを得た場合またはコントロールの <codeph>text</codeph> プロパティが空でない文字列の場合に、プロンプトテキストは非表示になります。コントロールがフォーカスを失ったが、テキストが入力されていない（テキストフィールドの値が空の文字列である）場合にのみ、プロンプトテキストが再表示されます。</p>
      
      <p>テキストコントロールの場合は、ユーザーがテキストを入力した後に削除すると、コントロールがフォーカスを失ったときに、プロンプトテキストが再表示されます。テキストコントロールのテキストプロパティをプログラムで空の文字列に設定して、プロンプトテキストを再表示することもできます。</p>
      
      <p>プロンプトテキストのスタイルは CSS で変更できます。コントロールにプロンプトテキストがあり、無効になっていない場合は、<codeph>normalWithPrompt</codeph> 擬似セレクターによってスタイルが定義されます。コントロールが無効になっている場合は、<codeph>disabledWithPrompt</codeph> 擬似セレクターによって定義されたスタイルが使用されます。</p>
      
      <p>次の CSS の例では、SkinnableTextBase（これには Spark の TextInput および TextArea コントロールが含まれます）をサブクラス化するコントロール内のプロンプトテキストのカラーが変更されています。
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|SkinnableTextBase:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:returnKeyLabel:get"><apiName>returnKeyLabel</apiName><shortdesc>
      ソフトキーボードの Return キーにどのラベルを表示するかを示すヒントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ソフトキーボードの Return キーにどのラベルを表示するかを示すヒントです。
           <p>サポートされている値は、flash.text.ReturnKeyLabel に次のように定義されています。</p>
     
      <ul>
          <li><codeph>"default"</codeph> - デフォルトのアイコンまたはラベルテキスト</li>
          <li><codeph>"done"</codeph> - テキスト入力の完了を示すアイコンまたはラベルテキスト</li>
          <li><codeph>"go"</codeph> - アクションを開始する必要があることを示すアイコンまたはラベルテキスト</li>
          <li><codeph>"next"</codeph> - 次のフィールドへの移動を示すアイコンまたはラベルテキスト</li>
          <li><codeph>"search"</codeph> - 入力したテキストを検索する必要があることを示すアイコンまたはラベルテキスト</li>
      </ul>
           <p><b>Spark テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.ReturnKeyLabel.xml"><linktext>flash.text.ReturnKeyLabel</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectable:get"><apiName>selectable</apiName><shortdesc>
      コンテンツが選択可能かどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテンツが選択可能かどうかを示すフラグです。デスクトップでは、コントロールにキーボードフォーカスがあるときに、ユーザーがマウスやキーボードでコンテンツを選択できます。タッチ操作のデバイスでは、テキストコンポーネントの選択モードに入ったら、ユーザーは指でテキストを選択できます。
     
      <p><b>Spark テーマの場合、spark.components.RichEditableText.selectable を参照してください</b></p>
           <p><b>Mobile テーマの場合、spark.components.supportClasses.StyleableStageText.selectable を参照してください</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectable"><linktext>spark.components.supportClasses.StyleableStageText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      矢印キーで選択範囲が拡張されるときに移動する選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      矢印キーで選択範囲が拡張されるときに移動する選択範囲の端を示す文字位置（<codeph>text</codeph> String の先頭を基準とした相対位置）です。
     
      <p><b>Spark テーマの場合、spark.components.RichEditableText.selectionActivePosition を参照してください</b></p>
           <p><b>Mobile テーマの場合、spark.components.supportClasses.StyleableStageText.selectionActivePosition を参照してください</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionActivePosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      矢印キーで選択範囲が拡張されるときに固定されている選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      矢印キーで選択範囲が拡張されるときに固定されている選択範囲の端を示す文字位置（<codeph>text</codeph> String の先頭を基準とした相対位置）です。
     
      <p><b>Spark テーマの場合、spark.components.RichEditableText.selectionAnchorPosition を参照してください</b></p>
           <p><b>Mobile テーマの場合、spark.components.supportClasses.StyleableStageText.selectionAnchorPosition を参照してください</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionAnchorPosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
      テキストの選択範囲をハイライト表示するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
     
      </apiDefaultValue></apiValueDef><apiDesc>
      テキストの選択範囲をハイライト表示するかどうかを決定します。
     
      <p><b>Spark テーマの場合、spark.components.RichEditableText.selectionHighlighting を参照してください</b></p>
           <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionHighlighting"><linktext>spark.components.RichEditableText.selectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:softKeyboardType:get"><apiName>softKeyboardType</apiName><shortdesc>
      このコンポーネントに表示するソフトキーボードの種類を示すヒントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンポーネントに表示するソフトキーボードの種類を示すヒントです。
           <p>サポートされている値は、flash.text.SoftKeyboardType に次のように定義されています。</p>
     
      <ul>
          <li><codeph>"default"</codeph> - デフォルトキーボード</li>
          <li><codeph>"punctuation"</codeph> - キーボードを句読点 / 記号入力モードにします</li>
          <li><codeph>"url"</codeph> -「.com」を挿入するために特化したキーなどの URL 入力に適したソフトキーを表示します</li>
          <li><codeph>"number"</codeph> - キーボードを数値キーパッドモードにします</li>
          <li><codeph>"contact"</codeph> - キーボードを連絡先情報の入力に適したモードにします</li>
          <li><codeph>"email"</codeph> - キーボードを電子メールアドレス入力モードにします。このモードでは、アットマークや「.com」を入力しやすくなります</li>
      </ul>
           <p><b>Spark テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.SoftKeyboardType.xml"><linktext>flash.text.SoftKeyboardType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:text:get"><apiName>text</apiName><shortdesc>
      このテキストコンポーネントによって表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このテキストコンポーネントによって表示されるテキストです。
     
      <p><b>Spark テーマの場合、spark.components.RichEditableText.text を参照してください</b></p>
           <p><b>Mobile テーマの場合、spark.components.supportClasses.StyleableStageText#text を参照してください</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/text"><linktext>spark.components.supportClasses.StyleableStageText.text</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:typicalText:get"><apiName>typicalText</apiName><shortdesc>
      コントロールのデフォルトの幅と高さを決定するために使用されるテキストであり、実際には表示されません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      コントロールのデフォルトの幅と高さを決定するために使用されるテキストであり、実際には表示されません。
     
      <p><b>Spark テーマの場合、spark.components.RichEditableText.typicalText を参照してください</b></p>
           <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/typicalText"><linktext>spark.components.RichEditableText.typicalText</linktext></link></related-links></apiValue></apiClassifier></apiPackage>