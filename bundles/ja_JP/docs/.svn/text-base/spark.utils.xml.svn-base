<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.utils"><apiName>spark.utils</apiName><apiDetail/><apiClassifier id="spark.utils:TextFlowUtil"><apiName>TextFlowUtil</apiName><shortdesc>
  TextFlowUtil は、Text Layout Framework で使用されるマークアップ言語から TextFlow をインポートしたり、マークアップ言語に TextFlow をエクスポートしたりするためのメソッドを提供するユーティリティクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextFlowUtil は、Text Layout Framework で使用されるマークアップ言語から TextFlow をインポートしたり、マークアップ言語に TextFlow をエクスポートしたりするためのメソッドを提供するユーティリティクラスです。
  
  </apiDesc></apiClassifierDetail><apiOperation id="spark.utils:TextFlowUtil:export"><apiName>export</apiName><shortdesc>
      Text Layout Framework で使用されるマークアップ言語に XML の形式で TextFlow をエクスポートします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Text Layout Framework マークアップ言語を含む XML です。
      
      </apiDesc><apiType value="XML"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiType value="flashx.textLayout.elements:TextFlow"/><apiDesc>Text Layout Framework マークアップ言語にエクスポートする TextFlow です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Text Layout Framework で使用されるマークアップ言語に XML の形式で TextFlow をエクスポートします。
     
      <p>エクスポートされる XML のルートタグです。
      <pre>
      &lt;TextFlow xmlns="http://ns.adobe.com/textLayout/2008" ...>
      </pre>
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.utils:TextFlowUtil:importFromString"><apiName>importFromString</apiName><shortdesc>
      Text Layout Framework で使用されるマークアップ言語を含むストリングをインポート（つまり解析）することで TextFlow を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>マークアップから作成される新しい TextFlow インスタンスです。
      
      </apiDesc><apiType value="flashx.textLayout.elements:TextFlow"/></apiReturn><apiParam><apiItemName>markup</apiItemName><apiType value="String"/><apiDesc>インポートするマークアップストリングです。
     
      </apiDesc></apiParam><apiParam><apiItemName>whiteSpaceCollapse</apiItemName><apiType value="String"/><apiData>collapse</apiData><apiDesc>マークアップ内の空白を除去するか維持するかを示すストリングです。有効な値は、flashx.textLayout.formats.WhiteSpaceCollapse クラスの <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> および <codeph>WhiteSpaceCollapse.PRESERVE</codeph> です。デフォルト値は <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Text Layout Framework で使用されるマークアップ言語を含むストリングをインポート（つまり解析）することで TextFlow を作成します。
      
      <p>マークアップストリングの例は次のとおりです。
      <pre>
      "&lt;TextFlow xmlns='http://ns.adobe.com/textLayout/2008'>
      <p><ph>Hello, </ph><ph fontWeight="bold">World!</ph></p>&lt;/TextFlow>"
      </pre>
      </p>
     
      <p>ただし、次のようなより簡潔なマークアップを使用できます。
      <pre>"Hello, <ph fontWeight="bold">World!</ph>"</pre> TextFlow タグで適切な名前空間内にラップされ、TextFlow の構造に準拠するために必要な位置に span および paragraph タグが自動的に挿入されます。</p>
     
      <p>TextFlow タグを自分で指定する場合は、ランタイム Text Layout Framework マークアップの正しい XML 名前空間である <codeph>"http://ns.adobe.com/textLayout/2008"</codeph> 内に指定する必要があります。</p>
     
      <p>マークアップが正しくないと、このメソッドからさまざまな例外が発生します。エラーメッセージには、マークアップを解析できない理由についての情報が含まれます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.utils:TextFlowUtil:importFromXML"><apiName>importFromXML</apiName><shortdesc>
      Text Layout Framework で使用されるマークアップ言語を含む XML をインポート（解析）することで TextFlow を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>マークアップから作成される新しい TextFlow インスタンスです。
      
      </apiDesc><apiType value="flashx.textLayout.elements:TextFlow"/></apiReturn><apiParam><apiItemName>markup</apiItemName><apiType value="XML"/><apiDesc>インポートするマークアップ XML です。
     
      </apiDesc></apiParam><apiParam><apiItemName>whiteSpaceCollapse</apiItemName><apiType value="String"/><apiData>collapse</apiData><apiDesc>マークアップ内の空白を除去するか維持するかを示すストリングです。有効な値は、flashx.textLayout.formats.WhiteSpaceCollapse クラスの <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> および <codeph>WhiteSpaceCollapse.PRESERVE</codeph> です。デフォルト値は <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Text Layout Framework で使用されるマークアップ言語を含む XML をインポート（解析）することで TextFlow を作成します。
      
      <p>マークアップ XML の例は次のとおりです。
      <pre>
      &lt;TextFlow xmlns='http://ns.adobe.com/textLayout/2008'>
        <p><ph>Hello, </ph><ph fontWeight="bold">World!</ph></p>
      &lt;/TextFlow>
      </pre>
      </p>
     
      <p>次のようなより簡潔なマークアップを使用することもできます。
      <pre>
      "Hello, &lt;span fontWeight='bold'>World!&lt;/span>"
      </pre>
      パーサーは適切な名前空間の <codeph>&lt;TextFlow></codeph> タグでマークアップをラップします。また、パーサーは、TextFlow オブジェクトの構造に従う必要がある場所に &lt;span> タグと &lt;paragraph> タグを挿入します。</p>
     
      <p>TextFlow タグを自分で指定する場合は、ランタイム Text Layout Framework マークアップの正しい XML 名前空間である <codeph>"http://ns.adobe.com/textLayout/2008"</codeph> 内に指定する必要があります。</p>
     
      <p>マークアップが正しくないと、このメソッドから様々な例外が発生します。エラーメッセージには、マークアップを解析できない理由についての情報が含まれます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.utils:LabelUtil"><apiName>LabelUtil</apiName><shortdesc>
  LabelUtil クラスは、レンダラーまたは下位要素に対して表示する正しいテキストを決定するために、コンポーネントによって使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  LabelUtil クラスは、レンダラーまたは下位要素に対して表示する正しいテキストを決定するために、コンポーネントによって使用されます。 
  
  </apiDesc></apiClassifierDetail><apiOperation id="spark.utils:LabelUtil:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      アイテムレンダラーがデータアイテムに対して表示する正しいテキストを決定するために、アイテムレンダラーをサポートするコンポーネントで使用される関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>データアイテムのストリング表現です。 
     
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>データアイテムです。 null アイテムは空のストリングを返します。 
     
      </apiDesc></apiParam><apiParam><apiItemName>labelField</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>返すデータアイテムのフィールドです。labelField が空のストリング（""）に設定された場合、データアイテムのフィールドはラベルを表すものとして考慮されません。
     
      </apiDesc></apiParam><apiParam><apiItemName>labelFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>1 つのパラメーターとしてデータアイテムを取り、ストリングを返す関数です。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムレンダラーがデータアイテムに対して表示する正しいテキストを決定するために、アイテムレンダラーをサポートするコンポーネントで使用される関数です。<codeph>labelField</codeph> または <codeph>labelFunction</codeph> パラメーターが指定されていない場合は、データアイテムの <codeph>toString()</codeph> メソッドが呼び出されて、データアイテムのストリング表現が返されます。
      
      <p><codeph>labelFunction</codeph> プロパティは、関数への参照を受け取ります。この関数は、データプロバイダー内のアイテムである引数を 1 つ受け取り、ストリングを返します。</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.utils:BitmapUtil"><apiName>BitmapUtil</apiName><shortdesc>
  このクラスは、ビットマップ関連のユーティリティ関数を提供します。 
  
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  このクラスは、ビットマップ関連のユーティリティ関数を提供します。 
  
  </apiDesc></apiClassifierDetail><apiOperation id="spark.utils:BitmapUtil:getSnapshotWithPadding"><apiName>getSnapshotWithPadding</apiName><shortdesc>
      ターゲットオブジェクトの BitmapData 表現を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc><codeph>target</codeph> オブジェクト、およびすべての子オブジェクトが呼び出し元と同じドメインに属していないか、<codeph>Security.allowDomain()</codeph> メソッド呼び出し後に呼び出し元からアクセスできるコンテンツに含まれていません。
           </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiDesc>イメージを含む BitmapData オブジェクトです。
           </apiDesc><apiType value="flash.display:BitmapData"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="mx.core:IUIComponent"/><apiDesc>結果の BitmapData でキャプチャするオブジェクトです。
     
      </apiDesc></apiParam><apiParam><apiItemName>padding</apiItemName><apiType value="int"/><apiData>4</apiData><apiDesc>ビットマップに含められるターゲットの周りのピクセル単位のパディングです。
           </apiDesc></apiParam><apiParam><apiItemName>propagateColorTransform</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>true の場合、ターゲットのカラー変換はビットマップキャプチャ操作に適用されます。 
       
      </apiDesc></apiParam><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>null でない場合、この Rectangle に、オブジェクトそのものを基準にオブジェクトの境界が表示されます。
        
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ターゲットオブジェクトの BitmapData 表現を作成します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.utils:BitmapUtil:getSnapshot"><apiName>getSnapshot</apiName><shortdesc>
      ターゲットオブジェクトの BitmapData 表現を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc><codeph>target</codeph> オブジェクト、およびすべての子オブジェクトが呼び出し元と同じドメインに属していないか、<codeph>Security.allowDomain()</codeph> メソッド呼び出し後に呼び出し元からアクセスできるコンテンツに含まれていません。
           </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiDesc>イメージを含む BitmapData オブジェクトです。
           </apiDesc><apiType value="flash.display:BitmapData"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="mx.core:IUIComponent"/><apiDesc>結果の BitmapData でキャプチャするオブジェクトです。  
      </apiDesc></apiParam><apiParam><apiItemName>visibleBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>null でない場合、この Rectangle に、オブジェクトそのものを基準にオブジェクトの境界が表示されます。   
      </apiDesc></apiParam><apiParam><apiItemName>propagateColorTransform</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>true の場合、ターゲットのカラー変換はビットマップキャプチャ操作に適用されます。 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      ターゲットオブジェクトの BitmapData 表現を作成します。
           </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.utils:DataItem"><apiName>DataItem</apiName><shortdesc>
  DataItem クラスは、バインド可能なプロパティが設定された動的オブジェクトを表しています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>mx.utils:ObjectProxy</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataItem クラスは、バインド可能なプロパティが設定された動的オブジェクトを表しています。つまり、Flex のデータバインディングメカニズムでは、実行時に DataItem のプロパティが変更されると、変更が認識されます。例えば、Spark の DataGrid アイテムレンダラーは、コントロールのデータプロバイダーのアイテムのプロパティに対するデータバインディングを利用して動作します。実行時にプロパティが変更されると、データバインディングによってそれが認識され、アイテムレンダラーが自動的に更新します。
 
  <p>このクラスは、バインド可能なプロパティを持たせる必要のあるオブジェクトリテラルを MXML で定義するときに使用します。このクラスは主に、データにバインドするアイテムレンダラーがある小さなアプリケーションや例の MXML ファイル内で、List または DataGrid データプロバイダーアイテムを定義するときに使用されます。重要なアプリケーションやパフォーマンスが問題になるアプリケーションでは、厳密に型指定したプロパティの固定のセットで <codeph>[Bindable]</codeph> クラスを定義し、そのクラスを使用してデータプロバイダーアイテムを定義する必要があります。</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.utils:DataItem:DataItem"><apiName>DataItem</apiName><shortdesc>
      コンストラクター
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクター
     
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.utils:MultiDPIBitmapSource"><apiName>MultiDPIBitmapSource</apiName><shortdesc>
  このクラスは、様々なランタイム密度のビットマップのリストを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  このクラスは、様々なランタイム密度のビットマップのリストを提供します。これは BitmapImage または Image のソースおよび Button のアイコンとして提供されます。このコンポーネントは、どのイメージを表示するかを Application.runtimeDPI を使用して選択します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="spark.utils:MultiDPIBitmapSource:getSource"><apiName>getSource</apiName><shortdesc>
      指定された DPI に基づき、sourceXXXdpi プロパティの 1 つを選択します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>必要な DPI に基づく sourceXXXdpi プロパティの 1 つです。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>desiredDPI</apiItemName><apiType value="Number"/><apiDesc>必要な DPI です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された DPI に基づき、sourceXXXdpi プロパティの 1 つを選択します。この関数は、指定されたプロパティが null の場合に、他の sourceXXXdpi プロパティへのフォールバックを処理します。フォールバックの方針は、次に高いプロパティが null でなければそれを選択、その次が、下位のプロパティが null でなければそれを返す、その次が、単に null を返すです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.utils:MultiDPIBitmapSource:source160dpi"><apiName>source160dpi</apiName><shortdesc>
      Application.runtimeDPI が DPIClassification.DPI_160 の場合に使用するソースです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      <codeph>Application.runtimeDPI</codeph> が <codeph>DPIClassification.DPI_160</codeph> の場合に使用するソースです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.utils:MultiDPIBitmapSource:source240dpi"><apiName>source240dpi</apiName><shortdesc>
      Application.runtimeDPI が DPIClassification.DPI_240 の場合に使用するソースです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      <codeph>Application.runtimeDPI</codeph> が <codeph>DPIClassification.DPI_240</codeph> の場合に使用するソースです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.utils:MultiDPIBitmapSource:source320dpi"><apiName>source320dpi</apiName><shortdesc>
      Application.runtimeDPI が DPIClassification.DPI_320 の場合に使用するソースです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      <codeph>Application.runtimeDPI</codeph> が <codeph>DPIClassification.DPI_320</codeph> の場合に使用するソースです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>