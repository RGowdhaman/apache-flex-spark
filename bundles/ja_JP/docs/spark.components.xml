<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
  DataRenderer クラスは、Spark のデータコンポーネントの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:DataRenderer
    <strong>Properties</strong>
    data=""
  
    <strong>Events</strong>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataRenderer クラスは、Spark のデータコンポーネントの基本クラスです。 
 
  <p><b>注意：</b>このクラスは今後のリリースで削除される可能性があります。</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:DataRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataRenderer:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DataRenderer:data:get"><apiName>data</apiName><shortdesc>
      IDataRenderer インターフェイスによって定義された data プロパティの実装です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      IDataRenderer インターフェイスによって定義された <codeph>data</codeph> プロパティの実装です。
      
      <p>このプロパティは Bindable です。これにより、「dataChange」イベントが送出されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TextArea"><apiName>TextArea</apiName><shortdesc>
  TextArea は、ユーザーが複数行のフォーマットテキストを入力および編集するときに使用するテキスト入力コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:verticalScrollPolicy">
  どのような条件で垂直スクロールバーを表示するかを指定します。
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:horizontalScrollPolicy">
  どのような条件で水平スクロールバーを表示するかを指定します。
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:TextArea" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="scroller" owner="spark.components:TextArea" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      スキンに含まれるオプションの Scroller です。RichEditableText をスクロールするために使用します。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller in the skin,
      used to scroll the RichEditableText.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextArea&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextArea
    <strong>Properties</strong>
    heightInLines="<i>Calculated default</i>"  <b>[Spark theme only]</b>
    textFlow="<i>TextFlow</i>"  <b>[Spark theme only]</b>
    typicalText=null  <b>[Spark theme only]</b>
    widthInChars="<i>Calculated default</i>"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    horizontalScrollPolicy="auto"  <b>[Spark theme only]</b>
    symbolColor=""
    verticalScrollPolicy="auto"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextArea は、ユーザーが複数行のフォーマットテキストを入力および編集するときに使用するテキスト入力コントロールです。
   <p><b>Spark テーマのスキンは RichEditableText クラスを使用します。つまり、Spark の TextArea コントロールは、Flash Text Engine（FTE）上に構築される Text Layout Framework（TLF）ライブラリをサポートしています。</b>これらのレイヤーを組み合わせることにより、国際化対応の高品質な文字体裁とレイアウト機能を備えたテキスト編集が可能になります。このスキンには、テキストをスクロールするための水平方向と垂直方向のスクロールバーを表示し、マウスホイールによる垂直スクロールをサポートするスクローラーが含まれています。RichEditableText には <codeph>textDisplay</codeph> としてアクセスでき、Scroller には <codeph>scroller</codeph> としてアクセスできます。</p>
  
  <p><b>モバイルテーマのスキンは StyleableStageText クラスを使用します。</b> StyleableStageText はネイティブテキストフィールドを使用するので、モバイルデバイス上のテキストの入力および操作がしやすくなりますが、いくつかの<xref href="supportClasses/StyleableStageText.html">制限および相違</xref>を考慮する必要があります。 StageText にはテキスト測定機能がないので、TextArea に、パーセントベースまたは制約ベースの <codeph>width</codeph> および <codeph>height</codeph> を明示的に指定する必要があります。StyleableStageText には <codeph>textDisplay</codeph> としてアクセスできます。 StageText ベースではなく TextField ベースのスキンを使用する場合は、<codeph>skinClass</codeph> プロパティを「<codeph>spark.skins.mobile.TextAreaSkin</codeph>」に設定します。</p>
   <p><codeph>text</codeph> プロパティを使用すると、表示するテキストを設定したり、ユーザーが入力したテキストを取得したりできます。</p>
   <p>テキストのフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> などの CSS スタイルを使用して設定されます。</p>
   <p>Spark テーマの場合は、<codeph>widthInChars</codeph> および <codeph>heightInLines</codeph> プロパティで、フォントサイズに合わせて拡大 / 縮小するように TextArea の幅および高さを指定するか、<codeph>typicalText</codeph> プロパティを使用できます。<codeph>typicalText</codeph> を使用する場合、<codeph>widthInChars</codeph> および <codeph>heightInLines</codeph> プロパティは無視されることに注意してください。 また、すべてのテーマで、幅や高さを明示的にピクセル単位で指定したり、パーセントで指定したり、<codeph>left</codeph> と <codeph>right</codeph> や <codeph>top</codeph> と <codeph>bottom</codeph> などの制約を使用することもできます。</p>
   <p><codeph>maxChars</codeph> プロパティを使用して、ユーザーが入力できる文字数を制限したり、<codeph>restrict</codeph> を使用して、ユーザーが入力できる文字を制限したりすることもできます。パスワード入力用にこのコントロールを使用するには、<codeph>displayAsPassword</codeph> プロパティを <codeph>true</codeph> に設定します。</p>
   <p>モバイルテーマの場合、ソフトキーボード固有のプロパティである、<codeph>autoCapitalize</codeph>、<codeph>autoCorrect</codeph>、<codeph>returnKeyLabel</codeph> および <codeph>softKeyboardType</codeph> プロパティでキーボードヒントを指定します。 ソフトキーボードは存在するが、ヒントで表される機能をサポートしない場合は、ヒントが無視されます。ハードウェアキーボードのみのモバイル環境では、これらのヒントが無視されます。 
  </p>
  
  <p><b>Spark テーマのテキスト領域</b></p>
 
  <p>Spark の TextArea と MX の TextArea コントロールの最も重要な違いは、次のとおりです。
  <ul>
    <li>Spark の TextArea では、文字体裁、国際言語のサポート、およびテキストレイアウトの機能が向上しています。</li>
    <li>Spark の TextArea にはリッチテキストのオブジェクト指向モデルがありますが、MX 版にはありません。</li>
    <li>Spark の TextArea では、大量のテキストを表示する機能が強化されています。</li>
    <li>Spark の TextArea では、MX 版とは異なる方法でフォントを埋め込む必要があります。フォントを埋め込む際に <codeph>embedAsCFF</codeph> 属性を使用する方法については、フォントのマニュアルを参照してください。</li>
  </ul></p>
   <p>Spark の TextArea コンロールでは、リッチテキストの TLF オブジェクト指向モデルが使用されます。このモデルでは、区分、段落、スパン、ハイパーリンク、画像などのテキストレイアウト要素が ActionScript オブジェクトによって実行時に表現されます。これらのオブジェクトは、プログラムを通じてアクセスして操作できます。リッチテキストを表す TLF の中心的なオブジェクトは TextFlow です。TextArea コントロールに対してリッチテキストを指定するには、コントロールの <codeph>textFlow</codeph> プロパティを TextFlow インスタンスに設定します。</p>
 
  <p>複数のフォーマットが混在するテキストを表示する必要がない場合は、TextArea の <codeph>text</codeph> プロパティをプレーンテキスト文字列に設定します。<codeph>text</codeph> プロパティと <codeph>textFlow</codeph> プロパティの相互作用（例えば、一方を設定して他方を取得する方法など）について詳しくは、各プロパティの説明を参照してください。</p>
   <p>次の例に示すように、コンパイル時に、TLF マークアップタグを TextArea タグ内に配置できます。
  <pre>
  &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:TextArea>
  </pre>
  この例では、MXML コンパイラーによって TextArea の <codeph>content</codeph> プロパティが設定され、指定した FlowElements から TextFlow オブジェクトが作成されます。</p>
   <p>TextArea コントロールには、テキストのフォーマットを変更するためのユーザーインターフェイスはありませんが、プログラムを通じてテキストをフォーマットするために使用できる API が含まれています。例えば、クリックすると、選択したテキストが太字になるようなボタンを作成できます。</p>
   <p>デフォルトのテキストフォーマットは、<xref href="supportClasses/SkinnableTextBase.html#style:fontFamily">fontFamily</xref> や <xref href="supportClasses/SkinnableTextBase.html#style:fontSize">fontSize</xref> などの CSS スタイルによって決定されます。TextFlow オブジェクトでフォーマット情報が指定されている場合は、CSS スタイルで指定されているデフォルトのフォーマットがオーバーライドされます。</p>
   <p>TextArea コンテンツの特性には、スタイルを使用して制御できるものが数多くあります。次に一般的な特性の一部を示します。</p>
   <ul><li>行の間隔は <codeph>lineHeight</codeph> スタイルを使用して制御します。</li>
  <li>段落の間隔は <codeph>paragraphSpaceBefore</codeph> スタイルと <codeph>paragraphSpaceAfter</codeph> スタイルを使用して制御します。</li>
  <li>テキストの整列や均等割り付けには、<codeph>textAlign</codeph> スタイルと <codeph>textAlignLast</codeph> スタイルを使用します。</li>
  <li>コントロールの境界線からテキストまでのインセットを指定するには、<codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph>、および <codeph>paddingBottom</codeph> スタイルを使用します。</li>
  </ul>
   <p>デフォルトでは、コントロールの右端でテキストが折り返されます。テキストの量が TextArea に収まりきらない場合は、垂直スクロールバーが自動的に表示されます。<codeph>lineBreak</codeph> スタイルを <codeph>explicit</codeph> に設定すると、明示的に改行が指定されている位置でのみ行が折り返されます。これには、CR（<codeph>¥r</codeph>）、LF（<codeph>¥n</codeph>）または CR+LF（<codeph>¥r¥n</codeph>）を <codeph>text</codeph> で使用した場合、または <codeph>&lt;p></codeph> と <codeph>&lt;br/></codeph> を TLF マークアップで使用した場合と同じ効果があります。これらの場合、コントロールの幅を超えるテキスト行があるときは、水平スクロールバーが自動的に表示されます。</p>
    <p>Spark の TextArea では、フランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>rtl</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>start</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>ltr</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>rtl</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>end</codeph> に設定します。</p>
   <p>Spark の TextArea では、1 回の編集セッション内で取り消し / やり直し操作を何度でも実行できます。編集セッションは、コントロールがキーボードフォーカスを取得したときに開始され、コントロールがフォーカスを失ったときに終了します。</p>
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
   <p>Spark テーマの場合、TextArea コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 188 ピクセル、高さ 149 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 36 ピクセル、高さ 36 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.TextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>Mobile テーマの場合、TextArea コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.mobile.StageTextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea/text"><linktext>text</linktext></link><link href="spark.components.xml#TextArea/textFlow"><linktext>textFlow</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextAreaSkin.xml"><linktext>spark.skins.mobile.StageTextAreaSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextAreaSkin.xml"><linktext>spark.skins.mobile.TextAreaSkin</linktext></link><link href="spark.skins.spark.xml#TextAreaSkin"><linktext>spark.skins.spark.TextAreaSkin</linktext></link></related-links><apiConstructor id="spark.components:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TextArea:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>TextLayoutFormat オブジェクトです。
          
          </apiDesc></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>要求するフォーマットの名前を指定する String の Vector です。すべてのフォーマットを要求する場合は、<codeph>null</codeph> を指定します。
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>選択範囲の固定されている端を指定する文字の位置です。
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>選択範囲の移動可能な端を指定する文字の位置です。
                   </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="spark.components.RichEditableText#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>選択範囲に適用する TextLayoutFormat です。
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>矢印キーで選択範囲が拡張されるときに固定されている選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>矢印キーで選択範囲が拡張されるときに移動する選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TextArea:content:get"><apiName>content</apiName><shortdesc>
      このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時にリッチテキストコンテンツを取得または設定するには、代わりに textFlow プロパティを使用してください。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時にリッチテキストコンテンツを取得または設定するには、代わりに <codeph>textFlow</codeph> プロパティを使用してください。リッチテキストコンテンツは Object ではなく TextFlow として厳密に型指定されているので、実行時のリッチテキストコンテンツの取得と設定には <codeph>textFlow</codeph> プロパティを使用することをお勧めします。TextFlow は、Text Layout Framework 内のリッチテキストコンテンツの正準表現です。
           <p><codeph>content</codeph> プロパティは、次の例のような MXML を記述できるように、TextArea のデフォルトプロパティになっています。
      <pre>
      &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World&lt;/s:span>&lt;/s:TextArea>
      </pre>
      この例では、コンテンツとして指定した String と SpanElement を使用して TextFlow が作成されます。</p>
           <p>このプロパティは Object として型指定されています。Object は、String、FlowElement、または String と FlowElement の配列に設定できます。上記の例では、2 つのエレメントで構成される配列がコンテンツになります。最初の配列エレメントは「Hello」という String です。2 番目の配列エレメントは、太字の「World」というテキストを含む SpanElement オブジェクトです。</p>
     
      <p>コンテンツの指定方法にかかわらず、コンテンツは TextFlow オブジェクトに変換されます。このプロパティの値を取得すると、変換後の TextFlow オブジェクトが取得されます。</p>
     
      <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
      行数で表したコントロールのデフォルトの高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      行数で表したコントロールのデフォルトの高さです。
           <p>Spark テーマの場合、<b>spark.components.RichEditableText.heightInLines</b> を参照してください</p>
           <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/heightInLines"><linktext>spark.components.RichEditableText.heightInLines</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      このコンポーネントで表示されるリッチテキストを表す TextFlow です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンポーネントで表示されるリッチテキストを表す TextFlow です。
           <p>Spark テーマの場合、<b>spark.components.RichEditableText.textFlow</b> を参照してください</p>
           <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      em 単位で測定されたコントロールのデフォルトの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      em 単位で測定されたコントロールのデフォルトの幅です。
           <p>Spark テーマの場合、<b>spark.components.RichEditableText.widthInChars</b> を参照してください</p>
           <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Grid"><apiName>Grid</apiName><shortdesc>
  Grid コントロールは、データプロバイダーを呼び出したデータアイテムのリストを、スクロール可能なテーブルつまり「グリッド」に 1 行に 1 アイテムずつ表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Grid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Grid 
    <strong>Properties</strong>
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Grid コントロールは、<i>データプロバイダー</i>を呼び出したデータアイテムのリストを、スクロール可能なテーブルつまり「グリッド」に 1 行に 1 アイテムずつ表示します。GridColumn オブジェクトで定義されるグリッドの各列には、対応する行のアイテムに基づく値が表示されます。Grid のデータプロバイダーは変更可能、つまりアイテムを追加、削除または変更できます。同様に列のリストも変更可能です。
 
  <p>Grid コンポーネントは、DataGrid のスキンパーツまたはその他のカスタム複合コンポーネントのエレメントとして使用されるように意図されています。そのため、スキナブルではなく、スクローラーやスクロールバーもなく、マウスやキーボードのイベントのデフォルト処理も用意されていません。</p>
 
  <p>表示可能な Grid の各<i>セル</i>は <codeph>itemRenderer</codeph> プロパティを使用して作成される GridItemRenderer インスタンスによって表示されます。各列のアイテムレンダラーを指定します。各アイテムレンダラーは、表示され前に、その行のデータプロバイダーアイテムの値で設定されます。アイテムレンダラーは必要に応じて作成されるので、作成オーバーヘッドを最小限に抑えるために、プールとリサイクルが行われます。</p>
 
  <p>Grid コントロールは、<codeph>selectionMode</codeph> プロパティに従って、選択をサポートします。選択された行インデックスやセルインデックスのセットは、<codeph>setSelectedIndex</codeph> や <codeph>selectionContainsIndex()</codeph> のような選択メソッドを使用してプログラムで変更または照会できます。</p>
 
  <p>Grid コントロールは、<codeph>selectionMode</codeph> プロパティおよび <codeph>hoverRowIndex</codeph> や <codeph>columnRowIndex</codeph> などの対応する行インデックスや列インデックスのプロパティに基づいて、ホバー、キャレットおよび選択範囲のインジケーターを表示します。 インジケーターには、任意のビジュアルエレメントを使用できます。IGridVisualElement を実装するインジケーターは、自分が使用されている行や列に応じて、自分を設定できます。</p>
 
  <p>Grid コントロールでは、スムーズスクロールがサポートされます。垂直方向と水平方向のスクロール位置によって、グリッドの表示部分のピクセル原点が定義され、グリッドのレイアウトには、使用可能なスペースを埋めるのに必要な数のセルアイテムレンダラーのみが表示されます。  </p>
 
  <p>Grid コントロールでは、アイテムレンダラーのコンテンツに基づいて、自身の高さを自動的に計算して高さが変化する行がサポートされます。 このサポートは、グリッドの<i>仮想化</i>と呼ばれます。これは（ピクセルの）スクロール位置から行インデックスと列インデックスへのマッピングが、通常はグリッドセルの推奨サイズに関する不完全な情報に基づいているためです。Grid では、ビューにスクロールされた行の高さの計算結果がキャッシュされ、1 つの <codeph>typicalItem</codeph> に基づいて残りが推測されます。</p>
 
  <p>DataGrid アイテムレンダラーのトランジションがサポートされていません。 GridItemRenderer クラスの <codeph>transitions</codeph> プロパティが無効化されているので、設定しても無視されます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links><adobeApiEvent id="spark.components:Grid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  キャレットが変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  キャレットが変更された後に送出されます。  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  セル上でマウスがダブルクリックされると送出されます。
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  セル上でマウスがダブルクリックされると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  セル上でマウスがクリックされると送出されます。
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  セル上でマウスがクリックされると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  グリッドセルからマウスが出ると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グリッドセルからマウスが出ると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  グリッドセルにマウスが入ると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グリッドセルにマウスが入ると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  グリッドセル上でマウスボタンが放されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グリッドセル上でマウスボタンが放されると送出されます。 ドラッグ操作中に、マウスが Grid 内になくても、マウスボタンが放されると、<codeph>gridMouseDown</codeph> イベントの後にも送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  ボタンが放される前にマウスが移動すると、gridMouseDown イベントの後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ボタンが放される前にマウスが移動すると、<codeph>gridMouseDown</codeph> イベントの後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  グリッドセル上でマウスボタンが押されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グリッドセル上でマウスボタンが押されると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Grid:Grid"><apiName>Grid</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Grid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_CELL または GridSelectionMode.MULTIPLE_CELLS の場合は、選択範囲にセルが追加されて、キャレットの位置がそのセルに設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>rowIndex</codeph> または <codeph>columnIndex</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、選択範囲にセルが追加されて、キャレットの位置がそのセルに設定されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p><codeph>rowIndex</codeph> は、選択されたセルを含むアイテムのデータプロバイダーのインデックスです。 <codeph>columnIndex</codeph> は、選択されたセルを含む列の <codeph>columns</codeph> のインデックスです。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc>
      selectionMode が GridSelectionMode.MULTIPLE_ROWS の場合は、選択範囲にこの行が追加されて、キャレットの位置がこの行に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>index</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、選択範囲にこの行が追加されて、キャレットの位置がこの行に設定されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p><codeph>rowIndex</codeph> は、選択されたセルを含むアイテムのデータプロバイダーのインデックスです。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:clearSelection"><apiName>clearSelection</apiName><shortdesc>
      selectionMode が GridSelectionMode.NONE でない場合は、選択されたすべての行とセルが削除されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>選択範囲が変更されている場合は <codeph>true</codeph>、以前に何も選択されていない場合は <codeph>false</codeph> です。
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.NONE</codeph> でない場合は、選択されたすべての行とセルが削除されます。キャレットを削除して、最初のアイテムにアンカーを設定します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc>
      必要に応じて、指定したセルが完全に表示されるように、verticalScrollPosition プロパティと horizontalScrollPosition プロパティを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>アイテムレンダラーのセルの 0 から始まる行インデックスです。列を指定するには -1 を指定します。
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>アイテムレンダラーのセルの 0 から始まる列インデックスです。行を指定するには -1 を指定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      必要に応じて、指定したセルが完全に表示されるように、<codeph>verticalScrollPosition</codeph> プロパティと <codeph>horizontalScrollPosition</codeph> プロパティを設定します。<codeph>rowIndex</codeph> が -1 であり、<codeph>columnIndex</codeph> が指定されている場合は、指定した列が表示されるように <codeph>horizontalScrollPosition</codeph> のみを調整します。 <codeph>columnIndex</codeph> が -1 であり、<codeph>rowIndex</codeph> が指定されている場合は、指定した行が表示されるように <codeph>verticalScrollPosition</codeph> のみを調整します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellAt"><apiName>getCellAt</apiName><shortdesc>
      指定されたグリッド座標にあるピクセルと重なるセルの行と列のインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>セルの位置または null です。 
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:CellPosition</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>グリッドを基準としたピクセルの x 座標です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>グリッドを基準としたピクセルの y 座標です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたグリッド座標にあるピクセルと重なるセルの行と列のインデックスを返します。 該当するセルが存在しない場合、null が返されます。
     
      <p>次のサンプル関数では、このメソッドを使用してグリッドセルの <codeph>dataField</codeph> の値を計算します。</p> 
      <pre>
      function getCellData(x:Number, y:Number):Object
      {
          var cell:CellPosition = getCellAt(x, y);
          if (!cell)
              return null;
          var GridColumn:column = grid.columns.getItemAt(cell.columnIndex);
          return grid.dataProvider.getItemAt(cell.rowIndex)[column.dataField];
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellBounds"><apiName>getCellBounds</apiName><shortdesc>
      指定されたセルの現在のピクセル境界を返すか、該当するセルが存在しない場合は null を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>セルのピクセル境界を表す <codeph>Rectangle</codeph> または null です。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行の 0 で始まるインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列の 0 で始まるインデックスです。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたセルの現在のピクセル境界を返すか、該当するセルが存在しない場合は null を返します。セル境界がグリッド座標で報告されます。
     
      <p>指定された行およびその行の前にあるすべての行に対するすべての列がビュー内にスクロールされていない場合、返される境界は、列のすべての <codeph>typicalItem</codeph> に基づく単なる近似値である可能性があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellX"><apiName>getCellX</apiName><shortdesc>
      指定されたセルの原点の X 座標を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたセルの原点の x 座標。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行の 0 で始まるインデックスです。
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列の 0 で始まるインデックスです。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたセルの原点の X 座標を返します。セルの境界全体が必要ではない場合、このメソッドは <codeph>getCellBounds().x</codeph> よりも効率的です。
     
      <p>指定された行およびその行の前にあるすべての行に対するすべての列がビュー内にスクロールされていない場合、返される値は、列のすべての <codeph>typicalItem</codeph> に基づく単なる近似値である可能性があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellY"><apiName>getCellY</apiName><shortdesc>
      指定されたセルの原点の Y 座標を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたセルの原点の y 座標。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行の 0 で始まるインデックスです。
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列の 0 で始まるインデックスです。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたセルの原点の Y 座標を返します。セルの境界全体が必要ではない場合、このメソッドは <codeph>getCellBounds().y</codeph> よりも効率的です。
     
      <p>指定された行およびその行の前にあるすべての行に対するすべての列がビュー内にスクロールされていない場合、返される値は、列のすべての <codeph>typicalItem</codeph> に基づく単なる近似値である可能性があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellsAt"><apiName>getCellsAt</apiName><shortdesc>
      rowIndex および columnIndex プロパティが、指定されたグリッド領域に重なるセルの行および列インデックスを指定する、CellPosition オブジェクトのベクトルを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>Vector.&lt;Object>([{rowIndex:0, columnIndex:0}, ...])</codeph> のようなオブジェクトのベクトルです。 
      
      </apiDesc><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>グリッドを基準とした、領域の原点にあるピクセルの x 座標です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>グリッドを基準とした、領域の原点にあるピクセルの x 座標です。 
     
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>領域の幅（ピクセル単位）です。 
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>領域の高さ（ピクセル単位）です。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>rowIndex</codeph> および <codeph>columnIndex</codeph> プロパティが、指定されたグリッド領域に重なるセルの行および列インデックスを指定する、CellPosition オブジェクトのベクトルを返します。該当するセルが存在しない場合、空のベクトルが返されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnBounds"><apiName>getColumnBounds</apiName><shortdesc>
      指定された列の現在のピクセル境界を返すか、該当する列が存在しない場合は null を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>列のピクセル境界を表す <codeph>Rectangle</codeph> または null です。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列の 0 で始まるインデックスです。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された列の現在のピクセル境界を返すか、該当する列が存在しない場合は null を返します。列境界がグリッド座標で報告されます。
     
      <p>指定された列内のすべてのセルがビュー内にスクロールされていない場合、返される境界は、列の <codeph>typicalItem</codeph> に基づく単なる近似値である可能性があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnIndexAt"><apiName>getColumnIndexAt</apiName><shortdesc>
      指定された座標に対応する列インデックスを返すか、座標が範囲外である場合は -1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>列のインデックスであるか、または座標が範囲外である場合は -1 です。 
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>グリッドを基準としたピクセルの x 座標です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>グリッドを基準としたピクセルの y 座標です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された座標に対応する列インデックスを返すか、座標が範囲外である場合は -1 を返します。座標はグリッドに関して解決されます。
     
      <p>グリッドのすべての列または行がビュー内にスクロールされていない場合、返されるインデックスは、列のすべての <codeph>typicalItem</codeph> に基づく単なる近似値である可能性があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnWidth"><apiName>getColumnWidth</apiName><shortdesc>
      指定された列の幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された列の幅です。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列の 0 で始まるインデックスです。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された列の幅を返します。セルの境界全体が必要ではない場合、このメソッドは <codeph>getColumnBounds().width</codeph> よりも効率的です。
     
      <p>指定された列の幅プロパティが定義されていない場合、戻り値は単なる近似値の可能性があります。 実際の列幅は、列がビュー内にスクロールされた後にのみ計算されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getItemRendererAt"><apiName>getItemRendererAt</apiName><shortdesc>
      要求されたアイテムレンダラーが表示可能な場合は、指定されたセルに対して現在表示されているアイテムレンダラーへの参照が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムレンダラーです。セルの場所が無効な場合は null です。
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>アイテムレンダラーのセルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>アイテムレンダラーのセルの 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      要求されたアイテムレンダラーが表示可能な場合は、指定されたセルに対して現在表示されているアイテムレンダラーへの参照が返されます。 返されたアイテムレンダラーが表示されなくなっている場合は、リサイクルされてプロパティがリセットされる可能性があることに注意してください。  
     
      <p>要求されたアイテムレンダラーが非表示の場合、このメソッドが呼び出されるたびに新規アイテムレンダラーが作成されます。新規アイテムレンダラーは非表示です。</p>
     
      <p>指定された列に明示的な幅が設定されていない場合、このセルの幅は <codeph>typicalItem</codeph> に基づいて決まります。<codeph>typicalItem</codeph> が指定されなかったか、まだ測定されていない場合、アイテムレンダラーの幅はデフォルトで <codeph>150</codeph> になります。</p>
     
      <p><codeph>variableRowHeight</codeph> グリッドプロパティが <codeph>true</codeph>（デフォルト）で、指定された行の全体的な行の高さがキャッシュされていない場合、アイテムレンダラーの高さは <codeph>typicalItem</codeph> に基づいて決まります。<codeph>typicalItem</codeph> が指定されなかったか、まだ測定されていない場合、アイテムレンダラーの高さはデフォルトで推奨高さになります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowBounds"><apiName>getRowBounds</apiName><shortdesc>
      指定された行の現在のピクセル境界を返すか、該当する行が存在しない場合は null を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>行のピクセル境界を表す <codeph>Rectangle</codeph> または null です。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行の 0 で始まるインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された行の現在のピクセル境界を返すか、該当する行が存在しない場合は null を返します。行境界がグリッド座標で報告されます。
     
      <p>指定された行およびその行の前にあるすべての行に対するすべての列がビュー内にスクロールされていない場合、返される境界は、列のすべての <codeph>typicalItem</codeph> に基づく単なる近似値である可能性があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowIndexAt"><apiName>getRowIndexAt</apiName><shortdesc>
      指定された座標に対応する行インデックスを返すか、座標が範囲外である場合は -1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された座標に対応する行のインデックスです。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>X 座標です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Y 座標です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された座標に対応する行インデックスを返すか、座標が範囲外である場合は -1 を返します。座標はグリッドに関して解決されます。
     
      <p>グリッドのすべての列または行がビュー内にスクロールされていない場合、返されるインデックスは、列のすべての <codeph>typicalItem</codeph> に基づく単なる近似値である可能性があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleColumnIndices"><apiName>getVisibleColumnIndices</apiName><shortdesc>
      現在表示されている列のインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示されている列インデックスのベクトルです。
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      現在表示されている列のインデックスを返します。最初の列と最後の列のアイテムレンダラーは部分的にのみ表示できます。ベクトルのコンテンツは表示順序で返されます。
     
      <p>次のサンプル関数ではこのメソッドを使用して、表示されている GridColumn オブジェクトのベクトルを計算します。</p>
      <pre>
      function getVisibleColumns():Vector.&lt;GridColumn>
      {
          var visibleColumns = new Vector.&lt;GridColumn>;
          for each (var columnIndex:int in grid.getVisibleColumnIndices())
              visibleColumns.push(grid.columns.getItemAt(columnIndex));
          return visibleColumns;
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleRowIndices"><apiName>getVisibleRowIndices</apiName><shortdesc>
      データプロバイダーのインデックスおよび現在の表示行のパディングインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示されている行インデックスのベクトルです。
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      データプロバイダーのインデックスおよび現在の表示行のパディングインデックスを返します。 <codeph>dataProvider</codeph> の長さ以上のインデックスはパディング行を表します。最初の行と最後の行のアイテムレンダラーは部分的にのみ表示できます。ベクトルのコンテンツは表示順序で返されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc>
      指定したセルが表示可能な場合は、再表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>変更されたセルの 0 から始まる行インデックス、または -1 です。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc> 変更されたセルの 0 から始まる列インデックス、または -1 です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定したセルが表示可能な場合は、再表示されます。 <codeph>variableRowHeight</codeph> が true の場合は、再表示すると対応する行の高さが変更されることがあります。
     
      <p>columnIndex が -1 の場合は、行全体が無効化されます。同様に、<codeph>rowIndex</codeph> が -1 の場合は、列全体が無効化されます。</p>
     
      <p><codeph>rowIndex</codeph> にあるデータプロバイダーアイテムのいずれかの特性が変更され、その変更が指定したセルの表示方法に影響を及ぼす可能性がある場合は、このメソッドを呼び出す必要があります。 このメソッドの呼び出しは、指定したアイテムを表示しているすべての行の再表示が必要であることを Grid に示す <codeph>dataProvider.itemUpdated()</codeph> メソッドの呼び出しと似ています。 このメソッドを使用すると、変更の範囲が単一のセルに絞り込まれるので、相対的に効率が向上する場合があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc>
      typicalItem プロパティに基づいてキャッシュされた列幅データを消去し、新規レイアウトパスを要求します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>typicalItem</codeph> プロパティに基づいてキャッシュされた列幅データを消去し、新規レイアウトパスを要求します。<codeph>typicalItem</codeph> の一部の特性が変更され、その変更を Grid のレイアウトに反映する必要がある場合は、このメソッドを呼び出します。  
     
      <p>このメソッドは、<codeph>typicalItem</codeph> が直接変更された場合に自動的に呼び出されます。つまり、このプロパティが現在の値と「==」でない新しい値に設定された場合です。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:isCellVisible"><apiName>isCellVisible</apiName><shortdesc>
      指定されたセルが少なくとも部分的に表示されている場合は true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたセル（または columnIndex == -1 の場合の行）が少なくとも部分的に表示されている場合は true です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>アイテムレンダラーのセルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>アイテムレンダラーのセルの 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたセルが少なくとも部分的に表示されている場合は <codeph>true</codeph> を返します。<codeph>columnIndex == -1</codeph> の場合、指定された行が少なくとも部分的に表示されているときは <codeph>true</codeph> を返します。<codeph>rowIndex == -1</codeph> の場合、指定された列が少なくとも部分的に表示されているときは <codeph>true</codeph> を返します。<codeph>columnIndex</codeph> と <codeph>rowIndex</codeph> の両方が -1 の場合は、<codeph>false</codeph> を返します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_CELL または GridSelectionMode.MULTIPLE_CELLS の場合は、選択範囲からセルが削除されて、キャレットの位置がそのセルに設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>rowIndex</codeph> または <codeph>columnIndex</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、選択範囲からセルが削除されて、キャレットの位置がそのセルに設定されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p><codeph>rowIndex</codeph> は、選択されたセルを含むアイテムのデータプロバイダーのインデックスです。 <codeph>columnIndex</codeph> は、選択されたセルを含む列の <codeph>columns</codeph> のインデックスです。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、選択範囲からこの行が削除されて、キャレットの位置がこの行に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>index</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。 
           
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、選択範囲からこの行が削除されて、キャレットの位置がこの行に設定されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p><codeph>rowIndex</codeph> は、選択されたセルを含むアイテムのデータプロバイダーのインデックスです。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectAll"><apiName>selectAll</apiName><shortdesc>
      selectionMode が GridSelectionMode.MULTIPLE_ROWS の場合は、すべての行が選択されてキャレットが削除されます。selectionMode が GridSelectionMode.MULTIPLE_CELLS の場合は、すべてのセルが選択されてキャレットが削除されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>選択範囲が変更されている場合は <codeph>true</codeph> です。
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、すべての行が選択されてキャレットが削除されます。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、すべてのセルが選択されてキャレットが削除されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p>アイテムが <codeph>dataProvider</codeph> に追加される場合、またはこのメソッドが呼び出された後に <codeph>columns</codeph> が追加される場合は、新しい列の新しい行またはセルが選択されます。</p>
     
      <p>この暗黙的な「selectAll」モードは、次のいずれかが発生すると終わります。
      <ul>
        <li><codeph>clearSelection</codeph> を使用して選択範囲がクリアされた場合</li>
        <li><codeph>setSelectedCell</codeph>、<codeph>setSelectedCells</codeph>、<codeph>setSelectedIndex</codeph>、<codeph>selectIndices</codeph> のいずれかを使用して選択範囲がリセットされた場合</li>
        <li><codeph>dataProvider</codeph> が更新され、<codeph>preserveSelection</codeph> が false の場合</li>
        <li><codeph>dataProvider</codeph> がリセットされた場合</li>
        <li><codeph>columns</codeph> が更新され、<codeph>preserveSelection</codeph> が <codeph>false</codeph> で <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合</li>
        <li><codeph>columns</codeph> がリセットされ、<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合</li> 
      </ul></p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/clearSelection"><linktext>spark.components.Grid.clearSelection</linktext></link><link href="spark.components.xml#Grid/selectIndices"><linktext>spark.components.Grid.selectIndices</linktext></link><link href="spark.components.xml#Grid/setSelectedCell"><linktext>spark.components.Grid.setSelectedCell</linktext></link><link href="spark.components.xml#Grid/setSelectedCells"><linktext>spark.components.Grid.setSelectedCells</linktext></link><link href="spark.components.xml#Grid/setSelectedIndex"><linktext>spark.components.Grid.setSelectedIndex</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc> 
      selectionMode が GridSelectionMode.MULTIPLE_CELLS の場合は、選択範囲がセル領域内のすべてのセルに設定されて、セル領域内の最後のセルにキャレットの位置が設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーがない場合は <codeph>true</codeph> です。 セル領域が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セル領域の原点の 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セル領域の原点の 0 で始まる列インデックスです。
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc><codeph>rowIndex</codeph> から数えた、セル領域に含める行の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc><codeph>columnIndex</codeph> から数えた、セル領域に含める列の数です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、選択範囲がセル領域内のすべてのセルに設定されて、セル領域内の最後のセルにキャレットの位置が設定されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p><codeph>rowIndex</codeph> は、セル領域の原点を含むアイテムのデータプロバイダーのインデックスです。<codeph>columnIndex</codeph> は、セル領域の原点を含む列の <codeph>columns</codeph> のインデックスです。</p>
     
      <p>セル領域全体がグリッドに含まれていない場合は、このメソッドが無視されます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectIndices"><apiName>selectIndices</apiName><shortdesc>
      selectionMode が GridSelectionMode.MULTIPLE_ROWS の場合は、指定された行に選択範囲が設定されて、キャレットの位置が endRowIndex に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーがない場合は <codeph>true</codeph> です。 インデックスのいずれかが無効な場合、<codeph>startRowIndex</codeph> が <codeph>endRowIndex</codeph> 以下でない場合、または <codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>選択範囲の最初の行の 0 から始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>選択範囲の行数です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、指定された行に選択範囲が設定されて、キャレットの位置が <codeph>endRowIndex</codeph> に設定されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p>各インデックスは、選択範囲に含めるデータプロバイダーのアイテムを表します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc>
      selectionMode が GridSelectionMode.MULTIPLE_CELLS の場合は、セル領域のセルが現在の選択範囲内である場合に true が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の選択範囲にセル領域内のすべてのセルが含まれている場合は <codeph>true</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc><codeph>rowIndex</codeph> から数えた、セル領域に含める行の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc><codeph>columnIndex</codeph> から数えた、セル領域に含める列の数です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、セル領域のセルが現在の選択範囲内である場合に true が返されます。<codeph/>
     
      <p><codeph>rowIndex</codeph> は 0 からデータプロバイダーの長さの範囲にする必要があります。<codeph>columnIndex</codeph> は 0 から <codeph>columns</codeph> の長さの範囲にする必要があります。 </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_CELL または GridSelectionMode.MULTIPLE_CELLS の場合は、セルが現在の選択範囲内である場合に true が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の選択範囲にセルが含まれている場合は <codeph>true</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、セルが現在の選択範囲内である場合に true が返されます。<codeph/>
     
      <p><codeph>rowIndex</codeph> は 0 からデータプロバイダーの長さの範囲にする必要があります。<codeph>columnIndex</codeph> は 0 から <codeph>columns</codeph> の長さの範囲にする必要があります。 </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、index の示す行が現在の選択範囲内である場合に true が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>選択範囲に行が含まれている場合は <codeph>true</codeph> です。
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>0 から始まる行インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph><codeph/> の場合は、<codeph>index</codeph> の示す行が現在の選択範囲内である場合に true が返されます。
     
      <p><codeph>rowIndex</codeph> は、選択されたセルを含むアイテムのデータプロバイダーのインデックスです。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc>
      selectionMode が GridSelectionMode.MULTIPLE_ROWS の場合は、indices の示す行が現在の選択範囲内である場合に true が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の選択範囲にこれらの行が含まれている場合は <codeph>true</codeph> です。
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>選択範囲に含める 0 から始まる行インデックスの Vector です。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph><codeph/> の場合は、<codeph>indices</codeph> の示す行が現在の選択範囲内である場合に true が返されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_CELL または GridSelectionMode.MULTIPLE_CELLS の場合は、選択範囲が設定されて、キャレットの位置がこのセルに設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>rowIndex</codeph> または <codeph>columnIndex</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、選択範囲が設定されて、キャレットの位置がこのセルに設定されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p><codeph>rowIndex</codeph> は、選択されたセルを含むアイテムのデータプロバイダーのインデックスです。 <codeph>columnIndex</codeph> は、選択されたセルを含む列の <codeph>columns</codeph> のインデックスです。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、選択範囲が設定されて、キャレットの位置がこの行に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>index</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、選択範囲が設定されて、キャレットの位置がこの行に設定されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p><codeph>rowIndex</codeph> は、選択されたセルを含むアイテムのデータプロバイダーのインデックスです。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiValue id="spark.components:Grid:anchorColumnIndex:get"><apiName>anchorColumnIndex</apiName><shortdesc>
      次の Shift キーを押した選択で使用するアンカーの列インデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      次の Shift キーを押した選択で使用する<i>アンカー</i>の列インデックスです。アンカーは最も最近選択されたアイテムです。 グリッド内の複数のアイテムを選択すると、アンカーアイテムが定義されます。 複数のアイテムを選択すると、アイテムのセットがアンカーからキャレットアイテムまで拡張されます。
     
      <p>グリッドイベントハンドラーでは、このプロパティを使用して、Shift キーを押していない最新のマウスダウンまたは次に Shift を押して選択する可能性がある選択範囲の一方の端を定義するキーボードイベントの場所を記録する必要があります。もう一方の端は、キャレットインデックスで定義します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:anchorRowIndex:get"><apiName>anchorRowIndex</apiName><shortdesc>
      次の Shift キーを押した選択で使用するアンカーの行インデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      次の Shift キーを押した選択で使用する<i>アンカー</i>の行インデックスです。アンカーは最も最近選択されたアイテムです。 グリッド内の複数のアイテムを選択すると、アンカーアイテムが定義されます。 複数のアイテムを選択すると、アイテムのセットがアンカーからキャレットアイテムまで拡張されます。
     
      <p>グリッドイベントハンドラーでは、このプロパティを使用して、Shift キーを押していない最新のマウスダウンまたは次に Shift を押して選択する可能性がある選択範囲の一方の端を定義するキーボードイベントの場所を記録する必要があります。もう一方の端は、キャレットインデックスで定義します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:caretColumnIndex:get"><apiName>caretColumnIndex</apiName><shortdesc>
      showCaretIndicator が true の場合は、caretIndicator の列インデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>showCaretIndicator</codeph> が <codeph>true</codeph> の場合は、<codeph>caretIndicator</codeph> の列インデックスです。
     
      <p><codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、インジケーターが行全体に表示され、<codeph>caretColumnIndex</codeph> は無視されます。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、指定されたセル全体に <codeph>caretIndicator</codeph> が表示されます。</p>
     
      <p><codeph>caretColumnIndex</codeph> を -1 に設定すると、列インデックスが未定義という意味になり、セルキャレットは表示されません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretIndicator:get"><apiName>caretIndicator</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、キャレット行に表示される 1 つのビジュアルエレメントです。selectionMode が GridSelectionMode.SINGLE_CELL または GridSelectionMode.MULTIPLE_CELLS の場合は、キャレットセルに表示されるビジュアルエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、キャレット行に表示される 1 つのビジュアルエレメントです。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、キャレットセルに表示されるビジュアルエレメントです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretRowIndex:get"><apiName>caretRowIndex</apiName><shortdesc>
      showCaretIndicator が true の場合は、caretIndicator の行インデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>showCaretIndicator</codeph> が <codeph>true</codeph> の場合は、<codeph>caretIndicator</codeph> の行インデックスです。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、インジケーターが行全体に表示され、<codeph>caretColumnIndex</codeph> プロパティは無視されます。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、指定されたセル全体に <codeph>caretIndicator</codeph> が表示されます。
     
      <p><codeph>caretRowIndex</codeph> を -1 に設定すると、行インデックスが未定義という意味になり、キャレットは表示されません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      各列の間に表示されるビジュアルエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      各列の間に表示されるビジュアルエレメントです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columns:get"><apiName>columns</apiName><shortdesc>
      このグリッドによって表示される GridColumn オブジェクトのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このグリッドによって表示される GridColumn オブジェクトのリストです。 各列は、表示用に異なるデータプロバイダーアイテムのプロパティを選択します。
      
      <p>GridColumn オブジェクトを表示できるのは、1 つの Grid コントロールの <codeph>columns</codeph> のみです。</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      この Grid が grid スキンパーツとして使用される DataGrid コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      この Grid が grid スキンパーツとして使用される DataGrid コントロールです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      グリッドの行に対応するデータアイテムのリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      グリッドの行に対応するデータアイテムのリストです。 各グリッド列は、グリッドの<i>セル</i>にそのプロパティを表示するデータアイテムのプロパティに関連付けられています。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      showHoverIndicator が true の場合は、hoverIndicator の列インデックスを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>showHoverIndicator</codeph> が <codeph>true</codeph> の場合は、<codeph>hoverIndicator</codeph> の列インデックスを指定します。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、インジケーターが行全体に表示され、<codeph>hoverColumnIndex</codeph> は無視されます。 <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、指定されたセル全体に <codeph>hoverIndicator</codeph> が表示されます。
      
      <p><codeph>hoverColumnIndex</codeph> を -1（デフォルト）に設定すると、列インデックスが未定義という意味になり、セルの吹き出しインジケーターは表示されません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverIndicator:get"><apiName>hoverIndicator</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合。マウスの位置の行に表示される 1 つのビジュアルエレメントです。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、セルのビジュアルエレメントです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverRowIndex:get"><apiName>hoverRowIndex</apiName><shortdesc>
      showHoverIndicator が true の場合は、hoverIndicator の列インデックスを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>showHoverIndicator</codeph> が <codeph>true</codeph> の場合は、<codeph>hoverIndicator</codeph> の列インデックスを指定します。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、インジケーターが行全体に表示され、<codeph>hoverColumnIndex</codeph> は無視されます。 <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、指定されたセル全体に <codeph>hoverIndicator</codeph> が表示されます。
     
      <p><codeph>hoverRowIndex</codeph> を -1（デフォルト）に設定すると、行インデックスが未定義という意味になり、吹き出しインジケーターは表示されません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      アイテムレンダラーが指定されていない列に使用されるアイテムレンダラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      アイテムレンダラーが指定されていない列に使用されるアイテムレンダラーです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc>
      true の場合は、データプロバイダーがコレクションを更新する際に選択範囲が維持されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合は、データプロバイダーがコレクションを更新する際に選択範囲が維持されます。この更新では選択範囲内の各アイテムが保存される必要があるため、選択範囲が広い場合、このアクションは望ましくありません。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc>
      このグリッドの測定された幅は、最初の requestedColumnCount の列を表示するのに十分な大きさです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このグリッドの測定された幅は、最初の <codeph>requestedColumnCount</codeph> の列を表示するのに十分な大きさです。<codeph>requestedColumnCount</codeph> が -1 の場合は、測定された幅がすべての列を表示するのに十分な大きさです。
     
      <p>グリッドの実際のサイズが明示的に設定されている場合は、このプロパティが無視されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc>
      このグリッドの測定された高さは、requestedMaxRowCount の行のみ表示するのに十分な大きさです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このグリッドの測定された高さは、<codeph>requestedMaxRowCount</codeph> の行のみ表示するのに十分な大きさです。
     
      <p>次のいずれかの条件に該当する場合は、このプロパティが無視されます。
      <ul>
          <li><codeph>requestedRowCount</codeph> が設定されている。</li>
          <li>グリッドの実際のサイズが明示的に設定されている。</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc>
      このグリッドの測定された幅は、少なくとも requestedMinColumnCount の列を表示するのに十分な大きさです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このグリッドの測定された幅は、少なくとも <codeph>requestedMinColumnCount</codeph> の列を表示するのに十分な大きさです。
     
      <p>次のいずれかの条件に該当する場合は、このプロパティが無視されます。
      <ul>
          <li><codeph>requestedColumnCount</codeph> が設定されている。</li>
          <li>グリッドの実際のサイズが明示的に設定されている。</li>
          <li>グリッドが Scroller コンポーネントの内部にある。</li>
      </ul>
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc>
      このグリッドの測定された高さは、少なくとも requestedMinRowCount の行を表示するのに十分な大きさです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このグリッドの測定された高さは、少なくとも <codeph>requestedMinRowCount</codeph> の行を表示するのに十分な大きさです。
     
      <p>次のいずれかの条件に該当する場合は、このプロパティが無視されます。
      <ul>
          <li><codeph>requestedRowCount</codeph> が設定されている。</li>
          <li>グリッドの実際のサイズが明示的に設定されている。</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc>
      このグリッドの測定された高さは、最初の requestedRowCount の行を表示するのに十分な大きさです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このグリッドの測定された高さは、最初の <codeph>requestedRowCount</codeph> の行を表示するのに十分な大きさです。 
     
      <p><codeph>requestedRowCount</codeph> が -1 の場合、測定サイズは、すべてのレイアウトエレメントに対して十分な大きさになります。</p>
     
      <p>グリッドの実際のサイズが明示的に設定されている場合は、このプロパティが無視されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      true で selectionMode プロパティが GridSelectionMode.NONE でない場合は、グリッドでアイテムを常に選択する必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> で <codeph>selectionMode</codeph> プロパティが <codeph>GridSelectionMode.NONE</codeph> でない場合は、グリッドでアイテムを常に選択する必要があります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc>
      ユーザーが列のサイズを変更できるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
        
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが列のサイズを変更できるかどうかを示します。<codeph>true</codeph> の場合、ユーザーはヘッダーセル間のグリッド線をドラッグすることで DataGrid コントロールの列のサイズを変更できます。 <codeph>true</codeph> の場合、ユーザーが特定の列のサイズを変更できないようにするには、個々の列の <codeph>resizable</codeph> プロパティを <codeph>false</codeph> に設定する必要もあります。  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:rowBackground:get"><apiName>rowBackground</apiName><shortdesc>
      各行の背景を表示するビジュアルエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowBackgroundChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      各行の背景を表示するビジュアルエレメントです。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc>
      variableRowHeight が false の場合は、このプロパティで各行の実際の高さをピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>variableRowHeight</codeph> が <codeph>false</codeph> の場合は、このプロパティで各行の実際の高さをピクセル単位で指定します。
     
      <p><codeph>variableRowHeight</codeph> が <codeph>true</codeph> の場合は、<codeph>typicalItem</codeph> で設定されたレンダラーの推奨高さではなく、このプロパティの値がビュー内にまだスクロールされていない行の推定高さとして使用されます。同様に、Grid の表示が空の行でパディングされる場合、このプロパティは空の行の高さを指定します。</p>
     
      <p><codeph>variableRowHeight</codeph> が <codeph>false</codeph> の場合、このプロパティのデフォルト値は、<codeph>typicalItem</codeph> 用に作成された列ごとのレンダラーで推奨される最大の高さになります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowSeparator:get"><apiName>rowSeparator</apiName><shortdesc>
      各行の間に表示されるビジュアルエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      各行の間に表示されるビジュアルエレメントです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_CELL または GridSelectionMode.MULTIPLE_CELLS の場合は、0 の行と 0 の列から始めて、次の行に移動する前に行の各列に進んで、最初に選択されたセルが返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、0 の行と 0 の列から始めて、次の行に移動する前に行の各列に進んで、最初に選択されたセルが返されます。
     
      <p>ユーザーがコントロールを操作して選択範囲を変更すると、コントロールが <codeph>selectionChange</codeph> イベントを送出します。ユーザーがプログラムで選択範囲を変更すると、コントロールが <codeph>valueCommit</codeph> イベントを送出します。</p>
     
      <p> このプロパティは、MXML マークアップ内の選択範囲の初期化またはバインドに使用するために用意されています。 <codeph>setSelectedCell()</codeph> メソッドは、例えばキーボードやマウスのイベントハンドラーを作成するときなど、プログラムで選択範囲を更新する場合に使用する必要があります。 </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_CELL または GridSelectionMode.MULTIPLE_CELLS の場合は、グリッドで選択されたセルの位置を表す CellPosition オブジェクトの Vector が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、グリッドで選択されたセルの位置を表す CellPosition オブジェクトの Vector が返されます。
     
      <p>ユーザーがコントロールを操作して選択範囲を変更すると、コントロールが <codeph>selectionChange</codeph> イベントを送出します。ユーザーがプログラムで選択範囲を変更すると、コントロールが <codeph>valueCommit</codeph> イベントを送出します。</p>
     
      <p> このプロパティは、MXML マークアップ内の選択範囲の初期化またはバインドに使用するために用意されています。 <codeph>setSelectedCell()</codeph> メソッドは、例えばキーボードやマウスのイベントハンドラーを作成するときなど、プログラムで選択範囲を更新する場合に使用する必要があります。 </p> 
     
      <p>デフォルト値は空の <codeph>Vector.&lt;CellPosition></codeph>です</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、最初に選択された行の rowIndex が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、最初に選択された行の rowIndex が返されます。 
     
      <p>ユーザーがコントロールを操作して選択範囲を変更すると、コントロールが <codeph>selectionChange</codeph> イベントを送出します。ユーザーがプログラムで選択範囲を変更すると、コントロールが <codeph>valueCommit</codeph> イベントを送出します。</p>
     
      <p> このプロパティは、MXML マークアップ内の選択範囲の初期化またはバインドに使用するために用意されています。 <codeph>setSelectedCell()</codeph> メソッドは、例えばキーボードやマウスのイベントハンドラーを作成するときなど、プログラムで選択範囲を更新する場合に使用する必要があります。 </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、選択された行のインデックスの Vector が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、選択された行のインデックスの Vector が返されます。他のすべての選択モードでは、このメソッドが無視されます。
     
      <p>ユーザーがコントロールを操作して選択範囲を変更すると、コントロールが <codeph>selectionChange</codeph> イベントを送出します。ユーザーがプログラムで選択範囲を変更すると、コントロールが <codeph>valueCommit</codeph> イベントを送出します。</p>
     
      <p> このプロパティは、MXML マークアップ内の選択範囲の初期化またはバインドに使用するために用意されています。 setSelectedCell() メソッドは、例えばキーボードやマウスのイベントハンドラーを作成するときなど、プログラムで選択範囲を更新する場合に使用する必要があります。 </p> > 
     
      <p>デフォルト値は空の <codeph>Vector.&lt;int></codeph> です</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、現在選択されているデータプロバイダーのアイテムが返されるか、行が選択されていない場合は undefined が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、現在選択されているデータプロバイダーのアイテムが返されるか、行が選択されていない場合は <codeph>undefined</codeph> が返されます。  
     
      <p>ユーザーがコントロールを操作して選択範囲を変更すると、コントロールが <codeph>selectionChange</codeph> イベントを送出します。ユーザーがプログラムで選択範囲を変更すると、コントロールが <codeph>valueCommit</codeph> イベントを送出します。</p>
     
      <p> このプロパティは、MXML マークアップ内の選択範囲の初期化またはバインドに使用するために用意されています。 <codeph>setSelectedCell()</codeph> メソッドは、例えばキーボードやマウスのイベントハンドラーを作成するときなど、プログラムで選択範囲を更新する場合に使用する必要があります。 </p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、現在選択されている dataProvider アイテムの Vector が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、現在選択されている dataProvider アイテムの Vector が返されます。
     
      <p>ユーザーがコントロールを操作して選択範囲を変更すると、コントロールが <codeph>selectionChange</codeph> イベントを送出します。ユーザーがプログラムで選択範囲を変更すると、コントロールが <codeph>valueCommit</codeph> イベントを送出します。</p>
     
      <p> このプロパティは、MXML マークアップ内の選択範囲の初期化またはバインドに使用するために用意されています。 setSelectedCell() メソッドは、例えばキーボードやマウスのイベントハンドラーを作成するときなど、プログラムで選択範囲を更新する場合に使用する必要があります。 </p> 
      
      <p>デフォルト値は空の <codeph>Vector.&lt;Object></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectionIndicator:get"><apiName>selectionIndicator</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、選択された各行に表示されるビジュアルエレメントです。selectionMode が GridSelectionMode.SINGLE_CELL または GridSelectionMode.MULTIPLE_CELLS の場合は、選択された各セルに表示されるビジュアルエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、選択された各行に表示されるビジュアルエレメントです。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELL</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、選択された各セルに表示されるビジュアルエレメントです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc>
      selectionMode が GridSelectionMode.SINGLE_ROW または GridSelectionMode.MULTIPLE_ROWS の場合は、選択された行の数が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_ROW</codeph> または <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> の場合は、選択された行の数が返されます。<codeph>selectionMode</codeph> が <codeph>GridSelectionMode.SINGLE_CELLS</codeph> または <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> の場合は、選択されたセルの数が返されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc>
      コントロールの選択モードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc>
      コントロールの選択モードです。 有効な値は次のとおりです。<codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>、<codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>、<codeph>GridSelectionMode.NONE</codeph>、<codeph>GridSelectionMode.SINGLE_CELL</codeph>および<codeph>GridSelectionMode.SINGLE_ROW</codeph>。
     
      <p>selectionMode を変更すると、現在の選択範囲がクリアされて、caretRowIndex と caretColumnIndex が -1 に設定されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      true の場合は、すべての表示可能なセルに対して dataTip が表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合は、すべての表示可能なセルに対して dataTip が表示されます。<codeph>false</codeph>（デフォルト値）の場合は、列の <codeph>showDataTips</codeph> プロパティが <codeph>true</codeph> の場合にのみ dataTip が表示されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      グリッドのレイアウトでは、幅が指定されていない列が、このデフォルトデータプロバイダーアイテムのアイテムレンダラーを表示するのに十分な幅に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      グリッドのレイアウトでは、幅が指定されていない列が、このデフォルトデータプロバイダーアイテムのアイテムレンダラーを表示するのに十分な幅に設定されます。 typicalItem が設定されていない場合は、最初のデータプロバイダーアイテムが使用されます。
     
      <p>制限：<codeph>typicalItem</codeph> が IVisualItem である場合、さらにデータプロバイダーのメンバーではない必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc>
      true の場合、各行の高さは、これまでに表示されたセルで推奨される高さの最大値になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、各行の高さは、これまでに表示されたセルで推奨される高さの最大値になります。
     
      <p><codeph>false</codeph> の場合、各行の高さは <codeph>rowHeight</codeph> プロパティの値になります。<codeph>rowHeight</codeph> が設定されていない場合、各行の高さは <codeph>typicalItem</codeph> プロパティで定義されます。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Application"><apiName>Application</apiName><shortdesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、アプリケーションにコンテンツを追加することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="direction"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Application" playerVersion="Flash10" type="uint">
<description>
  アプリケーションの背景色です。この色は、アプリケーションのステージカラーおよび HTML 埋め込みタグの背景色として使用されます。
   </description>
<default>0x464646
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Application" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      コンテナのコントロールバー領域の外観を定義するスキンパーツです。ApplicationSkin クラスのデフォルトの定義では、Application コンテナのコンテンツ領域の上部にコントロールバー領域が表示され、背景は灰色に設定されます。
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Application&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Application
    <strong>Properties</strong>
    applicationDPI=<i>Device dependent</i>"
    backgroundColor="0xFFFFFF"
    colorCorrection="default"
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    frameRate="24"
    pageTitle""
    preloader="<i>No default</i>"
    preloaderChromeColor="<i>No default</i>"
    resizeForSoftKeyboard=true"
    runtimeDPIProvider="RuntimeDPIProvider"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    splashScreenImage=""
    splashScreenMinimumDisplayTime="1000"
    splashScreenScaleMode="none"
    usePreloader="true"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
     <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、アプリケーションにコンテンツを追加することができます。
   <p>Application コンテナには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>高さ 375 ピクセル、幅 500 ピクセル（スタンドアロンの Flash Player の場合）、ブラウザー内では使用可能な領域すべて</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 0 ピクセル、高さ 0 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>制限なし</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ApplicationContainerExample.mxml"><swfblock conref="examples/ApplicationContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Application_flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR_uncaughtError"><apiName>uncaughtError</apiName><shortdesc>
  キャッチされない例外がグローバル例外ハンドラーでキャッチされると送出されます。
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR</apiEventType><adobeApiEventClassifier>flash.events.UncaughtErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  キャッチされない例外がグローバル例外ハンドラーでキャッチされると送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  HTTPService 呼び出しが失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  HTTPService 呼び出しが失敗したときに送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  アプリケーションが初期化され、LayoutManager によって処理され、表示リストに追加された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アプリケーションが初期化され、LayoutManager によって処理され、表示リストに追加された後に送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Application:Application"><apiName>Application</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        アプリケーションのフレームレートを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
           </apiDefaultValue></apiValueDef><apiDesc>
        アプリケーションのフレームレートを指定します。
             <p><b>メモ：</b>このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        ブラウザーのタイトルバーに表示されるストリングを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
        ブラウザーのタイトルバーに表示されるストリングを指定します。 このプロパティは、HTML の <codeph>&lt;title></codeph> タグと同じ機能を提供します。
             <p><b>メモ：</b>このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。MXML コードに設定されている値は、SDK に用意されている HTML テンプレートを更新するツールで使用できるように設計されています。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
      デフォルトのプリローダーコンポーネントで使用されるクロムカラーを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
      デフォルトのプリローダーコンポーネントで使用されるクロムカラーを指定します。このプロパティには、Spark のスキンによって使用される <codeph>chromeColor</codeph> スタイルと同じ効果があります。通常、このプロパティは、Application コンテナの <codeph>chromeColor</codeph> スタイルプロパティと同じ値に設定する必要があります。
           <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloader"><apiName>preloader</apiName><shortdesc>
      アプリケーションコンテナでは、アプリケーションの SWF ファイルのダウンロードおよび初期化の進捗が表示されるダウンロードプログレスバーを使用できるアプリケーションプリローダーがサポートされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      アプリケーションコンテナでは、アプリケーションの SWF ファイルのダウンロードおよび初期化の進捗が表示されるダウンロードプログレスバーを使用できるアプリケーションプリローダーがサポートされます。デフォルトでは、アプリケーションプリローダーが有効になります。プリローダーでは、ダウンロードされたバイト数が追跡され、プログレスバーが継続的に更新されます。 
           <p>このプロパティは、カスタムプログレスインジケーターを定義するコンポーネントのパスを指定するために使用します。カスタムプログレスインジケーターを作成するには、通常、SparkDownloadProgressBar または DownloadProgressBar クラスのサブクラスを作成するか、mx.preloaders.IPreloaderDisplay インターフェイスを実装する flash.display.Sprite クラスのサブクラスを作成します。 </p>
           <p><b>メモ：</b>このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.preloaders.SparkDownloadProgressBar.xml"><linktext>mx.preloaders.SparkDownloadProgressBar</linktext></link><link href="" invalidHref="mx.preloaders.DownloadProgressBar.xml"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="" invalidHref="flash.display.Sprite.xml"><linktext>flash.display.Sprite</linktext></link><link href="" invalidHref="mx.preloaders.IPreloaderDisplay.xml"><linktext>mx.preloaders.IPreloaderDisplay</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Flash Player または AIR のコールスタックの最大の深さを指定します。この深さに達すると、Flash Player または AIR は停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
           </apiDefaultValue></apiValueDef><apiDesc>
        Flash Player または AIR のコールスタックの最大の深さを指定します。この深さに達すると、Flash Player または AIR は停止します。 実質的なスタックオーバーフローの制限になります。
             <p><b>メモ：</b>このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        ActionScript イベントハンドラーの最大実行継続時間を秒で指定します。この時間を超えると、Flash Player または AIR はこのイベントハンドラーがハングアップしたと見なして、実行を中止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
           </apiDefaultValue></apiValueDef><apiDesc>
        ActionScript イベントハンドラーの最大実行継続時間を秒で指定します。この時間を超えると、Flash Player または AIR はこのイベントハンドラーがハングアップしたと見なして、実行を中止します。 設定できる最大許容値は 60 秒です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:splashScreenMinimumDisplayTime"><apiName>splashScreenMinimumDisplayTime</apiName><shortdesc>
      スプラッシュ画面イメージを表示する時間の最小値（ミリ秒単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1000
     
      </apiDefaultValue></apiValueDef><apiDesc>
      スプラッシュ画面イメージを表示する時間の最小値（ミリ秒単位）です。<codeph>splashScreenImage</codeph> プロパティを使用してスプラッシュ画面イメージを指定します。
           <p><b>注意：</b>このプロパティは、<codeph>splashScreenImage</codeph> プロパティが設定されており、かつ、<codeph>preloader</codeph> プロパティが spark.preloaders.SplashScreen に設定されている場合にのみ、効果があります。spark.preloaders.SplashScreen クラスは、Mobile Flex アプリケーションのデフォルトのプリローダーです。 このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
           <p><b>注意：</b>デスクトップアプリケーションでスプラッシュ画面をサポートするには、frameworks¥libs¥mobile¥mobilecomponents.swc をアプリケーションのライブラリパスに追加する必要があります。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenScaleMode"><apiName>splashScreenScaleMode</apiName><shortdesc>
      スプラッシュ画面イメージの拡大 / 縮小モード：none という値は、イメージサイズがその本来のサイズに一致するように設定されることを意味します。stretch という値は、イメージの幅と高さにステージの幅と高さを設定します。そのため、コンテンツの縦横比が変化する場合があります。letterbox という値は、縦横比を維持しながら、ステージの幅と高さにできるだけ近づくようにイメージの幅と高さを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"none"
      </apiDefaultValue></apiValueDef><apiDesc>
      スプラッシュ画面イメージの拡大 / 縮小モードです。
      
      <ul>
          <li><codeph>none</codeph> という値は、イメージサイズがその本来のサイズに一致するように設定されることを意味します。</li>
               <li><codeph>stretch</codeph> という値は、イメージの幅と高さにステージの幅と高さを設定します。そのため、コンテンツの縦横比が変化する場合があります。</li>
               <li><codeph>letterbox</codeph> という値は、縦横比を維持しながら、ステージの幅と高さにできるだけ近づくようにイメージの幅と高さを設定します。イメージは、ステージの境界まで最大限に拡張されます。必要な場合は、縦横比を維持するためにスペースがステージ内部に追加されます。 </li>
               <li><codeph>zoom</codeph> という値は <codeph>letterbox</codeph> と似ています。ただし、<codeph>zoom</codeph> は、ステージの境界を超えてイメージを拡張し、縦横比を維持するために必要なスペースは排除されます。この設定には、ステージの境界全体を使用する効果がありますが、一部のイメージはトリミングされる場合もあります。</li>
      </ul>
           <p>イメージでカバーされないステージの部分は、Application コンテナの <codeph>backgroundColor</codeph> に表示されます。</p>
           <p><b>注意：</b>このプロパティは、<codeph>splashScreenImage</codeph> プロパティが設定されており、かつ、<codeph>preloader</codeph> プロパティが spark.preloaders.SplashScreen に設定されている場合にのみ、効果があります。spark.preloaders.SplashScreen クラスは、Mobile Flex アプリケーションのデフォルトのプリローダーです。 このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
           <p><b>注意：</b>デスクトップアプリケーションでスプラッシュ画面をサポートするには、frameworks¥libs¥mobile¥mobilecomponents.swc をアプリケーションのライブラリパスに追加する必要があります。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        true の場合、アプリケーションのプリローダーを表示することを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
        <codeph>true</codeph> の場合、アプリケーションのプリローダーを表示することを示します。
             <p><b>メモ：</b>このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      アプリケーションの DPI です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      アプリケーションの DPI です。 デフォルトでは、これがアプリケーションを現在実行中のデバイスの DPI です。MXML に設定されている場合は、アプリケーションの DPI と <codeph>runtimeDPI</codeph> に一致するようにアプリケーションが調整されます。このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:aspectRatio:get"><apiName>aspectRatio</apiName><shortdesc>
      最上位ステージの幅と高さに基づいた縦横比を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      最上位ステージの幅と高さに基づいた縦横比を返します。ステージの幅が高さより大きい場合、ステージは「横」方向であると見なされます。 それ以外の場合は、縦方向が返されます。
      
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:colorCorrection:get"><apiName>colorCorrection</apiName><shortdesc>
     ステージの colorCorrection プロパティの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ColorCorrection.DEFAULT
         </apiDefaultValue></apiValueDef><apiDesc>
     ステージの <codeph>colorCorrection</codeph> プロパティの値です。このアプリケーションがステージの <codeph>colorCorrection</codeph> プロパティにアクセスできない場合、<codeph>colorCorrection</codeph> プロパティの値は <codeph>null</codeph> です。
         <p>メインアプリケーションのみが <codeph>colorCorrection</codeph> プロパティを設定できます。ネストされたアプリケーションがカラー補正プロパティを設定する必要がある場合は、メインアプリケーションのインスタンスを参照することによってプロパティを設定する必要があります。</p>
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.ColorCorrection.xml"><linktext>flash.display.ColorCorrection</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Application コンテナのコントロールバー領域に含めるコンポーネントのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Application コンテナのコントロールバー領域に含めるコンポーネントのセットです。Application コンテナのコントロールバー領域の場所と外観は、spark.skins.spark.ApplicationSkin クラスによって決定されます。ApplicationSkin クラスのデフォルトの定義では、Application コンテナのコンテンツ領域の上部にコントロールバー領域が表示され、背景は灰色に設定されます。コントロールバーのデフォルトの外観を変更するカスタムスキンを作成します。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      コンテナのコントロールバー領域のレイアウトを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      コンテナのコントロールバー領域のレイアウトを定義します。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      true の場合、コントロールバーは可視です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、コントロールバーは可視です。<codeph>controlBarContent</codeph> プロパティの値が設定されていない場合、このフラグは無視されます。
           <p><b>メモ：</b>Application コンテナは <codeph>controlBarGroup</codeph> プロパティを監視しません。他のコードによって不可視に設定された場合、Application コンテナが正しく更新されないことがあります。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      この Application に提供されるパラメーターを表す、名前と値のペアを含む Object です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      この Application に提供されるパラメーターを表す、名前と値のペアを含む Object です。
           <p>for-in ループを使用すると、パラメーター Object からすべての名前と値を抽出できます。</p>
           <p>パラメーターは、Application の URL のクエリストリングと、FlashVars HTML パラメーターの値の 2 つから提供されます。HTML パラメーターはメイン Application にのみ影響します。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      一部のデバイスでは、ハードウェアキーボードがサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      一部のデバイスでは、ハードウェアキーボードがサポートされません。代わりに、これらのデバイスでは、必要なときに画面上に開くキーボードを使用します。ソフトキーボードまたは仮想キーボードとも呼ばれる画面キーボードは、ユーザーが情報を入力した後に、またはユーザーが操作をキャンセルすると閉じます。<codeph>true</codeph> という値は、ソフトキーボードが開くか閉じるときに、アプリケーションのサイズが変更されることを意味しています。  
           <p>アプリケーションのサイズ変更を有効にするには、アプリケーションの xml 記述ファイルの <codeph>&lt;softKeyboardBehavior></codeph> 属性を <codeph>none</codeph> に設定する必要もあります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:runtimeDPIProvider:get"><apiName>runtimeDPIProvider</apiName><shortdesc>
      RuntimeDPIProvider を拡張して、Flex による runtimeDPI のデフォルト計算をオーバーライドするクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>spark.components.RuntimeDPIProvider
     
      </apiDefaultValue></apiValueDef><apiDesc>
      RuntimeDPIProvider を拡張して、Flex による <codeph>runtimeDPI</codeph> のデフォルト計算をオーバーライドするクラスです。
     
      <p>Flex のデフォルトマッピングは次のとおりです。
         <adobetable class="innertable">
            
            
            
         <tgroup cols="2"><tbody><row><entry>160 DPI</entry><entry>&lt;200 DPI</entry></row><row><entry>240 DPI</entry><entry>>=200 DPI および &lt;280 DPI</entry></row><row><entry>320 DPI</entry><entry>>=280 DPI</entry></row></tbody></tgroup></adobetable>
      </p>
     
      このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link><link href="" invalidHref="mx.core.RuntimeDPIProvider.xml"><linktext>mx.core.RuntimeDPIProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:runtimeDPI:get"><apiName>runtimeDPI</apiName><shortdesc>
      アプリケーションを現在実行中のデバイスの DPI です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      アプリケーションを現在実行中のデバイスの DPI です。 値は <codeph>DPIClassification</codeph> のいずれかの選択肢に切り上げまたは切り下げされます。 
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenImage:get"><apiName>splashScreenImage</apiName><shortdesc>
      SplashScreen プリローダーのイメージクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc>
      SplashScreen プリローダーのイメージクラスです。通常、このプロパティには、埋め込みリソースまたは別の MXML ファイルに定義されている <codeph>SplashScreenImage</codeph> クラスの名前を設定します。splashScreenImage に埋め込みイメージを設定する例：
           <pre>splashScreenImage="@Embed('Default.png')"</pre>
           <p><b>注意：</b>このプロパティは、<codeph>preloader</codeph> プロパティが spark.preloaders.SplashScreen に設定されている場合にのみ、効果があります。spark.preloaders.SplashScreen クラスは、Mobile Flex アプリケーションのデフォルトのプリローダーです。 このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
           <p><b>注意：</b>デスクトップアプリケーションでスプラッシュ画面をサポートするには、frameworks¥libs¥mobile¥mobilecomponents.swc をアプリケーションのライブラリパスに追加する必要があります。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.preloaders.SplashScreen.xml"><linktext>spark.preloaders.SplashScreen</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:url:get"><apiName>url</apiName><shortdesc>
      この Application の SWF ファイルがロードされた URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      この Application の SWF ファイルがロードされた URL です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      アプリケーションのソースを参照できる URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      アプリケーションのソースを参照できる URL です。このプロパティを設定すると、「ソースの表示」メニューアイテムがアプリケーションのデフォルトのコンテキストメニューに挿入されます。 このメニューアイテムを選択すると、新しいウィンドウに <codeph>viewSourceURL</codeph> が開きます。
           <p>次の例に示すように、<codeph>viewSourceURL</codeph> プロパティは、ActionScript ではなく MXML を使用して設定する必要があります。</p>
           <pre>
        &lt;Application viewSourceURL="http://path/to/source">
          ...
        &lt;/Application></pre>
                </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Button"><apiName>Button</apiName><shortdesc>
  Button コンポーネントは、使用頻度の高い四角形のボタンを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  テキストシャドウのアルファです。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  テキストシャドウのカラーです。
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:Button" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  emphasized フラグが true の時にボタンにカラーが適用されます。 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Button&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Button 
    <strong>Properties</strong>
    emphasized="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Button コンポーネントは、使用頻度の高い四角形のボタンを表します。Button コンポーネントは、押すことができるような外観をしています。デフォルトスキンはテキストラベルです。コントロールにイメージを追加するにはカスタムスキンクラスを定義します。
 
  <p>通常、ボタンはイベントリスナーを使用して、ユーザーがコントロールを選択したときのアクションを実行します。Button コントロールのマウスをクリックしたときに Button コントロールが有効である場合は、<codeph>click</codeph> イベントと <codeph>buttonDown</codeph> イベントが送出されます。 ボタンは、有効か無効かにかかわらず、<codeph>mouseMove</codeph>、<codeph>mouseOver</codeph>、<codeph>mouseOut</codeph>、<codeph>rollOver</codeph>、<codeph>rollOut</codeph>、<codeph>mouseDown</codeph>、<codeph>mouseUp</codeph> などのイベントを必ず送出します。</p>
 
  <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
 
  <p>Button コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コントロールのテキストラベル全体を表示できる幅です。</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 21 ピクセル、高さ 21 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonSkin"><linktext>spark.skins.spark.ButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:Button:Button"><apiName>Button</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
     フォーカスマネージャーの要求に従ってデフォルトボタンを反映させます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="emphasizedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
     フォーカスマネージャーの要求に従ってデフォルトボタンを反映させます。このプロパティは、通常、ボタンがコンテナまたはフォームでデフォルトボタンとして機能するときにフォーカスマネージャーによって設定されます。true に設定すると、<codeph>emphasized</codeph> スタイルがボタンの <codeph>styleName</codeph> プロパティの末尾に追加されます。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.managers.FocusManager.defaultButton.xml"><linktext>mx.managers.FocusManager.defaultButton</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  CheckBox コンポーネントは、オプションのラベルと、チェックマークの表示と非表示の状態を保持する小さなボックスから構成されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:CheckBox" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:CheckBox" playerVersion="Flash10" theme="mobile" type="String">
<description>
  ラベルに対するアイコンの方向です。 有効な MXML 値は、<codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> および <codeph>top</codeph> です。
 
  <p>ActionScript では、このプロパティを設定するために、<codeph>IconPlacement.RIGHT</codeph>、<codeph>IconPlacement.LEFT</codeph>、<codeph>IconPlacement.BOTTOM</codeph> および <codeph>IconPlacement.TOP</codeph> の各定数を使用できます。</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:CheckBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
  <pre>
  &lt;s:CheckBox
    <strong>Properties</strong>
    symbolColor="0x000000"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  CheckBox コンポーネントは、オプションのラベルと、チェックマークの表示と非表示の状態を保持する小さなボックスから構成されます。 
 
  <p>ユーザーが CheckBox コンポーネントまたはそれに関連付けられたテキストをクリックすると、CheckBox コンポーネントの <codeph>selected</codeph> プロパティが、チェックマークありの場合は <codeph>true</codeph> に、チェックマークなしの場合は <codeph>false</codeph> に設定されます。</p>
 
  <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
 
  <p>CheckBox コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コントロールのテキストラベル全体を表示できる幅です。</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 18 ピクセル、高さ 18 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.CheckBoxSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#CheckBoxSkin"><linktext>spark.skins.spark.CheckBoxSkin</linktext></link></related-links><apiConstructor id="spark.components:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Group"><apiName>Group</apiName><shortdesc>
  Group クラスは、ビジュアルエレメントの基本コンテナクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="mxmlContent"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  テキストシャドウのアルファです。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  テキストシャドウのカラーです。
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Group&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Group
    <strong>Properties</strong>
    blendMode="auto"
    mxmlContent="null"
    scaleGridBottom="null"
    scaleGridLeft="null"
    scaleGridRight="null"
    scaleGridTop="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Group クラスは、ビジュアルエレメントの基本コンテナクラスです。Group コンテナは、IUIComponent インターフェイスを実装する任意のコンポーネントと、IGraphicElement インターフェイスを実装する任意のコンポーネントを子として受け取ります。視覚的な子である、ビジュアルコンポーネントとグラフィックコンポーネントの両方を管理する場合に、このコンテナを使用します。 
 
  <p>パフォーマンスを向上させると共にアプリケーションのサイズを最小限に抑えるため、Group コンテナにはスキンを適用できません。スキンを適用するには、代わりに SkinnableContainer を使用します。</p>
 
  <p><b>メモ：</b>コンポーネントや別の Group など、Group の内部に DisplayObject の子がある場合、スケールグリッドが正しく機能しないことがあります。子が GraphicElement オブジェクトで、それらすべてが Group の DisplayObject を共有する場合、スケールグリッドは正しく機能します。</p> 
 
  <p>子の GraphicElement で次のいずれかのプロパティを設定すると、GraphicElement は独自の DisplayObject を作成する必要があり、したがって Group でのスケールグリッドプロパティは否定されます。</p>  
 
  <pre>
  alpha
  blendMode other than BlendMode.NORMAL or "auto"
  colorTransform
  filters
  mask
  matrix
  rotation
  scaling
  3D properties
  bounds outside the extent of the Group
  </pre>
 
  <p>Group コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="GroupExample.mxml"><swfblock conref="examples/GroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  ビジュアルエレメントがコンテンツホルダーから削除されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビジュアルエレメントがコンテンツホルダーから削除されたときに送出されます。<codeph>event.element</codeph> は、削除されるビジュアルエレメントです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  ビジュアルエレメントがコンテンツホルダーに追加されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビジュアルエレメントがコンテンツホルダーに追加されたときに送出されます。<codeph>event.element</codeph> は、追加されたビジュアルエレメントです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Group:Group"><apiName>Group</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Group:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      エレメントが変更されてその再描画が必要であることを、ホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>変更されたエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントが変更されてその再描画が必要であることを、ホストコンポーネントに通知します。Group は、IGraphicElement に対して <codeph>validateDisplayList()</codeph> メソッドを呼び出して再描画することができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      エレメントが変更されてプロパティの検証が必要であることを、ホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>変更されたエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントが変更されてプロパティの検証が必要であることを、ホストコンポーネントに通知します。Group は、IGraphicElement に対して <codeph>validateProperties()</codeph> メソッドを呼び出してそのプロパティをコミットすることがきでます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      エレメントレイヤーが変更されたことをホストに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>サイズが変更されたエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントレイヤーが変更されたことをホストに通知します。Group は、共有された DisplayObject があるエレメントのシーケンスを再評価し、必要に応じて DisplayObject の再割り当てを行い、そのシーケンスを結果として再描画します。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      エレメントサイズが変更されたことをホストコンポーネントに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>サイズが変更されたエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントサイズが変更されたことをホストコンポーネントに通知します。Group は、IGraphicElement に対して <codeph>validateSize()</codeph> メソッドを呼び出してそのサイズを検証することができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:Group:baselinePositionElement:get"><apiName>baselinePositionElement</apiName><shortdesc>
      GroupBase の baselinePosition を計算するために使用されるエレメントです。 
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      GroupBase の baselinePosition を計算するために使用されるエレメントです。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:blendMode:get"><apiName>blendMode</apiName><shortdesc>
      使用するブレンドモードを指定する BlendMode クラスの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      使用するブレンドモードを指定する BlendMode クラスの値です。内部的には、2 つの方法でビットマップを描画できます。ブレンドモードを有効にした場合、または外部クリッピングマスクを使用する場合には、ビットマップで塗りつぶされた四角形シェイプをベクターレンダーに追加することによってビットマップが描画されます。このプロパティを無効な値に設定しようとすると、Flash Player または Adobe AIR は値を <codeph>BlendMode.NORMAL</codeph> に設定します。 
     
      <p>"auto"（デフォルト）は、blendMode を Group が使用する場合に固有の値で、基盤となる blendMode を <codeph>BlendMode.NORMAL</codeph> にする必要があることを示しています。ただし、<codeph>alpha</codeph> が 0 または 1 でないときは、<codeph>BlendMode.LAYER</codeph> に設定されます。この動作により、グループが透明な場合に、グラフィックオブジェクトが正しく合成されるようになります。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/blendMode"><linktext>flash.display.DisplayObject.blendMode</linktext></link><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Group:scaleGridBottom:get"><apiName>scaleGridBottom</apiName><shortdesc>
      スケールグリッドの下座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      スケールグリッドの下座標を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridLeft:get"><apiName>scaleGridLeft</apiName><shortdesc>
     スケールグリッドの左座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     スケールグリッドの左座標を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridRight:get"><apiName>scaleGridRight</apiName><shortdesc>
     スケールグリッドの右座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     スケールグリッドの右座標を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridTop:get"><apiName>scaleGridTop</apiName><shortdesc>
     スケールグリッドの上座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     スケールグリッドの上座標を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc>
      この Group のビジュアルコンテンツの子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      この Group のビジュアルコンテンツの子です。このメソッドは Flex が内部的に使用するものであり、開発者が直接使用することができません。
     
      <p>コンテンツアイテムは、IVisualElement オブジェクトのみである必要があります。ビジュアルエレメントは一度に 1 つのコンテナ内でのみ使用できるため、<codeph>mxmlContent</codeph> 配列は、複数の Group コンテナの間で共有されていない必要があります。</p>
     
      <p>コンテンツが配列である場合は、その配列を直接変更しないでください。代わりに、Group クラスによって定義されたメソッドを使用します。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconPlacement"><apiName>IconPlacement</apiName><shortdesc>
      IconPlacement クラスは、Button、CheckBox、RadioButton または ToggleButton の iconPlacement スタイルの値として使用できる定数を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      IconPlacement クラスは、Button、CheckBox、RadioButton または ToggleButton の <codeph>iconPlacement</codeph> スタイルの値として使用できる定数を定義します。
      
      </apiDesc></apiClassifierDetail><apiValue id="spark.components:IconPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
          ラベルの下にアイコンが表示されるように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
          ラベルの下にアイコンが表示されるように指定します。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
          ラベルの左にアイコンが表示されるように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
          ラベルの左にアイコンが表示されるように指定します。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
          ラベルの右にアイコンが表示されるように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
          ラベルの右にアイコンが表示されるように指定します。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:TOP"><apiName>TOP</apiName><shortdesc>
          ラベルの上にアイコンが表示されるように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
          ラベルの上にアイコンが表示されるように指定します。
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextInput"><apiName>TextInput</apiName><shortdesc>
  TextInput は、1 行のテキストを均一のフォーマットで入力および編集するときに使用するテキスト入力コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="lineBreak"/><Exclude kind="style" name="verticalAlign"/><DefaultProperty name="text"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextInput&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextInput
    <strong>Properties</strong>
    widthInChars="<i>Calculated default</i>"  <b>[applies to Spark theme]</b>
  
    <strong>Events</strong>
    enter="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextInput は、1 行のテキストを均一のフォーマットで入力および編集するときに使用するテキスト入力コントロールです。
   <p><b>Spark テーマの TextInput スキンは RichEditableText クラスを使用します。つまり、Spark の TextInput コントロールは、Flash Text Engine（FTE）上に構築される Text Layout Framework（TLF）ライブラリをサポートしています。</b>これらのレイヤーを組み合わせることにより、国際化対応の高品質な文字体裁とレイアウト機能を備えたテキスト編集が可能になります。</p>
 
  <p><b>モバイルテーマの TextInput スキンは、RichEditableText ではなく StyleableStageText クラスを使用します。</b> StyleableStageText はネイティブテキストフィールドを使用するので、モバイルデバイス上のテキストの入力および操作がしやすくなりますが、考慮すべき<xref href="supportClasses/StyleableStageText.html">制限および相違</xref>があります。 StageText が使用するネイティブテキストコントロールは、テキストの周りに様々なパディングを適用します。 垂直スクロールを回避するために、StageText ベースの TextInput スキンは、このパディングを予測して補正しようとします。 ネイティブテキストコントロールがテキストを処理する方法が、この点および他の点で異なるために、StageText ベースのスキンを使用した TextInput コントロールのデフォルトの高さは、TextField ベースの TextInput スキンを使用した場合のデフォルトの高さとは異なります。
 </p>
   <p><codeph>text</codeph> プロパティを使用すると、表示するテキストを設定したり、ユーザーが入力したテキストを取得したりできます。このプロパティは String なので、ユーザーが 123.45 のような数値を入力した場合は "123.45" として扱われます。</p>
   <p>テキストのフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> などの CSS スタイルを使用して設定されます。</p>
   <p>Spark テーマでは、<codeph>widthInChars</codeph> プロパティを使用してコントロールの幅を指定できます。この方法は、フォントサイズに応じて拡大 / 縮小する幅を指定するのに便利です。また、<codeph>typicalText</codeph> プロパティを使用することもできます。 <codeph>typicalText</codeph> を使用すると、<codeph>widthInChars</codeph> プロパティは無視されることに注意してください。 すべてのテーマで、幅をピクセル単位で明示的に指定したり、パーセントで指定したり、<codeph>left</codeph> や <codeph>right</codeph> などの制約を使用したりすることもできます。通常は高さを明示的に指定する必要はありません。コントロールのデフォルトの高さは、1 行のテキストを十分に表示できるように設定されています。
  </p>
   <p><codeph>maxChars</codeph> プロパティを使用して、ユーザーが入力できる文字数を制限したり、<codeph>restrict</codeph> を使用して、ユーザーが入力できる文字を制限したりすることもできます。パスワード入力用にこのコントロールを使用するには、<codeph>displayAsPassword</codeph> プロパティを <codeph>true</codeph> に設定します。</p>
   <p>モバイルテーマの場合、ソフトキーボード固有のプロパティである、<codeph>autoCapitalize</codeph>、<codeph>autoCorrect</codeph>、<codeph>returnKeyLabel</codeph> および <codeph>softKeyboardType</codeph> プロパティでキーボードヒントを指定します。 ソフトキーボードは存在するが、ヒントで表される機能をサポートしない場合は、ヒントが無視されます。ハードウェアキーボードのみのモバイル環境では、これらのヒントが無視されます。 
  </p>
  
  <p>このコントロールは複数行のテキスト入力をサポートしないので、ユーザーが Enter キーを押すと、改行が挿入される代わりに、<codeph>FlexEvent.ENTER</codeph> イベントが送出されます。デフォルトでは、このコントロールには明示的な改行があります。</p>
   <p>このコントロールはスキナブルコントロールで、デフォルトスキンには、Spark テーマの場合は RichEditableText インスタンスが含まれ、Mobile テーマの場合は StyleableStageText インスタンスが含まれます。 それがテキストの表示および編集を処理します。また、このスキンは境界線と背景の描画も処理します。この RichEditableText または StyleableStageText インスタンスには <codeph>textDisplay</codeph> オブジェクトとしてアクセスできます。モバイルテーマで StageText ベースのスキンではなく TextField ベースのスキンを使用する場合は、<codeph>skinClass</codeph> プロパティを「<codeph>spark.skins.mobile.TextInputSkin</codeph>」に設定します。</p>
   <p>Spark テーマの場合、RichEditableText では TLF が使用されるので、Spark 版の TextInput コントロールではフランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語のように双方向から読まれるテキストを表示できます。 主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>rtl</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>start</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>ltr</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>rtl</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>end</codeph> に設定します。</p>
   <p>また、Spark の TextInput では TLF が使用されるので、1 回の編集セッション内で取り消し / やり直し操作を何度でも実行できます。編集セッションは、コントロールがキーボードフォーカスを取得したときに開始され、コントロールがフォーカスを失ったときに終了します。</p>
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
   <p>Spark テーマの場合、TextInput コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 128 ピクセル、高さ 22 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.TextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>Mobile テーマの場合、TextInput コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.mobile.StageTextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextInputSkin.xml"><linktext>spark.skins.mobile.StageTextInputSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextInputSkin.xml"><linktext>spark.skins.mobile.TextInputSkin</linktext></link><link href="spark.skins.spark.xml#TextInputSkin"><linktext>spark.skins.spark.TextInputSkin</linktext></link><link href="spark.components.xml#TextArea"><linktext>TextArea</linktext></link></related-links><adobeApiEvent id="spark.components:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  ユーザーが Enter キーを押したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが Enter キーを押したときに送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TextInput:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      em 単位で測定されたコントロールのデフォルトの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
           </apiDefaultValue></apiValueDef><apiDesc>
      em 単位で測定されたコントロールのデフォルトの幅です。
           <p>em は活字の測定単位で、ポイントサイズと同じです。必ずしも「M」の文字の幅と正確に一致しているわけではありませんが、多くのフォントでは、「M」が約 1 em の幅になっています。コントロールの <codeph>fontSize</codeph> スタイルは、em 単位をピクセル数で計算するために使用されます。</p>
           <p>例えば、約 20 文字のテキストを入力できるように TextInput の幅を設定する必要がある場合は、このプロパティを 20 に設定します。</p>
           <p>明示的な値、パーセント、または <codeph>left</codeph> および <codeph>right</codeph> 制約を使用して幅を指定すると、このプロパティは無視されます。</p>
           <p><codeph>typicalText</codeph> プロパティが設定されている場合も、このプロパティは無視されます。</p>
     
      <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
          
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Form"><apiName>Form</apiName><shortdesc>
  Spark の Form コンテナでは、フォームのレイアウトを制御し、フォームフィールドが必須かオプションであるかを明示し、エラーメッセージを処理し、フォームデータを Flex データモデルにバインドしてデータのチェックと検証を実行することができます。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Form">
<description>
  このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Form&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:Form&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/s:Form&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark の Form コンテナでは、フォームのレイアウトを制御し、フォームフィールドが必須かオプションであるかを明示し、エラーメッセージを処理し、フォームデータを Flex データモデルにバインドしてデータのチェックと検証を実行することができます。 また、スタイルシートを使用してフォームの外観を設定することもできます。
 
  <p>次の表に、Flex でフォームを作成するために使用するコンポーネントを示します。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="3"><thead><row><entry>コンポーネント</entry><entry>タグ</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>Form</entry>
           <entry><codeph>&lt;s:Form></codeph></entry>
           <entry>フォーム全体に対するコンテナ、およびフォーム全体のレイアウトを定義します。 フォームの内容は、FormHeading コントロールおよび FormItem コントロールを使用して定義します。また、Form コンテナに他のタイプのコンポーネントを挿入することもできます。</entry>
        </row><row>
           <entry>FormHeading</entry>
           <entry><codeph>&lt;s:FormHeading></codeph></entry>
           <entry>フォーム内の見出しを定義します。  </entry>
        </row><row>
           <entry>FormItem</entry>
           <entry><codeph>&lt;s:FormItem></codeph></entry>
           <entry>フォームに収容する子を、水平方向または垂直方向に揃えて配置します。 フォームの子には、コントロールやその他のコンテナなどがあります。 1 つの Form コンテナで複数の FormItem コンテナを保持できます。</entry>
        </row><row>
           <entry>FormLayout</entry>
           <entry><codeph>&lt;s:FormLayout></codeph></entry>
           <entry>Spark の Form スキンのデフォルトレイアウトを定義します。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example><example conref="StackedFormSkinExample.mxml"><swfblock conref="examples/StackedFormSkinExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormSkin"><linktext>spark.skins.spark.FormSkin</linktext></link></related-links><apiConstructor id="spark.components:Form:Form"><apiName>Form</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Form:invalidElements:get"><apiName>invalidElements</apiName><shortdesc>
      無効な状態の下位要素のソートされた配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      無効な状態の下位要素のソートされた配列です。配列内のアイテムは、次のプロパティが設定されたオブジェクトです。
     
      <ul>
        <li>element:UIComponent - 無効な下位要素エレメントです。</li>
     
        <li>position:Vector.&lt;int> - 表示リストツリーのエレメントの位置を示す整数の Vector です。このプロパティは配列のソートに使用されます。</li>  
      </ul>
     
      <p>下位要素が Form から削除されると、ディクショナリは更新されません。</p> 
         
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  NumericStepper コントロールを使用すると、一定の間隔で増減する数値を選択できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:NumericStepper">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
   </description>
<default>1
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントの境界線の表示を制御します。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  このコンポーネントの境界線の色です。
   </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの境界線のアルファです。
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#NumericStepper/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#NumericStepper/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components:NumericStepper" playerVersion="Flash10" required="true" var_type="spark.components:TextInput">
<description>
      ユーザーが NumericStepper コンポーネントの値を編集できるようにする、TextInput コントロールを定義するスキンパーツです。ユーザーが Enter キーを押すか、NumericStepper のフォーカスを外すか、または NumericStepper のステップを変えると、値が丸められてコミットされます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a TextInput control 
      which allows a user to edit the value of
      the NumericStepper component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:NumericStepper&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:NumericStepper
     <strong>Properties</strong>
    imeMode="null"
    maxChars="0"
    maximum="10"
    valueFormatFunction=""
    valueParseFunction=""
     <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
   baselineShift="0.0"
   blockProgression="TB"
   borderAlpha="0.5"
   borderColor="0x000000"
   borderVisible="true"
   breakOpportunity="AUTO"
   cffHinting="HORIZONTAL_STEM"
   color="0"
   contentBackgroundAlpha="1.0"
   contentBackgroundColor="0xFFFFFF"
   clearFloats="none"
   digitCase="DEFAULT"
   digitWidth="DEFAULT"
   direction="LTR"
   dominantBaseline="AUTO"
   firstBaselineOffset="AUTO"
   focusedTextSelectionColor=""
   fontFamily="Arial"
   fontLookup="DEVICE"
   fontSize="12"
   fontStyle="NORMAL"
   fontWeight="NORMAL"
   inactiveTextSelection=""
   justificationRule="AUTO"
   justificationStyle="AUTO"
   kerning="AUTO"
   leadingModel="AUTO"
   ligatureLevel="COMMON"
   lineHeight="120%"
   lineThrough="false"
   listAutoPadding="40"
   listStylePosition="outside"
   listStyleType="disc"
   locale="en"
   paragraphEndIndent="0"
   paragraphSpaceAfter="0"
   paragraphSpaceBefore="0"
   paragraphStartIndent="0"
   renderingMode="CFF"
   tabStops="null"
   textAlign="START"
   textAlignLast="START"
   textAlpha="1"
   textDecoration="NONE"
   textIndent="0"
   textJustify="INTER_WORD"
   textRotation="AUTO"
   trackingLeft="0"
   trackingRight="0"
   typographicCase="DEFAULT"
   unfocusedTextSelectionColor=""
   whiteSpaceCollapse="COLLAPSE"
   wordSpacing="100%,50%,150%"
 /&gt;
 </pre>
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components:Spinner</apiBaseClassifier></apiClassifierDef><apiDesc>
  NumericStepper コントロールを使用すると、一定の間隔で増減する数値を選択できます。NumericStepper は Spinner コンポーネントと同じ機能を提供しますが、コンポーネントの値を、コントロールの矢印ボタンを使用して変更するのではなく直接編集できるように、TextInput コントロールを追加します。
   <p>NumericStepper コントロールは、単一行のテキスト入力フィールドと、使用できる値を表示するための 2 つの矢印ボタンから構成されます。上矢印キー、下矢印キーおよびマウスホイールを使用して値を変更することもできます。ユーザーが Enter キーを押すか、コンポーネントのフォーカスを外すか、あるいは矢印ボタンの操作または <codeph>changeValueByStep()</codeph> メソッドの呼び出しを通じて NumericStepper のステップを変えると、入力値がコミットされます。</p>
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
   <p>NumericStepper コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 53 ピクセル、高さ 23 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 40 ピクセル、高さ 40 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.NumericStepperSkin
              <p>spark.skins.spark.NumericStepperTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#NumericStepperSkin"><linktext>spark.skins.spark.NumericStepperSkin</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      コンストラクター
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクター
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      IME（Input Method Editor）のモードを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      IME（Input Method Editor）のモードを指定します。 IME を使用することによって、ユーザーは中国語、日本語、および韓国語のテキストを入力できます。Flex では、コントロールにフォーカスが置かれたときに、IME を指定されたモードに設定し、コントロールからフォーカスが離れたときに、元のモードに戻します。
          <p>flash.system.IMEConversionMode クラスで、このプロパティの有効な値の定数を定義します。IME を指定しない場合は、<codeph>null</codeph> を指定します。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      フィールドに入力できる最大の文字数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      フィールドに入力できる最大の文字数です。 値が 0 の場合は、文字をいくつでも入力できます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueFormatFunction:get"><apiName>valueFormatFunction</apiName><shortdesc>
      スキンの textDisplay プロパティで表示される値を書式設定するコールバック関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      スキンの <codeph>textDisplay</codeph> プロパティで表示される値を書式設定するコールバック関数です。この関数は、単一の数値を引数として受け取り、形式を設定したストリングを返します。
           <p>この関数のシグネチャは次のとおりです。</p>
      <pre>
      funcName(value:Number):String
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueParseFunction:get"><apiName>valueParseFunction</apiName><shortdesc>
      スキンの textDisplay フィールドで表示される値から数値を抽出するコールバック関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      スキンの <codeph>textDisplay</codeph> フィールドで表示される値から数値を抽出するコールバック関数です。この関数は、単一のストリングを引数として受け取り、数値を返します。
           <p>この関数のシグネチャは次のとおりです。</p>
      <pre>
      funcName(value:String):Number
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:maximum:set"><apiName>maximum</apiName><shortdesc>
      value に設定可能な最大値を表す数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>value</codeph> に設定可能な最大値を表す数値です。<codeph>minimum</codeph> または <codeph>value</codeph> の値が <codeph>maximum</codeph> よりも大きい場合、その値は新しい <codeph>maximum</codeph> を反映するように変更されます。
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Spinner"><apiName>Spinner</apiName><shortdesc>
  Spinner コンポーネントは一定の間隔で増減する値を選択します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Spinner">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabled" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  通常の状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのフォーカス枠のアルファです。
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの角の半径です。
   </description>
<default>2
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="decrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      押されたときに <codeph>value</codeph> プロパティを <codeph>stepSize</codeph> 分だけデクリメントするボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, decrements the value property
      by stepSize.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      押されたときに <codeph>value</codeph> プロパティを <codeph>stepSize</codeph> 分だけインクリメントするボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, increments the value property
      by stepSize.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Spinner&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Spinner
    <strong>Properties</strong>
    allowValueWrap="false"
  
    <strong>Events</strong>
    change="<i>No default</i>"
     <strong>Styles</strong>
    cornerRadius="2"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
      
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spinner コンポーネントは一定の間隔で増減する値を選択します。<codeph>stepSize</codeph> プロパティの現在の値に基づいて、現在の値を増減させる 2 つのボタンを使用します。
  
  <p>Spinner は、現在の値を増やすためのボタンと現在の値を減らすためのボタンという、2 つの必須ボタンで構成されます。ユーザーは、上矢印キーと下矢印キーおよびマウスホイールを使用して値を変更することもできます。ユーザーが Enter キーを押すか、コンポーネントのフォーカスを外すか、あるいは矢印ボタンの操作または <codeph>changeValueByStep()</codeph> メソッドの呼び出しを通じて Spinner のステップを変えると、入力値がコミットされます。</p>
   <p>Spinner コンポーネントのスケールは、<codeph>value</codeph> プロパティに対して許可される値のセットです。許可される値は、<codeph>snapInterval</codeph> プロパティの整数倍と minimum の合計で、<codeph>maximum</codeph> 値以下です。次に実際の使用例を示します。</p>
  
  <ul>
    <li><codeph>minimum</codeph> = -1</li>
    <li><codeph>maximum</codeph> = 10</li>
    <li><codeph>snapInterval</codeph> = 3</li>
  </ul>
  
  この場合、スケールは {-1,2,5,8,10} です。
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
   <p>Spinner コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 19 ピクセル、高さ 23 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 12 ピクセル、高さ 12 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.SpinnerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="SpinnerExample.mxml"><swfblock conref="examples/SpinnerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#SpinnerSkin"><linktext>spark.skins.spark.SpinnerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Spinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  ユーザー操作の結果として Spinner コントロールの値が変化したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザー操作の結果として Spinner コントロールの値が変化したときに送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Spinner:Spinner"><apiName>Spinner</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Spinner:allowValueWrap:get"><apiName>allowValueWrap</apiName><shortdesc>
      現在の value が maximum 値または minimum 値である場合のステップに適用する、コントロールのビヘイビアーを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      現在の <codeph>value</codeph> が <codeph>maximum</codeph> 値または <codeph>minimum</codeph> 値である場合のステップに適用する、コントロールのビヘイビアーを決定します。<codeph>allowValueWrap</codeph> が <codeph>true</codeph> の場合は、<codeph>maximum</codeph> 値から <codeph>minimum</codeph> 値、または <codeph>minimum</codeph> 値から <codeph>maximum</codeph> 値に、<codeph>value</codeph> プロパティが折り返されます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ResizeMode"><apiName>ResizeMode</apiName><shortdesc>
  ResizeMode クラスは、レイアウトシステムによって指定されたサイズでコンポーネントがその子をサイズ変更するために使用する、モードの列挙を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ResizeMode クラスは、レイアウトシステムによって指定されたサイズでコンポーネントがその子をサイズ変更するために使用する、モードの列挙を定義します。
 
  <p>コンポーネントは、それ自身のサイズ（<codeph>width</codeph> および <codeph>height</codeph>）を変更し、その子を適切に再レイアウトできます（これはデフォルトのサイズ変更モードです）。</p>
 
  <p>コンポーネントのもう 1 つのオプションは、そのスケールを変更する方法です。この場合、子を変更する必要はまったくありません。このオプションは、<codeph>Group</codeph> によってサポートされています。</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ResizeMode:NO_SCALE"><apiName>NO_SCALE</apiName><shortdesc>
      width と height を変更することによってサイズを変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>width</codeph> と <codeph>height</codeph> を変更することによってサイズを変更します。
     
      <p>コンポーネントは常にそれ自体のサイズを設定してから、レイアウトまたはユーザーによって指定された実際のサイズでその子をレイアウトします。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ResizeMode:SCALE"><apiName>SCALE</apiName><shortdesc>
      scaleX プロパティと scaleY プロパティを設定することによってサイズを変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>scaleX</codeph> プロパティと <codeph>scaleY</codeph> プロパティを設定することによってサイズを変更します。
     
      <p>コンポーネントは常にそれ自体のサイズを設定してから、その測定されたサイズでその子をレイアウトします。スケールは、レイアウトまたはユーザーによって指定されたサイズに一致するように調整されます。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
  NavigatorContent クラスは、ViewStack、TabNavigator、Accordion などの MX ナビゲーターコンテナで使用できる Spark コンテナを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NavigatorContent&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NavigatorContent
    <strong>Properties</strong>
    icon="null"
    label=""
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  NavigatorContent クラスは、ViewStack、TabNavigator、Accordion などの MX ナビゲーターコンテナで使用できる Spark コンテナを定義します。
 
  <p>NavigatorContent コンテナは、MX ナビゲーターコンテナの外では使用しないでください。</p>
 
  <p>NavigatorContent コンテナの作成ポリシーは、親のナビゲーターコンテナの作成ポリシーに基づいています。 </p>
 
  <ul>
    <li>親の作成ポリシーが none に設定されている場合、NavigatorContent の作成ポリシーも none になります。</li>
    <li>親の作成ポリシーが all に設定されている場合、NavigatorContent の作成ポリシーも all になります。</li>
    <li>親の作成ポリシーが auto に設定されている場合、NavigatorContent の作成ポリシーは none になります。</li>
  </ul>
 
  <p>NavigatorContent コンテナでは、作成ポリシーのキューはサポートされません。</p>
 
  <p>NavigatorContent コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NavigatorContentExample.mxml"><swfblock conref="examples/NavigatorContentExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiConstructor id="spark.components:NavigatorContent:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるアイコンのクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるアイコンのクラスです。
     
      <p>例えば、この Container が TabNavigator の子である場合、対応するタブにこのアイコンが表示されます。この Container が Accordion の子である場合、対応するヘッダーにこのアイコンが表示されます。</p>
     
      <p>SWF ファイルにアイコンを埋め込むには、次の @Embed() MXML コンパイラーディレクティブを使用します。</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>イメージには JPEG、GIF、PNG、SVG、または SWF ファイルを使用できます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるテキストです。
     
      <p>例えば、この Container が TabNavigator の子である場合、対応するタブにこのストリングが表示されます。この Container が Accordion の子である場合、対応するヘッダーにこのストリングが表示されます。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VSlider"><apiName>VSlider</apiName><shortdesc>
  VSlider（垂直スライダー）コントロールを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VSlider">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:VSlider/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  VSlider（垂直スライダー）コントロールを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。 スライダートラックは上下に広がります。スライダーの現在の値は、スライダーの両終点の間におけるサムの相対位置によって決定されます。スライダーの両終点は、スライダーの最小値と最大値に対応します。
 
  <p>スライダーは、最小値から最大値までの範囲を無段階に移動できるか、または最小値から最大値までの範囲内で段階的にのみ移動できます。 データヒントを使用して現在の値を表示できます。</p>
   <p>VSlider コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 11 ピクセル、高さ 100 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 11 ピクセル、高さ 11 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.VSliderSkin
              <p>spark.skins.spark.VSliderThumbSkin</p>
              <p>spark.skins.spark.VSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VSliderExample.mxml"><swfblock conref="examples/VSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VSliderSkin"><linktext>spark.skins.spark.VSliderSkin</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
  ToggleButton コンポーネントはトグルボタンを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ToggleButton">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ToggleButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButton/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleButton コンポーネントはトグルボタンを定義します。このボタンをクリックすると、アップ状態とダウン状態が切り替わります。このボタンがアップ状態のときにボタンをクリックすると、ダウン状態に切り替わります。元のアップ状態に切り替えるには、ボタンをもう一度クリックする必要があります。
 
  <p>プログラムで <codeph>selected</codeph> プロパティを使用してこの状態を取得または設定できます。</p>
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
   <p>ToggleButton コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コントロールのテキストラベル全体を表示できる幅です。</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 21 ピクセル、高さ 21 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ToggleButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ToggleButtonExample.mxml"><swfblock conref="examples/ToggleButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ToggleButtonSkin"><linktext>spark.skins.spark.ToggleButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleButton:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:FormHeading"><apiName>FormHeading</apiName><shortdesc>
  Spark の FormHeading コンテナは、Spark の Form コンテナ内にあるコントロールのグループの見出しを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:FormHeading">
<description>
  このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントの背景色です。
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの背景のアルファレベルです。有効な値の範囲は 0.0 ～ 1.0 です。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:FormHeading" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#FormHeading/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#FormHeading/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#FormHeading/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#FormHeading/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:FormHeading" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormHeading" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      この FormItem の label を表示するビジュアルエレメントへの参照です。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormHeading&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormHeading
    <strong>Properties</strong>
    label=""
  
    <strong>Common Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark の FormHeading コンテナは、Spark の Form コンテナ内にあるコントロールのグループの見出しを表示します。1 つの Form コンテナ内に複数の FormHeading コンテナを指定できます。
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormHeadingSkin"><linktext>spark.skins.spark.FormHeadingSkin</linktext></link></related-links><apiConstructor id="spark.components:FormHeading:FormHeading"><apiName>FormHeading</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:FormHeading:label:get"><apiName>label</apiName><shortdesc>
      FormHeading コンポーネントに表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      FormHeading コンポーネントに表示されるテキストです。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  HScrollBar（水平の ScrollBar）コントロールを使用すると、データが多すぎて表示領域に水平に収まらない場合に、表示される部分のデータを制御できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:HScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:HScrollBar
     <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  HScrollBar（水平の ScrollBar）コントロールを使用すると、データが多すぎて表示領域に水平に収まらない場合に、表示される部分のデータを制御できます。
 
  <p>HScrollBar コントロールは単独のコントロールとしても使用できますが、通常はコンポーネントの他のグループに構成部分として組み込み、スクロール機能を実現します。</p>
   <p>HScrollBar コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 85 ピクセル、高さ 15 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 35 ピクセル、高さ 35 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.HScrollBarSkin
              <p>spark.skins.spark.HScrollBarThumbSkin</p>
              <p>spark.skins.spark.HScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="HScrollBarExample.mxml"><swfblock conref="examples/HScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HScrollBarSkin"><linktext>spark.skins.spark.HScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:HScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  mouseWheel イベントのために horizontalScrollPosition が変わるときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>mouseWheel</codeph> イベントのために <codeph>horizontalScrollPosition</codeph> が変わるときに送出されます。
 
  <p>デフォルトの動作は、「ステップ」数 <codeph>delta</codeph> のイベントによる水平方向のスクロールです。 スクロール方向に応じて <codeph>LEFT</codeph> または <codeph>RIGHT</codeph> を使用したビューポートの <codeph>getHorizontalScrollPositionDelta</codeph> メソッドによって、ステップの幅が決まります。</p>
 
  <p>イベントに対して <codeph>preventDefault()</codeph> メソッドを呼び出すと、水平方向のスクロール位置は変更されません。 それ以外の場合に、イベントの <codeph>delta</codeph> プロパティを変更すると、その値が水平方向の「ステップ」数として使用されます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:HScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      increase が true の場合はページごとのインクリメント値、increase が false の場合はページごとのデクリメント値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>value</codeph> をインクリメント（<codeph>true</codeph>）するかデクリメント（<codeph>false</codeph>）するかを指定します。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>increase</codeph> が <codeph>true</codeph> の場合は、ページごとに <codeph>value</codeph> をインクリメントし、<codeph>increase</codeph> が <codeph>false</codeph> の場合は、ページごとに <codeph>value</codeph> をデクリメントします。スクロールバーの <codeph>value</codeph> が増えると、ビューポートが右にスクロールします。<codeph>value</codeph> が減ると、ビューポートが左にスクロールします。
      
      <p><codeph>viewport</codeph> プロパティが設定されている場合は、viewport の <codeph>getHorizontalScrollPositionDelta()</codeph> メソッドを使用してページのインクリメントサイズが計算されます。<codeph>viewport</codeph> が null の場合は、スクロールバーの <codeph>pageSize</codeph> プロパティが使用されます。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      viewport が null でない場合は、ビューポートをスクロールすることによって、行アップまたは行ダウン操作の水平スクロール位置を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>スクロールが行アップであるか（<codeph>true</codeph>）行ダウンであるか（<codeph>false</codeph>）を指定します。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>viewport</codeph> が null でない場合は、ビューポートをスクロールすることによって、行アップまたは行ダウン操作の水平スクロール位置を変更します。このメソッドは、<codeph>flash.ui.Keyboard.RIGHT</codeph> または <codeph>flash.ui.Keyboard.LEFT</codeph> と共に <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph> メソッドを呼び出すことによって、スクロールする量を計算します。その後、<codeph>setValue()</codeph> メソッドを呼び出して、<codeph>IViewport.horizontalScrollPosition</codeph> プロパティを適切な値に設定します。
           <p><codeph>viewport</codeph> が null の場合は、<codeph>changeValueByStep()</codeph> メソッドを呼び出すことによって、行アップまたは行ダウン操作のスクロール位置を変更します。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      value プロパティを更新し、viewport が null でない場合はその horizontalScrollPosition を value に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> プロパティの新しい値です。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>value</codeph> プロパティを更新し、viewport が null でない場合はその <codeph>horizontalScrollPosition</codeph> を <codeph>value</codeph> に設定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#HScrollBar/viewport"><linktext>viewport</linktext></link></related-links></apiOperation><apiValue id="spark.components:HScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      このスクロールバーによって制御されるビューポートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      このスクロールバーによって制御されるビューポートです。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ScrollSnappingMode"><apiName>ScrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List/scrollSnappingMode"><linktext/></link><link href="spark.components.xml#Scroller/scrollSnappingMode"><linktext/></link></related-links><apiValue id="spark.components:ScrollSnappingMode:CENTER"><apiName>CENTER</apiName><shortdesc>
          エレメントはビューポートの中央にスナップされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
          エレメントはビューポートの中央にスナップされます。
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:LEADING_EDGE"><apiName>LEADING_EDGE</apiName><shortdesc>
          エレメントはビューポートの左（水平方向）または上（垂直方向）のエッジにスナップされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>leadingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          エレメントはビューポートの左（水平方向）または上（垂直方向）のエッジにスナップされます。
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:NONE"><apiName>NONE</apiName><shortdesc>
          スクロールスナッピングはオフです.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
          スクロールスナッピングはオフです.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:TRAILING_EDGE"><apiName>TRAILING_EDGE</apiName><shortdesc>
          エレメントはビューポートの右（水平方向）または下（垂直方向）のエッジにスナップされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>trailingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          エレメントはビューポートの右（水平方向）または下（垂直方向）のエッジにスナップされます。
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
  SkinnablePopUpContainer クラスは SkinnableContainer であり、ポップアップとして機能します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="closed" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash10">
<description>
  閉じた状態です。
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="no" name="softKeyboardEffectDuration" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash11" type="Number">
<description>
  
 
  </description>
<default>150
  
  </default>

<playerversion>AIR 3.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SkinnablePopUpContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnablePopUpContainer 
    <strong>Events</strong>
    close="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnablePopUpContainer クラスは SkinnableContainer であり、ポップアップとして機能します。SkinnablePopUpContainer コンテナの一般的な使用方法の 1 つは、アプリケーションで警告ウィンドウなどの簡単なウィンドウを開いて、ユーザーが特定のアクションを実行する必要があることを示すことです。
   <p>SkinnablePopUpContainer コンテナは、親コンテナの通常のレイアウトの一部として作成しないでください。このコンテナは、親の上にポップアップウィンドウとして表示されます。そのため、アプリケーションの MXML コードにこのコンテナを直接作成しないでください。</p>
   <p>代わりに、MXML コンポーネントとして、多くの場合は別の MXML ファイルに作成します。このコンポーネントを表示するには、MXML コンポーネントのインスタンスを作成して、<codeph>open()</codeph> メソッドを呼び出します。コンポーネントを開くときに、コンポーネントのサイズと位置を設定することもできます。</p>  
   <p>コンポーネントを閉じるには、<codeph>close()</codeph> メソッドを呼び出します。ポップアップがハンドラーにデータを返す必要がある場合は、<codeph>PopUp.CLOSE</codeph> イベントのイベントリスナーを追加し、返されたデータを <codeph>close()</codeph> メソッドで指定することができます。</p>
   <p>SkinnablePopUpContainer は、最初は <codeph>closed</codeph> スキン状態になっています。開くと、自分自身を PopUpManager にポップアップとして追加し、<codeph>normal</codeph> スキン状態に移行します。開くまたは閉じるアニメーションを定義するには、<codeph>closed</codeph> スキン状態と <codeph>normal</codeph> スキン状態の間のトランジションにカスタムスキンを使用します。</p>
 
  <p>SkinnablePopUpContainer コンテナには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row><row><entry>デフォルトスキンクラス</entry><entry>spark.skins.spark.SkinnablePopUpContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#SkinnablePopUpContainerSkin"><linktext>spark.skins.spark.SkinnablePopUpContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  コンテナが閉じられるときに、そのコンテナによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテナが閉じられるときに、そのコンテナによって送出されます。
 
  <p>このイベントは、コンテナが <codeph>normal</codeph> スキン状態から <codeph>closed</codeph> スキン状態に切り替わるときに、その状態へのトランジションが完了すると送出されます。</p>
 
  <p>このイベントによって、コンテナからイベントリスナーにコミット情報を渡すメカニズムが提供されます。この方法は、一般的に、キャンセルボタンのある複数選択ダイアログボックスを作成する場合などに使用します。 有効なオプションが選択されている場合、<codeph>commit</codeph> パラメーターに <codeph>true</codeph> を渡し、オプションで関連データも渡して <codeph>close()</codeph> メソッドを呼び出し、ポップアップを閉じます。SkinnablePopUpContainer は、閉じる処理を完了したときにこのイベントを送出します。その後、イベントリスナー内で <codeph>commit</codeph> プロパティを確認し、適切なアクションを実行できます。  </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  コンテナが開かれ、ユーザー操作に対する準備ができると、そのコンテナによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテナが開かれ、ユーザー操作に対する準備ができると、そのコンテナによって送出されます。
 
  <p>このイベントは、コンテナが <codeph>closed</codeph> スキン状態から <codeph>normal</codeph> スキン状態に切り替わるときに、その状態へのトランジションが完了すると送出されます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnablePopUpContainer:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnablePopUpContainer:close"><apiName>close</apiName><shortdesc>
      現在のスキン状態を closed に変更し、すべての状態トランジションの再生が終了するまで待ってから、PopUpEvent.CLOSE イベントを送出し、PopUpManager からコンテナを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>戻りデータがアプリケーションによってコミットされる必要があるかどうかを指定します。この引数の値は <codeph>PopUpEvent</codeph> イベントオブジェクトの <codeph>commit</codeph> プロパティに書き込まれます。
     
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>アプリケーションに返されるデータを指定します。この引数の値は <codeph>PopUpEvent</codeph> イベントオブジェクトの <codeph>data</codeph> プロパティに書き込まれます。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      現在のスキン状態を <codeph>closed</codeph> に変更し、すべての状態トランジションの再生が終了するまで待ってから、<codeph>PopUpEvent.CLOSE</codeph> イベントを送出し、PopUpManager からコンテナを削除します。
           <p>ポップアップからメインアプリケーションにデータを戻すには、SkinnablePopUpContainer コンテナの <codeph>close()</codeph> メソッドを使用します。この方法は、一般的に、キャンセルボタンのあるダイアログボックスを作成する場合などに使用します。ダイアログボックスで有効なオプションが選択されている場合、<codeph>commit</codeph> パラメーターに <codeph>true</codeph> を渡し、オプションで関連データも渡して <codeph>close()</codeph> メソッドを呼び出し、ダイアログボックスを閉じます。SkinnablePopUpContainer は、閉じる処理を完了したときに <codeph>close</codeph> イベントを送出します。<codeph>close</codeph> イベントのイベントリスナー内で <codeph>commit</codeph> パラメーターを確認し、適切なアクションを実行できます。  </p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>open</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:protected:createSoftKeyboardEffect"><apiName>createSoftKeyboardEffect</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn><apiParam><apiItemName>yTo</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>heightTo</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:open"><apiName>open</apiName><shortdesc>
      コンテナをポップアップとして開き、スキン状態を closed から normal に切り替えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>コンテナのオーナーです。このコンテナの上にポップアップが表示されます。
           </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>コンテナがモーダルである必要があるかどうかを示します。モーダルコンテナは、閉じられるまですべてのキーボードとマウスの入力を受け取ります。非モーダルコンテナは、ポップアップウィンドウが開いている間も、他のコンポーネントが入力を受け入れることを許可します。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンテナをポップアップとして開き、スキン状態を <codeph>closed</codeph> から <codeph>normal</codeph> に切り替えます。トランジションの再生が完了した後、<codeph>FlexEvent.OPEN</codeph> イベントが送出されます。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>close</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:updatePopUpPosition"><apiName>updatePopUpPosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnablePopUpContainer:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      コンテナが開かれており、現在ポップアップとして表示されている場合は、true になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンテナが開かれており、現在ポップアップとして表示されている場合は、<codeph>true</codeph> になります。  
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>open</linktext></link><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>close</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:moveForSoftKeyboard:get"><apiName>moveForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownList"><apiName>DropDownList</apiName><shortdesc>
  DropDownList コントロールには、ユーザーが 1 つの値を選択できるドロップダウンリストが含まれています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DropDownList">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:DropDownList" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      プロンプトまたは選択されたアイテムのテキストを保持する、オプションのスキンパーツです。 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that holds the prompt or the text of the selected item.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownList&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DropDownList 
    <strong>Properties</strong>
    prompt=""
    typicalItem="null"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownList コントロールには、ユーザーが 1 つの値を選択できるドロップダウンリストが含まれています。その機能は、HTML の SELECT フォームエレメントによく似ています。
   <p>DropDownList コントロールは、アンカーボタン、プロンプト領域、およびドロップダウンリストで構成されます。ドロップダウンリストを開いたり閉じたりするには、アンカーボタンを使用します。プロンプト領域には、プロンプトのストリングまたはドロップダウンリストで選択されているアイテムが表示されます。</p>
   <p>ドロップダウンリストが開いているときは次のようになります。</p>
  <ul>
    <li>アンカーボタンをクリックすると、ドロップダウンリストが閉じて、現在選択されているデータアイテムがコミットされます。</li>
    <li>ドロップダウンリストの外側をクリックすると、ドロップダウンリストが閉じて、現在選択されているデータアイテムがコミットされます。</li>
    <li>データアイテムをクリックすると、そのアイテムが選択されて、ドロップダウンリストが閉じます。</li>
    <li><codeph>requireSelection</codeph> プロパティが <codeph>false</codeph> の場合、Ctrl キーを押しながらデータアイテムをクリックすると、アイテムの選択が解除されて、ドロップダウンリストが閉じます。</li>
  </ul>
   <p><b>メモ：</b>Spark のリストベースのコントロール（Spark の ListBase クラスと、そのサブクラスである ButtonBar、ComboBox、DropDownList、List、TabBar）では、BasicLayout クラスを <codeph>layout</codeph> プロパティの値として使用することはできません。Spark のリストベースのコントロールでは、BasicLayout を使用しないでください。</p>
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
  
  <p>DropDownList コントロールには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>幅 112 ピクセル、高さ 21 ピクセル</entry></row><row><entry>最小サイズ</entry><entry>幅 112 ピクセル、高さ 21 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row><row><entry>デフォルトスキンクラス</entry><entry>spark.skins.spark.DropDownListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><apiConstructor id="spark.components:DropDownList:DropDownList"><apiName>DropDownList</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DropDownList:prompt:get"><apiName>prompt</apiName><shortdesc>
      DropDownList コントロールのプロンプトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           
      </apiDefaultValue></apiValueDef><apiDesc>
      DropDownList コントロールのプロンプトです。このプロンプトは、<codeph>selectedIndex</codeph> = -1 のときに DropDownList に表示されるストリングです。通常は、「1 つ選択してください...」のようなストリングになります。ドロップダウンリストでアイテムを選択すると、プロンプトは選択したアイテムのテキストに置き換わります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DropDownList:typicalItem:set"><apiName>typicalItem</apiName><shortdesc>
      行または列の固定サイズが必要であるものの、特定の rowHeight または columnWidth の値が設定されていない場合、レイアウトは typicalItem の推奨サイズを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      行または列の固定サイズが必要であるものの、特定の <codeph>rowHeight</codeph> または <codeph>columnWidth</codeph> の値が設定されていない場合、レイアウトは <codeph>typicalItem</codeph> の推奨サイズを使用します。同様に、仮想レイアウトは、このアイテムを使用して、ビュー内にスクロールされていないレイアウトエレメントのサイズを定義します。
           <p>コンテナは、一般的なデータアイテムと、関連付けられたアイテムレンダラーを使用して、コンテナの子のデフォルトサイズを決定します。一般的なアイテムを定義することによって、コンテナは、それぞれの子を画面上に描画するときにそれらのサイズを決定する必要がなくなります。</p>
           <p>このプロパティを設定すると、レイアウトの <codeph>typicalLayoutElement</codeph> プロパティが設定されます。</p>
     
      <p>制限：<codeph>typicalItem</codeph> が IVisualItem である場合、さらにデータプロバイダーのメンバーではない必要があります。</p>
     
      <p>メモ：<codeph>typicalItem</codeph> で設定した値は、<codeph>labelDisplay</codeph> スキンパーツで明示的に設定された幅と高さよりも優先されます。 </p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
  GridColumnHeaderGroup クラスは、列ヘッダーの行とセパレーターをグリッドのレイアウトに揃えて表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  すべてのヘッダーのレンダラーに対する上部のインセット（ピクセル単位）です。 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  最後のヘッダーのレンダラーに対する右側のインセット（ピクセル単位）です。 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  最初のヘッダーのレンダラーに対する左側のインセット（ピクセル単位）です。 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  すべてのヘッダーのレンダラーに対する下部のインセット（ピクセル単位）です。 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="separatorAffordance" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  マウスイベントの送出を目的とした、セパレーターの一部と見なされる、列セパレーターのいずれかの端にある水平方向のスペースです。
 
  <p>通常、セパレーターはわずか 1 ピクセルの幅であるため、操作が困難です。 この値は、セパレーターの領域を広げるために <codeph>getSeparatorIndexAt()</codeph> によって使用されます。これにより、マウスが <codeph>separatorMouseWidth</codeph> よりもセパレーターの水平方向の中間点に近い場合は、セパレーターイベントが送出されます。</p> 
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
</productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:GridColumnHeaderGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:GridColumnHeaderGroup 
    <strong>Properties</strong>
    columnSeperator="null"
    dataGrid="null"  
    downColumnIndex="-1"  
    headerRenderer="null"  
    hoverColumnIndex="-1"  
    visibleSortIndicatorIndices="<i>empty Vector.&lt;int&gt<i>"
 
    <strong>Styles</strong>
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    separatorAffordance="5" 
 
    <strong>Events</strong>
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    separatorClick="<i>No default</i>"
    separatorDoubleClick="<i>No default</i>"
    separatorMouseDrag="<i>No default</i>"
    separatorMouseUp="<i>No default</i>"
    separatorMouseRollOut="<i>No default</i>"
    separatorMouseRollOver="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  GridColumnHeaderGroup クラスは、列ヘッダーの行とセパレーターをグリッドのレイアウトに揃えて表示します。  
 
  <p>ヘッダーは <codeph>headerRenderer</codeph> プロパティに指定されたクラスによってレンダリングされます。セパレーターは <codeph>columnSeparator</codeph> プロパティに指定されたクラスによってレンダリングされます。変更できないレイアウトは仮想的です。つまり、ビューの外部にスクロールされたレンダラーとセパレーターは再利用されます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>Grid</linktext></link></related-links><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK_separatorDoubleClick"><apiName>separatorDoubleClick</apiName><shortdesc>
  列ヘッダーセパレーター上でマウスがダブルクリックされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列ヘッダーセパレーター上でマウスがダブルクリックされると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_CLICK_separatorClick"><apiName>separatorClick</apiName><shortdesc>
  列ヘッダーセパレーター上でマウスがクリックされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列ヘッダーセパレーター上でマウスがクリックされると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OUT_separatorRollOut"><apiName>separatorRollOut</apiName><shortdesc>
  列セパレーターと separatorMouseWidth で定義された領域からマウスが出ると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列セパレーターと <codeph>separatorMouseWidth</codeph> で定義された領域からマウスが出ると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OVER_separatorRollOver"><apiName>separatorRollOver</apiName><shortdesc>
  列セパレーターと separatorMouseWidth で定義された領域にマウスが入ると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列セパレーターと <codeph>separatorMouseWidth</codeph> で定義された領域にマウスが入ると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_UP_separatorMouseUp"><apiName>separatorMouseUp</apiName><shortdesc>
  マウスがセパレーターアフォーダンス内になくても、マウスボタンが放されると、separatorMouseDown イベントの後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスがセパレーターアフォーダンス内になくても、マウスボタンが放されると、<codeph>separatorMouseDown</codeph> イベントの後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_DRAG_separatorMouseDrag"><apiName>separatorMouseDrag</apiName><shortdesc>
  ボタンが放される前にマウスが移動すると、separatorMouseDown イベントの後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ボタンが放される前にマウスが移動すると、<codeph>separatorMouseDown</codeph> イベントの後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  列ヘッダー上でマウスがダブルクリックされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列ヘッダー上でマウスがダブルクリックされると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  列ヘッダー上でマウスがクリックされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列ヘッダー上でマウスがクリックされると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  列ヘッダーからマウスが出ると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列ヘッダーからマウスが出ると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  列ヘッダーにマウスが入ると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列ヘッダーにマウスが入ると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  GridColumnHeaderGroup 内になくても、マウスボタンが放されると、gridMouseDown イベントの後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  GridColumnHeaderGroup 内になくても、マウスボタンが放されると、<codeph>gridMouseDown</codeph> イベントの後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  ボタンが放される前にマウスが移動すると、gridMouseDown イベントの後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ボタンが放される前にマウスが移動すると、<codeph>gridMouseDown</codeph> イベントの後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  列ヘッダー上でマウスボタンが押されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  列ヘッダー上でマウスボタンが押されると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:GridColumnHeaderGroup:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderBounds"><apiName>getHeaderBounds</apiName><shortdesc>
      指定されたヘッダー（レンダラー）の現在のピクセル境界を返すか、該当する列が存在しない場合は null を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>列ヘッダーのピクセル境界を表す <codeph>Rectangle</codeph> または null です。
     
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列の 0 で始まるインデックスです。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたヘッダー（レンダラー）の現在のピクセル境界を返すか、該当する列が存在しない場合は null を返します。 ヘッダー境界が GridColumnHeaderGroup 座標で報告されます。
     
      <p>指定された列の前にある表示可能なすべてのセルがビュー内にスクロールされていない場合、返される境界は、Grid のすべての <codeph>typicalItem</codeph> に基づく単なる近似値である可能性があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderIndexAt"><apiName>getHeaderIndexAt</apiName><shortdesc>
      指定された座標に対応する列インデックスを返すか、座標が範囲外である場合は -1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>列のインデックスであるか、または座標が範囲外である場合は -1 です。 
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc><codeph>columnHeaderGroup</codeph> を基準としたピクセルの x 座標です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc><codeph>columnHeaderGroup</codeph> を基準としたピクセルの y 座標です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された座標に対応する列インデックスを返すか、座標が範囲外である場合は -1 を返します。座標は GridColumnHeaderGroup のレイアウトターゲットに対して解決されます。
     
      <p>グリッドのすべての列または行がビュー内にスクロールされていない場合、返されるインデックスは、すべての列の <codeph>typicalItem</codeph> プロパティに基づく単なる近似値である可能性があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderRendererAt"><apiName>getHeaderRendererAt</apiName><shortdesc>
      要求されたヘッダーレンダラーが表示可能な場合は、指定された列に対して現在表示されているヘッダーレンダラーへの参照が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムレンダラーです。列インデックスが無効な場合は null になります。
     
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>ヘッダーレンダラーの列の 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      要求されたヘッダーレンダラーが表示可能な場合は、指定された列に対して現在表示されているヘッダーレンダラーへの参照が返されます。 返されたヘッダーレンダラーが表示されなくなっている場合は、リサイクルされてプロパティがリセットされる可能性があることに注意してください。  
     
      <p>要求されたヘッダーレンダラーが非表示の場合、このメソッドが呼び出されるたびに新規ヘッダーレンダラーが作成されます。新規アイテムレンダラーは非表示です。</p>
     
      <p>返されたレンダラーの幅が DataGrid/getItemRendererAt() によって返されたアイテムレンダラーの幅と同じです。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getSeparatorIndexAt"><apiName>getSeparatorIndexAt</apiName><shortdesc>
      指定された座標に対応する列セパレーターインデックスを返します。座標がセパレーターと重ならない場合は -1 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>列のインデックスです。座標が重ならない場合は -1 になります。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc><codeph>columnHeaderGroup</codeph> を基準としたピクセルの x 座標です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc><codeph>columnHeaderGroup</codeph> を基準としたピクセルの y 座標です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された座標に対応する列セパレーターインデックスを返します。座標がセパレーターと重ならない場合は -1 を返します。 座標は GridColumnHeaderGroup のレイアウトターゲットに対して解決されます。
     
      <p>x 座標がセパレーターの水平方向の中央の <codeph>separatorMouseWidth</codeph> の範囲内にある場合は、指定した場所とセパレーターが「重なる」と見なされます。</p>
      
      <p>このコンポーネントの <codeph>layoutDirection</codeph> は <codeph>"ltr"</codeph> であると仮定して、セパレーターインデックスが左側の列のインデックスと同じです。 つまり、すべての列ヘッダーの両側にセパレーターがあります。ただし、最初の表示列は右側のみ、最後の表示列は左側のみにセパレーターがあります。</p>
     
      <p>グリッドのすべての列または行がビュー内にスクロールされていない場合、返されるインデックスは、すべての列の <codeph>typicalItem</codeph> プロパティに基づく単なる近似値である可能性があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:isSortIndicatorVisible"><apiName>isSortIndicatorVisible</apiName><shortdesc>
      指定した列のソートインジケーターが可視である場合は、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定した列のソートインジケーターが可視である場合は、<codeph>true</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>ヘッダーレンダラーの列の 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定した列のソートインジケーターが可視である場合は、<codeph>true</codeph> を返します。これは次のより効率的なバージョンです。
      <pre>
          visibleSortIndicatorIndices.indexOf(columnIndex) != -1</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:GridColumnHeaderGroup:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      各列の間に表示されるビジュアルエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      各列の間に表示されるビジュアルエレメントです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      このコンポーネントの列レイアウトと水平スクロール位置を定義する DataGrid コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンポーネントの列レイアウトと水平スクロール位置を定義する DataGrid コントロールです。 このプロパティは、<codeph>grid</codeph> スキンパーツが追加された後に、DataGrid コントロールによって設定されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:downColumnIndex:get"><apiName>downColumnIndex</apiName><shortdesc>
      ユーザーが現在押しているヘッダーレンダラーの列インデックスを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが現在押しているヘッダーレンダラーの列インデックスを指定します。
      
      <p><codeph>downColumnIndex</codeph> を -1（デフォルト値）に設定すると、列インデックスが未定義になり、ヘッダーレンダラーにより <codeph>down</codeph> プロパティが <codeph>false</codeph> に設定されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:headerRenderer:get"><apiName>headerRenderer</apiName><shortdesc>
      各列ヘッダーのレンダラーに使用する IGridItemRenderer クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="headerRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      各列ヘッダーのレンダラーに使用する IGridItemRenderer クラスです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      ユーザーが現在マウスポインターを置いているヘッダーレンダラーの列インデックスを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが現在マウスポインターを置いているヘッダーレンダラーの列インデックスを指定します。
      
      <p><codeph>hoverColumnIndex</codeph> をデフォルトの -1 に設定すると、列インデックスが未定義になり、ヘッダーレンダラーにより <codeph>hovered</codeph> プロパティが <codeph>false</codeph> に設定されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:visibleSortIndicatorIndices:get"><apiName>visibleSortIndicatorIndices</apiName><shortdesc>
      ソートインジケーターが現在可視になっているヘッダーレンダラーに対応する列インデックスのベクトルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="visibleSortIndicatorIndicesChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>an empty Vector.&amp;lt;int&amp;gt;
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ソートインジケーターが現在可視になっているヘッダーレンダラーに対応する列インデックスのベクトルです。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
  PopUpAnchor コンポーネントは、DropDownList コンポーネントのように、レイアウト内でポップアップまたはドロップダウンするコントロールの位置を設定するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="popUp"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:PopUpAnchor&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:PopUpAnchor
 
    <strong>Properties</strong>
    displayPopUp="false"
    popUp=""
    popUpHeightMatchesAnchorHeight="false"
    popUpPosition="topLeft"
    popUpWidthMatchesAnchorWidth="false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  PopUpAnchor コンポーネントは、DropDownList コンポーネントのように、レイアウト内でポップアップまたはドロップダウンするコントロールの位置を設定するために使用されます。ポップアップコントロールまたはドロップダウンコントロールは PopUpManager によって表示リストに追加されるため、通常はレイアウトに加わりません。PopUpAnchor コンポーネントは、コンテナに追加されてレイアウトされる UIComponent です。このコンポーネントは、自身を基準にして、ポップアップコントロールまたはドロップダウンコントロールのサイズ設定と配置を行います。このコンポーネントには、視覚的な外観がありません。
   <p>PopUpAnchor コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="PopUpAnchorExample.mxml"><swfblock conref="examples/PopUpAnchorExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.components:PopUpAnchor:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
      コンストラクター
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクター
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:PopUpAnchor:protected:calculatePopUpPosition"><apiName>calculatePopUpPosition</apiName><shortdesc>
      popUp コントロールが配置されるか、表示されるか、updatePopUpTransform() が呼び出されると、呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>グローバル座標系での <codeph>popUp</codeph> コントロールの絶対位置です。  
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>popUp</codeph> コントロールが配置されるか、表示されるか、<codeph>updatePopUpTransform()</codeph> が呼び出されると、呼び出されます。<codeph>popUp</codeph> コントロールの位置を変更するには、この関数をオーバーライドします。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:PopUpAnchor:updatePopUpTransform"><apiName>updatePopUpTransform</apiName><shortdesc>
      popUp コントロールの変換マトリックスを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>popUp</codeph> コントロールの変換マトリックスを更新します。通常、PopUpAnchor に対してエフェクトを実行するときには、この関数を呼び出します。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:PopUpAnchor:popUpPosition:set"><apiName>popUpPosition</apiName><shortdesc>
      popUp コントロールが開かれるときの、PopUpAnchor コンポーネントに対する相対的な位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>PopUpPosition.TOP_LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>popUp</codeph> コントロールが開かれるときの、PopUpAnchor コンポーネントに対する相対的な位置です。有効な値は、<codeph>"left"、"right"、"above"、"below"、"center"</codeph> および <codeph>"topLeft"</codeph> です。
     
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#PopUpPosition"><linktext>spark.components.PopUpPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:PopUpAnchor:displayPopUp:set"><apiName>displayPopUp</apiName><shortdesc>
      true の場合、popUp コントロールを PopUpManager に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、<codeph>popUp</codeph> コントロールを PopUpManager に追加します。<codeph>false</codeph> の場合、コントロールを削除します。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpHeightMatchesAnchorHeight:set"><apiName>popUpHeightMatchesAnchorHeight</apiName><shortdesc>
      true の場合、popUp コントロールの高さは PopUpAnchor の高さと同じ値に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、<codeph>popUp</codeph> コントロールの高さは PopUpAnchor の高さと同じ値に設定されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpWidthMatchesAnchorWidth:set"><apiName>popUpWidthMatchesAnchorWidth</apiName><shortdesc>
      true の場合、popUp コントロールの幅は PopUpAnchor の幅と同じ値に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、<codeph>popUp</codeph> コントロールの幅は PopUpAnchor の幅と同じ値に設定されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUp:set"><apiName>popUp</apiName><shortdesc>
      PopUpAnchor が開かれたときに PopUpManager に追加する IFlexDisplayObject です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="popUpChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      PopUpAnchor が開かれたときに PopUpManager に追加する IFlexDisplayObject です。<codeph>popUp</codeph> コントロールが IFocusManagerContainer を実装する場合、<codeph>popUp</codeph> コントロールが独自の FocusManager を持つことになります。ユーザーが Tab キーを使用してコントロール間を移動する場合は、<codeph>popUp</codeph> コントロール内のコントロールだけにアクセスできます。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:List"><apiName>List</apiName><shortdesc>
  List コントロールでは、アイテムを垂直方向に並べて表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  どのような条件で垂直スクロールバーを表示するかを指定します。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（「on」）- スクロールバーが常に表示されます。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（「off」）- スクロールバーは一切表示されません。ただし、プログラムで、その verticalScrollPosition プロパティを設定することによってビューポートをスクロールできます。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（「auto」）- ビューポートの contentHeight がその height よりも大きい場合に、スクロールバーが表示されます。
  </li>
  </ul>
 
  <p>
  スクロールポリシーは、スクローラースキンパーツの測定サイズに影響します。 このスタイルは、スクローラースキンパーツの verticalScrollPolicy に対してのみ適用されます。 継承スタイルではないので、アイテムレンダラーなどには影響しません。
  </p>
   <p>モバイルアプリケーションで水平方向の List コントロールを使用する際には、<codeph>horizontalScrollPolicy</codeph> を <codeph>on</codeph> に設定し、<codeph>verticalScrollPolicy</codeph> を <codeph>auto</codeph> に設定して、水平方向のバウンスとプルのエフェクトを有効にします。 そうしないと、垂直方向のバウンスとプルのエフェクトがコントロールで使用されます。</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:List" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  ユーザーがレンダラーを選択したときのレンダラーの背景色です。
   <p>Halo テーマのデフォルト値は <codeph>0x7FCEFF</codeph> です。Spark テーマのデフォルト値は <codeph>0xA8C6EE</codeph> です。Mobile テーマのデフォルト値は <codeph>0xE0E0E0</codeph> です。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  どのような条件で水平スクロールバーを表示するかを指定します。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（「on」）- スクロールバーが常に表示されます。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（「off」）- スクロールバーは一切表示されません。ただし、プログラムで、その horizontalScrollPosition プロパティを設定することによってビューポートをスクロールできます。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（「auto」）- ビューポートの contentWidth がその width よりも大きい場合に、スクロールバーが表示されます。
  </li>
  </ul>
 
  <p>スクロールポリシーは、スクローラースキンパーツの測定サイズに影響します。 このスタイルは、スクローラースキンパーツの horizontalScrollPolicy に対してのみ適用されます。 継承スタイルではないので、アイテムレンダラーなどには影響しません。</p>
   <p>モバイルアプリケーションで水平方向の List コントロールを使用する際には、<codeph>horizontalScrollPolicy</codeph> を <codeph>on</codeph> に設定し、<codeph>verticalScrollPolicy</codeph> を <codeph>auto</codeph> に設定して、水平方向のバウンスとプルのエフェクトを有効にします。 そうしないと、垂直方向のバウンスとプルのエフェクトがコントロールで使用されます。</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="dropIndicatorSkin" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  <codeph>dropIndicator</codeph> スキンパーツが List スキンに指定されていない場合は、このクラスのインスタンスが作成されて、List がドロップターゲットになる可能性があるドラッグ＆ドロップ操作中のデフォルトドロップインジケーターとして使用されます。
   </description>
<default>spark.skins.spark.ListDropIndicator
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dragIndicatorClass" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  List によって開始されたドラッグ＆ドロップ操作中にドラッグインジケーターのインスタンスを作成するためのクラスです。<codeph>IFlexDisplayObject</codeph> 型にする必要があります。
   <p>このクラスで <codeph>ILayoutManagerClient</codeph> インターフェイスを実装する場合は、DragManager によってインスタンスが検証されます。</p>
   <p>このクラスで <codeph>IVisualElement</codeph> インターフェイスを実装する場合、インスタンスの <codeph>owner</codeph> プロパティはドラッグを開始した List に設定されます。</p>
   <p>AIR の DragManager はインスタンスのスナップショットを作成しますが、AIR 以外の DragManager はインスタンスを直接使用します。</p>
   </description>
<default>spark.components.supportClasses.ListItemDragProxy
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:List" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  このコンポーネントの境界線の表示を制御します。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  このコンポーネントの境界線の色です。
    </description>
<default>#696969
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントの境界線のアルファです。
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropIndicator" owner="spark.components:List" playerVersion="Flash10" required="false" type="flash.display.DisplayObject" var_type="mx.core:IFactory">
<description>
      ドラッグインジケーターの外観を定義するスキンパーツです。List 上にドラッグすると、レイアウトによってドロップインジケーターのサイズと位置が調整され、挿入位置の輪郭が示されます。
           <p>デフォルトでは、Spark コントロールのドロップインジケーターは、コントロールの幅全体の実線になります。ドロップターゲットのカスタムスキンクラスを作成することにより、カスタムドロップインジケーターを作成します。スキンクラスの &lt;fx:Declarations> 領域に <codeph>dropIndicator</codeph> という名前のスキンパーツを作成します。</p>
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the appearance of the drop indicator.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:List" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      List をスクロールするために使用する、オプションの Scroller です。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:List&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:List
    <strong>Properties</strong>
    allowMultipleSelection="false"
    dragEnabled="false"
    dragMoveEnabled="false"
    dropEnabled="false"
    selectedIndices="null"
    selectedItems="null"
    useVirtualLayout="true"
 
    <strong>Styles</strong>
    alternatingItemColors="undefined"
    borderAlpha="1.0"
    borderColor="0#CCCCCC"
    borderVisible="true"
    contentBackgroundColor="0xFFFFFF"
    downColor="0xA8C6EE"
    dragIndicator="ListItemDragProxy"
    dropIndicatorSkin="ListDropIndicator"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  List コントロールでは、アイテムを垂直方向に並べて表示します。 機能は、HTML のフォームエレメントである SELECT に似ています。一度にすべてのアイテムを表示できない場合は、垂直スクロールバーが表示され、ユーザーがリストのすべてのアイテムにアクセスできるようになります。オプションの水平スクロールバーは、リストアイテムが水平方向に収まらない場合に、ユーザーがアイテムを表示するために使用します。 <codeph>allowMultipleSelection</codeph> プロパティの値に応じて、ユーザーはリストから単一または複数のアイテムを選択できます。
   <p><b>メモ：</b>Spark のリストベースのコントロール（Spark の ListBase クラスと、そのサブクラスである ButtonBar、ComboBox、DropDownList、List、TabBar）では、BasicLayout クラスを <codeph>layout</codeph> プロパティの値として使用することはできません。Spark のリストベースのコントロールでは、BasicLayout を使用しないでください。レイアウトが指定されている場合は、レイアウトの typicalLayoutElement プロパティを設定しないでください。List の <codeph>typicalItem</codeph> で作成されたアイテムレンダラーに自動的に設定されます。</p>
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
   <p>List コントロールには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>幅 112 ピクセル、高さ 112 ピクセル</entry></row><row><entry>最小サイズ</entry><entry>幅 112 ピクセル、高さ 112 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row><row><entry>デフォルトスキンクラス</entry><entry>spark.skins.spark.ListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ListExample.mxml"><swfblock conref="examples/ListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ListSkin"><linktext>spark.skins.spark.ListSkin</linktext></link></related-links><apiConstructor id="spark.components:List:List"><apiName>List</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:List:addDragData"><apiName>addDragData</apiName><shortdesc>
      ドラッグ &amp; ドロップ操作の一部として、選択されたアイテムを DragSource オブジェクトに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragSource</apiItemName><apiType value="mx.core:DragSource"/><apiDesc>データの追加先となる DragSource オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドラッグ &amp; ドロップ操作の一部として、選択されたアイテムを DragSource オブジェクトに追加します。 他のデータをドラッグソースに追加するには、このメソッドをオーバーライドします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelectionAndCaretUponNavigation"><apiName>adjustSelectionAndCaretUponNavigation</apiName><shortdesc>
      検出されたキーストロークまたはキーストロークの組み合わせに基づいて選択範囲を調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>検出されたキーボードイベントです。
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      検出されたキーストロークまたはキーストロークの組み合わせに基づいて選択範囲を調整します。キーストロークがレイアウトに送信されると、レイアウトの getNavigationDestinationIndex() メソッドにより、現在フォーカスがあるアイテムに基づいて、どのインデックスに移動するかが決定されます。インデックスが決定されると、単一選択、キャレットアイテム、および必要に応じて複数選択が、新しく選択されたアイテムを反映するように更新されます。  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      このコンポーネントに追加されるかこのコンポーネントから削除されるアイテムに応じて、選択されたインデックスを調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>新しいインデックスです。
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>アイテムがコンポーネントに追加された場合は <codeph>true</codeph>、アイテムが削除された場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントに追加されるかこのコンポーネントから削除されるアイテムに応じて、選択されたインデックスを調整します。 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:calculateSelectedIndices"><apiName>calculateSelectedIndices</apiName><shortdesc>
      アイテムがクリックされたときに現在の選択範囲がどのように変わるかを計算するヘルパーメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>新しい選択範囲に適用される更新後のアイテムインデックスです。
     
      </apiDesc><apiType value="Vector$int"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>クリックされたアイテムのインデックスです。
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiDesc>Shift キーが押された場合は True になります。
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiDesc>Ctrl キーが押された場合は True になります。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムがクリックされたときに現在の選択範囲がどのように変わるかを計算するヘルパーメソッドです。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/selectedIndices"><linktext>selectedIndices</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:protected:copyItemWithUID"><apiName>copyItemWithUID</apiName><shortdesc>
      ObjectUtil.copy() メソッドを呼び出してオブジェクトのディープコピーを作成し、UIDUtil.createUID() メソッドを呼び出してそのコピーの uid プロパティ（存在する場合）を新しい値に置き換えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>オブジェクトのコピーです。
           </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>コピーするアイテムです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>ObjectUtil.copy()</codeph> メソッドを呼び出してオブジェクトのディープコピーを作成し、そのコピーの <codeph>uid</codeph> プロパティ (存在する場合) を新しい値に置き換えます。これは、<codeph>UIDUtil.createUID()</codeph> メソッドを呼び出すことによって行われます。
     
      <p>このメソッドは、ドラッグ &amp; ドロップによるコピー作成で使用されます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.utils.ObjectUtil.xml"><linktext>mx.utils.ObjectUtil</linktext></link><link href="" invalidHref="mx.utils.UIDUtil.xml"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:createDragIndicator"><apiName>createDragIndicator</apiName><shortdesc>
      ドラッグ＆ドロップ操作中に、ドラッグされているアイテムのビジュアルオブジェクトを表示するために使用するクラスのインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ドラッグインジケーターを表す IFlexDisplayObject です。
      
      </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      ドラッグ＆ドロップ操作中に、ドラッグされているアイテムのビジュアルオブジェクトを表示するために使用するクラスのインスタンスを作成します。デフォルトの <codeph>DragEvent.DRAG_START</codeph> ハンドラーは、<codeph>DragManager.doDrag()</codeph> メソッドにインスタンスを渡します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:createDropIndicator"><apiName>createDropIndicator</apiName><shortdesc>
      ドラッグ＆ドロップ操作中に、ドロップ場所のビジュアルオブジェクトを表示するために使用する dropIndicator クラスのインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>レイアウトに設定された dropIndicator を返します。
           </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      ドラッグ＆ドロップ操作中に、ドロップ場所のビジュアルオブジェクトを表示するために使用する dropIndicator クラスのインスタンスを作成します。インスタンスはレイアウトの <codeph>dropIndicator</codeph> プロパティに設定されます。
           <p><codeph>dragEnter</codeph> イベントハンドラーをオーバーライドし、デフォルトハンドラーが実行されないように <codeph>preventDefault()</codeph> を呼び出す場合は、<codeph>createDropIndicator()</codeph> を呼び出してドロップインジケーターを作成します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/destroyDropIndicator"><linktext>destroyDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:destroyDropIndicator"><apiName>destroyDropIndicator</apiName><shortdesc>
      レイアウトに現在設定されている dropIndicator インスタンスを解放します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>削除された dropIndicator を返します。 
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      レイアウトで現在設定されている <codeph>dropIndicator</codeph> インスタンスを解放します。
           <p><codeph>dragExit</codeph> イベントハンドラーをオーバーライドし、デフォルトハンドラーが実行されないように <codeph>preventDefault()</codeph> を呼び出す場合は、<codeph>destroyDropIndicator()</codeph> を呼び出してドロップインジケーターを削除します。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/createDropIndicator"><linktext>createDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:ensureIndexIsVisible"><apiName>ensureIndexIsVisible</apiName><shortdesc>
      データアイテムが表示されるようにスクロールする便利なメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>データアイテムのインデックスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データアイテムが表示されるようにスクロールする便利なメソッドです。指定したインデックスに位置するデータアイテムが完全に表示されていない場合、そのデータアイテムが表示されるように List がスクロールされます。データアイテムが既に表示されている場合は、スクロールされません。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:List:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      true の場合、複数選択が有効です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、複数選択が有効です。実行時に切り替えると、現在の選択はクリアされます。<codeph>interactionMode</codeph> が <codeph>touch</codeph> のときには、オンにしないでください。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      このコントロールの外にアイテムをドラッグし、他のコントロールにドロップできるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールの外にアイテムをドラッグし、他のコントロールにドロップできるかどうかを示すフラグです。 <codeph>true</codeph> の場合、コントロールのドラッグ操作は有効です。 <codeph>dropEnabled</codeph> プロパティも <codeph>true</codeph> の場合には、アイテムをドラッグし、このコントロール内にドロップしてアイテムの順序を変更することができます。
     
      <p><codeph>interactionMode</codeph> が <codeph>touch</codeph> に設定されているモバイルデバイスでは、ドラッグ＆ドロップがサポートされていません。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      ドラッグ &amp; ドロップ操作でコントロールからアイテムを単にコピーするのではなく、移動できるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドラッグ &amp; ドロップ操作でコントロールからアイテムを単にコピーするのではなく、移動できるかどうかを示すフラグです。 このフラグが <codeph>true</codeph> であり、<codeph>dragEnabled</codeph> プロパティも <codeph>true</codeph> の場合は、アイテムを移動できます。 データプロバイダーからアイテムを削除できないか、削除しないことが望ましい場合が多いので、ドラッグ &amp; ドロップ中に MOVE 操作を許可しないようにすることをお勧めします。
     
      <p><codeph>interactionMode</codeph> が <codeph>touch</codeph> に設定されているモバイルデバイスでは、ドラッグ＆ドロップがサポートされていません。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      ドラッグしたアイテムをコントロールにドロップできるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドラッグしたアイテムをコントロールにドロップできるかどうかを示すフラグです。
           <p>このプロパティを <codeph>true</codeph> に設定した場合、コントロールはすべてのデータ形式を受け入れ、ドラッグされたデータがデータプロバイダー内のデータの形式と一致するものと見なします。 ドラッグ対象のデータの形式を明示的に検査したい場合には、ドロップされるデータがリストクラスに受け入れられる方法をカスタマイズするために、1 つまたは複数のドラッグイベント（例えば <codeph>dragEnter</codeph> や <codeph>dragOver</codeph>）を処理して DragEvent の <codeph>preventDefault()</codeph> メソッドを呼び出す必要があります。</p>
     
      <p><codeph>interactionMode</codeph> が <codeph>touch</codeph> に設定されているモバイルデバイスでは、ドラッグ＆ドロップがサポートされていません。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      ページスクロールが現在この Scroller で有効かどうかを示します。
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      ページスクロールが現在この Scroller で有効かどうかを示します。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      この Scroller で現在有効なスクロールスナッピングモードです。このプロパティを「off」以外に変更すると、エレメントが正しい位置に「スナップ」されるように、スクロール位置が即座に変更される場合があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"off"
           </apiDefaultValue></apiValueDef><apiDesc>
      この Scroller で現在有効なスクロールスナッピングモードです。
           <p>このプロパティを「off」以外に変更すると、エレメントが正しい位置に「スナップ」されるように、スクロール位置が即座に変更される場合があります。このスクロール位置の変更はアニメーション化されません。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:List:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      現在選択されているアイテムのインデックスを表す int の Vector です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      現在選択されているアイテムのインデックスを表す int の Vector です。<codeph>allowMultipleSelection</codeph> を <codeph>false</codeph> に設定して複数選択を無効にしてある場合、このプロパティを設定すると、Vector の最初のインデックスに対応するデータアイテムが選択されます。  
           <p><codeph>allowMultipleSelection</codeph> を <codeph>true</codeph> に設定して複数選択を有効にした場合、このプロパティには、選択されたインデックスのリストが、選択されたのとは逆の順序で格納されます。つまり、Vector の最初の要素は、最後に選択されたアイテムに対応します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      現在選択されているアイテムを表す Object の Vector です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      現在選択されているアイテムを表す Object の Vector です。<codeph>allowMultipleSelection</codeph> を <codeph>false</codeph> に設定して複数選択を無効にしてある場合、このプロパティを設定すると、Vector の最初のアイテムに対応するデータアイテムが選択されます。  
           <p><codeph>allowMultipleSelection</codeph> を <codeph>true</codeph> に設定して複数選択を有効にした場合、このプロパティには、選択されたインデックスのリストが、選択されたのとは逆の順序で格納されます。つまり、Vector の最初の要素は、最後に選択されたアイテムに対応します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      
      このコントロールに関連付けられているレイアウトの useVirtualLayout プロパティの値を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      このコントロールに関連付けられているレイアウトの <codeph>useVirtualLayout</codeph> プロパティの値を設定します。レイアウトが後で置換されて、このプロパティの値が <codeph>true</codeph> の場合、新しいレイアウトの <codeph>useVirtualLayout</codeph> プロパティは <codeph>true</codeph> に設定されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:hasFocusableChildren:set"><apiName>hasFocusableChildren</apiName><shortdesc>
      この List のフォーカス可能なアイテムレンダラーがキーボードフォーカスを取得できるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      この List のフォーカス可能なアイテムレンダラーがキーボードフォーカスを取得できるかどうかを示すフラグです。 
           <p><b>メモ：</b>このプロパティは、Flash Player で使用される <codeph>tabChildren</codeph> プロパティと似ています。Flex アプリケーションでは、<codeph>hasFocusableChildren</codeph> プロパティを使用します。<codeph>tabChildren</codeph> プロパティは使用しないでください。</p>
           <p>通常このプロパティは <codeph>false</codeph> です。ほとんどのコンポーネントは自身がフォーカスを取得するか、単一の内部サブコンポーネントにフォーカスを委譲し、あたかもコンポーネントにフォーカスがあるように表示を行うためです。List でこのプロパティを true に設定すると、List 内のコンテンツもフォーカス可能になります。</p>
     
      <p>このプロパティが設定されていて、List スキンに Scroller スキンパーツが含まれている場合、このプロパティの効果は Scroller にも適用されます。</p> 
     
      <p>この値が <codeph>true</codeph> の場合は、アイテムレンダラーと同じように、Scroller のコンテンツもフォーカス可能になります。この場合は、最初の Tab キーストロークで List コントロールにフォーカスが移動し、次の Tab キーストロークで Scroller 内のフォーカス可能な最初の子にフォーカスが移動します。</p> 
      
      <p><codeph>false</codeph> の場合は、最初の Tab キーストロークで List コントロールにフォーカスが移動し、次の Tab キーストロークで、その List の次にあるフォーカス可能コントロールにフォーカスが移動します。</p> 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
  BorderContainer クラスは、コンテナの境界線と背景の塗りの外観を制御する一連の CSS スタイルを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:BorderContainer">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  <codeph>true</codeph> の場合、コンテナのドロップシャドウが表示されます。
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  境界線の角丸の半径です。
   </description>
<default>0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderWeight" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  境界線の太さです。 
   </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  境界線を表示するかどうかを決定します。<codeph>false</codeph> の場合、<codeph>borderStroke</codeph> プロパティを使用して設定された境界線以外の境界線は表示されません。 
   
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="inset,solid" inherit="no" name="borderStyle" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  境界ボックスのスタイルです。 有効な値は、<codeph>solid</codeph> と <codeph>inset</codeph> です。
 
  </description>
<default>solid
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:BorderContainer" playerVersion="Flash10" type="uint">
<description>
  境界線の色です。 
  
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  <codeph>borderColor</codeph> スタイルで定義されているカラーのアルファレベルです。有効な値の範囲は 0.0 ～ 1.0 です。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="scale,clip,repeat" inherit="no" name="backgroundImageFillMode" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  次元内を背景イメージでどのように埋めるかを決定します。MXML でこのプロパティの値を設定する場合は、（「repeat」などの）文字列を使用します。ActionScript でこのプロパティの値を設定する場合は、（<codeph>BitmapFillMode.CLIP</codeph> などの）定数を使用します。
 
  <p><codeph>BitmapFillMode.CLIP</codeph>（「clip」）に設定すると、画像は領域の端で終了します。</p>
 
  <p><codeph>BitmapFillMode.REPEAT</codeph>（「repeat」）に設定すると、領域全体を埋めるように画像が繰り返し表示されます。</p>
   <p><codeph>BitmapFillMode.SCALE</codeph>（「scale」）に設定すると、領域全体を埋めるように画像が伸縮されます。</p>
 
  </description>
<default>&lt;code>BitmapFillMode.SCALE&lt;/code>
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Object">
<description>
  コンテナの背景イメージです。<codeph>backgroundColor</codeph> と <codeph>backgroundImage</codeph> の両方を同時に指定した場合、<codeph>backgroundColor</codeph> は無視されます。デフォルト値は <codeph>undefined</codeph> で、「未定義」であることを意味します。 このスタイルと <codeph>backgroundColor</codeph> スタイルの両方が undefined である場合、コンポーネントは透明な背景を持ちます。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:BorderContainer&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
   <pre>
  &lt;s:BorderContainer
    <b>Properties</b>
    backgroundFill="null"
    borderStroke="null"
 
    <b>Styles</b>
    backgroundImage="undefined"
    backgroundImageFillMode="scale"
    borderAlpha="1.0"
    borderColor="0xB7BABC"
    borderStyle="solid"
    borderVisible="true"
    borderWeight="1"
    cornerRadius="0"
    dropShadowVisible="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  BorderContainer クラスは、コンテナの境界線と背景の塗りの外観を制御する一連の CSS スタイルを定義します。 
   <p><b>メモ：</b>BorderContainer の外観の制御には CSS スタイルとクラスプロパティを使用するので、通常カスタムスキンは作成しません。カスタムスキンを作成する場合は、コンテナの外観を制御するスタイルをスキンクラスで適用する必要があります。</p>
   <p>デフォルトでは、境界線の角は丸められます。角を丸めないようにするには、線の <codeph>joints</codeph> プロパティを <codeph>JointStyle.MITER</codeph> に設定します。 </p>
  
  <p>BorderContainer コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>幅 112 ピクセル、高さ 112 ピクセル</entry></row><row><entry>最小サイズ</entry><entry>幅 112 ピクセル、高さ 112 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row><row><entry>デフォルトスキンクラス</entry><entry>spark.skins.spark.BorderContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="BorderContainerExample.mxml"><swfblock conref="examples/BorderContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#BorderContainerSkin"><linktext>spark.skins.spark.BorderContainerSkin</linktext></link></related-links><apiConstructor id="spark.components:BorderContainer:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:BorderContainer:backgroundFill:get"><apiName>backgroundFill</apiName><shortdesc>
      BorderContainer の背景を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IFill"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      BorderContainer の背景を定義します。このプロパティを設定すると、<codeph>backgroundAlpha</codeph>、<codeph>backgroundColor</codeph>、<codeph>backgroundImage</codeph> および <codeph>backgroundImageFillMode</codeph> スタイルがオーバーライドされます。
     
      <p>次の例では、<codeph>backgroundFill</codeph> プロパティを使用して背景色を赤に設定しています。</p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:backgroundFill> 
             &lt;s:SolidColor 
                 color="red" 
                 alpha="1"/> 
         &lt;/s:backgroundFill> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:BorderContainer:borderStroke:get"><apiName>borderStroke</apiName><shortdesc>
      BorderContainer コンテナの線を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IStroke"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      BorderContainer コンテナの線を定義します。このプロパティを設定すると、<codeph>borderAlpha</codeph>、<codeph>borderColor</codeph>、<codeph>borderStyle</codeph>、<codeph>borderVisible</codeph> および <codeph>borderWeight</codeph> スタイルがオーバーライドされます。  
     
      <p>次の例では、<codeph>borderStroke</codeph> プロパティを設定しています。</p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:borderStroke> 
             &lt;mx:SolidColorStroke 
                 color="black" 
                 weight="3"/> 
         &lt;/s:borderStroke> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRenderer"><apiName>IItemRenderer</apiName><shortdesc>
  IItemRenderer インターフェイスは、ホストコンポーネントと通信できるアイテムレンダラーを作成するためにクラスが実装する必要がある、API の基本セットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IItemRenderer インターフェイスは、ホストコンポーネントと通信できるアイテムレンダラーを作成するためにクラスが実装する必要がある、API の基本セットを定義します。List コントロールや ButtonBar コントロールなど、ホストコンポーネントは IItemRendererOwner インターフェイスを実装する必要があります。 
   
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRendererOwner"><linktext>spark.components.IItemRendererOwner</linktext></link></related-links><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      アイテムレンダラーがドラッグされている場合は、true になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      アイテムレンダラーがドラッグされている場合は、<codeph>true</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      アイテムレンダラーのホストコンポーネントのデータプロバイダー内のアイテムのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      アイテムレンダラーのホストコンポーネントのデータプロバイダー内のアイテムのインデックスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      アイテムレンダラーで表示するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      アイテムレンダラーで表示するストリングです。 
     
      <p>アイテムレンダラーのホストコンポーネントは <codeph>itemToLabel()</codeph> メソッドを使用して、アイテムレンダラーによって表示するストリングにデータアイテムを変換できます。 </p>
     
      <p>List や ButtonBar などのコントロールの場合、<codeph>labelField</codeph> プロパティまたは <codeph>labelFunction</codeph> プロパティを使用して、ストリングを含むデータアイテムのフィールドを指定できます。それ以外の場合、ホストコンポーネントは <codeph>toString()</codeph> メソッドを使用して、ストリングにデータアイテムを変換できます。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      アイテムレンダラーがそれ自体を選択済みとして表示できる場合は、true が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      アイテムレンダラーがそれ自体を選択済みとして表示できる場合は、<codeph>true</codeph> が含まれます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、true を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、<codeph>true</codeph> を含みます。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
  VideoPlayer コントロールは、プログレッシブダウンロード、マルチビットレートストリーミング、およびストリーミングビデオをサポートするスキン可能ビデオプレーヤーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoPlayer">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/><skinStates><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の無効状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackErrorAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の再生エラー状態です。ビデオを再生しようとして、エラーが発生しました。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="bufferingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer のバッファリング状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="pausedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の一時停止状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の再生状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="readyAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の準備完了状態です。ビデオを再生する準備が完了しました。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loadingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の読み込み状態です。VideoPlayer はロード中かソースに接続中です。 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitializedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  フルスクリーンモードでの VideoPlayer の未初期化状態です。この時点で Video Player は作成されましたが、ソースはまだ設定されておらず、試行中の接続もありません。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の無効状態です
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackError" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の再生エラー状態です。ビデオを再生しようとして、エラーが発生しました。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="buffering" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer のバッファリング状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="paused" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の一時停止状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の再生状態です
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の準備完了状態です。ビデオを再生する準備が完了しました。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の読み込み状態です。VideoPlayer はロード中かソースに接続中です。 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer の未初期化状態です。この時点で Video Player は作成されましたが、ソースはまだ設定されておらず、試行中の接続もありません。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  フルスクリーンモードで、ビデオ再生コントロールを非表示にするまでに、ユーザー操作がない状態で待機する時間（ミリ秒）です。  
 
  <p><codeph>Infinity</codeph> に設定されている場合、フルスクリーンモードで再生コントロールが非表示になりません。既にフルスクリーンモードになっている場合は、この値を変更しても効果はありません。</p>
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントのドロップシャドウの可視性を制御します。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#VideoPlayer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#VideoPlayer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="videoDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="true" var_type="spark.components:VideoDisplay">
<description>
      VideoDisplay を定義する、必須のスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines the VideoDisplay.</shortdesc></SkinPart><SkinPart name="currentTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      <codeph>codecurrentTime</codeph> の現在の値を表示するオプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the current value of codecurrentTime.</shortdesc></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      フルスクリーンモードの切り替えボタンに適用されるオプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a button to toggle fullscreen mode.</shortdesc></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      オプションのミュートボタンのスキンパーツです。ミュートボタンには、<codeph>muted</codeph> プロパティと <codeph>volume</codeph> プロパティの両方があります。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the mute button.</shortdesc></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの一時停止ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the pause button.</shortdesc></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの再生ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the play button.</shortdesc></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      オプションの全プレーヤーコントロールのスキンパーツです。このスキンは、プレーヤーがフルスクリーンモードのときに、ユーザーが何も操作を行わなかった場合に、何を非表示にするかを決定するために使用されます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for all of the player controls.</shortdesc></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      オプションの再生または一時停止ボタンのスキンパーツです。ビデオが再生されると、<codeph>selected</codeph> プロパティが <codeph>true</codeph> に設定されます。ビデオが一時停止または停止されると、<codeph>selected</codeph> プロパティが <codeph>false</codeph> に設定されます。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a play/pause button.</shortdesc></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      オプションのスクラブバー（タイムライン）のスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the scrub bar (the 
      timeline).</shortdesc></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      オプションの停止ボタンのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the stop button.</shortdesc></SkinPart><SkinPart name="durationDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      duration を表示する、オプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the duration.</shortdesc></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      オプションのボリュームコントロールのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the volume control.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    dropShadowVisible="true"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoPlayer コントロールは、プログレッシブダウンロード、マルチビットレートストリーミング、およびストリーミングビデオをサポートするスキナブルビデオプレーヤーです。FLV ファイルと F4v ファイルの再生がサポートされています。VideoPlayer コントロールには、ビデオ再生を制御するための機能を備えた UI が用意されています。
 
  <p><codeph>VideoDisplay</codeph> はスキンをサポートしないクロムレスバージョンです。ユーザーがコントロールを操作できないようにする場合に便利です。</p>
   <p>VideoPlayer コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 263 ピクセル、高さ 184 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoPlayerExample.mxml"><swfblock conref="examples/VideoPlayerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoDisplay"><linktext>spark.components.VideoDisplay</linktext></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  MediaPlayer の状態が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  MediaPlayer の状態が変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  メディアの duration プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  メディアの <codeph>duration</codeph> プロパティが変更されたときに送出されます。
 
  <p>このイベントは、ソースが null に設定されている場合や再生エラーが発生した場合には送出されないことがあります。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  MediaPlayer の currentTime プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  MediaPlayer の <codeph>currentTime</codeph> プロパティが変更されたときに送出されます。
 
  <p>このイベントは、ソースが null に設定されている場合や再生エラーが発生した場合には送出されないことがあります。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  再生ヘッドが再生可能メディアの継続時間に達したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  再生ヘッドが再生可能メディアの継続時間に達したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  ダウンロード処理を実行中にデータを受信したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ダウンロード処理を実行中にデータを受信したときに送出されます。このイベントは、HTTP リクエストなどにより、サーバーから直接にビデオがダウンロードされて再生された場合にのみ送出されます。Flash Media Server などの特殊なメディアサーバーからビデオが再生された場合には送出されません。
 
  <p>このイベントは、ソースが null に設定されている場合や再生エラーが発生した場合には送出されないことがあります。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      秒で指定された時間の値を、currentTime および duration で使用される String 形式にフォーマットします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>フォーマットされた時間の値です。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>フォーマット対象となる時間の値（秒）です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      秒で指定された時間の値を、<codeph>currentTime</codeph> および <codeph>duration</codeph> で使用される String 形式にフォーマットします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:pause"><apiName>pause</apiName><shortdesc conref="spark.components.VideoDisplay#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>スキンが読み込まれておらず、videoDisplay が存在しない場合。    
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:play"><apiName>play</apiName><shortdesc conref="spark.components.VideoDisplay#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>スキンがまだ読み込まれておらず、videoDisplay が存在しない場合。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:seek"><apiName>seek</apiName><shortdesc conref="spark.components.VideoDisplay#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>スキンがまだ読み込まれておらず、videoDisplay が存在しない場合。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>シーク時間（秒単位）です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:stop"><apiName>stop</apiName><shortdesc conref="spark.components.VideoDisplay#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>スキンがまだ読み込まれておらず、videoDisplay が存在しない場合。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.components.VideoDisplay#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.components.VideoDisplay#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.components.VideoDisplay#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.components.VideoDisplay#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:currentTime:get"><apiName>currentTime</apiName><shortdesc conref="spark.components.VideoDisplay#currentTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#currentTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:duration:get"><apiName>duration</apiName><shortdesc conref="spark.components.VideoDisplay#duration">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#duration">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:loop:get"><apiName>loop</apiName><shortdesc conref="spark.components.VideoDisplay#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:muted:get"><apiName>muted</apiName><shortdesc conref="spark.components.VideoDisplay#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playing:get"><apiName>playing</apiName><shortdesc conref="spark.components.VideoDisplay#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.VideoDisplay#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.components.VideoDisplay#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:source:get"><apiName>source</apiName><shortdesc conref="spark.components.VideoDisplay#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:videoObject:get"><apiName>videoObject</apiName><shortdesc conref="spark.components.VideoDisplay#videoObject">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#videoObject">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc conref="spark.components.VideoDisplay#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#volume">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  ButtonBar コントロールは、共通の外観と操作性を持つ論理的に関連するボタンの水平方向のグループを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="firstButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     最初のボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the first button.</shortdesc></SkinPart><SkinPart name="lastButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     最後のボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the last button.</shortdesc></SkinPart><SkinPart name="middleButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="true" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     中間のボタンを定義するスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the middle button(s).</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ButtonBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBar
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBar コントロールは、共通の外観と操作性を持つ論理的に関連するボタンの水平方向のグループを定義します。
 
  <p>通常、ボタンバーのプッシュボタンは、関連するボタンをグループ化して共通の外観と操作性を提供し、1 か所で <codeph>change</codeph> イベントのロジックを処理するために使用します。 </p>
 
  <p>ButtonBar コントロールは、その <codeph>dataProvider</codeph> プロパティの値に基づいて Button コントロールを作成します。 <codeph>dataProvider</codeph> プロパティを操作してデータアイテムを追加および削除するには、<codeph>addItem()</codeph> や <codeph>removeItem()</codeph> などのメソッドを使用します。ButtonBar コントロールは、<codeph>dataProvider</codeph> プロパティへの変更に基づいて、自動的に必要な子を追加または削除します。</p>
 
  <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
 
  <p>モバイル以外のプロジェクトでは、ButtonBar コントロールを使用すると ViewStack コンテナのアクティブな子を設定できます。次に例を示します。</p>
 
  <p><b>メモ：</b>Spark のリストベースのコントロール（Spark の ListBase クラスと、そのサブクラスである ButtonBar、ComboBox、DropDownList、List、TabBar）では、BasicLayout クラスを <codeph>layout</codeph> プロパティの値として使用することはできません。Spark のリストベースのコントロールでは、BasicLayout を使用しないでください。</p>
 
  <pre>
  &lt;s:ButtonBar dataProvider="{myViewStack}" requireSelection="true" /> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  <p>ButtonBar コントロールには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>すべてのボタンを表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>制限なし</entry></row><row><entry>デフォルトスキンクラス</entry><entry>spark.skins.spark.ButtonBarSkin</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Label"><apiName>Label</apiName><shortdesc>
  Label は、1 行または複数行のテキストを均一のフォーマットでレンダリングできる低レベルの UIComponent です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="text"/><styles><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  垂直方向の整列または位置揃えです。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.verticalAlign を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  上部のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  右側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  左側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingLeft を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  下部のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingBottom を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの折り返しを制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Label" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Label/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Label/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Label/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Label/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Label" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Label&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Label 
    <strong>Properties</strong>
    fontContext=""
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Label は、1 行または複数行のテキストを均一のフォーマットでレンダリングできる低レベルの UIComponent です。表示するテキストは、TextBase から継承した <codeph>text</codeph> プロパティによって決定されます。テキストのフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> など、エレメントの CSS スタイルによって設定されます。
 
  <p>Label では、国際化対応の高品質な文字体裁を提供するために、Flash Player 内で Flash Text Engine（FTE）が使用されます。Label は高速で軽いので、アイテムレンダラーや Button スキンのラベルなど、少量の非インタラクティブテキストを数多くレンダリングする場合に特に適しています。</p>
 
  <p>必要な機能だけを提供するという理念に基づき、Spark アーキテクチャには 3 つのテキストプリミティブ（Label、RichText および RichEditableText）が用意されています。Label は最も高速で軽量ですが、機能は限られており、複雑なフォーマット設定、スクロール、選択、編集、ハイパーリンクはサポートされません。RichText と RichEditableText は、FTE ではなく Text Layout Framework（TLF）ライブラリをベースとして作成されます。RichText には、複雑なフォーマット設定を含む HTML などのテキストをレンダリングする機能が追加されていますが、インタラクティブ機能はサポートされません。RichEditableText は最も低速で重いですが、仮想化された TextLine を使用したスクロール、選択、編集、ハイパーリンク、URL からの画像のロードなどがすべてサポートされます。ニーズに合わせて、最も軽量なものを使用してください。</p>
 
  <p>Spark の Label コントロールは MX の Label コントロール mx.controls.Label に似ています。最も重要な違いは、次のとおりです。
  <ul>
    <li>Spark の Label では、プレーヤーの新しいテキストエンジンである FTE が使用されますが、MX の Label では TextField クラスが使用されます。</li>
    <li>Spark の Label は、MX の Label と比較して、文字体裁や国際言語のサポート機能が向上しています。</li>
    <li>Spark の Label では複数行を表示できますが、MX の Label では表示できません。</li>
    <li>MX の Label では HTML の一部を表示できますが、Spark の Label では均一フォーマットのテキストしか表示できません。</li>
    <li>MX の Label では選択可能にするかどうかを指定できますが、Spark の Label では指定できません。</li>
  </ul></p>
 
  <p>Spark·の·Label·では、CR（￼<codeph>"¥r"￼</codeph>）、LF（￼<codeph>"¥n"￼</codeph>）および·CR+LF（<codeph>￼"¥r¥n"</codeph>）の 3 つの文字シーケンスが明示的な改行として認識されます。</p>
 
  <p>Label の幅が指定されていない場合は、明示的な改行により各行の長さが決定され、最も長い行に合わせて Label の幅が決定されます。</p>
 
  <p><codeph>lineBreak</codeph> スタイルのデフォルト値は <codeph>"toFit"</codeph> なので、幅を指定すると、指定されたテキストがコンポーネントの境界の右端で折り返されます。コンポーネントの下部からテキストがはみ出す場合は、テキストが切り詰められます。</p>
 
  <p>この自動折り返しを無効にするには、<codeph>lineBreak</codeph> スタイルを <codeph>"explicit"</codeph> に設定します。この場合、<codeph>text</codeph> 内で明示的な改行が挿入されている場所でのみ行が折り返され、右端からはみ出す部分は切り詰められます。</p>
 
  <p>Label では、表示領域を超える量のテキストがある場合、テキストを自動的に切り詰めることができます。テキストを切り詰めるとは、余分なテキストを "..." などの切り詰めインジケーターに置き換えることです。継承プロパティ <codeph>maxDisplayedLines</codeph> および <codeph>isTruncated</codeph> の説明を参照してください。</p>
 
  <p>行の間隔は <codeph>lineHeight</codeph> スタイルを使用して制御できます。エレメントの境界内でテキストを水平方向または垂直方向に整列するには、<codeph>textAlign</codeph>、<codeph>textAlignLast</codeph> および <codeph>verticalAlign</codeph> スタイルを使用します。エレメントの端からテキストまでのインセットを指定するには、<codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルを使用します。</p>
 
  <p>デフォルトでは、Label には背景がありませんが、<codeph>backgroundColor</codeph> スタイルと <codeph>backgroundAlpha</codeph> スタイルを使用すると背景を描画できます。境界線はサポートされません。境界線や複雑な背景を描画する必要がある場合は、Rect などの別のグラフィックエレメントを Label の背後で使用します。</p>
 
  <p>Label では、フランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語の段落のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>"rtl"</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>"start"</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>"ltr"</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>"rtl"</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>"end"</codeph> に設定します。</p>
 
  <p>Label では Flash Text Engine の TextBlock クラスを使用して 1 つまたは複数の TextLine オブジェクトが作成され、CSS スタイルで定義されたフォーマットで text String が静的に表示されます。パフォーマンス上の理由から、TextLine には個々の字形の情報は格納されません。詳しくは、flash.text.engine.TextLineValidity.STATIC を参照してください。</p>
 
  <p>Label コントロールには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>テキストがない場合は幅 0 ピクセル、高さ 12 ピクセル、テキストがある場合はテキストを表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLineValidity/STATIC"><linktext>flash.text.engine.TextLineValidity.STATIC</linktext></link></related-links><apiConstructor id="spark.components:Label:Label"><apiName>Label</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
      RichEditableText は、リッチフォーマットテキストの表示、スクロール、選択および編集を行うための低レベルの UIComponent です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="chromeColor"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichEditableText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
      このコンポーネントの境界を表す矩形の背景色です。このスタイルが <codeph>undefined</codeph> の場合、背景は描画されません。それ以外の場合は、この RGB カラーが、<codeph>backgroundAlpha</codeph> スタイルによって決まるアルファレベルで描画されます。
     
      </description>
<default>undefined
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
      <codeph>backgroundColor</codeph> スタイルによって定義されるカラーのアルファレベルです。有効な値の範囲は 0.0 ～ 1.0 です。
     
      </description>
<default>1.0
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  列幅です（ピクセル単位）。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.columnWidth を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  列の間に残す溝のスペースの量（ピクセル単位）です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.columnGap を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  テキストの列数です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.columnCount を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  垂直方向の整列または位置揃えです。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.verticalAlign を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  上部のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  右側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  左側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingLeft を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  下部のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingBottom を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの折り返しを制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichEditableText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichEditableText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[      <p>The <code>&lt;s:RichEditableText&gt;</code> tag inherits all of the tag 
      attributes of its superclass and adds the following tag attributes:</p>
           <pre>
      &lt;s:RichEditableText
        <strong>Properties</strong>
        clipAndEnableScrolling="false|true"
        contentHeight="<i>Calculated default</i>"
        contentWidth="<i>Calculated default</i>"
        displayAsPassword="false"
        editable="true"
        heightInLines="NaN"
        horizontalScrollPosition="0"
        imeMode="null"
        maxChars="0"
        multiline="true"
        restrict="null"
        selectable="true"
        selectionActivePosition="-1"
        selectionAnchorPosition="-1"
        selectionHighlighting="TextSelectionHighlighting.WHEN_FOCUSED"
        text=""
        textFlow="<i>TextFlow</i>"
        typicalText=null
        verticalScrollPosition="0"
        widthInChars="NaN"
      
        <strong>Events</strong>
        change="<i>No default</i>"
        changing="<i>No default</i>"
        enter="<i>No default</i>"
        selectionChange="<i>No default</i>"
      /&gt;
      </pre>
      
      ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:ISystemCursorClient</apiBaseInterface><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseInterface>spark.core:IEditableText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      RichEditableText は、リッチフォーマットテキストの表示、スクロール、選択および編集を行うための低レベルの UIComponent です。
           <p>リッチテキストには、クリック可能なハイパーリンク、埋め込み式のインライングラフィック、他の URL からロードされるグラフィックなどが含まれている場合があります。</p>
           <p>RichEditableText にはスクロールバーはありませんが、プログラムを通じてスクロールするための IViewport インターフェイスが実装されているので、スクロールバーを表示できる Scroller で制御できます。また、マウスホイールを使用した垂直スクロールもサポートされています。</p>
           <p>テキストのフォーマットを変更するためのユーザーインターフェイスはありません。ただし、プログラムを通じて変更を行うための API が用意されています。これらの API を使用すると、選択範囲を太字に変更する太字ボタンなどを作成することができます。</p>
           <p>このクラスは、Spark 版の TextInput と TextArea のスキンで使用されます。TextInput ではリッチテキストを処理する機能は公開されていませんが、TextArea では公開されています。デフォルトでは、RichEditableText の背景は透明で、境界線の描画はサポートされていません。</p>
           <p>RichEditableText では、Text Layout Framework（TLF）ライブラリが使用されます。このライブラリは、Flash Player 10 の新しい Flash Text Engine（FTE）をベースとして作成されています。これらのレイヤーを組み合わせることにより、国際化対応の高品質な文字体裁とレイアウト機能を備えたテキスト編集が可能になります。</p>
           <p>Spark アーキテクチャには 3 つのテキストプリミティブ（Label、RichText および RichEditableText）が用意されています。Label は TLF を使用せず FTE のみを使用するので、最も高速で軽いですが、機能は限られており、リッチテキスト、スクロール、選択、編集はサポートされません。RichText には、複雑なレイアウト設定を含むリッチテキストを表示する機能が追加されていますが、インタラクティブ機能はサポートされません。RichEditableText は最も重いですが、TLF で実行できるほとんどの機能がサポートされます。通常は、ニーズに合わせて最も高速なテキストプリミティブを使用します。</p>
           <p>RichEditableText は、MX コンポーネントで使用される UITextField クラスに似ています。このクラスでは FTE および TLF は使用されず、古い TextField クラスが拡張されています。</p>
           <p>UITextField と RichEditableText の最も重要な違いは、次のとおりです。
      <ul>
        <li>RichEditableText では、文字体裁、国際言語のサポート、およびテキストレイアウトの機能が向上しています。</li>
        <li>RichEditableText には、リッチテキストのオブジェクト指向モデルがありますが、UITextField にはありません。</li>
        <li>RichEditableText では、大量のテキストを表示する機能を強化されています。</li>
        <li>RichEditableText では、UITextField とは異なる方法でフォントを埋め込む必要があります。フォントを埋め込む際に <codeph>embedAsCFF</codeph> 属性の使用する方法について詳しくは、マニュアルを参照してください。</li>
      </ul></p>
           <p>RichEditableText では、リッチテキストの TLF オブジェクト指向モデルが使用されます。このモデルでは、区分、段落、スパン、ハイパーリンク、画像などのテキストレイアウト要素が ActionScript オブジェクトによって実行時に表現されます。これらのオブジェクトは、プログラムを通じてアクセスして操作できます。リッチテキストを表す TLF の中心的なオブジェクトは TextFlow です。そのため、RichEditableText コントロールに対してリッチテキストを指定するには、RichEditableText の <codeph>textFlow</codeph> プロパティを TextFlow インスタンスに設定します。TLF マークアップをインポートするなどの方法で TextFlow を作成する方法については、<codeph>textFlow</codeph> プロパティの説明を参照してください。複数のフォーマットが混在するテキストを表示する必要がない場合は、<codeph>text</codeph> プロパティを使用して「plain text」という String を設定します。<codeph>text</codeph> プロパティと <codeph>textFlow</codeph> プロパティの相互作用（例えば、一方を設定して他方を取得する方法など）について詳しくは、各プロパティの説明を参照してください。</p>
           <p>次の例に示すように、コンパイル時に、TLF マークアップタグを RichEditableText タグ内に配置できます。
      <pre>
      &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichEditableText>
      </pre>
      この例では、MXML コンパイラーによって、<codeph>content</codeph> プロパティが設定され、指定した FlowElement から TextFlow が自動的に作成されます。</p>
           <p>デフォルトのテキストフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> などの CSS スタイルによって決定されます。TextFlow でフォーマット情報が指定されている場合は、CSS スタイルで指定されているデフォルトのフォーマットがオーバーライドされます。</p>
           <p>行の間隔は <codeph>lineHeight</codeph> スタイルで制御でき、段落の間隔は <codeph>paragraphSpaceBefore</codeph> スタイルと <codeph>paragraphSpaceAfter</codeph> スタイルで制御できます。テキストの整列や均等割り付けには、<codeph>textAlign</codeph> スタイルと <codeph>textAlignLast</codeph> スタイルを使用できます。コンポーネントの端からテキストまでのインセットを指定するには、<codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルを使用します。</p>
           <p>デフォルトでは、RichEditableText のサイズは自動的に設定されます。テキストがない場合は非常に小さなサイズから始まり、テキストが入力されるにつれて <codeph>maxWidth</codeph> の値まで幅が広がります。Enter キーを押して改行が挿入されると高さが増大します。</p>
           <p><codeph>widthInChars</codeph> プロパティおよび <codeph>heightInLines</codeph> プロパティを使用すると、フォントサイズに応じて伸縮する方式で幅と高さを指定できるので便利です。 <codeph>typicalText</codeph> プロパティも使用できます。 <codeph>typicalText</codeph> を使用する場合、<codeph>widthInChars</codeph> および <codeph>heightInLines</codeph> は無視されることに注意してください。 また、幅や高さを明示的にピクセル単位で指定したり、パーセントで指定したり、<codeph>left</codeph> と <codeph>right</codeph> や <codeph>top</codeph> と <codeph>bottom</codeph> などの制約を使用することもできます。</p>
           <p>明示的な値、パーセント、<codeph>maxWidth</codeph>、または <codeph>left</codeph> および <codeph>right</codeph> 制約を使用して幅を指定すると、コンポーネントの右端でテキストが折り返され、表示領域にテキストが収まりきらない場合は、テキストの垂直スクロールが可能になります。<codeph>lineBreak</codeph> スタイルを <codeph>explicit</codeph> に設定した場合は、CR（<codeph>¥r</codeph>）、LF（<codeph>¥n</codeph>）または CR+LF（<codeph>¥r¥n</codeph>）を <codeph>text</codeph> で使用する場合や、<codeph>&lt;p></codeph> と <codeph>&lt;br/></codeph> を TLF マークアップで使用する場合と同様に、明示的に改行が指定されている位置でのみ行が折り返されます。この場合、コントロールの幅を超える行があるときは、テキストの水平スクロールが可能になります。</p>
           <p><codeph>maxChars</codeph> プロパティを使用して、ユーザーが入力できる文字数を制限したり、<codeph>restrict</codeph> を使用して、ユーザーが入力できる文字を制限したりすることもできます。</p>
           <p><codeph>multiline</codeph> プロパティは、Enter キーを押したときの動作を決定します。<codeph>true</codeph> の場合、Enter キーを押すと新しい段落が始まります。<codeph>false</codeph> の場合、<codeph>FlexEvent.ENTER</codeph> イベントが送出されます。</p>
           <p>テキストの編集を許可しない場合は、<codeph>editable</codeph> プロパティを <codeph>false</codeph> に設定します。テキストの選択も許可しない場合は、<codeph>selectable</codeph> プロパティを <codeph>false</codeph> に設定します。</p>
           <p>RichEditableText では TLF が使用されるので、フランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>rtl</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>start</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>ltr</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>rtl</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>end</codeph> に設定します。</p>
           <p>RichEditableText では TLF が使用されるので、1 回の編集セッション内で取り消し / やり直し操作を何度でも実行できます。編集セッションは、コンポーネントがキーボードフォーカスを取得したときに開始され、フォーカスを失ったときに終了します。</p>
           <p>RichEditableText は TLF の TextContainerManager クラスを使用して、テキストの表示、スクロール、選択、編集およびコンテキストメニューを処理します。</p>
           <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
           </apiDesc><example conref="RichEditableTextExample.mxml"><swfblock conref="examples/RichEditableTextExample.swf"/></example><example conref="externalTextFlow.xml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.utils.xml#TextFlowUtil"><linktext>spark.utils.TextFlowUtil</linktext></link><link href="" invalidHref="flashx.textLayout.container.TextContainerManager.xml"><linktext>flashx.textLayout.container.TextContainerManager</linktext></link></related-links><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
      multiline プロパティが false の場合に、ユーザーが Enter キーを押すと送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      <codeph>multiline</codeph> プロパティが false の場合に、ユーザーが Enter キーを押すと送出されます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
      ユーザーによる編集操作が完了した後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      ユーザーによる編集操作が完了した後に送出されます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
      ユーザーによる編集操作が発生する前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      ユーザーによる編集操作が発生する前に送出されます。操作を変更するか、またはイベントをキャンセルして操作が処理されないようにすることができます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
      何らかの理由で selectionAnchorPosition プロパティおよび selectionActivePosition プロパティ、またはそのいずれかが変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      何らかの理由で <codeph>selectionAnchorPosition</codeph> プロパティおよび <codeph>selectionActivePosition</codeph> プロパティ、またはそのいずれかが変更された後に送出されます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RichEditableText:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
          コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          コンストラクターです。 
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:RichEditableText:appendText"><apiName>appendText</apiName><shortdesc>
          ユーザーが末尾をクリックして入力したかのように、指定したテキストを RichEditableText の末尾に追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>追加するテキストです。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          ユーザーが末尾をクリックして入力したかのように、指定したテキストを RichEditableText の末尾に追加します。
                   <p>続いて挿入ポイントが新しいテキストの後に設定されます。挿入ポイントが表示されるように、必要に応じてテキストがスクロールされます。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc>
          指定された文字範囲の計算済みフォーマットを指定する TextLayoutFormat オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextLayoutFormat オブジェクトです。
          
          </apiDesc><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>要求するフォーマットの名前を指定する String の Vector です。すべてのフォーマットを要求する場合は、<codeph>null</codeph> を指定します。
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>選択範囲の固定されている端を指定する文字の位置です。
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>選択範囲の移動可能な端を指定する文字の位置です。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定された文字範囲の計算済みフォーマットを指定する TextLayoutFormat オブジェクトを返します。
                   <p>範囲全体のフォーマット設定が一貫していない場合、その値は <codeph>undefined</codeph> になります。</p>
                   <p>特定のフォーマットの名前を含む String の Vector を指定できます。指定しない場合は、すべてのフォーマットが計算されます。</p>
          
          <p>範囲を指定しない場合、選択された範囲が使用されます。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc>
          
      要求されたスクロール単位でスクロールする、ビューポートの現在の horizontalScrollPosition に追加する量を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>horizontalScrollPosition</codeph> に追加するピクセル数です。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>スクロールする量です。この値は次のいずれかの spark.core.NavigationUnit 定数にする必要があります。 
      <ul>
       <li><codeph>LEFT</codeph></li>
       <li><codeph>RIGHT</codeph></li>
       <li><codeph>PAGE_LEFT</codeph></li>
       <li><codeph>PAGE_RIGHT</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      単一列でスクロールするには、<codeph>LEFT</codeph> または <codeph>RIGHT</codeph> を使用します。最初または最後の列にスクロールするには、<codeph>HOME</codeph> または <codeph>END</codeph> を使用します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      要求されたスクロール単位でスクロールする、ビューポートの現在の <codeph>horizontalScrollPosition</codeph> に追加する量を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc>
          
      要求されたスクロール単位でスクロールする、ビューポートの現在の verticalScrollPosition に追加する量を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>verticalScrollPosition</codeph> に追加するピクセル数です。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>スクロールする量です。unit の値は次のいずれかの spark.core.NavigationUnit 定数にする必要があります。 
      <ul>
       <li><codeph>UP</codeph></li>
       <li><codeph>DOWN</codeph></li>
       <li><codeph>PAGE_UP</codeph></li>
       <li><codeph>PAGE_DOWN</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      単一行でスクロールするには、<codeph>UP</codeph> または <codeph>DOWN</codeph> を使用します。最初または最後の行にスクロールするには、<codeph>HOME</codeph> または <codeph>END</codeph> を使用します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      要求されたスクロール単位でスクロールする、ビューポートの現在の <codeph>verticalScrollPosition</codeph> に追加する量を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:insertText"><apiName>insertText</apiName><shortdesc>
          ユーザーが入力したかのように、指定したテキストを RichEditableText に挿入します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>挿入するテキストです。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          ユーザーが入力したかのように、指定したテキストを RichEditableText に挿入します。
                   <p>範囲を選択した場合は、選択したテキストが新しいテキストに置き換えられます。挿入ポイントがある場合は、その位置に新しいテキストが挿入されます。</p>
                   <p>続いて挿入ポイントが新しいテキストの後に設定されます。挿入ポイントが表示されるように、必要に応じてテキストがスクロールされます。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectAll"><apiName>selectAll</apiName><shortdesc>
          すべてのテキストを選択します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          すべてのテキストを選択します。最後の段落終了文字は含まれません。
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectRange"><apiName>selectRange</apiName><shortdesc>
          指定した文字範囲を選択します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>選択範囲が拡張されるときに固定して動かない選択範囲の端を指定する文字位置です。
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>選択範囲が拡張されるときに移動する選択範囲の端を指定する文字位置です。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定した文字範囲を選択します。
                   <p>どちらかの位置が負の場合、テキスト範囲の選択が解除されます。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc>
          指定された範囲内にある、特定のフォーマットに対応する各エレメントに、指定されたフォーマットを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>選択範囲に適用する TextLayoutFormat です。
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>矢印キーで選択範囲が拡張されるときに固定されている選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>矢印キーで選択範囲が拡張されるときに移動する選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定された範囲内にある、特定のフォーマットに対応する各エレメントに、指定されたフォーマットを適用します。文字フォーマットを指定された範囲のテキストに適用します（指定された範囲が単一ポイントの場合、変更は行われません）。 段落フォーマットを任意の段落（範囲内の少なくとも一部分）に適用します（範囲が単一ポイントの場合は単一段落）。 コンテナフォーマットをコンテナに適用します。
         
          <p>サポートされるフォーマットは、TextLayoutFormat 内のフォーマットです。<codeph>undefined</codeph> という値は適用されません。範囲を指定しない場合、選択された範囲が使用されます。</p>
                   <p>次の例では、選択箇所の <codeph>fontSize</codeph> と <codeph>color</codeph> を設定します。
          <pre>
          var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
          textLayoutFormat.fontSize = 12;
          textLayoutFormat.color = 0xFF0000;
          myRET.setFormatOfRange(textLayoutFormat);
          </pre>
          </p>
          
          <p><codeph>getFormatOfRange()</codeph> の結果を使用して <codeph>format</codeph> を指定する場合は、<codeph>TextLayoutFormat</codeph> 内のすべてのフォーマットが計算済みの値を持ち、その値が特定のフォーマットに対応する各エレメントに適用されます。</p>
         
          <p>すべてのテキストに適用するフォーマットを指定する場合は、<codeph>setStyle(format, value)</codeph> をコンポーネント自体に使用することをお勧めします。</p>
         
          <p>次の例では、すべてのテキストの <codeph>fontSize</codeph> と <codeph>color</codeph> を設定します。
          <pre>
          myRET.setStyle("fontSize", 12);
          myRET.setStyle("color", 0xFF0000);
          </pre>
          </p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:styleChanged"><apiName>styleChanged</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:RichEditableText:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:RichEditableText:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
          
          </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
          テキストの高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          テキストの高さです。
                   <p>Text Layout Framework ではパフォーマンス向上のために TextLine が仮想化されるので、コンポーネント内にすべてのテキストを表示できない場合、この高さの初期値は予測値になります。テキストの最後までスクロールすると、すべての TextLine が作成されて、<codeph>contentHeight</codeph> が正確な値になります。</p>
                   <p>テキストを縦にスクロールするには、<codeph>verticalScrollPosition</codeph> を 0 ～ <codeph>contentHeight - height</codeph> の範囲で変化させます。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
          テキストの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          テキストの幅です。
                   <p>Text Layout Framework ではパフォーマンス向上のために TextLine が仮想化されるので、コンポーネント内にすべてのテキストを表示できない場合、この幅の初期値は予測値になります。テキストの最後までスクロールすると、すべての TextLine が作成されて、<codeph>contentWidth</codeph> が正確な値になります。</p>
                   <p>テキストを横にスクロールするには、<codeph>horizontalScrollPosition</codeph> を 0 ～ <codeph>contentWidth - width</codeph> の範囲で変化させます。</p>  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:content:get"><apiName>content</apiName><shortdesc>
          このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時に、リッチテキストコンテンツを取得または設定するには、代わりに textFlow プロパティを使用してください。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時に、リッチテキストコンテンツを取得または設定するには、代わりに <codeph>textFlow</codeph> プロパティを使用してください。
                   <p><codeph>content</codeph> プロパティは、次のような MXML を記述できるように、RichEditableText のデフォルトプロパティになっています。
          <pre>
          &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichEditableText>
          </pre>
          この場合は、コンテンツとして指定した String と SpanElement を使用して TextFlow が作成されます。</p>
                   <p>このプロパティは Object として型指定されています。Object は、String、FlowElement、または String と FlowElement の配列に設定できます。上記の例では、2 つのエレメントで構成される配列をコンテンツと指定しています。最初のエレメントは「Hello」という String で、2 番目のエレメントは太字の「World」というテキストを含む SpanElement です。</p>
         
          <p>指定方法にかかわらず、コンテンツは TextFlow オブジェクトに変換されます。このプロパティの値を取得すると、変換後の TextFlow オブジェクトが取得されます。</p>
         
          <p>リッチテキストコンテンツは Object ではなく TextFlow として厳密に型指定されているので、実行時のリッチテキストコンテンツの取得と設定には <codeph>textFlow</codeph> プロパティを使用することをお勧めします。TextFlow は、Text Layout Framework 内のリッチテキストコンテンツの正準表現です。</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:editable:get"><apiName>editable</apiName><shortdesc>
          このコントロール内のテキストをユーザーが編集できるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
                   </apiDefaultValue></apiValueDef><apiDesc>
          このコントロール内のテキストをユーザーが編集できるかどうかを示すフラグです。
                   <p><codeph>true</codeph> の場合、このコントロールの境界にマウスカーソルを合わせると I 字形に変わります。<codeph>false</codeph> の場合、マウスカーソルは矢印のままです。</p>
                   <p>このプロパティが <codeph>true</codeph> の場合、<codeph>selectable</codeph> プロパティは無視されます。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:enableIME:get"><apiName>enableIME</apiName><shortdesc>
          コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><returns>true if the component is editable and it is not displaying a password.
         
          </returns></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
          行数で表したコントロールのデフォルトの高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          行数で表したコントロールのデフォルトの高さです。
                   <p><codeph>fontSize</codeph> や <codeph>lineHeight</codeph> など、コントロールのフォーマットスタイルは、行の高さをピクセル単位で計算するために使用されます。</p>
                   <p>例えば、5 行のテキストを表示できるように RichEditableText の高さを設定する必要がある場合は、このプロパティを 5 に設定します。</p>
                   <p>このプロパティが <codeph>NaN</codeph>（デフォルト）の場合、コンポーネントのデフォルトの高さは、表示されるテキストに基づいて決定されます。</p>
          
          <p>明示的な値、パーセント、または <codeph>top</codeph> および <codeph>bottom</codeph> 制約を使用して高さを指定すると、このプロパティは無視されます。</p>
                   <p><codeph>typicalText</codeph> プロパティが設定されている場合も、このプロパティは無視されます。</p>
         
          <p>RichEditableText の <codeph>measure()</codeph> メソッドは、<codeph>widthInChars</codeph> と <codeph>heightInLines</codeph> を使用して、<codeph>measuredWidth</codeph> と <codeph>measuredHeight</codeph> を決定します。これらは、HTML の TextArea の <codeph>cols</codeph> と <codeph>rows</codeph> に似ています。</p>
                   <p><codeph>widthInChars</codeph> と <codeph>heightInLines</codeph> のデフォルト値は <codeph>NaN</codeph> なので、RichTextEditable のサイズはデフォルトで自動調整されます。テキストがない場合は非常に小さいサイズに設定され、文字を入力するにつれて幅が広がり、Enter キーを押して改行すると高さが増えます。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          テキストを横にスクロールするピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          テキストを横にスクロールするピクセル数です。
                   <p>テキストを横にスクロールするには、<codeph>horizontalScrollPosition</codeph> を 0 ～ <codeph>contentWidth - width</codeph> の範囲で変化させます。</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:imeMode:get"><apiName>imeMode</apiName><shortdesc>
          IME（入力メソッドエディター）のモードを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          IME（入力メソッドエディター）のモードを指定します。 IME を使用することによって、ユーザーは中国語、日本語、および韓国語のテキストを入力できます。Flex では、コントロールにフォーカスが置かれたときに、IME を指定されたモードに設定し、コントロールからフォーカスが離れたときに、元のモードに戻します。
                   <p>flash.system.IMEConversionMode クラスで、このプロパティの有効な値の定数を定義します。IME を指定しない場合は、<codeph>null</codeph> を指定します。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:multiline:get"><apiName>multiline</apiName><shortdesc>
          ユーザーが複数行テキストを入力できるかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          ユーザーが複数行テキストを入力できるかどうかを決定します。
                   <p><codeph>true</codeph> の場合、Enter キーを押すと新しい段落が始まります。<codeph>false</codeph> の場合、Enter キーを押してもテキストには影響しませんが、RichEditableText が <codeph>"enter"</codeph> イベントを送出します。RichEditableText の multiline の値が <codeph>false</codeph> に設定されている場合、テキストをこのフィールドに貼り付けると、改行は削除されます。 </p>  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectable:get"><apiName>selectable</apiName><shortdesc>
          コンテンツをマウスで選択できるかどうか（また、コントロールにキーボードフォーカスがあるときはキーボードで選択できるかどうか）を示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          コンテンツをマウスで選択できるかどうか（また、コントロールにキーボードフォーカスがあるときはキーボードで選択できるかどうか）を示すフラグです。
                   <p>テキストを選択可能にすると、コントロールのテキストをコピーできます。</p>
                   <p>このプロパティは、<codeph>editable</codeph> プロパティが <codeph>true</codeph> の場合は無視されます。</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
          矢印キーで選択範囲が拡張されるときに移動する選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          矢印キーで選択範囲が拡張されるときに移動する選択範囲の端を示す文字位置（<codeph>text</codeph> String の先頭を基準とした相対位置）です。
                   <p>アクティブな位置は、選択範囲の開始点または終了点のいずれかです。</p>
                   <p>例えば、12 の位置から 8 の位置までをドラッグして選択すると、<codeph>selectionAnchorPosition</codeph> は 12 になり、<codeph>selectionActivePosition</codeph> は 8 になります。さらに左矢印キーを押すと、<codeph>selectionActivePosition</codeph> は 7 になります。</p>
                   <p>値が -1 の場合は、設定されていないことを示します。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
          矢印キーで選択範囲が拡張されるときに固定されている選択範囲の端を示す文字位置（text String の先頭を基準とした相対位置）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          矢印キーで選択範囲が拡張されるときに固定されている選択範囲の端を示す文字位置（<codeph>text</codeph> String の先頭を基準とした相対位置）です。
                   <p>アンカー位置は、選択範囲の開始点または終了点のいずれかです。</p>
                   <p>例えば、12 の位置から 8 の位置までをドラッグして選択すると、<codeph>selectionAnchorPosition</codeph> は 12 になり、<codeph>selectionActivePosition</codeph> は 8 になります。さらに左矢印キーを押すと、<codeph>selectionActivePosition</codeph> は 7 になります。</p>
                   <p>値が -1 の場合は、設定されていないことを示します。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
          テキストの選択範囲をハイライト表示するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
          
          </apiDefaultValue></apiValueDef><apiDesc>
          テキストの選択範囲をハイライト表示するかどうかを決定します。
          
          <p>有効な値は、spark.components.TextSelectionHighlighting クラスで指定されています。有効な値は、<codeph>TextSelectionHighlighting.WHEN_FOCUSED</codeph>、<codeph>TextSelectionHighlighting.WHEN_ACTIVE</codeph>、および <codeph>TextSelectionHighlighting.ALWAYS</codeph> です。</p>
                   <p><codeph>WHEN_FOCUSED</codeph> を指定すると、コンポーネントにキーボードフォーカスがあるときにのみ、テキストの選択範囲が表示されます。</p>
          
          <p><codeph>WHEN_ACTIVE</codeph> を指定すると、コンポーネントのウィンドウがアクティブなときには、コンポーネントにキーボードフォーカスがなくても常にテキストの選択範囲が表示されます。</p>
                   <p><codeph>ALWAYS</codeph> を指定すると、コンポーネントにキーボードフォーカスがなくても、コンポーネントのウィンドウがアクティブウィンドウでなくても、テキストの選択範囲が常に表示されます。</p>
          
          </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#TextSelectionHighlighting"><linktext>spark.components.TextSelectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:showSystemCursor:get"><apiName>showSystemCursor</apiName><shortdesc>
          マウスがコンポーネントの上に移動したときにシステムカーソルが常に表示される場合は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          マウスがコンポーネントの上に移動したときにシステムカーソルが常に表示される場合は true です。false の場合は、カスタムカーソルが表示されます。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
          このコンポーネントで表示されるリッチテキストを表す TextFlow です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
          このコンポーネントで表示されるリッチテキストを表す TextFlow です。
         
          <p>TextFlow は、Text Layout Framework（TLF）で最も重要なクラスです。このクラスは、リッチテキストコンテンツを表す FlowElements のツリーのルートです。</p>
                   <p>通常、TLF マークアップから TextFlow を作成するには、<codeph>TextFlowUtil.importFromString()</codeph> メソッドまたは <codeph>TextFlowUtil.importFromXML()</codeph> メソッドを使用します。あるいは、（HTML のサブセットをインポートできる）TLF の TextConverter クラスを使用するか、<codeph>addChild()</codeph> などのメソッドを TextFlow に対して使用して TextFlow を作成することもできます。</p>
                   <p>このプロパティと <codeph>text</codeph> プロパティの設定は相互に影響します。</p>
                   <p><codeph>textFlow</codeph> を設定して、<codeph>text</codeph> を取得すると、各段落のテキストは 1 つの LF（"¥n"）で区切られます。</p>
                   <p><codeph>text</codeph> を <codeph>"Hello World"</codeph> などの String に設定して <codeph>textFlow</codeph> を取得すると、1 つの SpanElement を含む 1 つの ParagraphElement で構成される TextFlow が取得されます。</p>
                   <p>テキストに CR（"¥r"）、LF（"¥n"）、または CR+LF（"¥r¥n"）という明示的な改行が含まれている場合は、それぞれに 1 つのスパンを含む複数の段落で構成された TextFlow がコンテンツになります。</p>
                   <p>このプロパティを設定すると、コントロールのスクロール位置とテキストの選択範囲を指定するプロパティにも影響します。<codeph>horizontalScrollPosition</codeph> と <codeph>verticalScrollPosition</codeph> は 0 にリセットされ、<codeph>selectionAnchorPosition</codeph> と <codeph>selectionActivePosition</codeph> は -1 に設定されて選択範囲がクリアされます。</p>
                   <p>TextFlow オブジェクトを TLF マークアップに変えるには、<codeph>TextFlowUtil.export()</codeph> マークアップを使用します。</p>
                   <p>1 つの TextFlow を複数の RichEditableText インスタンスで共有することはできません。別のインスタンスで同じテキストを表示するには、<codeph>TextFlowUtil.export()</codeph> と <codeph>TextFlowUtil.importFromXML()</codeph> を使用するか、<codeph>deepCopy()</codeph> メソッドを TextFlow に対して使用して、別の TextFlow を作成する必要があります。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:text:get"><apiName>text</apiName><shortdesc>
          このコンポーネントによって表示されるテキストのストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
                   </apiDefaultValue></apiValueDef><apiDesc>
          このコンポーネントによって表示されるテキストのストリングです。
                   <p>このプロパティと <codeph>textFlow</codeph> プロパティの設定は相互に影響します。</p>
                   <p><codeph>text</codeph> を <codeph>"Hello World"</codeph> などの String に設定して <codeph>textFlow</codeph> を取得すると、1 つの SpanElement を含む 1 つの ParagraphElement で構成される TextFlow が取得されます。</p>
                   <p><codeph>text</codeph> を null に設定すると、デフォルト値である空のストリングに設定されます。</p>
         
          <p>テキストに CR（"¥r"）、LF（"¥n"）、または CR+LF（"¥r¥n"）という明示的な改行が含まれている場合は、それぞれに 1 つのスパンを含む複数の段落で構成された TextFlow がコンテンツになります。</p>
                   <p><codeph>textFlow</codeph> を設定して、<codeph>text</codeph> を取得すると、各段落のテキストは 1 つの LF（"¥n"）で区切られます。</p>
                   <p>このプロパティを設定すると、コントロールのスクロール位置とテキストの選択範囲を指定するプロパティにも影響します。<codeph>horizontalScrollPosition</codeph> および <codeph>verticalScrollPosition</codeph> が 0 にリセットされます。Flex 4.6 以降では、<codeph>selectionAnchorPosition</codeph> および <codeph>selectionActivePosition</codeph> が維持されます。以前は、<codeph>selectionAnchorPosition</codeph> および <codeph>selectionActivePosition</codeph> が -1 にセットされて選択範囲がクリアされていました。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:typicalText:get"><apiName>typicalText</apiName><shortdesc>
          コントロールのデフォルトの幅と高さを決定するために使用されるテキストであり、実際には表示されません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
                   </apiDefaultValue></apiValueDef><apiDesc>
          コントロールのデフォルトの幅と高さを決定するために使用されるテキストであり、実際には表示されません。
                   <p>明示的な値、パーセント、または <codeph>left</codeph> および <codeph>right</codeph> 制約を使用して幅を指定すると、このプロパティは無視されます。</p>
                   <p>このプロパティを使用すると、<codeph>widthInChars</codeph> プロパティおよび <codeph>heightInLines</codeph> プロパティは無視されます。 </p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link><link href="" invalidHref="spark.primitives.widthInChars.xml"><linktext>spark.primitives.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          テキストを縦にスクロールするピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          テキストを縦にスクロールするピクセル数です。
                   <p>テキストを縦にスクロールするには、<codeph>verticalScrollPosition</codeph> を 0 ～ <codeph>contentHeight - height</codeph> の範囲で変化させます。</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
          em 単位で測定されたコントロールのデフォルトの幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          em 単位で測定されたコントロールのデフォルトの幅です。
                   <p>em は活字の測定単位で、ポイントサイズと同じです。必ずしも「M」の文字の幅と正確に一致しているわけではありませんが、多くのフォントでは、「M」が約 1 em の幅になっています。コントロールの <codeph>fontSize</codeph> スタイルは、em 単位をピクセル数で計算するために使用されます。</p>
                   <p>例えば、約 20 文字のテキストを表示できるように RichEditableText の幅を設定する必要がある場合は、このプロパティを 20 に設定します。</p>
                   <p>このプロパティが <codeph>NaN</codeph>（デフォルト）の場合、コンポーネントのデフォルトの幅は、表示されるテキストに基づいて決定されます。</p>
                   <p>明示的な値、パーセント、または <codeph>left</codeph> および <codeph>right</codeph> 制約を使用して幅を指定すると、このプロパティは無視されます。</p>
                   <p><codeph>typicalText</codeph> プロパティが設定されている場合も、このプロパティは無視されます。</p>
         
          <p>RichEditableText の <codeph>measure()</codeph> メソッドは、<codeph>widthInChars</codeph> と <codeph>heightInLines</codeph> を使用して、<codeph>measuredWidth</codeph> と <codeph>measuredHeight</codeph> を決定します。これらは、HTML の TextArea の <codeph>cols</codeph> と <codeph>rows</codeph> に似ています。</p>
                   <p><codeph>widthInChars</codeph> と <codeph>heightInLines</codeph> のデフォルト値は <codeph>NaN</codeph> なので、RichTextEditable のサイズはデフォルトで自動調整されます。テキストがない場合は非常に小さいサイズに設定され、文字を入力するにつれて幅が広がり、Enter キーを押して改行すると高さが増えます。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  TitleWindow クラスは Panel を拡張し、閉じるボタンと移動領域をサポートします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TitleWindow">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="inactiveWithControlBar" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  コントロールバーが表示されたアクティブでないビューの状態です。
   </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="inactive" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  TitleWindow またはそのすべての子がフォーカスを得ていないときに使用されるアクティブでないビューの状態です。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="closeButton" owner="spark.components:TitleWindow" required="false" var_type="spark.components:Button">
<description>
      閉じるアイコン（TitleWindow のタイトルバーの右上の隅にある小さな x）の外観を定義するスキンパーツです。クリックすると、閉じるアイコンが <codeph>close</codeph> イベントを送出します。
           <p>Flex では、ウィンドウは自動的に閉じられません。閉じるアイコンをサポートするには、<codeph>close</codeph> イベントのハンドラーを作成して、そのイベントハンドラーで TitleWindow を閉じる必要があります。</p>
           <p>このスキンパーツでは、フォーカスが無効になります。</p>
     </description>
	<shortdesc>
      The skin part that defines the appearance of the 
      close icon (a small x in the upper-right corner of the TitleWindow title bar).</shortdesc></SkinPart><SkinPart name="moveArea" owner="spark.components:TitleWindow" required="false" var_type="flash.display:InteractiveObject">
<description>
      ユーザーがクリックしてドラッグするとウィンドウを移動できる領域です。デフォルトでは、移動領域は、TitleWindow コンテナのタイトルバーになります。
           <p>TitleWindow コンテナをドラッグするには、ウィンドウのタイトルバー領域でマウスポインターをクリックしたままでマウスを移動します。移動領域を変更するカスタムスキンクラスを作成します。</p>
     </description>
	<shortdesc>
      The area where the user must click and drag to move the window.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:TitleWindow&gt;
    <strong>Events</strong>
    close="<i>No default</i>"
    windowMove="<i>No default</i>"
    windowMoveEnd="<i>No default</i>"
    windowMoveStart="<i>No default</i>"
    windowMoving="<i>No default</i>"
  &lt;/s:TitleWindow&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  TitleWindow クラスは Panel を拡張し、閉じるボタンと移動領域をサポートします。
 
  <p>TitleWindow は、ポップアップウィンドウとして設計されています。アプリケーションの一部として、MXML 内に TitleWindow を作成しないでください。その代わりに、一般的には、TitleWindow クラスに基づいてカスタム MXML コンポーネントを作成し、<codeph>PopUpManager.createPopUp()</codeph> メソッドを使用してコンポーネントをポップアップ表示し、<codeph>PopUpManager.removePopUp()</codeph> メソッドを使用してコンポーネントを削除します。</p>
  
  <p>TitleWindow コンテナには、次のデフォルトサイズ設定属性があります。</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>height は、デフォルトの高さまたは明示的に指定した高さを持つ、コンテンツ領域内のすべての子を収容し、さらにタイトルバーと境界線、垂直方向の子同士の間隔、コンテナの上下のパディングをすべて収容できる十分な大きさです。 width は、最も幅の広い子のデフォルト幅または明示的な幅にコンテナの左右のパディングを加えた値、またはタイトルテキストの幅のうち、いずれか大きい方の値です。</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.TitleWindowSkin</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext>spark.components.Panel</linktext></link><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext>spark.skins.spark.TitleWindowCloseButtonSkin</linktext></link><link href="" invalidHref="mx.managers.PopUpManager.xml"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><shortdesc>
  ユーザーがドラッグした後にマウスボタンを放すと送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがドラッグした後にマウスボタンを放すと送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><shortdesc>
  ユーザーがウィンドウのドラッグに成功したあとに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがウィンドウのドラッグに成功したあとに送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><shortdesc>
  ユーザーがウィンドウをドラッグすると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがウィンドウをドラッグすると送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><shortdesc>
  ユーザーが移動領域でマウスボタンを押したままにして、ウィンドウをドラッグし始めると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが移動領域でマウスボタンを押したままにして、ウィンドウをドラッグし始めると送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  ユーザーが閉じるボタンを選択したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが閉じるボタンを選択したときに送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TabBar"><apiName>TabBar</apiName><shortdesc>
  TabBar クラスは同じタブのセットを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TabBar">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:TabBar" playerVersion="Flash10" theme="spark" type="Number">
<description>
  デフォルトの TabBarButton スキンの TabBar ボタンの左上と右上の角の半径を定義します。
   </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:TabBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TabBar
    <b>Styles</b>
    cornerRadius="4"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TabBar クラスは同じタブのセットを表示します。1 回に 1 つのタブを選択でき、デフォルトでは最初のタブが選択されます。TabBarSkin クラスでは、タブが 1 行に配置されます。タブの角の半径を設定するには、TabBar の <codeph>cornerRadius</codeph> スタイルを使用します。
 
  <p>タブのセットは <codeph>dataProvider</codeph> プロパティで定義されます。TabBar の外観は TabBarSkin クラスで定義されます。 各タブの外観は TabBarButtonSkin クラスで定義されます。</p>
   <p>TabBar コントロールを使用すると ViewStack コンテナのアクティブな子を設定できます。次に例を示します。</p>
   <p><b>メモ：</b>Spark のリストベースのコントロール（Spark の ListBase クラスと、そのサブクラスである ButtonBar、ComboBox、DropDownList、List、TabBar）では、BasicLayout クラスを <codeph>layout</codeph> プロパティの値として使用することはできません。Spark のリストベースのコントロールでは、BasicLayout を使用しないでください。</p>
  
  <pre>
  &lt;s:TabBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
   <p>TabBar コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>タブを表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="TabBarExample.mxml"><swfblock conref="examples/TabBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext>spark.skins.spark.TabBarSkin</linktext></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext>spark.skins.spark.TabBarButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  RadioButton コンポーネントを使用すると、一連の相互排他的な選択肢の中から 1 つだけをユーザーに選択させることができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:RadioButton" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:RadioButton" playerVersion="Flash10" theme="mobile" type="String">
<description>
  ラベルに対するアイコンの方向です。 有効な MXML 値は、<codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> および <codeph>top</codeph> です。
 
  <p>ActionScript では、このプロパティを設定するために、<codeph>IconPlacement.RIGHT</codeph>、<codeph>IconPlacement.LEFT</codeph>、<codeph>IconPlacement.BOTTOM</codeph> および <codeph>IconPlacement.TOP</codeph> の各定数を使用できます。</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButton
    <strong>Properties</strong>
    enabled=""
    group="<i>the automatically created default RadioButtonGroup</i>"
    groupName="radioGroup"
    value="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButton コンポーネントを使用すると、一連の相互排他的な選択肢の中から 1 つだけをユーザーに選択させることができます。RadioButtonGroup は、同じ <codeph>groupName</codeph> プロパティを持つ複数の RadioButton コンポーネントで構成されます。RadioButton インスタンスを RadioButtonGroup にグループ化することはオプションですが、グループ化を行うと、例えば、単一のイベントハンドラーを個々の RadioButton ではなく、RadioButton グループで設定できます。
 
  <p>RadioButton グループでは、<codeph>&lt;s:RadioButtonGroup></codeph> タグで作成したグループを参照できます。ユーザーは、グループ内のメンバーを一度に 1 つのみ選択できます。 選択されていないグループメンバーを選択すると、同じグループ内でそれまで選択されていた RadioButton コンポーネントは選択解除されます。</p>
 
  <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
 
  <p>RadioButton コンポーネントには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コンポーネントのテキストラベル全体を表示できる幅</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 18 ピクセル、高さ 18 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.RadioButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link><link href="spark.skins.spark.xml#RadioButtonSkin"><linktext>spark.skins.spark.RadioButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RadioButton:enabled:get"><apiName>enabled</apiName><shortdesc>
      RadioButton コンポーネントは、RadioButtonGroup が有効になっていて、RadioButton 自体が有効になっている場合に有効になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      RadioButton コンポーネントは、RadioButtonGroup が有効になっていて、RadioButton 自体が有効になっている場合に有効になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      この RadioButton コンポーネントが属するグループの名前を指定します。または、この RadioButton が RadioButtonGroup コンポーネントによって定義されたグループの一部の場合は、RadioButtonGroup コンポーネントの id プロパティの値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"radioGroup"
      </apiDefaultValue></apiValueDef><apiDesc>
      この RadioButton コンポーネントが属するグループの名前を指定します。または、この RadioButton が RadioButtonGroup コンポーネントによって定義されたグループの一部の場合は、RadioButtonGroup コンポーネントの <codeph>id</codeph> プロパティの値を指定します。<codeph>groupName</codeph> プロパティが同じ値に設定されているラジオボタンはすべて、同じタブグループに追加されます。
     
      <p>RadioButtonGroup に追加するラジオボタンを作成するときは、すべてのボタンで <codeph>group</codeph> プロパティまたは <codeph>groupName</codeph> プロパティを使用することをお勧めします。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/group"><linktext>group</linktext></link><link href="" invalidHref="mx.manager.xml#IFocusManagerGroup/groupName"><linktext>mx.manager.IFocusManagerGroup.groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      この RadioButton が属する RadioButtonGroup コンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButtonGroup</apiValueClassifier><apiDefaultValue>the automatically created default RadioButtonGroup
      </apiDefaultValue></apiValueDef><apiDesc>
      この RadioButton が属する RadioButtonGroup コンポーネントです。RadioButtonGroup に追加する RadioButton を作成するときは、すべてのボタンで <codeph>group</codeph> プロパティまたは <codeph>groupName</codeph> プロパティを使用する必要があります。
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/groupName"><linktext>groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      （オプション）RadioButton コンポーネントに関連付けられるユーザー定義値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      （オプション）RadioButton コンポーネントに関連付けられるユーザー定義値です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
  ButtonBarButton クラスは、ButtonBar コントロールによって使用されるカスタムアイテムレンダラーを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:ToggleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBarButton クラスは、ButtonBar コントロールによって使用されるカスタムアイテムレンダラーを定義します。このアイテムレンダラーは、ButtonBar のデフォルトスキンである ButtonBarSkin クラスで使用されます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><adobeApiEvent id="spark.components:ButtonBarButton_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:ButtonBarButton:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ButtonBarButton:allowDeselection:get"><apiName>allowDeselection</apiName><shortdesc>
      true の場合は、現在選択されているボタンをクリックすると選択が解除されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合は、現在選択されているボタンをクリックすると選択が解除されます。<codeph>false</codeph> の場合は、別のボタンを選択しなければ、現在選択されているボタンを選択解除できません。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:data:get"><apiName>data</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:ButtonBarButton:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      アイテムレンダラーのホストコンポーネントのデータプロバイダー内のアイテムのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーのホストコンポーネントのデータプロバイダー内のアイテムのインデックスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:label:get"><apiName>label</apiName><shortdesc>
      
      アイテムレンダラーで表示するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      アイテムレンダラーで表示するストリングです。 
     
      <p>アイテムレンダラーのホストコンポーネントは <codeph>itemToLabel()</codeph> メソッドを使用して、アイテムレンダラーによって表示するストリングにデータアイテムを変換できます。 </p>
     
      <p>List や ButtonBar などのコントロールの場合、<codeph>labelField</codeph> プロパティまたは <codeph>labelFunction</codeph> プロパティを使用して、ストリングを含むデータアイテムのフィールドを指定できます。それ以外の場合、ホストコンポーネントは <codeph>toString()</codeph> メソッドを使用して、ストリングにデータアイテムを変換できます。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、true を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      アイテムレンダラーがそれ自体をフォーカスありとして表示できる場合は、<codeph>true</codeph> を含みます。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Panel"><apiName>Panel</apiName><shortdesc>
  Panel クラスは、タイトルバー、キャプション、境界線、および子のコンテンツ領域を含むコンテナを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Panel">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabledWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Panel の ControlBar の無効状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Panel の ControlBar の通常の状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Panel の無効状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Panel の通常の状態
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントのドロップシャドウの可視性を制御します。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの角の半径です。
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントの境界線の表示を制御します。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="uint">
<description>
  このコンポーネントの境界線の色です。
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの境界線のアルファです。
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      コンテナのコントロールバー領域の外観を定義するスキンパーツです。PanelSkin クラスのデフォルトの定義では、Panel コンテナのコンテンツ領域の下部にコントロールバー領域が表示され、背景は灰色に設定されます。 
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      コンテナ内のタイトルテキストの外観を定義するスキンパーツです。
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:Panel
   <strong>Properties</strong>
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    title=""
 
   <strong>Styles</strong>
    borderAlpha="0.5"
    borderColor="0"
    borderVisible="true"
    cornerRadius="0"
    dropShadowVisible="true"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/s:Panel&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Panel クラスは、タイトルバー、キャプション、境界線、および子のコンテンツ領域を含むコンテナを定義します。
   <p>Panel コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>幅 131 ピクセル、高さ 127 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="PanelExample.mxml"><swfblock conref="examples/PanelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links><apiConstructor id="spark.components:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Panel:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      Panel コンテナのコントロールバー領域に含めるコンポーネントのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      Panel コンテナのコントロールバー領域に含めるコンポーネントのセットです。Panel コンテナのコントロールバー領域の場所と外観は、spark.skins.spark.PanelSkin クラスによって決定されます。PanelSkin クラスのデフォルトの定義では、Panel コンテナのコンテンツ領域の下部にコントロールバー領域が表示され、背景は灰色に設定されます。コントロールバーのデフォルトの外観を変更するカスタムスキンを作成します。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Panel:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      コンテナのコントロールバー領域のレイアウトを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテナのコントロールバー領域のレイアウトを定義します。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      true の場合、コントロールバーは可視です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、コントロールバーは可視です。<codeph>controlBarContent</codeph> プロパティの値が設定されていない場合、このフラグは無視されます。
           <p><b>メモ：</b>Panel コンテナは <codeph>controlBarGroup</codeph> プロパティを監視しません。他のコードによって不可視に設定された場合、Panel コンテナが正しく更新されないことがあります。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:title:get"><apiName>title</apiName><shortdesc>
      タイトルバーに表示されるタイトルまたはキャプションです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      タイトルバーに表示されるタイトルまたはキャプションです。 
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HGroup"><apiName>HGroup</apiName><shortdesc>
  HGroup コンテナは、HorizontalLayout クラスを使用する Group コンテナのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:HGroup
    <strong>Properties</strong>
    columnWidth="no default"
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount="-1"
    requestedMaxColumnCount="-1"
    requestedMinColumnCount="-1"
    variableColumnWidth"true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  HGroup コンテナは、HorizontalLayout クラスを使用する Group コンテナのインスタンスです。<codeph>layout</codeph> プロパティを変更しないでください。代わりに、HGroup クラスのプロパティを使用して、HorizontalLayout クラスの特性を変更します。
 
  <p>HGroup コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HGroupExample.mxml"><swfblock conref="examples/HGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#HorizontalLayout"><linktext>spark.layouts.HorizontalLayout</linktext></link></related-links><apiConstructor id="spark.components:HGroup:HGroup"><apiName>HGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。<codeph>layout</codeph> プロパティを HorizontalLayout クラスのインスタンスに初期化します。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="spark.layout.HorizontalLayout.xml"><linktext>spark.layout.HorizontalLayout</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:HGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.HorizontalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMaxColumnCount:get"><apiName>requestedMaxColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:variableColumnWidth:get"><apiName>variableColumnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRendererOwner"><apiName>IItemRendererOwner</apiName><shortdesc>
  IItemRendererOwner インターフェイスは、アイテムレンダラーをサポートするためにクラスが実装する必要がある、API の基本セットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IItemRendererOwner インターフェイスは、アイテムレンダラーをサポートするためにクラスが実装する必要がある、API の基本セットを定義します。IItemRendererOwner インターフェイスを実装するクラスは、アイテムレンダラーのホストコンポーネントと呼ばれます。
  
  <p>アイテムレンダラーを定義するクラスには、IItemRenderer インターフェイスを実装する必要があります。</p> 
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link></related-links><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      アイテムレンダラーで表示するストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>アイテムレンダラーで表示するストリングです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>表示するデータアイテムです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      アイテムレンダラーで表示するストリングを返します。ストリングは、アイテムレンダラーの <codeph>labelText</codeph> プロパティに書き込まれます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      再使用のため、レンダラーを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>アイテムレンダラーです。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>データプロバイダー内のデータのインデックスです。
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>このアイテムレンダラーが表しているデータオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      再使用のため、レンダラーを更新します。このメソッドは最初に、古くなったプロパティをクリアし、新しいプロパティで値を更新することによって、再使用するアイテムレンダラーを準備します。
     
      <p>アイテムレンダラーの <codeph>data</codeph> プロパティは最後に設定されます。</p>    
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:FormItem"><apiName>FormItem</apiName><shortdesc>
  FormItem コンテナは、Spark の Form で次のものを定義します。単一のラベル。シーケンスラベル。1 つ以上の子のコントロールまたはコンテナ。フォームアイテムの説明またはフォームアイテムに入力するための指示が記載されたヘルプコンテンツ。フォームアイテムに入力が必要かどうかを示す必須インジケーター。フォームの子には、コントロールやその他のコンテナなどがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="errorIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  エラーインジケーターに使用するイメージソースを指定します。デフォルト値は「assets/ErrorIndicator.png」です。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="requiredIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  必須インジケーターに使用するイメージソースを指定します。デフォルト値は「assets/RequiredIndicator.png」です。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
       この FormItem の label を表示するビジュアルエレメントへの参照です。
     </description>
	<shortdesc>
       A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart><SkinPart name="sequenceLabelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      FormItem の sequenceLabel を表示するビジュアルエレメントへの参照です。
     </description>
	<shortdesc>
      A reference to the visual element that displays the FormItem's sequenceLabel.</shortdesc></SkinPart><SkinPart name="helpContentGroup" owner="spark.components:FormItem" required="false" var_type="spark.components:Group">
<description>
      FormItem の helpContentGroup が含まれる Group への参照です。
     </description>
	<shortdesc>
      A reference to the Group that contains the FormItem's helpContentGroup.</shortdesc></SkinPart><SkinPart name="errorTextDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      FormItem のエラーストリングを表示するビジュアルエレメントへの参照です。
     </description>
	<shortdesc>
      A reference to the visual element that display the FormItem's error strings.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormItem&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormItem
    <strong>Properties</strong>
    helpContent="null"
    label=""
    required="false"
    sequenceLabel=""
  
    <strong>Common Styles</strong>
    errorIndicatorSource="assets/ErrorIndicator.png"
    requiredIndicatorSource="assets/RequiredIndicator.png"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  FormItem コンテナは、Spark の Form で次のものを定義します。
 
  <ul>
    <li>単一のラベル。</li>
    <li>シーケンスラベル。</li>
    <li>1 つ以上の子のコントロールまたはコンテナ。</li>
    <li>フォームアイテムの説明またはフォームアイテムに入力するための指示が記載されたヘルプコンテンツ。</li>
    <li>フォームアイテムに入力が必要かどうかを示す必須インジケーター。</li>
  </ul>
 
  フォームの子には、コントロールやその他のコンテナなどがあります。 1 つの Form コンテナで複数の FormItem コンテナを保持できます。デフォルトでは、すべての FormItem 要素が水平方向のレイアウトに整列され、ラベルは左に、ヘルプコンテンツは右に配置されます。
 
  </apiDesc><example conref="FormItemExample.mxml"><swfblock conref="examples/FormItemExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormItemSkin"><linktext>spark.skins.spark.FormItemSkin</linktext></link></related-links><apiConstructor id="spark.components:FormItem:FormItem"><apiName>FormItem</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:FormItem:protected:updateErrorTextDisplay"><apiName>updateErrorTextDisplay</apiName><shortdesc>
      elementErrorStrings を String に変換し、表示の errorTextDisplay スキンパーツにその String を割り当てます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>elementErrorStrings</codeph> を String に変換し、表示の <codeph>errorTextDisplay</codeph> スキンパーツにその String を割り当てます。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:FormItem:elementErrorStrings:get"><apiName>elementErrorStrings</apiName><shortdesc>
      各 Vector アイテムには、content エレメントからのエラーストリングが格納されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc>
      各 Vector アイテムには、content エレメントからのエラーストリングが格納されています。無効な content エレメントがない場合は、ベクトルが空になります。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:helpContent:get"><apiName>helpContent</apiName><shortdesc> 
      FormItem のヘルプコンテンツ領域に含める一連のコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="helpContentChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      FormItem のヘルプコンテンツ領域に含める一連のコンポーネントです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:label:get"><apiName>label</apiName><shortdesc>
      FormItem のテキストラベルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      FormItem のテキストラベルです。 例えば、アドレスの入力に使用する FormItem には、「Address」というラベルがある可能性があります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:required:get"><apiName>required</apiName><shortdesc>
      true の場合は、FormItem スキンが required 状態になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="requiredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合は、FormItem スキンが <codeph>required</codeph> 状態になります。この状態の場合、デフォルトでは、FormItem の子にユーザー入力が必要なことを示すインジケーターが表示されます。<codeph>false</codeph> の場合、インジケーターは表示されません。
     
      <p>このプロパティは、スキンの状態のみを制御します。入力を検証する必要がある場合は、子に検証を割り当てる必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:sequenceLabel:get"><apiName>sequenceLabel</apiName><shortdesc>
      フォームのフォームアイテムの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sequenceLabelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      フォームのフォームアイテムの数です。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
  SkinnableContainer クラスは、ビジュアルコンテンツを格納するスキン可能コンテナの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  テキストシャドウのアルファです。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  テキストシャドウのカラーです。
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  コンポーネントの背景色です。
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントの背景のアルファレベルです。有効な値の範囲は 0.0 ～ 1.0 です。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="contentGroup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      コンテンツの子がプッシュされてレイアウトされる Group を定義する、オプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the Group where the content 
      children get pushed into and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableContainer
    <strong>Properties</strong>
    autoLayout="true"
    creationPolicy="auto"
    layout="BasicLayout"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors=""
    backgroundAlpha="1.0"
    backgroundColor="0xFFFFFF"
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="0xE8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
   
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableContainer クラスは、ビジュアルコンテンツを格納するスキン可能コンテナの基本クラスです。SkinnableContainer コンテナは、IVisualElement インターフェイスを実装する任意のコンポーネントを子として受け取ります。すべての Spark コンポーネントと Halo コンポーネントは、GraphicElement クラスと同じように IVisualElement インターフェイスを実装します。つまり、コンテナは、Rect や Ellipse などのグラフィッククラスを子として使用できます。
 
  <p>パフォーマンスを向上させると共にアプリケーションのサイズを最小限に抑えるため、Group コンテナを使用できます。Group コンテナにはスキンを適用できません。</p>
 
  <p>SkinnableContainer コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableContainerExample.mxml"><swfblock conref="examples/SkinnableContainerExample.swf"/></example><example conref="MyBorderSkin.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>Group</linktext></link><link href="spark.skins.spark.xml#SkinnableContainerSkin"><linktext>spark.skins.spark.SkinnableContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  ビジュアルエレメントがコンテンツホルダーから削除されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビジュアルエレメントがコンテンツホルダーから削除されたときに送出されます。<codeph>event.element</codeph> は、削除されるビジュアルエレメントです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  ビジュアルエレメントがコンテンツホルダーに追加されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビジュアルエレメントがコンテンツホルダーに追加されたときに送出されます。<codeph>event.element</codeph> は、追加されたビジュアルエレメントです。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  このコンポーネントのコンテンツが作成された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このコンポーネントのコンテンツが作成された後に送出されます。遅延インスタンス化の場合、コンポーネントの作成後長時間が経過してからコンポーネントのコンテンツが作成される可能性があります。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableContainer:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      creationPolicy プロパティが none ではない場合、コンテンツの子を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>creationPolicy</codeph> プロパティが <codeph>none</codeph> ではない場合、コンテンツの子を作成します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      このコンポーネントのコンテンツを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントのコンテンツを作成します。<codeph>creationPolicy</codeph> プロパティが <codeph>auto</codeph> または <codeph>all</codeph> である場合、この関数は Flex フレームワークによって自動的に呼び出されます。<codeph>creationPolicy</codeph> が <codeph>none</codeph> である場合、ユーザーがこのメソッドを呼び出してコンテンツを初期化します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      
      スキンパーツが追加されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツのインスタンスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      スキンパーツが追加されるときに呼び出されます。このメソッドは直接呼び出さないでください。 静的パーツの場合は、Flex によって、<codeph>attachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。動的パーツの場合は、Flex によって、<codeph>createDynamicPartInstance()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。 
     
      <p>パーツにビヘイビアーを追加するには、この関数をオーバーライドします。基本クラスから継承したスキンパーツのビヘイビアーをオーバーライドする場合は、<codeph>super.partAdded()</codeph> メソッドを呼び出さないようにします。それ以外の場合は、常に <codeph>super.partAdded()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      スキンパーツのインスタンスが削除されるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>パーツの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>パーツのインスタンスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      スキンパーツのインスタンスが削除されるときに呼び出されます。このメソッドは直接呼び出さないでください。 静的パーツの場合は、Flex によって、<codeph>detachSkin()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。動的パーツの場合は、Flex によって、<codeph>removeDynamicPartInstance()</codeph> メソッドが呼び出されるときに自動的に呼び出されます。 
     
      <p>パーツからビヘイビアーを削除するには、この関数をオーバーライドします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SkinnableContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      遅延コンテンツが作成されている場合は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      遅延コンテンツが作成されている場合は <codeph>true</codeph> です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContentFactory:set"><apiName>mxmlContentFactory</apiName><shortdesc>
      コンテンツプロパティの初期値を作成するファクトリオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IDeferredInstance"/></apiValueDef><apiDesc>
      <codeph>content</codeph> プロパティの初期値を作成するファクトリオブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc conref="spark.components.Group#mxmlContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc conref="spark.components.Group#mxmlContent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichText"><apiName>RichText</apiName><shortdesc>
  RichText は、1 行または複数行のリッチフォーマットテキストや埋め込みイメージを表示する低レベルの UIComponent です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style inherit="no" name="columnWidth" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  列幅です（ピクセル単位）。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.columnWidth を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  列の間に残す溝のスペースの量（ピクセル単位）です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.columnGap を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  テキストの列数です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.columnCount を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichText" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  垂直方向の整列または位置揃えです。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.verticalAlign を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  上部のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  右側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingRight を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  左側のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingLeft を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  下部のインセットです（ピクセル単位）。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paddingBottom を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの折り返しを制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
 
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichText" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichText" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RichText&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RichText
    <strong>Properties</strong>
    fontContext="<i>IFlexModuleFactory</i>"
    luminosityClip="false"
    luminosityInvert="false"
    maskType="MaskType.CLIP"
    textFlow="<i>TextFlow</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichText は、1 行または複数行のリッチフォーマットテキストや埋め込みイメージを表示する低レベルの UIComponent です。
 
  <p>パフォーマンス上の理由から、スクロール、選択、編集、クリック可能なハイパーリンク、URL からロードされる画像はサポートされません。これらの機能が必要な場合は、RichEditableText クラスの説明を参照してください。</p>
 
  <p>RichText では、Text Layout Framework（TLF）ライブラリが使用されます。このライブラリは、Flash Player 10 の Flash Text Engine（FTE）をベースとして作成されています。これらの機能を組み合わせることにより、国際化対応の高品質な文字体裁を使用したリッチテキストレイアウトが可能になります。</p>
 
  <p>Spark アーキテクチャには 3 つのテキストプリミティブ（Label、RichText および RichEditableText）が用意されています。Label は TLF を使用せず FTE のみを使用するので、最も高速で軽いですが、機能は限られており、リッチテキスト、スクロール、選択、編集はサポートされません。RichText には、複雑なレイアウト設定を含むリッチテキストを表示する機能が追加されていますが、インタラクティブ機能はサポートされません。RichEditableText は最も重いですが、TLF で実行できるほとんどの機能がサポートされます。ニーズに合わせて、最も軽量なテキストプリミティブを使用してください。</p>
 
  <p>RichText は MX の mx.controls.Text コントロールに似ています。Text コントロールでは、テキストの表示に TLF ではなく、古い TextField クラスが使用されます。</p>
 
  <p>RichText と Text の最も重要な違いは、次のとおりです。
  <ul>
    <li>RichText では、文字体裁、国際言語のサポート、およびテキストレイアウトの機能が Text より向上しています。</li>
    <li>RichText には、表示内容のオブジェクト指向モデルがありますが、Text にはありません。</li>
    <li>Text は選択可能ですが、RichText は選択をサポートしていません。</li>
  </ul></p>
 
  <p>RichText では、リッチテキストの TLF オブジェクト指向モデルが使用されます。このモデルでは、区分、段落、スパン、画像などのテキストレイアウト要素が ActionScript オブジェクトによって実行時に表現されます。これらのオブジェクトは、プログラムを通じてアクセスして操作できます。リッチテキストを表す TLF の中心的なオブジェクトは TextFlow です。RichText の表示内容を指定するには、RichText の <codeph>textFlow</codeph> プロパティを TextFlow インスタンスに設定します。このインスタンスを作成する方法については、<codeph>textFlow</codeph> プロパティの説明を参照してください。TextBase から継承した <codeph>text</codeph> プロパティを設定することもできますが、TextFlow でリッチテキストを使用する必要がない場合は、代わりに Label を使用することをお勧めします。</p>
 
  <p>次の例に示すように、コンパイル時に、TLF マークアップタグを RichText タグ内に配置できます。
  <pre>
  &lt;s:RichText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichText>
  </pre>
  この例では、MXML コンパイラーによって、<codeph>content</codeph> プロパティが設定され、指定した FlowElement から TextFlow が自動的に作成されます。</p>
 
  <p>デフォルトのテキストフォーマットは、<codeph>fontFamily</codeph> や <codeph>fontSize</codeph> などの CSS スタイルによって決定されます。TextFlow でフォーマット情報が指定されている場合は、CSS スタイルで指定されているデフォルトのフォーマットがオーバーライドされます。</p>
 
  <p>行の間隔は <codeph>lineHeight</codeph> スタイルで制御でき、段落の間隔は <codeph>paragraphSpaceBefore</codeph> スタイルと <codeph>paragraphSpaceAfter</codeph> スタイルで制御できます。テキストの整列や均等割り付けには、<codeph>textAlign</codeph> スタイルと <codeph>textAlignLast</codeph> スタイルを使用できます。コンポーネントの端からテキストまでのインセットを指定するには、<codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルを使用します。</p>
 
  <p>RichText の幅が指定されていない場合は、明示的な改行により各行の長さが決定され、最も長い行に合わせて Label の幅が決定されます。</p>
 
  <p>幅を指定すると、コンポーネントの右端でテキストが折り返され、表示領域にテキストが収まりきらない場合は、テキストが切り詰められます。<codeph>lineBreak</codeph> スタイルを <codeph>explicit</codeph> に設定した場合は、CR（<codeph>¥r</codeph>）、LF（<codeph>¥n</codeph>）または CR+LF（<codeph>¥r¥n</codeph>）を <codeph>text</codeph> で使用する場合や、<codeph>&lt;p></codeph> と <codeph>&lt;br/></codeph> を TLF マークアップで使用する場合と同様に、明示的に改行が指定されている位置でのみ行が折り返されます。この場合、コントロールの幅を超えるテキストは切り詰められます。</p>
 
  <p>RichText では、表示領域を超える量のテキストがある場合、テキストを自動的に切り詰めることができます。テキストを切り詰めるとは、余分なテキストを "..." などの切り詰めインジケーターに置き換えることです。継承プロパティ <codeph>maxDisplayedLines</codeph> および <codeph>isTruncated</codeph> の説明を参照してください。</p>
 
  <p>デフォルトでは、RichText には背景がありませんが、<codeph>backgroundColor</codeph> スタイルと <codeph>backgroundAlpha</codeph> スタイルを使用すると背景を描画できます。境界線はサポートされません。境界線や複雑な背景を描画する必要がある場合は、Rect などの別のグラフィックエレメントを RichText の背後で使用します。</p>
 
  <p>RichText では TLF が使用されるので、フランス語のように左から右（LTR）に読まれるテキスト、アラビア語のように右から左（RTL）に読まれるテキスト、またはフランス語のフレーズを含むアラビア語のように双方向から読まれるテキストを表示できます。主に右から左へのテキストを使用する場合は、<codeph>direction</codeph> スタイルを <codeph>rtl</codeph> に設定します。<codeph>textAlign</codeph> スタイルのデフォルト設定は <codeph>start</codeph> です。この設定では、<codeph>direction</codeph> が <codeph>ltr</codeph> の場合にテキストが左揃えになり、<codeph>direction</codeph> が <codeph>rtl</codeph> の場合に右揃えになります。反対に整列するには、<codeph>textAlign</codeph> を <codeph>end</codeph> に設定します。</p>
 
  <p>RichText では TLF の StringTextFlowFactory クラスと TextFlowTextLineFactory クラスを使用して 1 つまたは複数の TextLine オブジェクトが作成され、テキストが静的に表示されます。パフォーマンス上の理由から、TextLine には個々の字形の情報は格納されません。詳しくは、TextLineValidity クラスを参照してください。</p>
 
  <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
  
  </apiDesc><example conref="RichTextExample.mxml"><swfblock conref="examples/RichTextExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="flash.text.engine.TextLineValidity.xml"><linktext>flash.text.engine.TextLineValidity</linktext></link></related-links><apiConstructor id="spark.components:RichText:RichText"><apiName>RichText</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RichText:content:get"><apiName>content</apiName><shortdesc>
      このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時に、リッチテキストコンテンツを取得または設定するには、代わりに textFlow プロパティを使用してください。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      このプロパティは、コンパイル時に MXML で使用するために用意されています。実行時に、リッチテキストコンテンツを取得または設定するには、代わりに <codeph>textFlow</codeph> プロパティを使用してください。
     
      <p><codeph>content</codeph> プロパティは、次のような MXML を記述できるように、RichText のデフォルトプロパティになっています。
      <pre>
      &lt;s:RichText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichText>
      </pre>
      この場合は、コンテンツとして指定した String と SpanElement を使用して TextFlow が作成されます。</p>
     
      <p>このプロパティは Object として型指定されています。Object は、String、FlowElement、または String と FlowElement の配列に設定できます。上記の例では、2 つのエレメントで構成される配列をコンテンツと指定しています。最初のエレメントは「Hello」という String で、2 番目のエレメントは太字の「World」というテキストを含む SpanElement です。</p>
     
      <p>指定方法にかかわらず、コンテンツは TextFlow オブジェクトに変換されます。このプロパティの値を取得すると、変換後の TextFlow オブジェクトが取得されます。</p>
     
      <p>リッチテキストコンテンツは Object ではなく TextFlow として厳密に型指定されているので、実行時のリッチテキストコンテンツの取得と設定には <codeph>textFlow</codeph> プロパティを使用することをお勧めします。TextFlow は、Text Layout Framework 内のリッチテキストコンテンツの正準表現です。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      マスクされたコンテンツを輝度マスクがクリッピングするかどうかを制御するプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      マスクされたコンテンツを輝度マスクがクリッピングするかどうかを制御するプロパティです。このプロパティが有効になるのは、グラフィックエレメントに <codeph>MaskType.LUMINOSITY</codeph> というタイプのマスクが適用されている場合のみです。  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      輝度マスクによってマスクされているグラフィックエレメントの RGB カラー値の計算を制御するプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      輝度マスクによってマスクされているグラフィックエレメントの RGB カラー値の計算を制御するプロパティです。true の場合、ソースコンテンツのピクセルの RGB カラー値が、マスク内の対応する領域によって反転されて乗算されます。false の場合、ソースコンテンツのピクセルの RGB カラー値が直接使用されます。 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:maskType:get"><apiName>maskType</apiName><shortdesc>
      maskType は、コンポーネントにマスクを適用する方法を定義します。有効な値は、MaskType.CLIP、MaskType.ALPHA および MaskType.LUMINOSITY です。クリップマスク：クリップモードでマスクを適用すると、クリッピングマスクが 1 ビットに減らされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>maskType は、コンポーネントにマスクを適用する方法を定義します。</p> 
     
      <p>有効な値は、<codeph>MaskType.CLIP</codeph>、<codeph>MaskType.ALPHA</codeph> および <codeph>MaskType.LUMINOSITY</codeph> です。</p>  
     
      <p><b>クリップマスク</b></p>
     
      <p>クリップモードでマスクを適用すると、クリッピングマスクが 1 ビットに減らされます。つまり、マスクはソースコンテンツのピクセルの不透明度に影響しません。マスクの対応するピクセルのアルファ値がゼロ以外の場合この値は変更されず、マスクのピクセルのアルファ値がゼロの場合は完全に透明になります。</p>
     
      <p>クリップマスクを使用すると、実際のパスとシェイプベクトルおよびマスクで定義されている塗りを使用して、ソースコンテンツに対するエフェクトが決定されます。マスクで定義されている線とビットマップフィルターは無視されます。マスクの塗りつぶされた領域は塗りつぶされているものと見なされて、ソースコンテンツがレンダリングされます。塗りのタイプとパラメーターは無視されます。マスクの塗りのアルファ値に関係なく、マスクの単色塗り、グラデーション塗り、またはビットマップ塗りの設定に基づいて、ソースコンテンツがレンダリングされます。</p>
      
      <p>クリッピングマスクで使用した場合、BitmapGraphics はビットマップ塗りの矩形として扱われます。そのため、ソースビットマップのアルファチャンネルは、マスクの一部であっても無視されます。ビットマップは、等しい寸法で単色塗りの矩形をレンダリングする場合と同じ影響をマスクに与えます。</p>
     
      <p><b>アルファマスク</b></p>
     
      <p>アルファモードでは、ソースコンテンツの各ピクセルの不透明度に、マスクの対応する領域の不透明度が乗算されます。つまり、不透明度が 1 に設定されたソースコンテンツのピクセルが、不透明度 0.5 の領域でマスクされると、最終的な不透明度は 0.5 になります。不透明度が 0.8 のソースピクセルが不透明度 0.5 の領域でマスクされると、最終的な不透明度は 0.4 になります。</p>
     
      <p>概念的に言うと、アルファマスクは、変換後のマスクとソースコンテンツを異なる RGBA サーフェスに描画し、マスクコンテンツのアルファチャンネルとソースコンテンツのアルファチャンネルを乗算することと同じです。すべてのマスクコンテンツが固有のサーフェスに描画された後で、ソースコンテンツのサーフェスに合成されます。そのため、線、ビットマップフィルター、塗りの不透明度などの FXG 機能はすべて、最終的に合成されるコンテンツに影響を与えます。</p>
     
      <p>アルファモードの場合、ビットマップデータのアルファチャンネルは、通常どおりマスクのアルファチャンネルに合成され、最終的にレンダリングされるコンテンツに反映されます。これは、BitmapGraphics にも、ビットマップ塗りのシェイプやパスにも当てはまります。</p>
     
      <p><b>輝度マスキング</b></p>
     
      <p>"soft mask" と呼ばれることもある輝度マスクは、ソースコンテンツのピクセルの不透明度と RGB カラー値の両方がマスクの対応する領域の不透明度と RGB カラー値で乗算される点以外は、アルファマスクと非常によく似た働きをします。</p>
     
      <p>概念的に言うと、輝度マスクは、変換後のマスクとソースコンテンツを異なる RGBA サーフェスに描画し、マスクコンテンツのアルファチャンネルおよび RGB カラー値とソースコンテンツのアルファチャンネルおよび RGB カラー値を乗算することと同じです。すべてのマスクコンテンツが固有のサーフェスに描画された後で、ソースコンテンツのサーフェスに合成されます。そのため、線、ビットマップフィルター、塗りの不透明度などの FXG 機能はすべて、最終的に合成されるコンテンツに影響を与えます。</p>
     
      <p>輝度マスキングは Flash ネイティブではありませんが、Adobe Illustrator や Adobe Photoshop などの Adobe Creative Suite ツールで共通の機能です。Flash でレンダリングされるコンテンツの輝度マスクの視覚効果を実現するために、輝度マスクを指定するグラフィックエレメントでは、Adobe Creative Suite ツールでレンダリングされる輝度マスクの外観表示を模倣するシェーダーフィルターを実際にインスタンス化しています。</p>
     
      <p>輝度マスクによってマスクされているオブジェクトは、RGB カラー値とマスクのクリッピングを制御するプロパティを設定できます。luminosityInvert 属性および luminosityClip 属性を参照してください。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      このコンポーネントで表示されるリッチテキストを表す TextFlow です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      このコンポーネントで表示されるリッチテキストを表す TextFlow です。
     
      <p>TextFlow は、Text Layout Framework（TLF）で最も重要なクラスです。このクラスは、リッチテキストコンテンツを表す FlowElements のツリーのルートです。</p>
     
      <p>通常、TLF マークアップから TextFlow を作成するには、<codeph>TextFlowUtil.importFromString()</codeph> メソッドまたは <codeph>TextFlowUtil.importFromXML()</codeph> メソッドを使用します。あるいは、（HTML のサブセットをインポートできる）TLF の TextConverter クラスを使用するか、<codeph>addChild()</codeph> などのメソッドを TextFlow に対して使用して TextFlow を作成することもできます。</p>
     
      <p>このプロパティと <codeph>text</codeph> プロパティの設定は相互に影響します。</p>
     
      <p><codeph>textFlow</codeph> を設定して、<codeph>text</codeph> を取得すると、各段落のテキストは 1 つの LF（<codeph>¥n</codeph>）で区切られます。</p>
     
      <p><codeph>text</codeph> を <codeph>"Hello World"</codeph> などの String に設定して <codeph>textFlow</codeph> を取得すると、1 つの SpanElement を含む 1 つの ParagraphElement で構成される TextFlow が取得されます。</p>
     
      <p>テキストに CR（<codeph>¥r</codeph>）、LF（<codeph>¥n</codeph>）、または CR+LF（<codeph>¥r¥n</codeph>）という明示的な改行が含まれている場合は、それぞれに 1 つのスパンを含む複数の段落で構成された TextFlow がコンテンツになります。</p>
     
      <p>TextFlow オブジェクトを TLF マークアップに変えるには、<codeph>TextFlowUtil.export()</codeph> メソッドから返されるマークアップを使用します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
  SkinnableDataContainer クラスは、データアイテムの基本コンテナクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="focusThickness" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  フォーカス矩形のアウトラインの幅（ピクセル単位）を表します。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  コンポーネントにフォーカスがある場合の、フォーカス枠のカラーです。
 
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのフォーカス枠のアルファです。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataGroup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" required="false" var_type="spark.components:DataGroup">
<description>
      データアイテムがプッシュ、レンダリング、およびレイアウトされる、スキンクラス内の DataGroup を定義する、オプションのスキンパーツです。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the DataGroup in the skin class 
      where data items get pushed into, rendered, and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableDataContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableDataContainer
    <strong>Properties</strong>
    autoLayout="true"
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    layout="VerticalLayout"
    typicalItem="null"
  
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontal_stem"
    color="0"
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    focusAlpha="0.55"
    focusColor=""
    focusThickness="2"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textJustify="inter_word"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableDataContainer クラスは、データアイテムの基本コンテナクラスです。SkinnableDataContainer クラスは、データアイテムを表示用のビジュアルエレメントに変換します。このコンテナは可視エレメントを保持できますが、通常は、データアイテムを子として保持する目的でのみ使用されます。
 
  <p>SkinnableDataContainer クラスは、データアイテムまたは IVisualElement インターフェイスを実装して DisplayObject であるビジュアルエレメントを、子として受け取ります。データアイテムは、String オブジェクトや Number オブジェクトなどの単純なデータアイテムであることも、Object オブジェクトや XMLNode オブジェクトなどのより複雑なデータアイテムであることもあります。これらのコンテナはビジュアルエレメントを保持できますが、通常は、データアイテムを子として保持する目的でのみ使用されます。</p>
 
  <p>アイテムレンダラーは、コンテナ内のデータアイテムの視覚的な表現を定義します。アイテムレンダラーは、コンテナによって表示できる形式にデータアイテムを変換します。データアイテムを適切にレンダリングするには、アイテムレンダラーを SkinnableDataContainer に渡す必要があります。</p>
 
  <p>データアイテムのコンテナは必要でも、スキンは必要ない場合は、DataGroup（スキンにはできません）を使用してパフォーマンスとアプリケーションのサイズを向上させることをお勧めします。</p>
 
  <p>SkinnableDataContainer コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableDataContainerExample.mxml"><swfblock conref="examples/SkinnableDataContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.components.xml#DataGroup"><linktext>DataGroup</linktext></link><link href="spark.skins.spark.xml#SkinnableDataContainerSkin"><linktext>spark.skins.spark.SkinnableDataContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  レンダラーがコンテナから削除されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  レンダラーがコンテナから削除されたときに送出されます。<codeph>event.renderer</codeph> プロパティには、削除されたレンダラーが格納されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  レンダラーがコンテナに追加されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  レンダラーがコンテナに追加されたときに送出されます。<codeph>event.renderer</codeph> プロパティには、追加されたレンダラーが格納されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableDataContainer:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableDataContainer:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      指定されたデータアイテムを受け取り、アイテムレンダラーが表示するデータアイテムの String 表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>データアイテムの String 表現です。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>データアイテムです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたデータアイテムを受け取り、アイテムレンダラーが表示するデータアイテムの String 表現を返します。このメソッドは、データアイテムの <codeph>toString()</codeph> メソッドを使用して、データアイテムを String 表現に変換します。データアイテムが Null の場合は、空の文字列が返されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableDataContainer:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      使用または再使用するためにアイテムレンダラーを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>更新するレンダラーです。 
      
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>データプロバイダー内のデータアイテムのインデックスです。 
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>このアイテムレンダラーが表しているデータオブジェクトです。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用または再使用するためにアイテムレンダラーを更新します。アイテムレンダラーが最初に作成されるとき、または仮想化のためにリサイクルされるときに、この SkinnableDataContainer インスタンスは、アイテムレンダラーの <codeph>label</codeph> プロパティと <codeph>owner</codeph> プロパティを設定できます。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableDataContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnableDataContainer/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#SkinnableDataContainer/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc conref="spark.components.DataGroup#itemRendererFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRendererFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.DataGroup#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRenderer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>VerticalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.DataGroup#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.components.DataGroup#typicalItem">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Scroller"><apiName>Scroller</apiName><shortdesc>
  Scroller コンポーネントは、ビューポートと呼ばれる単一のスクロール可能なコンポーネント、水平スクロールバーおよび垂直スクロールバーを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="viewport"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  どのような条件で垂直スクロールバーを表示するかを指定します。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（「on」）- スクロールバーが常に表示されます。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（「off」）- スクロールバーは一切表示されません。ただし、プログラムで、その verticalScrollPosition プロパティを設定することによってビューポートをスクロールできます。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（「auto」）- ビューポートの contentHeight がその height よりも大きい場合に、スクロールバーが表示されます。
  </li>
  </ul>
 
  <p>
  スクロールポリシーは、Scroller コンポーネントの測定サイズに影響します。
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:Scroller" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveScrolling" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description>
  Scroller コンポーネントで使用されるスクロールバーの <codeph>liveDragging</codeph> スタイルのプロキシです。   
 
  <p>このスタイルが <codeph>true</codeph> に設定されている場合は、<codeph>liveDragging</codeph> スタイルが <codeph>true</codeph>（デフォルト）に設定されます。つまり、スクロールバーのサムをドラッグすると、ビューポートのスクロール位置が即座に更新されます。このスタイルが <codeph>false</codeph> に設定されている場合は、<codeph>liveDragging</codeph> スタイルが <codeph>false</codeph> に設定されます。つまり、スクロールバーのサムをドラッグしても、ビューポートのスクロール位置は、マウスボタンを放したときのみに更新されます。</p>
 
  <p>ビューポートの表示更新の負荷が非常に大きく、「liveDragging」のパフォーマンスが悪いときには、このスタイルを <codeph>false</codeph> に設定すると役立つ場合があります。</p> 
  
  <p>デフォルトではこのスタイルは <codeph>undefined</codeph> です。つまり、<codeph>liveDragging</codeph> のスタイルは変更されません。</p>
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  どのような条件で水平スクロールバーを表示するかを指定します。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（「on」）- スクロールバーが常に表示されます。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（「off」）- スクロールバーは一切表示されません。ただし、プログラムで、その horizontalScrollPosition プロパティを設定することによってビューポートをスクロールできます。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（「auto」）- ビューポートの contentWidth がその width よりも大きい場合に、スクロールバーが表示されます。
  </li>
  </ul>
 
  <p>
  スクロールポリシーは、Scroller コンポーネントの測定サイズに影響します。
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効であるがコンポーネントにフォーカスがないときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが無効であるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  コンポーネントが有効でありコンポーネントにフォーカスがあるときの、テキストのカラーです。
  
  <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:Scroller" playerVersion="Flash10.5" type="Object">
<description>
  位置揃えで使用する単語の間の間隔を指定します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.wordSpacing を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  テキストを TextFlow にインポートする際、空白を圧縮または保持します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  テキストの回転角度を決定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textRotation を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセットです。
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textIndent を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textIndent を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  段落に関連付けるタブストップを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.tabStops を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  段落の始端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  段落前に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  段落後に空ける余白の量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  段落の終端をインデントする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  これは、リスト内のアイテムの外観を制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStyleType を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  これは、リストアイテムマーカーの配置をリストアイテムに対して相対的に制御します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listStylePosition を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  リストの始端におけるパディング値が <codeph>auto</codeph> である場合に、始端に対して自動インデントを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.leadingModel を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  コンテナ内の最初の行のベースライン位置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  フロートを回り込むようにテキストを配置する方法を制御します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.clearFloats を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  垂直方向または並行方向の行配置を指定します。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.blockProgression を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Scroller/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Scroller/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Scroller/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Scroller/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="horizontalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.HScrollBar" var_type="mx.core:IFactory">
<description>
      水平スクロールバーコンポーネントを定義するスキンパーツです。 <codeph>horizontalScrollBar</codeph> スキンパーツは、このスキンパーツよりも優先されます。Scroller がこのパーツのインスタンスを作成する際には、<codeph>horizontalScrollBar</codeph> スキンパーツをそのインスタンスに設定します。 このプロパティは読み取り専用と見なされる必要があります。 スクローラーのスキンによってのみ設定されます。 <codeph/>
     </description>
	<shortdesc>
      A skin part that defines the horizontal scroll bar component.</shortdesc></SkinPart><SkinPart name="verticalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.VScrollBar" var_type="mx.core:IFactory">
<description>
      垂直スクロールバーを定義するスキンパーツです。 <codeph>verticalScrollBar</codeph> スキンパーツは、このスキンパーツよりも優先されます。Scroller がこのパーツのインスタンスを作成する際には、<codeph>verticalScrollBar</codeph> スキンパーツをそのインスタンスに設定します。このプロパティは読み取り専用と見なされる必要があります。 スクローラーのスキンによってのみ設定されます。 <codeph/>
     </description>
	<shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart><SkinPart name="horizontalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:HScrollBar">
<description>
      水平スクロールバーを定義するスキンパーツです。 このプロパティは読み取り専用と見なされる必要があります。 スクローラーのスキンによってのみ設定されます。 このプロパティは Bindable です。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the horizontal scroll bar.</shortdesc></SkinPart><SkinPart name="verticalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:VScrollBar">
<description>
      垂直スクロールバーを定義するスキンパーツです。 このプロパティは読み取り専用と見なされる必要があります。 スクローラーのスキンによってのみ設定されます。 このプロパティは Bindable です。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Scroller&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Scroller
   <strong>Properties</strong>
    measuredSizeIncludesScrollBars="true"
    minViewportInset="0"
    viewport="null"
  
    <strong>Styles</strong>
    alignmentBaseline="use_dominant_baseline"
    alternatingItemColors=""
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    horizontalScrollPolicy="auto"
    inactiveTextSelection=""
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Scroller コンポーネントは、ビューポートと呼ばれる単一のスクロール可能なコンポーネント、水平スクロールバーおよび垂直スクロールバーを表示します。ビューポートは、IViewport インターフェイスを実装する必要があります。ビューポートのスキンは Group クラスから派生している必要があります。
   <p>Spark の Group、DataGroup、および RichEditableText コンポーネントは、IViewport インターフェイスを実装し、Scroller コントロールの子として使用できます。次に例を示します。</p>
 
  <pre>
  &lt;s:Scroller width="100" height="100">
       &lt;s:Group> 
          &lt;mx:Image width="300" height="400" 
               source="@Embed(source='assets/logo.jpg')"/> 
       &lt;/s:Group>        
  &lt;/s:Scroller></pre>     
   <p>Image コントロールのサイズは、親の Group コンテナのサイズよりも大きく設定されます。デフォルトでは、親コンテナの境界線を超えて子が拡張されます。Scroller を使用すると、親コンテナの境界線を超える子の拡張は許可されず、親コンテナの境界線で子が切り詰められてスクロールバーが表示されます。</p>
   <p>一部の Spark コンテナでは IViewPort インターフェイスが実装されていません。したがって、それらのコンテナ（BorderContainer コンテナや SkinnableContainer コンテナなど）を、Scroller コンポーネントの直接の子にすることはできません。反対に、Scroller コンポーネントは、すべての Spark コンテナの子にすることができます。例えば、Spark の BorderContainer の子でスクロールバーを使用するには、子を Scroller コンポーネントに内包します。 </p>
   <p>BorderContainer 全体をスクロール可能にするには、コンテナを Group コンテナに内包します。次に、その Group コンテナを Scroller コンポーネントの子にします。IViewport インターフェイスを実装していないスキナブル Spark コンテナの場合は、カスタムスキンを作成して、Scroller コンポーネントを含むコンテナにそのスキンを使用できます。 </p>
 
  <p>IViewport インターフェイスは、IViewport インターフェイスを実装するコンポーネントのビューポートを定義します。ビューポートは、表示するコンテナの領域の矩形のサブセットであり全体は表示しません。スクロールバーは、ビューポートの <codeph>horizontalScrollPosition</codeph> プロパティと <codeph>verticalScrollPosition</codeph> プロパティを制御します。スクロールバーにより、ビューポートの <codeph>contentWidth</codeph> プロパティと <codeph>contentHeight</codeph> プロパティによって定義される領域を表示することが可能になります。</p>
   <p><codeph/><codeph/><codeph/></p>
   <p><codeph/><codeph/></p>
   <p>スクロールバーには、コンテナのビューポートの明示的な設定を組み合わせることができます。ビューポートの最初の位置はビューポート設定によって決定されますが、その後スクロールバーを使用して移動できます。次に例を示します。 </p>
  
  <pre>
  &lt;s:Scroller width="100" height="100">
      &lt;s:Group
          horizontalScrollPosition="50" verticalScrollPosition="50"> 
          &lt;mx:Image width="300" height="400" 
              source="@Embed(source='assets/logo.jpg')"/> 
      &lt;/s:Group>                 
  &lt;/s:Scroller></pre>
 
  <p>スクロールバーは、垂直スクロールバーと水平スクロールバーのポリシー（<codeph>auto</codeph>、<codeph>on</codeph>、または <codeph>off</codeph>）に従って表示されます。<codeph>auto</codeph> ポリシーでは、ビューポートのコンテンツがビューポート自体よりも大きい場合にスクロールバーが表示されてレイアウトに含められます。</p>
 
  <p>Scroller のスキンレイアウトは変更できません。スクロールポリシーを処理するプライベートレイアウト実装に無条件に設定されます。Scroller スキンは、置き換え用のスクロールバーのみを提供できます。ビューポートとそのスクロールバーのレイアウトをさらに細かく制御するには、Scroller を使用する代わりに、単純にそれらを <codeph>Group</codeph> に追加し、スクロールバーの <codeph>viewport</codeph> プロパティを使用してまとめてリンクします。</p>
   <p>Scroller コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ScrollerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ScrollerExample.mxml"><swfblock conref="examples/ScrollerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Scroller_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  mouseWheel イベントのためにスクロール位置が変わるときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>mouseWheel</codeph> イベントのためにスクロール位置が変わるときに送出されます。
  
  <p>表示される verticalScrollBar がある場合、デフォルトでは、<codeph>event.delta</codeph>「ステップ」分、垂直方向にビューポートがスクロールされます。 スクロール方向に応じて <codeph>UP</codeph> または <codeph>DOWN</codeph> を使用したビューポートの <codeph>getVerticalScrollPositionDelta</codeph> メソッドによって、ステップの高さが決まります。</p>
   <p>それ以外の場合で、表示される horizontalScrollBar がある場合、デフォルトでは、<codeph>event.delta</codeph>「ステップ」分、水平方向にビューポートがスクロールされます。 スクロール方向に応じて <codeph>LEFT</codeph> または <codeph>RIGHT</codeph> を使用したビューポートの <codeph>getHorizontalScrollPositionDelta</codeph> メソッドによって、ステップの幅が決まります。</p>
   <p>イベントに対して <codeph>preventDefault()</codeph> メソッドを呼び出すと、スクロール位置は変更されません。 それ以外の場合に、イベントの <codeph>delta</codeph> プロパティを変更すると、その値が「ステップ」数として使用されます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Scroller:Scroller"><apiName>Scroller</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Scroller:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:addElement"><apiName>addElement</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:ensureElementIsVisible"><apiName>ensureElementIsVisible</apiName><shortdesc>
      指定したエレメントが表示されるようにビューポートをスクロールします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Scroller によってラップされる、コンテナまたはネストされたコンテナの子エレメントです。  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定したエレメントが表示されるようにビューポートをスクロールします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      ビューポートが存在し、渡されたインデックスが 0 である場合は、そのビューポートを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックス位置が子リストに存在しない場合にスローされます。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定されたインデックス位置にあるエレメントです。
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>取得するエレメントのインデックスです。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビューポートが存在し、渡されたインデックスが 0 である場合は、そのビューポートを返します。それ以外の場合は、RangeError をスローします。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      渡されたエレメントがビューポートである場合は 0 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エレメントがこのオブジェクトの子ではない場合にスローされます。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>識別するエレメントのインデックス位置です。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>識別するエレメントです。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      渡されたエレメントがビューポートである場合は 0 を返します。それ以外の場合は、ArgumentError をスローします。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElement"><apiName>removeElement</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElements"><apiName>swapElements</apiName><shortdesc>
     
      この操作は、Scroller ではサポートされません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      この操作は、Scroller ではサポートされません。Scroller コントロールの子は 1 つのみです。これを操作するには、<codeph>viewport</codeph> プロパティを使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Scroller:measuredSizeIncludesScrollBars:get"><apiName>measuredSizeIncludesScrollBars</apiName><shortdesc>
      true の場合は、Scroller の測定サイズに、スクロールバーの表示に必要なスペースも含まれます。true でない場合は、ビューポートのみに基づいて Scroller の測定サイズが決定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合は、Scroller の測定サイズに、スクロールバーの表示に必要なスペースも含まれます。true でない場合は、ビューポートのみに基づいて Scroller の測定サイズが決定されます。
     
      <p>使用可能な幅や高さに合わせてコンテンツの「再フロー」が行われる TextArea などのコンポーネントでは、このプロパティを使用すると、測定サイズを安定化する場合があります。デフォルトでは、TextArea の測定サイズは <codeph>widthInChars</codeph>プロパティと <codeph>heightInChars</codeph> プロパティによって定義されます。多くのアプリケーションでは、TextArea のスキンの Scroller によってスクロールバーが表示されたときでも測定サイズが変化しないように設計することをお勧めします。</p>
     
      <p>通常の List アイテムなど、コンテンツの再フローが発生しないコンポーネントでは、コンポーネントのコンテンツがスクロールバーで隠れる可能性が少なくなるので、デフォルトの動作を使用することをお勧めします。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:minViewportInset:get"><apiName>minViewportInset</apiName><shortdesc>
      ビューポートと Scroller の端の間の最小スペースです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ビューポートと Scroller の端の間の最小スペースです。どのスクロールバーも表示されていない場合、ビューポートは 4 つの側面すべてで <codeph>minViewportInset</codeph> 分インセットされます。スクロールバーが表示されている場合、ビューポートは、<codeph>minViewportInset</codeph> またはスクロールバーのサイズのうち、どちらか大きい方の分インセットされます。ScrollBars は Scroller の端と同一面に配置されます。   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:numElements:get"><apiName>numElements</apiName><shortdesc>
      ビューポイントがある場合は 1、それ以外の場合は 0 を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      ビューポイントがある場合は 1、それ以外の場合は 0 を返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/>
           <p><b/><codeph/><codeph/></p>
           <p/>
           <p/>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/><codeph/>
           <p><b/><codeph/><codeph/></p>
           <p><codeph/><codeph/></p>
           <p><codeph/>このスクロール位置の変更はアニメーション化されません。</p>
           <p><codeph/><codeph/><codeph/><codeph/> </p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Scroller:viewport:get"><apiName>viewport</apiName><shortdesc>
      スクロールされるビューポートコンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      スクロールされるビューポートコンポーネントです。
     
      <p>
      ビューポートは、ビューポートとスクロールバーの両方をレイアウトする、Scroller コンポーネントのスキンに追加されます。<codeph>viewport</codeph> プロパティが設定されている場合、ビューポートの <codeph>clipAndEnableScrolling</codeph> プロパティが true に設定されてスクロールが有効になります。Scroller は、ビューポートの回転を直接サポートしていません。ビューポートのコンテンツは任意に変換できますが、ビューポート自体は変換できません。
     </p>
     
      このプロパティは Bindable です。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VGroup"><apiName>VGroup</apiName><shortdesc>
  VGroup コンテナは、VerticalLayout クラスを使用する Group コンテナのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:VGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:VGroup
    <strong>Properties</strong>
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedMaxRowCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount"-1"
    rowHeight="no default"
    variableRowHeight="true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  VGroup コンテナは、VerticalLayout クラスを使用する Group コンテナのインスタンスです。<codeph>layout</codeph> プロパティを変更しないでください。代わりに、VGroup クラスのプロパティを使用して、VerticalLayout クラスの特性を変更します。
 
  <p>VGroup コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VGroupExample.mxml"><swfblock conref="examples/VGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link></related-links><apiConstructor id="spark.components:VGroup:VGroup"><apiName>VGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。<codeph>layout</codeph> プロパティを VerticalLayout クラスのインスタンスに初期化します。
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:VGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.VerticalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  ComboBox コントロールは、DropDownListBase コントロールの子クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ComboBox">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  コントロールのプロンプト領域にあるテキストの上部のインセット（ピクセル単位）です。  
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  コントロールのプロンプト領域にあるテキストの右側のインセット（ピクセル単位）です。  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  コントロールのプロンプト領域にあるテキストの左側のインセット（ピクセル単位）です。  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  コントロールのプロンプト領域にあるテキストの下部のインセット（ピクセル単位）です。  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="textInput" owner="spark.components:ComboBox" playerVersion="Flash10" required="false" var_type="spark.components:TextInput">
<description>
      入力テキストまたは selectedItem のテキストを保持する、オプションのスキンパーツです。 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      Optional skin part that holds the input text or the selectedItem text.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ComboBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ComboBox
    <strong>Properties</strong>
    itemMatchingFunction="null"
    labelToItemFunction="null"
    maxChars="0"
    openOnInput="true"
    prompt="null"
    restrict=""
     <strong>Styles</strong>
    paddingBottom="3"
    paddingLeft="3"
    paddingRight="3"
    paddingTop="5"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComboBox コントロールは、DropDownListBase コントロールの子クラスです。DropDownListBase コントロールと同様に、ComboBox コントロールのドロップダウンリストからユーザーがアイテムを選択すると、コントロールのプロンプト領域にデータアイテムが表示されます。 
   <p>これらのコントロールの違いは、ComboBox コントロールのプロンプト領域が、DropDownList コントロールの Label コントロールではなく、TextInput コントロールを使用して実装されている点です。そのため、コントロールのプロンプト領域を編集して、定義済みのオプションではない値を入力できます。</p>
   <p>例えば、DropDownList コントロールでは、コントロールにある定義済みのアイテムリストからしかユーザーは選択できません。ComboBox コントロールでは、定義済みのアイテムからユーザーが選択することも、新しいアイテムをプロンプト領域に入力することもできます。アプリケーションは、新しいアイテムが入力されたことを認識でき、必要に応じてコントロールのアイテムリストにそのアイテムを追加することもできます。</p>
   <p>ComboBox コントロールでは、プロンプト領域にユーザーが文字を入力するのに合わせて、アイテムリストも検索されます。ユーザーが文字を入力すると、コントロールのドロップダウン領域が開きます。次にアイテムリストがスクロールして、最もよく一致するアイテムがハイライトされます。</p>
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
   <p><b>メモ：</b>Spark のリストベースのコントロール（Spark の ListBase クラスと、そのサブクラスである ButtonBar、ComboBox、DropDownList、List、TabBar）では、BasicLayout クラスを <codeph>layout</codeph> プロパティの値として使用することはできません。Spark のリストベースのコントロールでは、BasicLayout を使用しないでください。</p>
 
  <p>ComboBox コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 146 ピクセル、高さ 23 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 20 ピクセル、高さ 23 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ComboBoxSkin
               <p>spark.skins.spark.ComboBoxTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ComboBoxExample.mxml"><swfblock conref="examples/ComboBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link><link href="spark.skins.spark.xml#ComboBoxTextInputSkin"><linktext>spark.skins.spark.ComboBoxTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ComboBox:CUSTOM_SELECTED_ITEM"><apiName>CUSTOM_SELECTED_ITEM</apiName><shortdesc>
      ユーザーがプロンプト領域に値を入力して値がコミットされたときの selectedIndex プロパティの値を表す静的定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="int"/></apiValueDef><apiDesc>
      ユーザーがプロンプト領域に値を入力して値がコミットされたときの <codeph>selectedIndex</codeph> プロパティの値を表す静的定数です。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:itemMatchingFunction"><apiName>itemMatchingFunction</apiName><shortdesc>
      プロンプト領域にユーザーが文字を入力するのに合わせて、アイテムリストを検索するために使用するコールバック関数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      プロンプト領域にユーザーが文字を入力するのに合わせて、アイテムリストを検索するために使用するコールバック関数を指定します。ユーザーが文字を入力すると、コントロールのドロップダウン領域が開きます。次にアイテムリストがスクロールして、最もよく一致するアイテムがハイライトされます。
     
      <p>このプロパティで参照される関数は、入力文字列を取り、入力に一致するデータプロバイダー内のアイテムのインデックスを返します。アイテムは、データプロバイダーのインデックスの Vector.&lt;int> として返されます。 </p>
     
      <p>このコールバック関数には次のシグネチャが必要です。 </p>
     
      <pre>
        function myMatchingFunction(comboBox:ComboBox, inputText:String):Vector.&lt;int></pre>
     
      <p>このプロパティの値が null の場合、ComboBox はデフォルトのアルゴリズムを使用して一致を検索します。デフォルトでは、長さ n の入力文字列がアイテムの最初の n 文字（大文字と小文字は無視）と等しい場合は、そのアイテムに一致したと見なされます。例えば、「aRiz」は「Arizona」に一致しますが、「riz」は一致しません。</p>
           <p>検索を無効にするには、空の Vector.&lt;int> を返すコールバック関数を作成します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:openOnInput"><apiName>openOnInput</apiName><shortdesc>
      true の場合、ユーザーがプロンプト領域を編集すると、ドロップダウンリストが開きます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、ユーザーがプロンプト領域を編集すると、ドロップダウンリストが開きます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:enableIME:get"><apiName>enableIME</apiName><shortdesc conref="spark.components.TextInput#enableIME">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.TextInput#enableIME">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="spark.components.TextInput#imeMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.TextInput#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:prompt:get"><apiName>prompt</apiName><shortdesc>
      入力テキストが null の場合に表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      入力テキストが null の場合に表示されるテキストです。
     
      <p>コントロールが最初に作成されるとプロンプトテキストが表示されます。コントロールがフォーカスを得た場合、入力テキストが null 以外の場合、またはリスト内のアイテムが選択された場合に、プロンプトテキストは非表示になります。コントロールがフォーカスを失ったが、テキストが入力されていない（テキストフィールドの値が null または空の文字列である）場合にのみ、プロンプトテキストが再表示されます。</p>
      
      <p>プロンプトテキストのスタイルは CSS で変更できます。コントロールにプロンプトテキストがあり、無効になっていない場合は、<codeph>normalWithPrompt</codeph> 擬似セレクターによってスタイルが定義されます。コントロールが無効になっている場合は、<codeph>disabledWithPrompt</codeph> 擬似セレクターによって定義されたスタイルが使用されます。</p>
      
      <p>次の CSS の例では、TextInput コントロール内のプロンプトテキストのカラーが変更されています。ComboBox コントロールは、TextInput コントロールをプロンプトテキストおよび入力のサブコンポーネントとして使用するため、この CSS を使用すると、その ComboBox コントロールのプロンプトテキストが変更されます。
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|TextInput:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:labelToItemFunction:set"><apiName>labelToItemFunction</apiName><shortdesc>
      プロンプト領域に入力された新しい値を、データプロバイダーのデータアイテムと同じデータ型に変換するコールバック関数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      プロンプト領域に入力された新しい値を、データプロバイダーのデータアイテムと同じデータ型に変換するコールバック関数を指定します。このプロパティで参照される関数は、プロンプト領域のテキストがコミットされて、データプロバイダーで見つからない場合に呼び出されます。 
     
      <p>このコールバック関数には次のシグネチャが必要です。 </p>
     
      <pre>
        function myLabelToItem(value:String):Object</pre>
     
      <p>ここで、<codeph>value</codeph> はプロンプト領域に入力された String を表しています。この関数は、データプロバイダーのアイテムと同じ型である Object を返します。</p>
     
      <p>デフォルトのコールバック関数は <codeph>value</codeph> を返します。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:maxChars:set"><apiName>maxChars</apiName><shortdesc>
      ユーザーが入力するときに、プロンプト領域に入る最大の文字数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが入力するときに、プロンプト領域に入る最大の文字数です。0 という値は、制限がないことを示しています。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:restrict:set"><apiName>restrict</apiName><shortdesc>
      ユーザーがプロンプト領域に入力できる文字のセットを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーがプロンプト領域に入力できる文字のセットを指定します。デフォルトでは、空のストリングの値に対応する任意の文字を入力できます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Image"><apiName>Image</apiName><shortdesc>
  Spark の Image コントロールは、スキナブルコンポーネントで、カスタマイズ可能なローディング状態、クロームおよびエラー状態が用意されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style enumeration="default,high" inherit="no" name="smoothingQuality" owner="spark.components:Image" playerVersion="Flash9" type="String">
<description>
  BitmapImage の <codeph>smoothingQuality</codeph> プロパティに相当するスタイルです。 <codeph>BitmapSmoothingQuality.BEST</codeph> に設定されている場合、（信頼されているソースからのデータであれば、）より高品質な結果が得られるようイメージは再サンプルされます。 <codeph>BitmapSmoothingQuality.DEFAULT</codeph> に設定されている場合は、拡大縮小されたビットマップで埋めるデフォルトステージの品質が使用されます。
 
  </description>
<default>&lt;code>BitmapSmoothingQuality.DEFAULT&lt;/code>
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="enableLoadingState" owner="spark.components:Image" playerVersion="Flash9" type="Boolean">
<description>
  <codeph>true</codeph> のときは、<codeph>loading</codeph> のスキン状態が有効になります。
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  このコンポーネントの背景色です。
   
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  このコンポーネントの背景のアルファ値です。
 
  </description>
<default>NaN
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Image コントロールの disabled 状態です。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="invalid" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Image コントロールの invalid 状態です。イメージを正常に読み込めなかったことを意味しています。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:Image" playerVersion="Flash10.1">
<description>
  Image コントロールの ready 状態です。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Image コントロールの preloading 状態です。このコンポーネントの状態を有効にするには、<codeph>enableLoadingState</codeph> スタイルを <codeph>true</codeph> に設定する必要があります。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Image コントロールの uninitialized 状態です。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="imageDisplay" owner="spark.components:Image" playerVersion="Flash10" required="true" var_type="spark.primitives:BitmapImage">
<description>
      イメージコンテンツを定義する必須スキンパーツです。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines image content.</shortdesc></SkinPart><SkinPart name="progressIndicator" owner="spark.components:Image" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:Range">
<description>
      現在のロードの進捗状況を表示するオプションスキンパーツです。便宜上、progressIndicator の値は、完了割合のパーセント値でロード中に自動的に更新されます。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that displays the current loading progress.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Image&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Image 
    <strong>Properties</strong>
    clearOnLoad="true"
    contentLoader="null"
    contentLoaderGrouping="null"
    fillMode="scale"
    horizontalAlign="center"
    preliminaryHeight="NaN"
    preliminaryWidth="NaN"
    scaleMode="letterbox"
    smooth="false"
    source="null
    verticalAlign="middle"
 
    <strong>Styles</strong>
    backgroundAlpha="NaN"
    backgroundColor="NaN"
    enableLoadingState="false"
    smoothingQuality="default"
 
    <strong>Events</strong>
    complete="<i>No default</i>"
    httpStatus="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
    securityError="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark の Image コントロールは、スキナブルコンポーネントで、カスタマイズ可能なローディング状態、クロームおよびエラー状態が用意されています。実行時に、JPEG、PNG、および GIF のファイルを読み込むには、Image コントロールを使用します。 <codeph>@Embed(source='filename')</codeph> を使用して、これらのファイルをコンパイル時に埋め込むこともできます。
   <p><b>メモ：</b>Flex には、Flex アプリケーションをロードする SWFLoader コントロールもあります。 静止グラフィックファイルと SWF ファイルのロードには、通常 Image コントロールを使用し、Flex アプリケーションのロードには、SWFLoader コントロールを使用します。 Image コントロールは、カスタムアイテムレンダラーとアイテムエディターでも使用できるように設計されています。 </p>
 
  <p><b>メモ：</b>Flex には BitmapImage クラスも含まれています。このクラスは、スキンと FXG コンポーネントに画像を埋め込むために使用します。 </p>
   <p>イメージを埋め込んだ場合、埋め込まれたイメージは Flex の SWF ファイルの一部となるため、ロードは直接的に行われます。ただし、アプリケーションのサイズが増えるので、アプリケーションの初期化プロセスは遅くなります。また、埋め込みイメージは、イメージファイルに変更を加えるたびにアプリケーションを再コンパイルする必要があります。</p> 
  
  <p>リソースを埋め込まない場合は、実行時にリソースをロードします。SWF ファイルが実行されるローカルなファイルシステムからリソースをロードすることもできますし、ネットワーク上の HTTP 要求を通じて（通常の方法）、リモートリソースにアクセスすることもできます。イメージは、Flex アプリケーションとは独立しているため、イメージの名前さえ同じであれば、修正を加えたとしても再コンパイルの必要はありません。イメージの参照により、アプリケーションの初期ロード時間に余分なオーバーヘッドが生じることはありません。ただし、イメージを Flash Player または AIR にロードするときに遅延が生じる場合があります。 </p>
  
  <p>デフォルトスキンには、汎用のプログレスバーベースのプリローダーと無効なコンテンツを表す壊れたイメージアイコンが設定されたクロムレスのイメージスキンが用意されています。</p>
   <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
   <p>Image コントロールには、次のデフォルト特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>関連するソースコンテンツを表示するのに十分な幅</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 0 ピクセル、高さ 0 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.ImageSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ImageSkin"><linktext>spark.skins.spark.ImageSkin</linktext></link><link href="" invalidHref="mx.controls.SWFLoader.xml"><linktext>mx.controls.SWFLoader</linktext></link></related-links><adobeApiEvent id="spark.components:Image_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
  セキュリティエラーが発生したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  セキュリティエラーが発生したときに送出されます。
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.SecurityErrorEvent.xml"><linktext>flash.events.SecurityErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_mx.events.FlexEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  コンテンツのロードが完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.READY</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテンツのロードが完了したときに送出されます。<codeph>complete</codeph> イベントとは異なり、このイベントは、すべてのソースタイプに送出されます。  
  
  <p>Loader 経由でロードされるコンテンツの場合は、<codeph>ready</codeph> イベントと <codeph>complete</codeph> イベントの両方が送出されることに注意してください。</p>  embeds などの他のソースタイプの場合は、<codeph>ready</codeph> のみが送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  コンテンツのロード中に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテンツのロード中に送出されます。
   <p><b>メモ：</b><codeph>progress</codeph> イベントが送出されることは保証されていません。 <codeph>complete</codeph> イベントを、<codeph>progress</codeph> イベントが 1 つも送出されないまま受け取る場合もあります。 これは、ローカルファイルをロードする場合によく発生します。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  入出力エラーが発生すると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  入出力エラーが発生すると送出されます。
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.IOErrorEvent.xml"><linktext>flash.events.IOErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
  ネットワーク要求が HTTP 上で行われ、Flash Player または AIR が HTTP 状況コードを検出できる場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ネットワーク要求が HTTP 上で行われ、Flash Player または AIR が HTTP 状況コードを検出できる場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  コンテンツのロードが完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテンツのロードが完了したときに送出されます。このイベントは url および ByteArray に基づくソース（これらのソースには Loader が必要です）に対してのみ送出されます。
 
  <p>Loader によってロードされるコンテンツの場合は、<codeph>ready</codeph> イベントと <codeph>complete</codeph> イベントの両方が送出されることに注意してください。</p>  embeds などの他のソースタイプの場合は、<codeph>ready</codeph> のみが送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Image:Image"><apiName>Image</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Image:bitmapData:get"><apiName>bitmapData</apiName><shortdesc conref="spark.primitives.BitmapImage#bitmapData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:BitmapData"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bitmapData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:clearOnLoad:get"><apiName>clearOnLoad</apiName><shortdesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoaderGrouping:get"><apiName>contentLoaderGrouping</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoader:get"><apiName>contentLoader</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoader">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IContentLoader</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoader">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:fillMode:get"><apiName>fillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.CENTER&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryHeight:get"><apiName>preliminaryHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryWidth:get"><apiName>preliminaryWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapScaleMode.LETTERBOX&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:sourceHeight:get"><apiName>sourceHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:sourceWidth:get"><apiName>sourceWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:trustedSource:get"><apiName>trustedSource</apiName><shortdesc conref="spark.primitives.BitmapImage#trustedSource">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#trustedSource">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.MIDDLE&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:smooth:set"><apiName>smooth</apiName><shortdesc conref="spark.primitives.BitmapImage#smooth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#smooth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:source:set"><apiName>source</apiName><shortdesc conref="spark.primitives.BitmapImage#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#source">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextSelectionHighlighting"><apiName>TextSelectionHighlighting</apiName><shortdesc>
  このクラスでは、RichEditableText コントロールの selectionHighlighting プロパティに許可される値を指定して、RichEditableText をサブコンポーネント（Spark TextInput および Spark TextArea）として使用するように制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  このクラスでは、RichEditableText コントロールの <codeph>selectionHighlighting</codeph> プロパティに許可される値を指定して、RichEditableText をサブコンポーネント（Spark TextInput および Spark TextArea）として使用するように制御します。
  
  </apiDesc><example conref="TraceSelectionRanges"><swfblock conref="TraceSelectionRanges"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiValue id="spark.components:TextSelectionHighlighting:ALWAYS"><apiName>ALWAYS</apiName><shortdesc>
      コンポーネントにキーボードフォーカスがなくても、コンポーネントのウィンドウがアクティブウィンドウでなくても、テキストの選択範囲が常に表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントにキーボードフォーカスがなくても、コンポーネントのウィンドウがアクティブウィンドウでなくても、テキストの選択範囲が常に表示されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_ACTIVE"><apiName>WHEN_ACTIVE</apiName><shortdesc>
      コンポーネントのウィンドウがアクティブなときには、コンポーネントにキーボードフォーカスがなくても常にテキストの選択範囲が表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenActive</apiData><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントのウィンドウがアクティブなときには、コンポーネントにキーボードフォーカスがなくても常にテキストの選択範囲が表示されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_FOCUSED"><apiName>WHEN_FOCUSED</apiName><shortdesc>
      コンポーネントにキーボードフォーカスがあるときにのみ、テキストの選択範囲が表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenFocused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントにキーボードフォーカスがあるときにのみ、テキストの選択範囲が表示されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpPosition"><apiName>PopUpPosition</apiName><shortdesc>
  PopUpAnchor.popUpPosition プロパティの列挙型です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph>PopUpAnchor.popUpPosition</codeph> プロパティの列挙型です。この型は、PopUpAnchor で固定される <codeph>popUp</codeph> コントロールの位置を定義します。この位置は、PopUpAnchor に対して相対的に決定されます。  
    
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:PopUpPosition:ABOVE"><apiName>ABOVE</apiName><shortdesc>
      ターゲットの上に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>above</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの上に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:BELOW"><apiName>BELOW</apiName><shortdesc>
      ターゲットの下に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>below</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの下に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:CENTER"><apiName>CENTER</apiName><shortdesc>
      ターゲットの中心に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの中心に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:LEFT"><apiName>LEFT</apiName><shortdesc>
      ターゲットの左側に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの左側に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      ターゲットの右側に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの右側に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
      ターゲットの左上隅に位置設定します。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ターゲットの左上隅に位置設定します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataGroup"><apiName>DataGroup</apiName><shortdesc>
  DataGroup クラスは、データアイテムの基本コンテナクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:DataGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGroup
    <strong>Properties</strong>
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    typicalItem="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataGroup クラスは、データアイテムの基本コンテナクラスです。DataGroup クラスは、データアイテムを表示用のビジュアルエレメントに変換します。このコンテナは可視エレメントを保持できますが、通常は、データアイテムを子として保持する目的でのみ使用されます。
   <p>DataGroup クラスは、データアイテムまたは IVisualElement インターフェイスを実装して DisplayObjects であるビジュアルエレメントを、子として受け取ります。データアイテムは、String オブジェクトや Number オブジェクトなどの単純なデータアイテムであることも、Object オブジェクトや XMLNode オブジェクトなどのより複雑なデータアイテムであることもあります。これらのコンテナはビジュアルエレメントを保持できますが、通常は、データアイテムを子として保持する目的でのみ使用されます。</p>
   <p>アイテムレンダラーは、コンテナ内のデータアイテムの視覚的な表現を定義します。アイテムレンダラーは、コンテナによって表示できる形式にデータアイテムを変換します。データアイテムを適切にレンダリングするには、アイテムレンダラーを DataGroup コンテナに渡す必要があります。</p>
   <p>パフォーマンスを向上させると共にアプリケーションのサイズを最小限に抑えるため、DataGroup コンテナにはスキンを適用できません。スキンを適用するには、代わりに SkinnableDataContainer を使用します。 </p>
  
  <p>DataGroup コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DataGroupExample.mxml"><swfblock conref="examples/DataGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer"><linktext>spark.skins.spark.DefaultItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultComplexItemRenderer"><linktext>spark.skins.spark.DefaultComplexItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  レンダラーがこの dataGroup から削除されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  レンダラーがこの dataGroup から削除されたときに送出されます。<codeph>event.renderer</codeph> は、削除されたレンダラーです。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  レンダラーがこの dataGroup に追加されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  レンダラーがこの dataGroup に追加されたときに送出されます。<codeph>event.renderer</codeph> は、追加されたレンダラーです。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGroup:DataGroup"><apiName>DataGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGroup:getItemIndicesInView"><apiName>getItemIndicesInView</apiName><shortdesc>
      この DataGroup 内に表示されるアイテムレンダラーのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示されるアイテムレンダラーのインデックスです。
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      この DataGroup 内に表示されるアイテムレンダラーのインデックスを返します。
     
      <p><codeph>clipAndEnableScrolling</codeph> が <codeph>true</codeph> の場合は、この DataGroup の <codeph>scrollRect</codeph> と重なる <codeph>visible</codeph> = <codeph>true</codeph> の ItemRenderer のインデックスを返します。 つまり、この DataGroup に関連して、少なくとも一部が表示されている ItemRender が対象になります。<codeph>clipAndEnableScrolling</codeph> が <codeph>false</codeph> の場合は、0 から <codeph>dataProvider.length</codeph> - 1 までの整数のリストを返します。この DataGroup のオーナーが Scroller である場合、<codeph>clipAndEnableScrolling</codeph> は <codeph>true</codeph> に設定されています。</p>
     
      <p>返される各インデックスに対応するアイテムレンダラーは、レイアウトが仮想である場合も、<codeph>getElementAt()</codeph> メソッドを使用して取得できます。</p>
     
      <p>返される Vector でのアイテムの順序は保証されません。</p>
     
      <p>VerticalLayout および HorizontalLayout クラスには、このメソッドと同じ情報を含むバインド可能な <codeph>firstIndexInView</codeph> および <codeph>lastIndexInView</codeph> プロパティがあります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="11"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      <codeph/>  
     
      <p>このメソッドは、<codeph>typicalItem</codeph> が直接変更された場合に自動的に呼び出されます。つまり、このプロパティが現在の値と「==」でない新しい値に設定された場合です。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:itemToLabel"><apiName>itemToLabel</apiName><shortdesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      データアイテムを受け取り、アイテムレンダラーが表示するデータアイテムの toString() 表現を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>アイテムレンダラーで表示するストリングです。
      
      </apiDesc></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>表示するデータアイテムです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      <p>データアイテムを受け取り、アイテムレンダラーが表示するデータアイテムの <codeph>toString()</codeph> 表現を返します。null データアイテムは空のストリングを返します。 </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      
      再使用のため、レンダラーを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>アイテムレンダラーです。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>データプロバイダー内のデータのインデックスです。
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>このアイテムレンダラーが表しているデータオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      再使用のため、レンダラーを更新します。このメソッドは最初に、古くなったプロパティをクリアし、新しいプロパティで値を更新することによって、再使用するアイテムレンダラーを準備します。
     
      <p>アイテムレンダラーの <codeph>data</codeph> プロパティは最後に設定されます。</p>    
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGroup:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      この DataGroup のデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      この DataGroup のデータプロバイダーです。IList である必要があります。
     
      <p>ArrayCollection、ArrayList、XMLListCollection など、Flex フレームワークには複数の IList の実装が含まれています。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGroup/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#DataGroup/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGroup:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc>
      特定のアイテムでアイテムレンダラーの IFactory を返す関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      特定のアイテムでアイテムレンダラーの IFactory を返す関数です。次のサンプル関数に類似したアイテムレンダラー関数を定義する必要があります。
      
      <pre>
        function myItemRendererFunction(item:Object):IFactory</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      データアイテムで使用するアイテムレンダラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      データアイテムで使用するアイテムレンダラーです。クラスは、IDataRenderer インターフェイスを実装する必要があります。定義されている場合、<codeph>itemRendererFunction</codeph> プロパティはこのプロパティよりも優先されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      行または列の固定サイズが必要であるものの、特定の rowHeight または columnWidth の値が設定されていない場合、レイアウトは typicalItem の推奨サイズを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      行または列の固定サイズが必要であるものの、特定の <codeph>rowHeight</codeph> または <codeph>columnWidth</codeph> の値が設定されていない場合、レイアウトは <codeph>typicalItem</codeph> の推奨サイズを使用します。同様に、仮想レイアウトは、このアイテムを使用して、ビュー内にスクロールされていないレイアウトエレメントのサイズを定義します。
           <p>コンテナは、一般的なデータアイテムと、関連付けられたアイテムレンダラーを使用して、コンテナの子のデフォルトサイズを決定します。一般的なアイテムを定義することによって、コンテナは、それぞれの子を画面上に描画するときにそれらのサイズを決定する必要がなくなります。</p>
           <p>このプロパティを設定すると、レイアウトの <codeph>typicalLayoutElement</codeph> プロパティが設定されます。</p>
     
      <p>制限：<codeph>typicalItem</codeph> が IVisualItem である場合、さらにデータプロバイダーのメンバーではない必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HSlider"><apiName>HSlider</apiName><shortdesc>
  HSlider（水平スライダー）コントロールを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:HSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  HSlider（水平スライダー）コントロールを使用すると、スライダートラックの両端の間でスライダーサムを移動することで値を選択できます。 HSlider コントロールの方向は水平です。スライダートラックは左右に広がります。スライダーの現在の値は、スライダーの両終点の間におけるサムの相対位置によって決定されます。スライダーの両終点は、スライダーの最小値と最大値に対応します。
 
  <p>スライダーは、最小値から最大値までの範囲を無段階に移動できるか、または最小値から最大値までの範囲内で段階的にのみ移動できます。 スライダーは、現在の値を表示するデータヒントを含むことができます。</p>
 
  <p>HSlider コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 100 ピクセル、高さ 11 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 100 ピクセル、高さ 100 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.HSliderSkin
              <p>spark.skins.spark.HSliderThumbSkin</p>
              <p>spark.skins.spark.HSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HSliderExample.mxml"><swfblock conref="examples/HSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HSliderSkin"><linktext>spark.skins.spark.HSliderSkin</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DataGrid"><apiName>DataGrid</apiName><shortdesc>
  DataGrid は、スクロール可能なグリッドの上に列見出しの行を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DataGrid">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  どのような条件で垂直スクロールバーを表示するかを指定します。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（「on」）- スクロールバーが常に表示されます。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（「off」）- スクロールバーは一切表示されません。 ただし、プログラムで、その <codeph>verticalScrollPosition</codeph> プロパティを設定することによってビューポートをスクロールできます。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（「auto」）- ビューポートの <codeph>contentHeight</codeph> がその height よりも大きい場合に、スクロールバーが表示されます。
  </li>
  </ul>
 
  <p>
  スクロールポリシーは、スクローラースキンパーツの測定サイズに影響します。 このスタイルは、スクローラースキンパーツの <codeph>verticalScrollPolicy</codeph> スタイルへの参照です。継承スタイルではないので、アイテムレンダラーなどには影響しません。 </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  水平スクロールバーが表示される条件を示します。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（「on」）- スクロールバーが常に表示されます。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（「off」）- スクロールバーは一切表示されません。 ただし、プログラムで、その <codeph>horizontalScrollPosition</codeph> プロパティを設定することによってビューポートをスクロールできます。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（「auto」）- ビューポートの <codeph>contentWidth</codeph> がその width よりも大きい場合に、スクロールバーが表示されます。
  </li>
  </ul>
 
  <p>
  スクロールポリシーは、スクローラースキンパーツの測定サイズに影響します。 このスタイルは、スクローラースキンパーツの <codeph>horizontalScrollPolicy</codeph> スタイルへの参照です。継承スタイルではないので、アイテムレンダラーなどには影響しません。 </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="defaultDataGridItemEditor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  列によってアイテムエディターが指定されていない場合に、アイテムエディターとして使用するクラスです。このスタイルプロパティでは、DataGrid コントロールのグループに対してアイテムエディターを設定できるので、個々に設定する必要はありません。<codeph>DataGridColumn.itemEditor</codeph> プロパティが、この値より優先されます。
  
  </description>
<default>null
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される文字の大文字小文字区別のタイプです。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.typographicCase を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  各文字の右に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingRight を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  各文字の左に適用されるトラッキング（手動カーニング）の量です。   
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.trackingLeft を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  テキストの均等配置オプションを指定します。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textJustify を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 
   <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textDecoration を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textDecoration を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  テキストのアルファ（透明）値です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlpha を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  均等配置テキストの、コンテナを基準とした段落内の最後の行の行揃えです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlignLast を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  コンテナ内のテキストの整列。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.textAlign を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの textAlign を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの textAlign を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  このテキストに使用されるレンダリングモードで、埋め込みフォントのみに適用されます。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.renderingMode を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子を使用します。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
  
  <p>デフォルト値は undefined です。このプロパティは上位要素から値を継承します。それでも未定義の場合は、グローバルな <codeph>locale</codeph> スタイルから継承します。 アプリケーションの初期化時に、グローバルな <codeph>locale</codeph> スタイルが未定義の場合は、デフォルト値が「en」に設定されます。</p>
 
  <p>Spark の formatters クラスおよび globalization クラスを使用する際には、ルートアプリケーションのこのスタイルを <codeph>LocaleID.DEFAULT</codeph> 定数の値に設定できます。 そうすれば、それらのクラスは、クライアントオペレーティングシステムの国際環境設定を使用します。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:DataGrid" playerVersion="Flash10" type="Boolean">
<description> 
  true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。  
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineThrough を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  テキストの行送りを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.lineHeight を参照してください.</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b><codeph>leading</codeph> を参照してください。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#DataGrid/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各文字間に表示される追加のピクセル数です。
 
  <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>trackingLeft</codeph> および <codeph>trackingRight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField.letterSpacing を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#DataGrid/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#DataGrid/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  追加の行間を表します。
   <p><b>Spark テーマの場合、これはサポートされていません。</b><codeph>lineHeight</codeph> を参照してください。</p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#DataGrid/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p>Spark コンポーネントではカーニングがデフォルトで有効になりますが、MX コンポーネントではデフォルトで無効になります。 Spark コンポーネントでは <codeph>default</codeph> が <codeph>auto</codeph> と解釈されますが、MX コンポーネントでは <codeph>default</codeph> が <codeph>false</codeph> と解釈されます。</p>
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.kerning を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  段落の均等配置に使用するスタイルです。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationStyle を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  段落のテキストの均等配置に使用するルールです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.justificationRule を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontWeight を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontWeight を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontWeight を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontStyle を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontStyle を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontStyle を参照してください。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontSize を参照してください</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontSize を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontSize を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>12</codeph> です。Mobile テーマのデフォルト値は <codeph>24</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  使用するフォント参照です。 
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontLookup を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  使用するフォント名またはフォント名のカンマ区切りリストです。 
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.fontFamily を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの fontFamily を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの fontFamily を参照してください。</b></p>
 
  <p>Spark テーマのデフォルト値は <codeph>Arial</codeph> です。Mobile テーマのデフォルト値は <codeph>_sans</codeph> です。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  テキストのデフォルトの双方向埋め込みレベルを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.direction を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の幅のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitWidth を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される数字の大文字小文字区別のタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.digitCase を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:DataGrid" playerVersion="Flash10" type="uint">
<description>
  テキストの色です。
 
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.color を参照してください。</b></p>
   <p><b>Mobile テーマで StyleableTextField を使用する場合は、spark.components.supportClasses.StyleableTextField のスタイルの color を参照してください。StyleableStageText を使用する場合は、spark.components.supportClasses.StyleableStageText のスタイルの color を参照してください。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  このテキストに使用される CFF ヒンティングのタイプです。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.cffHinting を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  ベースラインをシフトする量です。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.baselineShift を参照してください。</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  行の基準を揃えるベースラインを指定します。
  
  <p><b>Spark テーマの場合、flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline を参照してください</b></p>
   <p><b>Mobile テーマの場合、これはサポートされていません。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="stretchCursor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  列をサイズ変更できることを示すカーソルのスキンとして使用するクラスです。デフォルト値は、Assets.swf ファイルの <codeph>cursorStretch</codeph> シンボルです。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。指定できる値は 0.0 から 1.0 です。 
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="caretColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  グリッドをナビゲートする際のキャレットインジケーターの色です。
   </description>
<default>0x0167FF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  このコンポーネントの境界線の表示を制御します。
   </description>
<default>true
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  このコンポーネントの境界線の色です。
   </description>
<default>#696969
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントの境界線のアルファ値です。指定できる値は 0.0 から 1.0 です。 
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="alternatingRowColors" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Array">
<description>
  DataGrid の <codeph>rowBackground</codeph> スキンパーツを初期化するために使用されます。 <codeph>alternatingRowColors</codeph> スタイルが指定されている場合は、<codeph>alternatingRowColorsBackground</codeph> スキンパーツを <codeph>rowBackground</codeph> スキンパーツの値として使用します。 グリッド行に交互に表示される色は、このスタイルの配列値の連続するエントリによって定義されます。
   <p>このスタイルのレンダリング方法を変更する場合は、DataGridSkin クラスの <codeph>alternatingRowColorsBackground</codeph> スキンパーツを置換します。 各行の背景を指定する場合は、<codeph>rowBackground</codeph> スキンパーツを直接初期化します。</p>
 
  </description>
<default>undefined
   
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="alternatingRowColorsBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      <codeph>alternatingRowColors</codeph> スタイルをレンダリングするために使用される IVisualElement クラスです。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the alternatingRowColors style.</shortdesc></SkinPart><SkinPart name="caretIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      グリッドのキャレットインジケーターをレンダリングするために使用される IVisualElement クラスです。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the grid's caret indicator.</shortdesc></SkinPart><SkinPart name="columnHeaderGroup" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:GridColumnHeaderGroup">
<description>
      列ヘッダーを表示する GridColumnHeaderGroup オブジェクトへの参照です。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the GridColumnHeaderGroup object that displays the column headers.</shortdesc></SkinPart><SkinPart name="columnSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      列の間の垂直セパレーターをレンダリングするために使用される IVisualElement クラスです。 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the vertical separator between columns.</shortdesc></SkinPart><SkinPart name="editorIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      編集されているアイテムレンダラーの背景をレンダリングするために使用される IVisualElement クラスです。 アイテムレンダラーは、データグリッドと列の両方が編集可能であり、列の <codeph>rendererIsEditable</codeph> が <codeph>true</codeph> に設定されている場合にのみ編集できます。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render a background behind
      item renderers that are being edited.</shortdesc></SkinPart><SkinPart name="grid" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Grid">
<description>
      行と列を表示する Grid コントロールへの参照です。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Grid control that displays row and columns.</shortdesc></SkinPart><SkinPart name="hoverIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      ホバーのフィードバックを提供するために使用される IVisualElement クラスです。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to provide hover feedback.</shortdesc></SkinPart><SkinPart name="rowBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      各行の背景をレンダリングするために使用される IVisualElement クラスです。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the background of each row.</shortdesc></SkinPart><SkinPart name="rowSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      ヘッダー行の間の水平セパレーターをレンダリングするために使用される IVisualElement クラスです。 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the horizontal separator between header rows.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      DataGrid コントロールにスクロールバーを追加する、スキンクラスの Scroller コントロールへの参照です。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Scroller control in the skin class 
      that adds scroll bars to the DataGrid control.</shortdesc></SkinPart><SkinPart name="selectionIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      選択された行またはセルをレンダリングするために使用される IVisualElement クラスです。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render selected rows or cells.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataGrid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGrid 
    <strong>Properties</strong>
    columns="null"
    dataProvider="null"  
    dataTipField="null"  
    dataTipFunction="null"
    editable="false"
    editorColumnIndex="-1"
    editorRowIndex="-1"
    imeMode="null"
    itemEditor="null"
    itemRenderer="<i>DefaultGridItemRenderer</i>" 
    preserveSelection="true"
    requestedColumnCount="-1"
    requestedMaxRowCount="-1"
    requestedMinColumnCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount="-1"
    requireSelection="false"
    resizeableColumns="true"
    rowHeight="<i>Calculated default</i>"
    selectedCell="null"
    selectedCells="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedIndex="null"
    selectedIndices="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedItem="null"
    selectedItems="<i>empty Vector.&lt;Object&gt</i>"
    selectionMode="singleRow"
    showDataTips="false"
    sortableColumns="true"
    typicalItem="null"
    variableRowHeight="false" 
 
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontalStem"
    color="0"
    defaultGridItemEditor="null"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="cff"
    stretchCursor="<i>cursorStretch symbol from Assets.swf</i>"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    verticalScrollPolicy="auto"
     <strong>Styles for the Spark Theme</strong>
    alternatingRowColors="undefined"
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    caretColor="0x0167FF"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
 
    <strong>Styles for the Mobile Theme</strong>
    leading="0"
    letterSpacing="0"
    selectionColor="0xE0E0E0"
    symbolColor="0x000000"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridItemEditorSessionCancel="<i>No default</i>"
    gridItemEditorSessionSave="<i>No default</i>"
    gridItemEditorSessionStart="<i>No default</i>"
    gridItemEditorSessionStarting="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    selectionChange="<i>No default</i>"
    selectionChanging="<i>No default</i>"
    sortChange="<i>No default</i>"
    sortChanging="<i>No default</i>" 
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataGrid は、スクロール可能なグリッドの上に列見出しの行を表示します。 グリッドは、行と列に配置された個々のセルのコレクションとして配置されます。DataGrid コントロールは、多数の行と列をスムーズにスクロールできるように設計されています。
   <p>Spark DataGrid コントロールは、Spark Grid コントロールの周りのスキナブルラッパーとして実装されます。 Grid コントロールは、データグリッドの列および DataGrid コントロール自身の機能の多くを定義します。</p>
   <p>DataGrid スキンは、グリッド、列ヘッダーおよびスクローラーをレイアウトする役割があります。 このスキンは、インジケーター、セパレーターおよび背景として使用されるビジュアルエレメントをレンダリングするために使用されるグラフィックエレメントも設定します。 また、DataGrid スキンは、各セルのコンテンツを表示するために使用されるデフォルトアイテムレンダラーも定義します。サポートされているスタイルのリストについては、レンダラークラスに関するマニュアルを参照してください。</p>
   <p>DataGrid アイテムレンダラーのトランジションがサポートされていません。 GridItemRenderer クラスの <codeph>transitions</codeph> プロパティが無効化されているので、設定しても無視されます。</p>
   </apiDesc><example conref="DataGridSimpleExample.mxml"><swfblock conref="examples/DataGridSimpleExample.swf"/></example><example conref="DataGridMasterDetailExample.mxml"><swfblock conref="examples/DataGridMasterDetailExample.swf"/></example><example conref="DataGridTypicalItemExample.mxml"><swfblock conref="examples/DataGridTypicalItemExample.swf"/></example><example conref="DataGridRowHeightExample.mxml"><swfblock conref="examples/DataGridRowHeightExample.swf"/></example><example conref="DataGridSelectionExample.mxml"><swfblock conref="examples/DataGridSelectionExample.swf"/></example><example conref="DataGridInvalidateCellExample.mxml"><swfblock conref="examples/DataGridInvalidateCellExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>spark.components.Grid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link><link href="spark.skins.spark.xml#DataGridSkin"><linktext>spark.skins.spark.DataGridSkin</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL_gridItemEditorSessionCancel"><apiName>gridItemEditorSessionCancel</apiName><shortdesc>
  データを保存せずにアイテムエディターが閉じられた後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  データを保存せずにアイテムエディターが閉じられた後に送出されます。  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE_gridItemEditorSessionSave"><apiName>gridItemEditorSessionSave</apiName><shortdesc>
  アイテムエディター内のデータがデータプロバイダーに保存され、エディターが閉じられた後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アイテムエディター内のデータがデータプロバイダーに保存され、エディターが閉じられた後に送出されます。  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START_gridItemEditorSessionStart"><apiName>gridItemEditorSessionStart</apiName><shortdesc>
  アイテムエディターが開かれた直後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アイテムエディターが開かれた直後に送出されます。 
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING_gridItemEditorSessionStarting"><apiName>gridItemEditorSessionStarting</apiName><shortdesc>
  新規のアイテムエディターセッションが要求されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  新規のアイテムエディターセッションが要求されたときに送出されます。リスナーはセルが編集可能かどうかを動的に判断し、編集可能でない場合は <codeph>preventDefault()</codeph> メソッドを呼び出すことにより編集をキャンセルできます。 リスナーは、列に異なるアイテムエディターを割り当てることにより、使用されるエディターを動的に変更することもできます。
 
  <p>このイベントがキャンセルされた場合、アイテムエディターは作成されません。</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link><link href="" invalidHref="flash.events.Event.xml"><linktext>flash.events.Event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGE_sortChange"><apiName>sortChange</apiName><shortdesc>
  データプロバイダーのコレクションにソートが適用された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  データプロバイダーのコレクションにソートが適用された後に送出されます。一般にこれは、ユーザーが列ヘッダーの上でマウスボタンを放して、データプロバイダーのコレクションにソートが適用された後です。 
  
  <p>このイベントは、ユーザーがコントロールを操作したときに送出されます。データプロバイダーのコレクションをプログラムでソートすると、コンポーネントは <codeph>sortChanging</codeph> イベントを送出しません。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGING_sortChanging"><apiName>sortChanging</apiName><shortdesc>
  データプロバイダーのコレクションにソートが適用される前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  データプロバイダーのコレクションにソートが適用される前に送出されます。一般にこれは、ユーザーが列のコンテンツに基づいてグリッドコンテンツをソートするようにコントロールに要求するために、列ヘッダーの上でマウスボタンを離したときです。列が並べ替え可能であり、データプロバイダーでソートがサポートされる場合にのみ送出されます。 
  
  <p>DataGrid コントロールには、このイベントに対するデフォルトハンドラーがあります。このハンドラーには 1 つの列のソートが実装されており、グリッドの <codeph>columnHeaderGroup</codeph> の <codeph>visibleSortIndices</codeph> を <codeph>columnIndices</codeph> で更新します。</p>
 
  <p>複数列のソートを実装する場合は、<codeph>preventDefault()</codeph> メソッドを呼び出して 1 列のソートが実行されないようにし、イベントの <codeph>columnIndices</codeph> および <codeph>newSortFields</codeph> パラメーターを設定して、デフォルトの動作を変更します。<codeph>newSortFields</codeph> には、目的のソートフィールドを設定します。<codeph>columnIndices</codeph> には、列ヘッダーバーにソートインジケーターを表示する必要がある列のインデックスを設定します。</p>
   
  <p>このイベントは、ユーザーがコントロールを操作したときに送出されます。データプロバイダーのコレクションをプログラムでソートすると、コンポーネントは <codeph>sortChanging</codeph> イベントを送出しません。 </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  選択範囲が変更されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  選択範囲が変更されると送出されます。 
  
  <p>このイベントは、ユーザーがコントロールを操作したときに送出されます。選択範囲をプログラムで変更すると、コンポーネントは <codeph>selectionChange</codeph> イベントを送出しません。どちらの場合でも、<codeph>valueCommit</codeph> イベントも送出されます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGING_selectionChanging"><apiName>selectionChanging</apiName><shortdesc>
  選択が変更されるときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  選択が変更されるときに送出されます。イベントに対して <codeph>preventDefault()</codeph> メソッドを呼び出すと、選択は変更されません。
  
  <p>このイベントは、ユーザーがコントロールを操作したときに送出されます。選択範囲をプログラムで変更すると、コンポーネントは <codeph>selectionChanging</codeph> イベントを送出しません。 </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  セル上でマウスがダブルクリックされると、grid スキンパーツによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  セル上でマウスがダブルクリックされると、<codeph>grid</codeph> スキンパーツによって送出されます。
   <p>このイベントを扱うには、DataGrid コントロールの <codeph>grid</codeph> スキンパーツにイベントハンドラーを割り当てます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  セル上でマウスがクリックされると、grid スキンパーツによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  セル上でマウスがクリックされると、<codeph>grid</codeph> スキンパーツによって送出されます。
   <p>このイベントを扱うには、DataGrid コントロールの <codeph>grid</codeph> スキンパーツにイベントハンドラーを割り当てます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  グリッドセルからマウスが出ると、grid スキンパーツによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グリッドセルからマウスが出ると、<codeph>grid</codeph> スキンパーツによって送出されます。
   <p>このイベントを扱うには、DataGrid コントロールの <codeph>grid</codeph> スキンパーツにイベントハンドラーを割り当てます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  グリッドセルにマウスが入ると、grid スキンパーツによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グリッドセルにマウスが入ると、<codeph>grid</codeph> スキンパーツによって送出されます。
   <p>このイベントを扱うには、DataGrid コントロールの <codeph>grid</codeph> スキンパーツにイベントハンドラーを割り当てます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  マウスがグリッド内になくても、マウスボタンが放されると、gridMouseDown イベントの後に grid スキンパーツによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスがグリッド内になくても、マウスボタンが放されると、<codeph>gridMouseDown</codeph> イベントの後に <codeph>grid</codeph> スキンパーツによって送出されます。
   <p>このイベントを扱うには、DataGrid コントロールの <codeph>grid</codeph> スキンパーツにイベントハンドラーを割り当てます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  ボタンが放される前にマウスが移動すると、gridMouseDown イベントの後に grid スキンパーツによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ボタンが放される前にマウスが移動すると、<codeph>gridMouseDown</codeph> イベントの後に <codeph>grid</codeph> スキンパーツによって送出されます。
   <p>このイベントを扱うには、DataGrid コントロールの <codeph>grid</codeph> スキンパーツにイベントハンドラーを割り当てます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  グリッドセル上でマウスボタンが押されると、grid スキンパーツによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グリッドセル上でマウスボタンが押されると、<codeph>grid</codeph> スキンパーツによって送出されます。
   <p>このイベントを扱うには、DataGrid コントロールの <codeph>grid</codeph> スキンパーツにイベントハンドラーを割り当てます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  ユーザー操作またはプログラムでの設定によって、キャレットの位置、サイズまたは可視性が変更されると、grid スキンパーツによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザー操作またはプログラムでの設定によって、キャレットの位置、サイズまたは可視性が変更されると、<codeph>grid</codeph> スキンパーツによって送出されます。
   <p>このイベントを扱うには、DataGrid コントロールの <codeph>grid</codeph> スキンパーツにイベントハンドラーを割り当てます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGrid:DataGrid"><apiName>DataGrid</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGrid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc conref="spark.components.Grid#addSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>rowIndex</codeph> または <codeph>columnIndex</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc conref="spark.components.Grid#addSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>index</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:clearSelection"><apiName>clearSelection</apiName><shortdesc conref="spark.components.Grid#clearSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>選択範囲が変更されている場合は <codeph>true</codeph>、以前に何も選択されていない場合は <codeph>false</codeph> です。
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#clearSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitCaretPosition"><apiName>commitCaretPosition</apiName><shortdesc>
      グリッドのキャレット位置が更新されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newCaretRowIndex</apiItemName><apiType value="int"/><apiDesc>新しいキャレット位置の 0 から始まる rowIndex です。
     
      </apiDesc></apiParam><apiParam><apiItemName>newCaretColumnIndex</apiItemName><apiType value="int"/><apiDesc>新しいキャレット位置の 0 から始まる columnIndex です。selectionMode が行ベースの場合は、これが -1 になります。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グリッドのキャレット位置が更新されます。キャレット位置が変わると、<codeph>grid</codeph> スキンパーツが <codeph>caretChange</codeph> イベントを送出します。
           </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridCaretEvent/CARET_CHANGE"><linktext>spark.events.GridCaretEvent.CARET_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitInteractiveSelection"><apiName>commitInteractiveSelection</apiName><shortdesc>
      選択範囲を変更するユーザー入力（マウスまたはキーボード）に応答して、このメソッドは selectionChanging イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>選択範囲がコミットされたか変更されなかった場合は <codeph>true</codeph>、選択範囲がキャンセルされるか、インデックスが範囲外である、または <codeph>selectionEventKind</codeph> が <codeph>selectionMode</codeph> と非互換であるなどのエラーのためにコミットできなかった場合は <codeph>false</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>selectionEventKind</apiItemName><apiType value="String"/><apiDesc>コミット中の選択範囲を指定する、GridSelectionEventKind クラスによって定義される定数です。null でない場合は、<codeph>selectionChanging</codeph> イベントを生成するために使用されます。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc><codeph>selectionEventKind</codeph> が行やセルに対するものであれば、データプロバイダーの選択範囲の 0 から始まる <codeph>rowIndex</codeph> です。<codeph>selectionEventKind</codeph> が複数のセルに対するものであれば、セル領域の原点の 0 から始まる rowIndex です。<codeph/>デフォルトは -1 で、このパラメーターが使用されていないことを示しています。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc><codeph>selectionEventKind</codeph> が単一の行や単一のセルに対するものであれば、選択範囲の 0 から始まる <codeph>columnIndex</codeph> です。<codeph>selectionEventKind</codeph> が複数のセルに対するものであれば、セル領域の原点の 0 から始まる columnIndex です。<codeph/>デフォルトは -1 で、このパラメーターが使用されていないことを示しています。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc><codeph>selectionEventKind</codeph> がセル領域に対するものであれば、セル領域の行数です。デフォルトは -1 で、このパラメーターが使用されていないことを示しています。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc><codeph>selectionEventKind</codeph> がセル領域に対するものであれば、セル領域の列数です。デフォルトは -1 で、このパラメーターが使用されていないことを示しています。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      選択範囲を変更するユーザー入力（マウスまたはキーボード）に応答して、このメソッドは <codeph>selectionChanging</codeph> イベントを送出します。イベントがキャセルされない場合は、選択範囲の変更をコミットして、<codeph>selectionChange</codeph> イベントを送出します。キャレット位置は更新されません。キャレットが変更されたかどうかを検出するには、<codeph>caretChanged</codeph> イベントを使用します。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGE"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGE</linktext></link><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGING"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGING</linktext></link><link href="spark.events.xml#GridSelectionEventKind"><linktext>spark.events.GridSelectionEventKind</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:endItemEditorSession"><apiName>endItemEditorSession</apiName><shortdesc>
      現在アクティブなエディターを閉じ、オプションでアイテムエディターの save() メソッドを呼び出すことによって、エディターの値を保存します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エディターセッションが保存された場合は <codeph>true</codeph>、保存がキャンセルされた場合は <codeph>false</codeph> です。  
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cancel</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>false</codeph> の場合は、エディター内のデータが保存されます。 それ以外の場合、エディター内のデータは破棄されます。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      現在アクティブなエディターを閉じ、オプションでアイテムエディターの <codeph>save()</codeph> メソッドを呼び出すことによって、エディターの値を保存します。<codeph>cancel</codeph> パラメーターが <codeph>true</codeph> の場合は、代わりにエディターの <codeph>cancel()</codeph> メソッドが呼び出されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc conref="spark.components.Grid#ensureCellIsVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>アイテムレンダラーのセルの 0 から始まる行インデックスです。列を指定するには -1 を指定します。
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>アイテムレンダラーのセルの 0 から始まる列インデックスです。行を指定するには -1 を指定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#ensureCellIsVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc conref="spark.components.Grid#invalidateCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>変更されたセルの 0 から始まる行インデックス、または -1 です。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc> 変更されたセルの 0 から始まる列インデックス、または -1 です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateTypicalItem"><apiName>invalidateTypicalItem</apiName><shortdesc conref="spark.components.Grid#invalidateTypicalItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateTypicalItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc conref="spark.components.Grid#removeSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>rowIndex</codeph> または <codeph>columnIndex</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc conref="spark.components.Grid#removeSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>index</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。 
           
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.components.Grid#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>選択範囲が変更されている場合は <codeph>true</codeph> です。
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#selectAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc conref="spark.components.Grid#selectCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>エラーがない場合は <codeph>true</codeph> です。 セル領域が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セル領域の原点の 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セル領域の原点の 0 で始まる列インデックスです。
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc><codeph>rowIndex</codeph> から数えた、セル領域に含める行の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc><codeph>columnIndex</codeph> から数えた、セル領域に含める列の数です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectIndices"><apiName>selectIndices</apiName><shortdesc conref="spark.components.Grid#selectIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>エラーがない場合は <codeph>true</codeph> です。 インデックスのいずれかが無効な場合、<codeph>startRowIndex</codeph> が <codeph>endRowIndex</codeph> 以下でない場合、または <codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>選択範囲の最初の行の 0 から始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>選択範囲の行数です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>現在の選択範囲にセル領域内のすべてのセルが含まれている場合は <codeph>true</codeph> です。
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc><codeph>rowIndex</codeph> から数えた、セル領域に含める行の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc><codeph>columnIndex</codeph> から数えた、セル領域に含める列の数です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc conref="spark.components.Grid#selectionContainsCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>現在の選択範囲にセルが含まれている場合は <codeph>true</codeph> です。
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>選択範囲に行が含まれている場合は <codeph>true</codeph> です。
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>0 から始まる行インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>現在の選択範囲にこれらの行が含まれている場合は <codeph>true</codeph> です。
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>選択範囲に含める 0 から始まる行インデックスの Vector です。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc conref="spark.components.Grid#setSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>rowIndex</codeph> または <codeph>columnIndex</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる列インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc conref="spark.components.Grid#setSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>エラーがない場合は <codeph>true</codeph> です。 <codeph>index</codeph> が無効か、<codeph>selectionMode</codeph> が無効な場合は <codeph>false</codeph> です。 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>セルの 0 で始まる行インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:sortByColumns"><apiName>sortByColumns</apiName><shortdesc>
      1 つ以上の列で DataGrid をソートし、表示を更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された列インデックスで <codeph>dataProvider</codeph> がソートされた場合は <codeph>true</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndices</apiItemName><apiType value="Vector$int"/><apiDesc><codeph>dataProvider</codeph> のソート基準にする列のインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>isInteractive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>true の場合は、<codeph>GridSortEvent.SORT_CHANGING</codeph> および <codeph>GridSortEvent.SORT_CHANGE</codeph> イベントが送出され、<codeph>GridSortEvent.SORT_CHANGING</codeph> イベントがキャンセルされない場合は、<codeph>visibleSortIndicatorIndices</codeph> という列ヘッダーグループが <codeph>columnIndices</codeph> で更新されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      1 つ以上の列で DataGrid をソートし、表示を更新します。
     
      <p><codeph>dataProvider</codeph> が ICollectionView の場合は、その <codeph>sort</codeph> プロパティが、各列の <codeph>dataField</codeph>、<codeph>sortCompareFunction</codeph> および <codeph>sortDescending</codeph> フラグに基づく値に設定されます。次に、データプロバイダーの <codeph>refresh()</codeph> メソッドが呼び出されます。 </p>
      
      <p><codeph>dataProvider</codeph> が ICollectionView でない場合、このメソッドは無視されます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortCompareFunction"><linktext>spark.components.gridClasses.GridColumn.sortCompareFunction</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortDescending"><linktext>spark.components.gridClasses.GridColumn.sortDescending</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortField"><linktext>spark.components.gridClasses.GridColumn.sortField</linktext></link><link href="" invalidHref="spark.components.gridClasses.xml#GridColumnHeaderGroup/visibleSortIndicatorIndices"><linktext>spark.components.gridClasses.GridColumnHeaderGroup.visibleSortIndicatorIndices</linktext></link><link href="spark.events.xml#GridSortEvent"><linktext>spark.events.GridSortEvent</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:startItemEditorSession"><apiName>startItemEditorSession</apiName><shortdesc>
      グリッド内の選択されたセルでエディターセッションを開始します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エディターセッションが開始された場合は <codeph>true</codeph> です。 エディターセッションがキャンセルされた場合、または他の理由で開始できない場合は、<codeph>false</codeph> を返します。 表示されていない列ではエディターセッションを開始できないことに注意してください。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>編集するセルの 0 から始まる行インデックスです。
           </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>編集するセルの 0 から始まる列インデックスです。  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グリッド内の選択されたセルでエディターセッションを開始します。このメソッドは、ユーザーインターフェイスでエディターセッションを起動できなくする、DataGrid と GridColumn の編集可能なプロパティのチェックをバイパスします。アイテムエディターが作成される前に、<codeph>startItemEditorSession</codeph> イベントが送出されます。 これにより、リスナーは指定されたセルに対してアイテムエディターを動的に変更できます。 エディターセッションが作成されないように、<codeph>preventDefault()</codeph> メソッドを呼び出してイベントをキャンセルすることもできます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGrid:columnsLength:get"><apiName>columnsLength</apiName><shortdesc>
      columns の IList が指定された場合は、columns.length の値が返されます。それ以外の場合は 0 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      columns の IList が指定された場合は、<codeph>columns.length</codeph> の値が返されます。それ以外の場合は 0 です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:columns:get"><apiName>columns</apiName><shortdesc conref="spark.components.Grid#columns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#columns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProviderLength:get"><apiName>dataProviderLength</apiName><shortdesc>
      dataProvider の IList が指定された場合は、dataProvider.length の値が返されます。それ以外の場合は 0 です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      dataProvider の IList が指定された場合は、<codeph>dataProvider.length</codeph> の値が返されます。それ以外の場合は 0 です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.Grid#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataProvider">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.Grid#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.Grid#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editable:get"><apiName>editable</apiName><shortdesc>
      GridColumn の編集可能プロパティのデフォルト値であり、対応するセルのデータプロバイダーアイテムを編集できるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      GridColumn の<codeph>editable</codeph> プロパティのデフォルト値であり、対応するセルのデータプロバイダーアイテムを編集できるかどうかを示します。<codeph>true</codeph> の場合は、選択されたセルをクリックするとアイテムエディターが開きます。<codeph>startItemEditorSession</codeph> イベントを処理することで、（列ごとではなく）セルごとに編集を有効または無効にできます。イベントハンドラーでは、セルを編集可能にするかどうかを判断するために必要なロジックを追加します。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorColumnIndex:get"><apiName>editorColumnIndex</apiName><shortdesc>
      編集されているセルの 0 から始まる列インデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      編集されているセルの 0 から始まる列インデックスです。編集中のセルがない場合、値は -1 です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorRowIndex:get"><apiName>editorRowIndex</apiName><shortdesc>
      編集されているセルの 0 から始まる行インデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      編集されているセルの 0 から始まる行インデックスです。編集中のセルがない場合、値は -1 です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。アイテムエディターが開くと、それらに従って、このプロパティが設定されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      GridColumn の imeMode プロパティのデフォルト値であり、IME（入力メソッドエディター）モードを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      GridColumn の <codeph>imeMode</codeph> プロパティのデフォルト値であり、IME（入力メソッドエディター）モードを指定します。IME を使用することによって、ユーザーは中国語、日本語、および韓国語のテキストを入力できます。Flex では、コントロールにフォーカスが置かれたときに、IME を指定されたモードに設定し、コントロールからフォーカスが離れたときに、元のモードに戻します。
          <p>flash.system.IMEConversionMode クラスで、このプロパティの有効な値の定数を定義します。IME を指定しない場合は、<codeph>null</codeph> を指定します。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemEditorInstance:get"><apiName>itemEditorInstance</apiName><shortdesc>
      現在アクティブなアイテムエディターのインスタンスへの参照です（存在する場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.gridClasses:IGridItemEditor</apiValueClassifier></apiValueDef><apiDesc>
      現在アクティブなアイテムエディターのインスタンスへの参照です（存在する場合）。
           <p>アイテムの編集中にアイテムエディターのインスタンスと新しいアイテム値にアクセスするには、<codeph>itemEditorInstance</codeph> プロパティを使用します。 <codeph>itemEditorSessionStart</codeph> イベントが送出されるまでは、<codeph>itemEditorInstance</codeph> プロパティは有効ではありません。</p>
           <p><codeph>DataGridColumn.itemEditor</codeph> プロパティは、アイテムエディターのクラスを定義し、必然的にアイテムエディターインスタンスのデータ型も定義します。</p>
           <p>MXML では、このプロパティを設定しないでください。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:itemEditor:get"><apiName>itemEditor</apiName><shortdesc>
      GridColumn の itemEditor プロパティのデフォルト値であり、アイテムエディターインスタンスの作成に使用する IGridItemEditor クラスを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemEditorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null.
           </apiDefaultValue></apiValueDef><apiDesc>
      GridColumn の <codeph>itemEditor</codeph> プロパティのデフォルト値であり、アイテムエディターインスタンスの作成に使用する IGridItemEditor クラスを指定します。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataField"><linktext>dataField</linktext></link><link href="spark.components.gridClasses.xml#IGridItemEditor"><linktext>spark.components.gridClasses.IGridItemEditor</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.Grid#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>DefaultGridItemRenderer
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#itemRenderer">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc conref="spark.components.Grid#preserveSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#preserveSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.components.Grid#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc conref="spark.components.Grid#requireSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requireSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc conref="spark.components.Grid#resizableColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#resizableColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.components.Grid#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.Grid#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc conref="spark.components.Grid#selectedCell">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedCell">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc conref="spark.components.Grid#selectedCells">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedCells">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc conref="spark.components.Grid#selectedIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc conref="spark.components.Grid#selectedIndices">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndices">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc conref="spark.components.Grid#selectedItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc conref="spark.components.Grid#selectedItems">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedItems">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc conref="spark.components.Grid#selectionLength">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectionLength">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc conref="spark.components.Grid#selectionMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectionMode">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc conref="spark.components.Grid#showDataTips">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#showDataTips">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:sortableColumns:get"><apiName>sortableColumns</apiName><shortdesc>
      ユーザーが列をインタラクティブにソートできるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが列をインタラクティブにソートできるかどうかを指定します。 <codeph>true</codeph> の場合、ユーザーは、列のヘッダーをクリックすることで、列のデータフィールドによってデータプロバイダーをソートできます。 <codeph>true</codeph> の場合、個々の列は自分の <codeph>sortable</codeph> プロパティを <codeph>false</codeph> に設定して、ユーザーがその列をソートできないようにすることができます。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.Grid#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#typicalItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.components.Grid#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  RadioButtonGroup コンポーネントは、1 つの相互排他的コンポーネントとして機能する RadioButton コンポーネントのグループを定義します。RadioButton コンポーネントは一度に 1 つしか選択できません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true"
    selectedValue="null"
    selection="null"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
    valueCommit="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButtonGroup コンポーネントは、1 つの相互排他的コンポーネントとして機能する RadioButton コンポーネントのグループを定義します。RadioButton コンポーネントは一度に 1 つしか選択できません。<codeph>&lt;s:RadioButtonGroup></codeph> タグを使用してグループの名前を定義する場合は、<codeph>id</codeph> プロパティを指定する必要があります。このグループに追加された <codeph>&lt;s:RadioButton></codeph> コンポーネントには、このグループ名が割り当てられます。
 
  <p>RadioButtonGroup コンポーネントは UIComponent ではなく EventDispatcher のサブクラスであり、IMXMLObject インターフェイスを実装します。他のすべての Flex のビジュアルコンポーネントは、IVisualElement インターフェイスを実装します。RadioButtonGroup コンポーネントの宣言は IVisualElement に割り当てられないので、<codeph>&lt;Declarations></codeph> タグ内に含める必要があります。</p> 
 
  <p>List や DataGrid などのリストベースのコンポーネントでこのコンポーネントを使用するには、アイテムレンダラーを作成します。アイテムレンダラーの作成について詳しくは、「<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">Custom Spark item renderers</xref>」を参照してください。 </p>
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  プログラムまたはユーザー操作のいずれかによって、値が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  プログラムまたはユーザー操作のいずれかによって、値が変更されたときに送出されます。
 
  <p>このイベントはプログラムによる変更によってトリガーされるため、<codeph>valueCommit</codeph> イベントハンドラーが値を変更し、別の <codeph>valueCommit</codeph> イベントを起動することがないようにする必要があります。 例えば、<codeph>valueCommit</codeph> イベントハンドラーの <codeph>selectedValue</codeph> プロパティや <codeph>selection</codeph> プロパティは変更しないでください。 </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  ユーザーがグループ内の RadioButton コンポーネントを選択したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがグループ内の RadioButton コンポーネントを選択したときに送出されます。各 RadioButton コンポーネントについてハンドラーを設定することもできます。ユーザーがマウスでラジオボタンを操作した場合にのみ、このイベントが送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  このグループ内で選択された RadioButton コンポーネントの値が変化したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このグループ内で選択された RadioButton コンポーネントの値が変化したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>クラスが単純に EventDispatcher を継承する場合は、<codeph>document</codeph> パラメーターを使用しないでください。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="spark.components:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      指定されたインデックス位置にある RadioButton コンポーネントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>インデックスが 0 ～ <codeph>numRadioButtons</codeph> - 1 の範囲内にある場合は、指定した RadioButton コンポーネントです。インデックスが無効の場合、<codeph>null</codeph> を返します。
     
      </apiDesc><apiOperationClassifier>spark.components:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>RadioButtonGroup 内にある RadioButton の 0 から始まるインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にある RadioButton コンポーネントを返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="spark.components.numRadioButtons.xml"><linktext>numRadioButtons</linktext></link></related-links></apiOperation><apiOperation id="spark.components:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      遅延インスタンス化をサポートする IMXMLObject.initialized() メソッドの実装です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>このオブジェクトを作成した MXML ドキュメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>ドキュメントがこのオブジェクトを参照するために使用する識別子です。オブジェクトがドキュメントの deep プロパティである場合、<codeph>id</codeph> は null になります。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      遅延インスタンス化をサポートする <codeph>IMXMLObject.initialized()</codeph> メソッドの実装です。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IMXMLObject.xml"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="spark.components:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      選択が可能かどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      選択が可能かどうかを判別します。返される値は <codeph>RadioButtonGroup</codeph> で明示的に設定された値のみを反映し、個々の RadioButton で明示的に設定された値を反映しないことに注意してください。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      この RadioButtonGroup に属する RadioButton の数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="numRadioButtonsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"0"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      この RadioButtonGroup に属する RadioButton の数です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      グループ内で選択されている RadioButton コンポーネントの value プロパティが設定されている場合は、value プロパティです。設定されていない場合は、選択した RadioButton の label プロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      グループ内で選択されている RadioButton コンポーネントの <codeph>value</codeph> プロパティが設定されている場合は、value プロパティです。設定されていない場合は、選択した RadioButton の <codeph>label</codeph> プロパティです。RadioButton が選択されていない場合、このプロパティは <codeph>null</codeph> です。
     
      <p><codeph>selectedValue</codeph> を設定すると、<codeph>value</codeph> プロパティまたは <codeph>label</codeph> プロパティがこの値に一致する最初の RadioButton コンポーネントが選択されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      グループ内で現在選択されている RadioButton コンポーネントへの参照を格納します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      グループ内で現在選択されている RadioButton コンポーネントへの参照を格納します。このプロパティには ActionScript からのみアクセスできます。MXML で設定することはできません。このプロパティを <codeph>null</codeph> に設定すると、現在選択されている RadioButton コンポーネントの選択が解除されます。変更イベントは送出されません。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  VScrollBar（垂直の ScrollBar）コントロールを使用すると、データが多すぎて表示領域に垂直に収まらない場合に、表示される部分のデータを制御できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:VScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VScrollBar
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
   
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  VScrollBar（垂直の ScrollBar）コントロールを使用すると、データが多すぎて表示領域に垂直に収まらない場合に、表示される部分のデータを制御できます。
 
  <p>VScrollBar コントロールは単独のコントロールとしても使用できますが、通常は他のコンポーネントグループと組み合わせてスクロール機能を提供します。</p>
   <p>VScrollBar コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>幅 15 ピクセル、高さ 85 ピクセル</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>幅 15 ピクセル、高さ 15 ピクセル</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row><row>
           <entry>デフォルトスキンクラス</entry>
           <entry>spark.skins.spark.VScrollBarSkin
              <p>spark.skins.spark.VScrollBarThumbSkin</p>
              <p>spark.skins.spark.VScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VScrollBarSkin"><linktext>spark.skins.spark.VScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  mouseWheel イベントのために verticalScrollPosition が変わるときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>mouseWheel</codeph> イベントのために <codeph>verticalScrollPosition</codeph> が変わるときに送出されます。
 
  <p>デフォルトの動作は、「ステップ」数 <codeph>delta</codeph> のイベントによる垂直方向のスクロールです。 スクロール方向に応じて <codeph>UP</codeph> または <codeph>DOWN</codeph> を使用したビューポートの <codeph>getVerticalScrollPositionDelta</codeph> メソッドによって、ステップの高さが決まります。</p>
 
  <p>イベントに対して <codeph>preventDefault()</codeph> メソッドを呼び出すと、垂直方向のスクロール位置は変更されません。 それ以外の場合に、イベントの <codeph>delta</codeph> プロパティを変更すると、その値が垂直方向の「ステップ」数として使用されます。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      increase が true の場合はページごとのインクリメント値、increase が false の場合はページごとのデクリメント値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>value</codeph> をインクリメント（<codeph>true</codeph>）するかデクリメント（<codeph>false</codeph>）するかを指定します。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>increase</codeph> が <codeph>true</codeph> の場合は、ページごとに <codeph>value</codeph> をインクリメントし、<codeph>increase</codeph> が <codeph>false</codeph> の場合は、ページごとに <codeph>value</codeph> をデクリメントします。スクロールバーの <codeph>value</codeph> が増えると、ビューポートが上にスクロールします。<codeph>value</codeph> が減ると、ビューポートが下にスクロールします。
      
      <p><codeph>viewport</codeph> プロパティが設定されている場合は、viewport の <codeph>getVerticalScrollPositionDelta()</codeph> メソッドを使用してページのインクリメントサイズが計算されます。<codeph>viewport</codeph> が null の場合は、スクロールバーの <codeph>pageSize</codeph> プロパティが使用されます。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      viewport が null でない場合は、ビューポートをスクロールすることによって、行アップまたは行ダウン操作の垂直スクロール位置を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>スクロールが行アップであるか（<codeph>true</codeph>）行ダウンであるか（<codeph>false</codeph>）を指定します。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>viewport</codeph> が null でない場合は、ビューポートをスクロールすることによって、行アップまたは行ダウン操作の垂直スクロール位置を変更します。このメソッドは、<codeph>flash.ui.Keyboard.RIGHT</codeph> または <codeph>flash.ui.Keyboard.LEFT</codeph> と共に <codeph>IViewport.getVerticalScrollPositionDelta()</codeph> メソッドを呼び出すことによって、スクロールする量を計算します。その後、<codeph>setValue()</codeph> メソッドを呼び出して、<codeph>IViewport.verticalScrollPosition</codeph> プロパティを適切な値に設定します。
           <p><codeph>viewport</codeph> が null の場合は、<codeph>changeValueByStep()</codeph> メソッドを呼び出すことによって、行アップまたは行ダウン操作の垂直スクロール位置を変更します。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      value プロパティを更新し、さらに viewport が null でない場合はその verticalScrollPosition を value に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> プロパティの新しい値です。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      value プロパティを更新し、<codeph>viewport</codeph> が null でない場合はその <codeph>verticalScrollPosition</codeph> を <codeph>value</codeph> に設定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VScrollBar/viewport"><linktext>viewport</linktext></link></related-links></apiOperation><apiValue id="spark.components:VScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      このスクロールバーによって制御されるビューポートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      このスクロールバーによって制御されるビューポートです。
      
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  videoDisplay クラスは、プログレッシブダウンロード、マルチビットレートおよびストリーミングビデオをサポートする、クロムレスビデオプレーヤーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoDisplay">
<description>
 このコンポーネントでは、モバイルテーマのスキンが定義されていないので、モバイルアプリケーションではこのコンポーネントを使用しないことをお勧めします。 別の方法として、独自のモバイルスキンをコンポーネントに定義できます。 詳しくは、<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">Basics of mobile skinning</xref>を参照してください。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoDisplay&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoDisplay 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  videoDisplay クラスは、プログレッシブダウンロード、マルチビットレートおよびストリーミングビデオをサポートする、クロムレスビデオプレーヤーです。
 
  <p><codeph>VideoDisplay</codeph> はスキンをサポートしないクロムレスバージョンです。ユーザーがコントロールを操作できないようにする場合に便利です。</p>
 
  <p><codeph>VideoPlayer</codeph> はスキナブルバージョンです。</p>
   <p>VideoDisplay コントロールには、次のデフォルトの特性があります。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row>
           <entry>デフォルトサイズ</entry>
           <entry>コンテンツがない場合は、幅 0 ピクセル、高さ 0 ピクセル、コンテンツがある場合は、ビデオの幅と高さ</entry>
        </row><row>
           <entry>最小サイズ</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大サイズ</entry>
           <entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoDisplayExample.mxml"><swfblock conref="examples/VideoDisplayExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link></related-links><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  MediaPlayer の状態が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  MediaPlayer の状態が変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  メディアの duration プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  メディアの <codeph>duration</codeph> プロパティが変更されたときに送出されます。
 
  <p>このイベントは、ソースが null に設定されている場合や再生エラーが発生した場合には送出されないことがあります。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  MediaPlayer の currentTime プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  MediaPlayer の <codeph>currentTime</codeph> プロパティが変更されたときに送出されます。
 
  <p>このイベントは、ソースが null に設定されている場合や再生エラーが発生した場合には送出されないことがあります。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  再生ヘッドが再生可能メディアの継続時間に達したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  再生ヘッドが再生可能メディアの継続時間に達したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  ダウンロード処理を実行中にデータを受信したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ダウンロード処理を実行中にデータを受信したときに送出されます。このイベントは、HTTP リクエストなどにより、サーバーから直接にビデオがダウンロードされて再生された場合にのみ送出されます。Flash Media Server などの特殊なメディアサーバーからビデオが再生された場合には送出されません。
 
  <p>このイベントは、ソースが null に設定されている場合や再生エラーが発生した場合には送出されないことがあります。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      再生ヘッドを移動せずに再生を一時停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      再生ヘッドを移動せずに再生を一時停止します。再生がすでに一時停止または停止状態にある場合は、このメソッドを呼び出しても何も実行されません。  
           <p>再生を再開するには、<codeph>play()</codeph> メソッドを呼び出します。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      ビデオを再生します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ビデオを再生します。ビデオが一時停止状態、停止状態、または既に再生状態であるときに呼び出すことができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:seek"><apiName>seek</apiName><shortdesc>
      ビデオ内の特定の時間までシークします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>シーク時間（秒単位）です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビデオ内の特定の時間までシークします。ビデオが再生中である場合、その時点から再生を継続します。ビデオが一時停止している場合、その時点までシークし、一時停止のままになります。ビデオが停止している場合、その時点までシークし、一時停止状態になります。このメソッドはライブビデオストリームには効果がありません。
           <p>時間が 0 未満または NaN である場合、例外をスローします。時間がストリームの末尾を超過している場合、またはこれまでダウンロードしたファイルの量を超過している場合、シークを試行し、失敗は回復されます。</p>
     
      <p><codeph>seek()</codeph> を呼び出した直後は、<codeph>currentTime</codeph> プロパティが期待した値にならないことがあります。プログレッシブダウンロードの場合はキーフレームへのシークしか実行できないため、シークすると、指定した時間以降にある最初のキーフレームの時間に移動します</p>
      
      <p><b>注意：</b>ストリーミングの場合のシークでは、ソース FLV ファイル内の目的の位置にキーフレームがない場合でも、ちょうどその指定した時間に移動します。</p>
           <p>シークは非同期であるため、<codeph>seek()</codeph> メソッドを呼び出しても、<codeph>currentTime</codeph> はすぐには更新されません。 </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      ビデオ再生を停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ビデオ再生を停止します。<codeph>autoRewind</codeph> が <codeph>true</codeph> に設定されている場合、最初のフレームまで巻き戻しされます。ビデオが既に停止していた場合、効果はありません。再生を再開するには、<codeph>play()</codeph> を呼び出します。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="spark.components:VideoDisplay:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc>
      autoPlay = false で、source が設定されている場合、ビデオをロードするかどうかは autoDisplayFirstFrame によって制御されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>autoPlay = false</codeph> で、<codeph>source</codeph> が設定されている場合、ビデオをロードするどうかは <codeph>autoDisplayFirstFrame</codeph> によって制御されます。<codeph>autoDisplayFirstFrame</codeph> が <codeph>true</codeph> に設定されている場合、ビデオの最初のフレームがロードされ、ビデオのサイズが正しく設定されます。<codeph>autoDisplayFirstFrame</codeph> が <codeph>false</codeph> に設定されている場合、ソースへの接続が確立されず、最初のフレームが表示されないため、手動で再生が実行されるまでビデオのサイズは決定されません。
     
      <p><codeph>autoPlay = true</codeph> の場合、このフラグは無視されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      source プロパティが設定されている場合に、ビデオの再生をすぐに開始するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>source</codeph> プロパティが設定されている場合に、ビデオの再生をすぐに開始するかどうかを指定します。<codeph>true</codeph> の場合、ただちにビデオファイルのバッファリングと再生が始まります。
           <p><codeph>autoPlay</codeph> が <codeph>false</codeph> に設定されている場合でも、<codeph>initialize()</codeph> メソッドを呼び出した後でビデオのロードが始まります。 Flash Media Server の場合は、この操作によってストリームが作成され、表示する最初のフレームがロードされます。HTTP ダウンロードの場合は、ストリームのダウンロードが開始され、最初のフレームが表示されます。</p>
     
      <p><codeph>playWhenHidden</codeph> が <codeph>false</codeph> に設定されている場合は、ビデオが有効になって表示されるときの動作に<codeph>autoPlay</codeph> も影響します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      stop() メソッドが呼び出されたとき、またはストリームの最後に到達したために再生が停止したときに、FLV ファイルを最初のフレームまで巻き戻すかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>stop()</codeph> メソッドが呼び出されたとき、またはストリームの最後に到達したために再生が停止したときに、FLV ファイルを最初のフレームまで巻き戻すかどうかを指定します。
           <p>このプロパティは、ライブストリーミングビデオには効果がありません。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      既にアプリケーションにダウンロードされているデータのバイト数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      既にアプリケーションにダウンロードされているデータのバイト数です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      アプリケーションにダウンロードされるデータの総バイト数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      アプリケーションにダウンロードされるデータの総バイト数です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:currentTime:get"><apiName>currentTime</apiName><shortdesc>
      ビデオの再生開始以降の再生ヘッドの現在時間（秒単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ビデオの再生開始以降の再生ヘッドの現在時間（秒単位）です。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:duration:get"><apiName>duration</apiName><shortdesc>
      ビデオの再生時間（秒単位）です。
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ビデオの再生時間（秒単位）です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:loop:get"><apiName>loop</apiName><shortdesc>
      再生が完了した後でメディアを再び再生する必要があるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      再生が完了した後でメディアを再び再生する必要があるかどうかを示します。<codeph>loop</codeph> プロパティは <codeph>autoRewind</codeph> プロパティより優先されるので、loop が <codeph>true</codeph> に設定されている場合、<codeph>autoRewind</codeph> プロパティは無視されます。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc>
      ビデオの現在の状態です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ビデオの現在の状態です。使用可能な値については、org.osmf.media.MediaPlayerState を参照してください。
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:muted:get"><apiName>muted</apiName><shortdesc>
      ビデオをミュートするには true に設定し、ビデオをミュート解除するには false に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      ビデオをミュートするには <codeph>true</codeph> に設定し、ビデオをミュート解除するには <codeph>false</codeph> に設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc>
      ビデオが非表示になっても再生を続行するかどうかを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ビデオが非表示になっても再生を続行するかどうかを制御します。ビデオは、自分または上位要素の <codeph>visible</codeph> が <codeph>false</codeph> に設定された場合、または表示リストから削除された場合に、非表示になります。<codeph>true</codeph> に設定すると、ビデオは再び表示されるまで再生を一時停止します。<codeph>false</codeph> に設定すると、ビデオは非表示のときも再生を続けます。
     
      <p>ビデオが無効になる（またはビデオのいずれかの親が無効になる）場合も、ビデオは一時停止しますが、再び有効になってもビデオの再生は再開されません。この動作は <codeph>pauseWhenHidden</codeph> で制御されるのではなく、VideoDisplay コンポーネントで定義されています。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      ビデオが再生中である場合、または再生試行中である場合は true になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      ビデオが再生中である場合、または再生試行中である場合は <codeph>true</codeph> になります。
      
      <p>ビデオがシーク中またはバッファリング中であるが、再生試行中であるために現在再生中ではない場合があります。</p> 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link><link href="spark.components.xml#VideoDisplay/pause()"><linktext>pause()</linktext></link><link href="spark.components.xml#VideoDisplay/stop()"><linktext>stop()</linktext></link><link href="spark.components.xml#VideoDisplay/autoPlay"><linktext>autoPlay</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
      scaleMode プロパティは、ビデオコンテンツの様々なサイズ変更の方法を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>scaleMode</codeph> プロパティは、ビデオコンテンツの様々なサイズ変更の方法を示します。<codeph>scaleMode</codeph> は、<codeph>"none"</codeph>、<codeph>"stretch"</codeph>、<codeph>"letterbox"</codeph>、<codeph>"zoom"</codeph> のいずれかに設定できます。
     
      <p>コンポーネントで幅、高さまたは制約が指定されていない場合、このプロパティは効果がありません。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      ビデオのソースです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      ビデオのソースです。
     
      <p>プログレッシブダウンロードの場合、ソースは、再生するビデオファイルを指定するパスまたは URL です。</p>
     
      <p>ストリーミング（記録済みストリーミング、ライブストリーミングまたはマルチビットレートストリーミング）の場合、source プロパティは DynamicStreamingVideoSource オブジェクトです。マルチビットレートをサポートしない記録済みストリーミングビデオまたはライブストリーミングビデオのみを再生する場合は、ビデオストリームの場所を指すストリング型の URL を指定します。ただし、その場合は streamType が「any」と見なされるので、DynamicStreamingVideoSource オブジェクトを使用する場合よりも制御範囲が狭まります。</p>
     
      <p>注意：既にソースの設定を行っている場合、MediaPlayerStateChangeEvent.LOADING または MediaPlayerStateChangeEvent.READY でのソース設定はお勧めしません。無限ループまたは RTE が発生することがあります。このような処理が必要な場合は、ソースを設定するための追加のフレームが用意されるまで待機してください。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.mediaClasses.xml#DynamicStreamingVideoSource"><linktext>spark.components.mediaClasses.DynamicStreamingVideoSource</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:videoObject:get"><apiName>videoObject</apiName><shortdesc>
      基になる Flash Player の flash.media.Video オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      基になる Flash Player の <codeph>flash.media.Video</codeph> オブジェクトです。
     
      <p>source が <codeph>null</codeph> の場合は、基になる <codeph>flash.media.Video object</codeph> がまだ存在していない可能性があります。その場合、<codeph>videoObject</codeph> は <codeph>null</codeph> を返します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      ボリュームレベルです。0 から 1 の範囲の値で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ボリュームレベルです。0 から 1 の範囲の値で指定します。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TileGroup"><apiName>TileGroup</apiName><shortdesc>
  TileGroup コンテナは、TileLayout クラスを使用する Group コンテナのインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TileGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TileGroup
    <strong>Properties</strong>
    columnAlign="left"
    columnCount="-1"
    columnWidth="0"
    horizontalAlign="justify"
    horizontalGap="6"
    orientation="rows"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount"-1"
    requestedRowCount="-1"
    rowAlign="top"
    rowCount="-1"
    rowHeight="0"
    verticalAlign="justify"
    verticalGap="6"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileGroup コンテナは、TileLayout クラスを使用する Group コンテナのインスタンスです。<codeph>layout</codeph> プロパティを変更しないでください。代わりに、TileGroup クラスのプロパティを使用して、TileLayout クラスの特性を変更します。
 
  <p>TileGroup コンテナには、次のデフォルトの特性があります。</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特性</entry><entry>説明</entry></row></thead><tbody><row><entry>デフォルトサイズ</entry><entry>子を表示できるだけのサイズ</entry></row><row><entry>最小サイズ</entry><entry>0 ピクセル</entry></row><row><entry>最大サイズ</entry><entry>幅 10000 ピクセル、高さ 10000 ピクセル</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileGroupExample.mxml"><swfblock conref="examples/TileGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link></related-links><apiConstructor id="spark.components:TileGroup:TileGroup"><apiName>TileGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。<codeph>layout</codeph> プロパティを TileLayout クラスのインスタンスに初期化します。
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:TileGroup:columnAlign:get"><apiName>columnAlign</apiName><shortdesc conref="spark.layouts.TileLayout#columnAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.TileLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.TileLayout#columnWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalGap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:orientation:get"><apiName>orientation</apiName><shortdesc conref="spark.layouts.TileLayout#orientation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"rows"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#orientation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.TileLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.TileLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.TileLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.TileLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowAlign:get"><apiName>rowAlign</apiName><shortdesc conref="spark.layouts.TileLayout#rowAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.TileLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.TileLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalGap:get"><apiName>verticalGap</apiName><shortdesc conref="spark.layouts.TileLayout#verticalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalGap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>