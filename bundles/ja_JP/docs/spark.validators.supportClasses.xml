<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.validators.supportClasses"><apiName>spark.validators.supportClasses</apiName><apiDetail/><apiClassifier id="spark.validators.supportClasses:NumberValidatorBase"><apiName>NumberValidatorBase</apiName><shortdesc>
  NumberValidatorBase クラスには、NumberValidator および CurrencyValidator クラスによって必要とされるすべての共通機能が格納されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NumberValidator&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NumberValidatorBase
    <strong>Properties</strong>
    allowNegative="true"
    decimalPointCountError="The decimal separator can only occur once."
    decimalSeparator="<i>locale specified string or customized by user</i>."
    digitsType="<i>locale specified string or customized by user</i>."
    domain="real"
    fractionalDigits="<i>locale specified string or customized by user</i>."
    fractionalDigitsError="The amount entered has too many digits beyond the decimal point."
    greaterThanMaxError="The number entered is too large."
    groupingSeparator="<i>locale specified string or customized by user</i>."
    invalidCharError="The input contains invalid characters."
    invalidFormatCharsError="One of the formatting parameters is invalid."
    lessThanMinError="The amount entered is too small."
    localeUndefinedError="Locale is undefined."
    maxValue="NaN"
    minValue="NaN"
    negativeError="The amount may not be negative."
    negativeSymbolError="The negative symbol is repeated or not in right place."
    notAnIntegerError="The number must be an integer."
    parseError="The input string could not be parsed."
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.validators.supportClasses:GlobalizationValidatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph>NumberValidatorBase</codeph> クラスには、<codeph>NumberValidator</codeph> および <codeph>CurrencyValidator</codeph> クラスによって必要とされるすべての共通機能が格納されます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.formatters.supportClasses.xml#NumberFormatterBase"><linktext>spark.formatters.supportClasses.NumberFormatterBase</linktext></link></related-links><apiConstructor id="spark.validators.supportClasses:NumberValidatorBase:NumberValidatorBase"><apiName>NumberValidatorBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.validators.supportClasses:NumberValidatorBase:allowNegative:get"><apiName>allowNegative</apiName><shortdesc>
      負の数値が使用可能かどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      負の数値が使用可能かどうかを指定します。 有効な値は、<codeph>true</codeph> または <codeph>false</codeph> です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:decimalPointCountError:get"><apiName>decimalPointCountError</apiName><shortdesc>
      小数点の記号を複数個含む場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The decimal separator can occur only once."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      小数点の記号を複数個含む場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:decimalSeparator:get"><apiName>decimalSeparator</apiName><shortdesc>
      小数部分がある数字の検証に使用される小数点区切り文字です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiException><apiDesc>このプロパティに null 値が割り当てられている場合。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
      小数部分がある数字の検証に使用される小数点区切り文字です。
     
      <p>このプロパティは、バリデーターオブジェクトのロケールスタイルに基づいて最初に設定されます。</p>
     
      <p>デフォルト値はロケールおよびオペレーティングシステムによって異なります。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.validators.supportClasses.xml#NumberValidatorBase/validate()"><linktext>validate()</linktext></link></related-links></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:digitsType:get"><apiName>digitsType</apiName><shortdesc>
      数字を検証するときに使用される数字のセットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
      数字を検証するときに使用される数字のセットを定義します。
     
      <p>さまざまな言語と地域で使用されるさまざまな文字セットを、0～9 の数字で表します。 このプロパティは、使用される数字のセットを定義します。</p>
     
      <p>このプロパティの値は、10 進数字セットのゼロ桁の Unicode 値を表しています。このプロパティの有効な値は <codeph>NationalDigitsType</codeph> クラスで定義されています。</p>
     
      <p>デフォルト値はロケールおよびオペレーティングシステムによって異なります。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.globalization.NationalDigitsType.xml"><linktext>flash.globalization.NationalDigitsType</linktext></link></related-links></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:domain:get"><apiName>domain</apiName><shortdesc>
      検証する数値の型を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"real"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      検証する数値の型を表します。 指定できる値は、<codeph>"real"</codeph> および <codeph>"int"</codeph> です。
     
      <p>ActionScript の場合、このプロパティを設定するために使用できる定数は、<codeph>NumberValidatorDomainType.REAL</codeph> または <codeph>NumberValidatorDomainType.INT</codeph> です。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.validators.supportClasses.xml#NumberValidatorBase/NumberValidatorDomainType"><linktext>NumberValidatorDomainType</linktext></link></related-links></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:fractionalDigitsError:get"><apiName>fractionalDigitsError</apiName><shortdesc>
      fractionalDigits プロパティによって指定された値を小数桁が超えたときのエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered has too many digits beyond the decimal
      point."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      fractionalDigits プロパティによって指定された値を小数桁が超えたときのエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:fractionalDigits:get"><apiName>fractionalDigits</apiName><shortdesc>
      小数点記号の後に表示できる最大桁数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      小数点記号の後に表示できる最大桁数。
     
      <p>デフォルト値はロケールおよびオペレーティングシステムによって異なります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:greaterThanMaxError:get"><apiName>greaterThanMaxError</apiName><shortdesc>
      値が maxValue プロパティの値を超過する場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The number entered is too large."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      値が <codeph>maxValue</codeph> プロパティの値を超過する場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:groupingSeparator:get"><apiName>groupingSeparator</apiName><shortdesc>
      グループ化区切りに使用される文字または文字列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiException><apiDesc>このプロパティに null 値が割り当てられている場合。
     
      <p>デフォルト値はロケールおよびオペレーティングシステムによって異なります。</p>
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
      グループ化区切りに使用される文字または文字列。
     
      <p>このプロパティの値は、数値を検証するときにグループ化区切り文字として使用されます。 このプロパティは最初、validator オブジェクトを構築するときに選択したロケールに基づいて設定されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.validators.supportClasses.xml#NumberValidatorBase/validate()"><linktext>validate()</linktext></link><link href="spark.validators.supportClasses.xml#NumberValidatorBase/groupingPattern"><linktext>groupingPattern</linktext></link></related-links></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:invalidCharError:get"><apiName>invalidCharError</apiName><shortdesc>
      値に無効な文字が含まれている場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The input contains invalid characters."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      値に無効な文字が含まれている場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:invalidFormatCharsError:get"><apiName>invalidFormatCharsError</apiName><shortdesc>
      値に無効な形式の文字が含まれる場合に発生するエラーメッセージを表します。具体的には、区切り文字に数字またはマイナス記号（-）が使用されている場合や区切り文字が複数個連続して使用されている場合がそれに該当します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"One of the formatting parameters is invalid."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      値に無効な形式の文字が含まれる場合に発生するエラーメッセージを表します。具体的には、区切り文字に数字またはマイナス記号（-）が使用されている場合や区切り文字が複数個連続して使用されている場合がそれに該当します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:lastOperationStatus:get"><apiName>lastOperationStatus</apiName><shortdesc>
      
      このクラスオブジェクトが実行した最新の操作のステータス。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      
      このクラスオブジェクトが実行した最新の操作のステータス。コンストラクターまたはこのクラスのメソッドが呼び出されたり、プロパティが設定されたりすると、必ず <codeph>lastOperationStatus</codeph> が設定されます。有効な値については、各メソッドの説明を参照してください。
     
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.Globalization.LastOperationStatus.xml"><linktext>spark.Globalization.LastOperationStatus</linktext></link></related-links></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:lessThanMinError:get"><apiName>lessThanMinError</apiName><shortdesc>
      値が minValue 未満の場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount entered is too small."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      値が <codeph>minValue</codeph> 未満の場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:localeUndefinedError:get"><apiName>localeUndefinedError</apiName><shortdesc>
      ロケールが未定義であるか使用できない場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"Locale is undefined."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ロケールが未定義であるか使用できない場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:maxValue:get"><apiName>maxValue</apiName><shortdesc>
      有効な数値の最大値を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      有効な数値の最大値を表します。 値が NaN の場合、最大値がないことを意味します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:minValue:get"><apiName>minValue</apiName><shortdesc>
      有効な数値の最小値を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
     
      </apiDefaultValue></apiValueDef><apiDesc>
      有効な数値の最小値を表します。 値が NaN の場合、最小値がないことを意味します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:negativeError:get"><apiName>negativeError</apiName><shortdesc>
      負の値で、allowNegative プロパティが false の場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The amount may not be negative."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      負の値で、<codeph>allowNegative</codeph> プロパティが <codeph>false</codeph> の場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:negativeSymbolError:get"><apiName>negativeSymbolError</apiName><shortdesc>
      マイナス記号が繰り返されているか、または間違った場所にある場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The negative symbol is repeated or not in right place."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      マイナス記号が繰り返されているか、または間違った場所にある場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:negativeSymbol:get"><apiName>negativeSymbol</apiName><shortdesc>
      負の値を検証するときに使用されるマイナス記号です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      負の値を検証するときに使用されるマイナス記号です。
     
      <p>この記号は負の数を検証するときに使用されます。 一部のオペレーティングシステムではこのプロパティのカスタマイズを許可しないので、このプロパティは読み取り専用となっています。</p>
     
      <p>このプロパティは、ロケールによって指定されるデフォルト値に設定されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.validators.supportClasses.xml#NumberValidatorBase/negativeNumberFormat"><linktext>negativeNumberFormat</linktext></link><link href="spark.validators.supportClasses.xml#NumberValidatorBase/validate()"><linktext>validate()</linktext></link></related-links></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:notAnIntegerError:get"><apiName>notAnIntegerError</apiName><shortdesc>
      domain プロパティで数値型に整数を指定する必要がある場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The number must be an integer."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>domain</codeph> プロパティで数値型に整数を指定する必要がある場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:NumberValidatorBase:parseError:get"><apiName>parseError</apiName><shortdesc>
      数字を解析できなかった場合に発生するエラーメッセージを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"The input string could not be parsed."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      数字を解析できなかった場合に発生するエラーメッセージを表します。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.validators.supportClasses:GlobalizationUtils"><apiName>GlobalizationUtils</apiName><shortdesc>
  GlobalizationUtils は、Flex や ActionScript で直接サポートされていない Unicode 関連の機能が含まれているクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  GlobalizationUtils は、Flex や ActionScript で直接サポートされていない Unicode 関連の機能が含まれているクラスです。
 
  <p>このクラスは、すべてのバリデーターに必要なユーティリティルーチンを格納します。 一般的なルーチンの例として、Unicode の空白をチェックし、文字列の先頭と末尾のすべてのスペースを削除するものがあります。</p>
 
  </apiDesc></apiClassifierDetail><apiOperation id="spark.validators.supportClasses:GlobalizationUtils:isDigit"><apiName>isDigit</apiName><shortdesc>
      コードポイントが数字桁の場合は、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata><asCustoms><returns><code>Boolean</code> <code>true</code> if a codepoint
      is a numeric digit, and <code>false</code> if not.
     
      </returns></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>コードポイントが数字桁の場合は、<codeph>true</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>ccode</apiItemName><apiType value="uint"/><apiDesc>入力コードポイント
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コードポイントが数字桁の場合は、<codeph>true</codeph> を返します。サポートされている桁は <codeph>flash.globalization.NationalDigitsType</codeph> にリストされています。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationUtils:isLeadingSurrogate"><apiName>isLeadingSurrogate</apiName><shortdesc>
      コードポイントが上位サロゲートの場合は、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>コードポイントが上位サロゲートの場合は、<codeph>true</codeph>、そうでない場合は、<codeph>false</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>ccode</apiItemName><apiType value="uint"/><apiDesc>入力コードポイントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コードポイントが上位サロゲートの場合は、<codeph>true</codeph> を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationUtils:isTrailingSurrogate"><apiName>isTrailingSurrogate</apiName><shortdesc>
      コードポイントが下位サロゲートの場合は、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>コードポイントが下位サロゲートの場合は、<codeph>true</codeph>、そうでない場合は、<codeph>false</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>ccode</apiItemName><apiType value="uint"/><apiDesc>入力コードポイントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コードポイントが下位サロゲートの場合は、<codeph>true</codeph> を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationUtils:isWhiteSpace"><apiName>isWhiteSpace</apiName><shortdesc>
      コードポイントが空白文字の場合は true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>コードポイントが空白文字の場合は、<codeph>true</codeph>、そうでない場合は、<codeph>false</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>ccode</apiItemName><apiType value="uint"/><apiDesc>入力コードポイントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コードポイントが空白文字の場合は、<codeph>true</codeph> を返します。Unicode のすべての空白文字がサポートされます。 
     
      <p>Unicode でサポートされている空白文字は次のとおりです。
      <pre>
      ASCII_SPACE (0x20)
      NO_BREAK_SPACE (0xA0)
      UNICODE_OGHAM_SPACE_MARK (0x1680)
      Unicode spaces 0x2000 - 0x200B
      UNICODE_NARROW_NOBREAK_SPACE (0x202F)
      UNICODE_MEDIUM_MATHEMATICAL_SPACE (0x205F)
      UNICODE_IDEOGRAPHIC_SPACE (0x3000)
      UNICODE_ZEROWIDTH_NOBREAK_SPACE (0xFEFF)
      </pre>
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationUtils:surrogateToUTF32"><apiName>surrogateToUTF32</apiName><shortdesc>
      サロゲートペアを UTF32 に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>相当する UTF32 のコードです。
     
      </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>c0</apiItemName><apiType value="uint"/><apiDesc>上位サロゲートです。
     
      </apiDesc></apiParam><apiParam><apiItemName>c1</apiItemName><apiType value="uint"/><apiDesc>下位サロゲートです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サロゲートペアを UTF32 に変換します.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationUtils:trim"><apiName>trim</apiName><shortdesc>
      先頭と末尾の空白文字を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>先頭と末尾の空白文字を削除した後の文字列です。
     
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>input</apiItemName><apiType value="String"/><apiDesc>処理する入力文字列です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      先頭と末尾の空白文字を削除します。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.validators.supportClasses:GlobalizationValidatorBase"><apiName>GlobalizationValidatorBase</apiName><shortdesc>
  GlobalizationValidatorBase クラスは、すべての Spark バリデーターの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:GlobalizationValidatorBase&gt;</code> tag
  inherits all of the tag attributes of its superclass,
  and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:GlobalizationValidatorBase
    <strong>Properties</strong>
    enabled="true"
    listener="<i>Value of the source property</i>"
    property="<i>No default</i>"
    required="true"
    requiredFieldError="This field is required."
    source="<i>No default</i>"
    trigger="<i>Value of the source property</i>"
    triggerEvent="valueCommit"
 
    <b>Events</b>
    invalid="<i>No default</i>"
    valid="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.validators:IValidator</apiBaseInterface><apiBaseClassifier>spark.globalization.supportClasses:GlobalizationBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  GlobalizationValidatorBase クラスは、すべての Spark バリデーターの基本クラスです。このクラスにより、バリデーター機能が実装され、必要なフィールドを作成します。つまり、ユーザーがこのフィールドに値を入力しないと、検証は失敗します。 このクラスは、バリデーターの有効と無効の切り替えも行います。 
 
  </apiDesc><example conref="SimpleValidatorExample.mxml"><swfblock conref="examples/SimpleValidatorExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.events.ValidationResultEvent.xml"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="" invalidHref="mx.validators.ValidationResult.xml"><linktext>mx.validators.ValidationResult</linktext></link><link href="" invalidHref="mx.validators.RegExpValidationResult.xml"><linktext>mx.validators.RegExpValidationResult</linktext></link></related-links><adobeApiEvent id="spark.validators.supportClasses:GlobalizationValidatorBase_mx.events.ValidationResultEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc>
  検証が失敗すると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ValidationResultEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.ValidationResultEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  検証が失敗すると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.validators.supportClasses:GlobalizationValidatorBase_mx.events.ValidationResultEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  検証が正常に完了すると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ValidationResultEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.ValidationResultEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  検証が正常に完了すると送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.validators.supportClasses:GlobalizationValidatorBase:GlobalizationValidatorBase"><apiName>GlobalizationValidatorBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:addListenerHandler"><apiName>addListenerHandler</apiName><shortdesc>
      バリデーターから送出された valid イベントおよび invalid イベントのすべてのリスナーを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      バリデーターから送出された <codeph>valid</codeph> イベントおよび <codeph>invalid</codeph> イベントのすべてのリスナーを設定します。 GlobalizationValidatorBase クラスのサブクラスはまず <codeph>removeListenerHandler()</codeph> メソッドを呼び出し、サブクラスのリスナーまたはソースのいずれかの値が変更された場合は、<codeph>addListenerHandler()</codeph> メソッドを呼び出す必要があります。 CreditCardValidator クラスと DateValidator クラスはこの関数を内部的に使用します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:doValidation"><apiName>doValidation</apiName><shortdesc>
      required プロパティの値で定義されるような、検証エラーの原因となる欠損値および空値の検証をはじめ、このバリデーターの検証ロジックを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>無効な結果における ValidationResult オブジェクトの配列です。このオブジェクトは、検証に失敗したバリデーターで検証が行われる各フィールドごとに 1 つ含まれます。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>検証する値を表します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>required</codeph> プロパティの値で定義されるような、検証エラーの原因となる欠損値および空値の検証をはじめ、このバリデーターの検証ロジックを実行します。
     
      <p>バリデータークラスのサブクラスを作成する場合、このメソッドをオーバーライドする必要があります。 </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.validators.ValidationResult.xml"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:getValueFromSource"><apiName>getValueFromSource</apiName><shortdesc>
      検証するオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>検証するオブジェクトです。
     
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      検証するオブジェクトを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:handleResults"><apiName>handleResults</apiName><shortdesc>
      エラー結果の配列から ValidationResultEvent を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>validate()</codeph> メソッドにより返される ValidationResultEvent です。
     
      </apiDesc><apiType value="mx.events:ValidationResultEvent"/></apiReturn><apiParam><apiItemName>errorResults</apiItemName><apiType value="Array"/><apiDesc>ValidationResult オブジェクトの配列です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エラー結果の配列から ValidationResultEvent を返します。 この関数は内部的に <codeph>doValidation()</codeph> メソッドの結果を取得し、ValidationResultEvent オブジェクトに配置します。 この関数は直接呼び出されないため、オーバーライドされることはほとんどありません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:isRealValue"><apiName>isRealValue</apiName><shortdesc>
      value が null でない場合、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>true</codeph> が返されるのは、<codeph>value</codeph> が null でない場合です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>テストする値です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>true</codeph> が返されるのは、<codeph>value</codeph> が null でない場合です。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:removeListenerHandler"><apiName>removeListenerHandler</apiName><shortdesc>
      バリデーターから送出された valid イベントおよび invalid イベントのすべてのリスナーを切断します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      バリデーターから送出された <codeph>valid</codeph> イベントおよび <codeph>invalid</codeph> イベントのすべてのリスナーを切断します。 サブクラスはまず <codeph>removeListenerHandler()</codeph> メソッドを呼び出し、サブクラスのリスナーまたはソースのいずれかの値が変更された場合は、<codeph>addListenerHandler</codeph> メソッドを呼び出す必要があります。 CreditCardValidator クラスと DateValidator クラスはこの関数を内部的に使用します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      このメソッドは、GlobalizationValidatorBase の作成時に呼び出されます。また、ローカライズされたリソースが何らかの方法で変更されたことを示すために、ResourceManager が「change」イベントを送出した時点で常に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このメソッドは、GlobalizationValidatorBase の作成時に呼び出されます。また、ローカライズされたリソースが何らかの方法で変更されたことを示すために、ResourceManager が「<codeph>change</codeph>」イベントを送出した時点で常に呼び出されます。
     
      <p>このイベントは、ResourceManager の <codeph>localeChain</codeph> プロパティを設定したとき、リソースモジュールがロードを終了したとき、および ResourceManager の <codeph>update()</codeph> メソッドを呼び出すときに送出されます。</p>
     
      <p>サブクラスでは、このメソッドをオーバーライドし、<codeph>super.resourcesChanged()</codeph> を呼び出した後、リソース値の変化に応じて必要となる処理を実行する必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:validateAll"><apiName>validateAll</apiName><shortdesc>
      validators 配列に含まれるすべてのバリデーターを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>ValidationResultEvent オブジェクトの配列で、配列には失敗したバリデーターごとに 1 つの ValidationResultEvent オブジェクトが含まれます。 すべてのバリデーターが成功した場合、配列は空になります。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>validators</apiItemName><apiType value="Array"/><apiDesc>実行する GlobalizationValidatorBase オブジェクトを含む配列です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>validators</codeph> 配列に含まれるすべてのバリデーターを呼び出します。 失敗したバリデーターごとに 1 つの ValidationResultEvent オブジェクトを含む配列を返します。 すべてのバリデーターが成功した場合は、空の配列を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.validators.supportClasses:GlobalizationValidatorBase:validate"><apiName>validate</apiName><shortdesc>
      検証を実行し、リスナーに任意で結果を通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>検証結果を含む ValidationResultEvent オブジェクトを表します。 検証が成功した場合、<codeph>ValidationResultEvent.results</codeph> 配列プロパティは空となります。 検証に失敗した場合、<codeph>ValidationResultEvent.results</codeph> 配列プロパティには、バリデーターによる検証の成功または失敗を問わず、検証したフィールドそれぞれにつき 1 つの ValidationResult オブジェクトが含まれます。 <codeph>ValidationResult.isError</codeph> プロパティを調べれば、フィールドが検証に合格したか失敗したかを判別できます。
     
      </apiDesc><apiType value="mx.events:ValidationResultEvent"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>検証するオプションの値です。 null の場合、バリデーターは <codeph>source</codeph> プロパティおよび <codeph>property</codeph> プロパティを使用して値を決定します。 このパラメーターを指定する場合、<codeph>listener</codeph> プロパティも設定して検証エラーメッセージの対象となるコンポーネントを指定する必要があります。
     
      </apiDesc></apiParam><apiParam><apiItemName>suppressEvents</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>false</codeph> の場合、検証後にバリデーターがリスナーに結果を通知します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      検証を実行し、リスナーに任意で結果を通知します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.events.ValidationResultEvent.xml"><linktext>mx.events.ValidationResultEvent</linktext></link><link href="" invalidHref="mx.validators.ValidationResult.xml"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiOperation><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:required"><apiName>required</apiName><shortdesc>
      true の場合、検証エラーの原因となる欠損値または空値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、検証エラーの原因となる欠損値または空値を指定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:subFields"><apiName>subFields</apiName><shortdesc>
      validate() メソッドに渡された value オブジェクトに含まれるプロパティ名を含むストリングの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      <codeph>value</codeph> オブジェクト（<codeph>validate()</codeph> メソッドに渡された）に含まれるプロパティ名を含むストリングの配列です。 例えば、CreditCardValidator はこのプロパティを <codeph>[ "cardNumber", "cardType" ]</codeph> に設定します。 この値は、<codeph>value</codeph> オブジェクト（<codeph>validate()</codeph> メソッドに渡された）に <codeph>cardNumber</codeph> プロパティおよび <codeph>cardType</codeph> プロパティが含まれることを意味します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:actualListeners:get"><apiName>actualListeners</apiName><shortdesc>
      リスナーオブジェクトが存在する場合はリスナーオブジェクトを含みます。そうでない場合は、ソースオブジェクトを含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      リスナーオブジェクトが存在する場合はリスナーオブジェクトを含みます。そうでない場合は、ソースオブジェクトを含みます。 検証結果について通知するオブジェクトを判断するために使用します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:actualTrigger:get"><apiName>actualTrigger</apiName><shortdesc>
      トリガーオブジェクトが存在する場合はトリガーオブジェクトを含みます。そうでない場合は、ソースオブジェクトを含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      トリガーオブジェクトが存在する場合はトリガーオブジェクトを含みます。そうでない場合は、ソースオブジェクトを含みます。 <codeph>triggerEvent</codeph> のリスナーオブジェクトを判断するために使用します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:enabled:get"><apiName>enabled</apiName><shortdesc>
      この値を false に設定すると、バリデーターによる検証が行えなくなります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      この値を <codeph>false</codeph> に設定すると、バリデーターによる検証が行えなくなります。 バリデーターが無効になると、イベントは送出されず、<codeph>validate()</codeph> メソッドにより null が返されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:listener:get"><apiName>listener</apiName><shortdesc>
      検証のリスナーを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      検証のリスナーを指定します。
     
      <p>リスナーを指定しない場合、Flex は <codeph>source</codeph> プロパティの値を使用します。 Flex がソースコンポーネントを調べた後、コンポーネントの境界線色を変更し、検証に失敗した際のエラーメッセージを表示するか、成功した際の既存のエラーメッセージを非表示にします。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:property:get"><apiName>property</apiName><shortdesc>
      検証する値を含む source オブジェクトのプロパティの名前を指定するストリングを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      検証する値を含む <codeph>source</codeph> オブジェクトのプロパティの名前を指定するストリングを表します。 このプロパティはオプションですが、<codeph>source</codeph> を指定する場合、このプロパティにも値を設定する必要があります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:requiredFieldError:get"><apiName>requiredFieldError</apiName><shortdesc>
      値が欠損し、required プロパティが true の場合に発生するエラーメッセージです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"This field is required."
     
      </apiDefaultValue></apiValueDef><apiDesc>
      値が欠損し、<codeph>required</codeph> プロパティが <codeph>true</codeph> の場合に発生するエラーメッセージです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc conref="mx.core.UIComponent#resourceManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="unused"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.resources:IResourceManager"/></apiValueDef><apiDesc conref="mx.core.UIComponent#resourceManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:source:get"><apiName>source</apiName><shortdesc>
      検証するプロパティを含むオブジェクトを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      検証するプロパティを含むオブジェクトを指定します。 このプロパティには、コンポーネントまたはデータモデルのインスタンスを設定します。 MXML のデータバインディングシンタックスを使用して、値を指定します。 ネストされたプロパティを指定するために、ドット区切りのストリングがサポートされています。 <codeph>source</codeph> プロパティに値を指定する場合、<codeph>property</codeph> プロパティにも値を指定する必要があります。 <codeph>source</codeph> プロパティはオプションです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:triggerEvent:get"><apiName>triggerEvent</apiName><shortdesc>
      検証をトリガーするイベントを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      検証をトリガーするイベントを指定します。 指定を省略すると、Flex は <codeph>valueCommit</codeph> イベントを使用します。 ユーザーがコントロールにデータを入力し終えると、Flex は <codeph>valueCommit</codeph> イベントを送出します。 通常これは、ユーザーがコンポーネントからフォーカスを移動したときか、プロパティ値がプログラムによって変更されたときです。 バリデーターにすべてのイベントを無視させる場合は、<codeph>triggerEvent</codeph> を空のストリング（""）に設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.validators.supportClasses:GlobalizationValidatorBase:trigger:get"><apiName>trigger</apiName><shortdesc>
      バリデーターをトリガーするイベントの生成を行うコンポーネントを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      バリデーターをトリガーするイベントの生成を行うコンポーネントを指定します。 指定を省略した場合、Flex はデフォルトで <codeph>source</codeph> プロパティの値を使用します。 <codeph>trigger</codeph> により <codeph>triggerEvent</codeph> が送出されると、検証が実行されます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>